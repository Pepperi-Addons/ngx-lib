import { OnInit, OnChanges, EventEmitter, Renderer2, ElementRef, OnDestroy } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { LAYOUT_TYPE, CustomizationService } from '@pepperi-addons/ngx-lib';
import { GROUP_BUTTONS_VIEW_TYPE, PepperiGroupButton } from '@pepperi-addons/ngx-lib/group-buttons';
import * as i0 from "@angular/core";
export declare class PepperiInternalButtonComponent implements OnInit, OnChanges, OnDestroy {
    private customizationService;
    private renderer;
    private element;
    key: string;
    value: string;
    formattedValue: string;
    label: string;
    referenceObjectInternalType: any;
    type: string;
    required: boolean;
    disabled: boolean;
    readonly: boolean;
    xAlignment: string;
    rowSpan: number;
    controlType: string;
    form: FormGroup;
    showTitle: boolean;
    layoutType: LAYOUT_TYPE;
    elementClicked: EventEmitter<any>;
    valueChanged: EventEmitter<any>;
    LAYOUT_TYPE: typeof LAYOUT_TYPE;
    GROUP_BUTTONS_VIEW_TYPE: typeof GROUP_BUTTONS_VIEW_TYPE;
    standAlone: boolean;
    createNewReference: boolean;
    referenceButtons: Array<PepperiGroupButton>;
    constructor(customizationService: CustomizationService, renderer: Renderer2, element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    onButtonClicked(event: any): void;
    hrefFunction(event: any): void;
    openReferenceObjectInternal(event: any): void;
    remove(event: any): void;
    static ɵfac: i0.ɵɵFactoryDef<PepperiInternalButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<PepperiInternalButtonComponent, "pep-internal-button", never, { "key": "key"; "value": "value"; "formattedValue": "formattedValue"; "label": "label"; "referenceObjectInternalType": "referenceObjectInternalType"; "type": "type"; "required": "required"; "disabled": "disabled"; "readonly": "readonly"; "xAlignment": "xAlignment"; "rowSpan": "rowSpan"; "form": "form"; "showTitle": "showTitle"; "layoutType": "layoutType"; }, { "elementClicked": "elementClicked"; "valueChanged": "valueChanged"; }, never, never>;
}

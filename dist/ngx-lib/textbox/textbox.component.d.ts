import { OnInit, OnChanges, EventEmitter, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { LAYOUT_TYPE, CustomizationService } from '@pepperi-addons/ngx-lib';
import * as i0 from "@angular/core";
export declare class PepperiTextboxComponent implements OnChanges, OnInit, OnDestroy {
    fb: FormBuilder;
    private customizationService;
    private renderer;
    private element;
    key: string;
    value: string;
    formattedValue: string;
    label: string;
    placeholder: string;
    type: string;
    required: boolean;
    disabled: boolean;
    readonly: boolean;
    maxFieldCharacters: number;
    textColor: string;
    xAlignment: string;
    rowSpan: number;
    lastFocusField: any;
    minValue: number;
    maxValue: number;
    controlType: string;
    form: FormGroup;
    isActive: boolean;
    showTitle: boolean;
    layoutType: LAYOUT_TYPE;
    parentFieldKey: string;
    valueChanged: EventEmitter<any>;
    formValidationChanged: EventEmitter<boolean>;
    input: ElementRef;
    LAYOUT_TYPE: typeof LAYOUT_TYPE;
    standAlone: boolean;
    isInEditMode: boolean;
    isFocus: boolean;
    constructor(fb: FormBuilder, customizationService: CustomizationService, renderer: Renderer2, element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    onKeyUp(event: any): void;
    onKeyPress(event: any): any;
    anchorClicked(): void;
    cardTemplateClicked(event: any): void;
    static ɵfac: i0.ɵɵFactoryDef<PepperiTextboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<PepperiTextboxComponent, "pep-textbox", never, { "key": "key"; "value": "value"; "formattedValue": "formattedValue"; "label": "label"; "placeholder": "placeholder"; "type": "type"; "required": "required"; "disabled": "disabled"; "readonly": "readonly"; "maxFieldCharacters": "maxFieldCharacters"; "textColor": "textColor"; "xAlignment": "xAlignment"; "rowSpan": "rowSpan"; "lastFocusField": "lastFocusField"; "minValue": "minValue"; "maxValue": "maxValue"; "form": "form"; "isActive": "isActive"; "showTitle": "showTitle"; "layoutType": "layoutType"; "parentFieldKey": "parentFieldKey"; }, { "valueChanged": "valueChanged"; "formValidationChanged": "formValidationChanged"; }, never, never>;
}

import { ElementRef, OnInit, EventEmitter, Renderer2, OnDestroy } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { TranslateService } from '@ngx-translate/core';
import { UtilitiesService, LAYOUT_TYPE, CustomizationService } from '@pepperi-addons/ngx-lib';
import * as i0 from "@angular/core";
export declare class PepperiDateComponent implements OnInit, OnDestroy {
    private element;
    private utilitiesService;
    private customizationService;
    private renderer;
    private translate;
    private adapter;
    key: string;
    value: string;
    formattedValue: string;
    label: string;
    type: string;
    required: boolean;
    disabled: boolean;
    readonly: boolean;
    textColor: string;
    xAlignment: string;
    rowSpan: number;
    minValue: number;
    maxValue: number;
    controlType: string;
    form: FormGroup;
    isActive: boolean;
    showTitle: boolean;
    layoutType: LAYOUT_TYPE;
    valueChanged: EventEmitter<any>;
    datetimePicker: any;
    input: ElementRef;
    LAYOUT_TYPE: typeof LAYOUT_TYPE;
    standAlone: boolean;
    isInEditMode: boolean;
    dateModel: Date;
    minDate: Date;
    maxDate: Date;
    showDatepicker: boolean;
    showTime: boolean;
    constructor(element: ElementRef, utilitiesService: UtilitiesService, customizationService: CustomizationService, renderer: Renderer2, translate: TranslateService, adapter: DateAdapter<any>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    initDate(): void;
    openDatetimePicker(datetimePicker: any): void;
    onBlur(event: any): void;
    onDateChange(event: any): void;
    cardTemplateClicked(event: any): void;
    static ɵfac: i0.ɵɵFactoryDef<PepperiDateComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<PepperiDateComponent, "pep-date", never, { "key": "key"; "value": "value"; "formattedValue": "formattedValue"; "label": "label"; "type": "type"; "required": "required"; "disabled": "disabled"; "readonly": "readonly"; "textColor": "textColor"; "xAlignment": "xAlignment"; "rowSpan": "rowSpan"; "minValue": "minValue"; "maxValue": "maxValue"; "form": "form"; "isActive": "isActive"; "showTitle": "showTitle"; "layoutType": "layoutType"; }, { "valueChanged": "valueChanged"; }, never, never>;
}

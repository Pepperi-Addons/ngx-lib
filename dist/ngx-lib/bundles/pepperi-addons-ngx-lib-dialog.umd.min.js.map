{"version":3,"sources":["../../../projects/ngx-lib/dialog/dialog.component.html","../../../projects/ngx-lib/dialog/dialog.component.ts","../../../projects/ngx-lib/dialog/dialog.module.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵelement","i0.ɵɵproperty","i0.ɵɵlistener","ctx_r2","data","contentData","key","i0.ɵɵtextInterpolate1","DialogDataType","options","this","title","contentType","Text","showHeader","showFooter","content","undefined","DialogService","dialog","layoutService","overlay","prototype","getDialogConfig","dialogConfig","MatDialogConfig","autoFocus","direction","isRtl","disableClose","height","maxWidth","maxHeight","minWidth","panelClass","scrollStrategy","scrollStrategies","noop","openDefaultDialog","config","open","PepperiDefaultDialogComponent","openDialog","componentOrTemplateRef","i0","ɵɵinject","i1","MatDialog","i2","LayoutService","i3","Overlay","factory","ɵfac","providedIn","dialogRef","save","close","updateContent","e","target","value","currentTarget","ɵɵdirectiveInject","MAT_DIALOG_DATA","MatDialogRef","selectors","decls","vars","consts","template","rf","ctx","pepperiIconRegistry","registerIcons","pepperiIconSystemClose","PepperiDialogModule","i1$1","PepperiIconRegistry","imports","CommonModule","BrowserModule","BrowserAnimationsModule","MatCommonModule","MatButtonModule","MatIconModule","MatDialogModule","PepperiModule","PepperiIconModule","declarations"],"mappings":"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","sourcesContent":["<h2 mat-dialog-title *ngIf=\"data?.showHeader\" class=\"pepperi-border-bottom\">\r\n    <span class=\"pull-left flip\" *ngIf=\"data?.title?.length\">{{ data?.title }}</span>\r\n    <button mat-button [mat-dialog-close]=\"null\" class=\"pepperi-button icon-button md weak pull-right flip\">\r\n        <mat-icon>\r\n            <pep-icon name=\"system_close\">\r\n            </pep-icon>\r\n        </mat-icon>\r\n    </button>\r\n</h2>\r\n<div mat-dialog-content>\r\n    <span *ngIf=\"data?.contentType === DialogDataType.Text || data?.contentType === DialogDataType.Html\"\r\n        [innerHtml]=\"data?.content | safeHtml\"></span>\r\n    <textarea *ngIf=\"data?.contentType === DialogDataType.TextArea\" [readonly]=\"data?.contentData?.disabled\"\r\n        [name]=\"data?.contentData?.key\" (blur)=\"updateContent($event);\">{{ data?.content }}</textarea>\r\n</div>\r\n<div mat-dialog-actions *ngIf=\"data?.showFooter\" class=\"pepperi-border-top\">\r\n    <div class=\"spacing-element-negative\">\r\n        <button mat-button class=\"spacing-element pepperi-button md strong pull-right flip\" (click)=\"save()\">\r\n            {{ 'ACTIONS.SAVE' | translate }}\r\n        </button>\r\n        <button mat-button [mat-dialog-close]=\"null\" class=\"spacing-element pepperi-button md weak pull-right flip\">\r\n            {{ 'ACTIONS.CANCEL' | translate }}\r\n        </button>\r\n    </div>\r\n</div>","import { Component, Inject, ViewEncapsulation, Injectable, TemplateRef } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { LayoutService } from '@pepperi-addons/ngx-lib';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\n\r\nexport enum DialogDataType {\r\n    Text,\r\n    TextArea,\r\n    Html,\r\n    Iframe\r\n}\r\n\r\nexport class DialogData {\r\n    title = '';\r\n    content: any;\r\n    contentType: DialogDataType = DialogDataType.Text;\r\n    contentData?: any;\r\n    showHeader = true;\r\n    showFooter = false;\r\n\r\n    constructor(\r\n        options: {\r\n            title?: string,\r\n            content?: any,\r\n            contentType: DialogDataType,\r\n            contentData?: any,\r\n            showHeader?: boolean,\r\n            showFooter?: boolean\r\n        }\r\n    ) {\r\n\r\n        this.title = options.title || '';\r\n        this.content = options.content || '';\r\n        this.contentType = options.contentType;\r\n        this.contentData = options.contentData || {};\r\n        this.showHeader = options.showHeader === undefined ? true : options.showHeader;\r\n        this.showFooter = options.showFooter === undefined ? true : options.showFooter;\r\n        // this.actionButtons = actionButtons;\r\n        // this.showLoadingSpinner = showLoadingSpinner;\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private layoutService: LayoutService,\r\n        private overlay: Overlay) { }\r\n\r\n    getDialogConfig(\r\n        options: {\r\n            height?: string,\r\n            disableClose?: boolean,\r\n            minWidth?: string,\r\n            maxWidth?: string,\r\n            maxHeight?: string,\r\n            panelClass?: string,\r\n        } = {}\r\n    ): MatDialogConfig {\r\n\r\n        const dialogConfig = new MatDialogConfig();\r\n\r\n        dialogConfig.autoFocus = false;\r\n        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';\r\n        dialogConfig.disableClose = options.disableClose || false;\r\n        dialogConfig.height = options.height || 'auto';\r\n        dialogConfig.maxWidth = options.maxWidth || '100vw';\r\n        dialogConfig.maxHeight = options.maxHeight || '100vh';\r\n        dialogConfig.minWidth = options.minWidth || '0';\r\n        dialogConfig.panelClass = ['pepperi-dialog', options.panelClass || ''];\r\n\r\n        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();\r\n\r\n        return dialogConfig;\r\n    }\r\n\r\n    openDefaultDialog(data: DialogData, config: MatDialogConfig = null): MatDialogRef<any> {\r\n        if (!config) {\r\n            config = this.getDialogConfig();\r\n        }\r\n\r\n        config.data = data;\r\n        const dialogRef = this.dialog.open(PepperiDefaultDialogComponent, config);\r\n        return dialogRef;\r\n    }\r\n\r\n    openDialog<T>(\r\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\r\n        data: any = {},\r\n        config: MatDialogConfig = null): MatDialogRef<T> {\r\n\r\n        if (!config) {\r\n            config = this.getDialogConfig();\r\n        }\r\n\r\n        config.data = data;\r\n\r\n        const dialogRef = this.dialog.open(componentOrTemplateRef, config);\r\n        return dialogRef;\r\n    }\r\n}\r\n\r\n@Component({\r\n    templateUrl: './dialog.component.html',\r\n    styleUrls: ['./dialog.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PepperiDefaultDialogComponent {\r\n    DialogDataType = DialogDataType;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData,\r\n        public dialogRef: MatDialogRef<any>\r\n    ) { }\r\n\r\n    save(): void {\r\n        this.dialogRef.close(this.data ? this.data.content : '');\r\n    }\r\n\r\n    updateContent(e): void {\r\n        this.data.content = e.target ? e.target.value : (e.currentTarget ? e.currentTarget.value : '');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiIconModule, PepperiIconRegistry, pepperiIconSystemClose } from '@pepperi-addons/ngx-lib/icon';\r\n\r\nimport { PepperiDefaultDialogComponent } from './dialog.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule\r\n    ],\r\n    exports: [ ],\r\n    declarations: [PepperiDefaultDialogComponent],\r\n})\r\nexport class PepperiDialogModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemClose\r\n        ]);\r\n    }\r\n}\r\n"]}
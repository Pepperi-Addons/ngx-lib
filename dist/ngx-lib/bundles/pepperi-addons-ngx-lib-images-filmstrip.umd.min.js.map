{"version":3,"sources":["../../../projects/ngx-lib/images-filmstrip/images-filmstrip.component.html","../../../projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts","../../../projects/ngx-lib/images-filmstrip/images-filmstrip.module.ts"],"names":["i0.ɵɵelementContainer","i0.ɵɵelementContainerStart","i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵlistener","$event","i0","ɵɵrestoreView","_r9_1","ɵɵnextContext","indexChange","onError","i0.ɵɵelementEnd","i0.ɵɵelementContainerEnd","i0.ɵɵproperty","i0.ɵɵadvance","ctx_r2","xAlignment","showTitle","i0.ɵɵstyleProp","i0.ɵɵpropertyInterpolate2","i0.ɵɵtext","_r14_1","i0.ɵɵtextInterpolate","createViewerConfig","translate","bgStyle","loadingMessage","instant","nextPageButton","createButtonConfig","beforePageButton","zoomOutButton","zoomInButton","rotateLeftButton","rotateRightButton","resetButton","PepperiImagesFilmstripComponent","customizationService","dialogService","layoutService","fileService","gallery","renderer","element","cd","dialogRef","data","_this","this","value","key","label","rowSpan","controlType","form","objectId","currIndex","showThumbnails","items","inDialog","required","readonly","disabled","fieldHeight","standAlone","galleryWidth","isVertical","Object","keys","forEach","config","navIcon","pepperiIconArrowRightAlt","counter","gestures","loadingStrategy","LoadingStrategy","Default","prototype","ngOnInit","getDefaultFromGroup","addClass","nativeElement","CustomizationService","STAND_ALONE_FIELD_CLASS_NAME","calculateFieldHeight","layoutType","imgArr","split","length","noImageSrc","getNoImagePath","push","map","img","ImageItem","src","thumb","dots","nav","Math","floor","ngAfterViewInit","afterDialogOpened","galleryRef","ref","initGalleryStyle","galleryCont","ngOnDestroy","destroy","dialogGalleryRef","galleryContainer","setThumbnailDimension","setConfig","load","currentIndex","set","e","noimg","splice","itemIndex","enlargeImage","event","openDialog","galleryDialogTemplate","afterOpened","subscribe","afterClosed","galleryDialogCont","clientWidth","galleryHeight","clientHeight","width","min","max","thumbHeight","thumbWidth","height","thumbPosition","ThumbnailsPosition","Bottom","isRtl","Right","Left","slidingDirection","SlidingDirection","Horizontal","Vertical","item","ɵɵdirectiveInject","i1","i2","DialogService","LayoutService","FileService","i3","Gallery","Renderer2","ElementRef","ChangeDetectorRef","i4","MatDialogRef","MAT_DIALOG_DATA","selectors","viewQuery","rf","ctx","TemplateRef","provide","IMAGEVIEWER_CONFIG","useFactory","deps","TranslateService","decls","vars","consts","template","i0.ɵɵtemplate","_r3","_r1","pepperiIconRegistry","registerIcons","pepperiIconSystemEdit","pepperiIconSystemClose","pepperiIconArrowLeftAlt","PepperiImagesFilmstripModule","ɵɵinject","i1$1","PepperiIconRegistry","imports","CommonModule","BrowserAnimationsModule","ReactiveFormsModule","FormsModule","MatCommonModule","MatFormFieldModule","MatDialogModule","MatIconModule","GalleryModule","ImageViewerModule","PepperiModule","PepperiIconModule","PepperiFieldTitleModule","PepperiDialogModule","declarations","exports"],"mappings":"sxDAAAA,EAAAA,mBAAAA,sDAEIC,EAAAA,wBAAAA,EAAAA,GACIC,EAAAA,eAAAA,EAAAA,MAAAA,GACIC,EAAAA,UAAAA,EAAAA,kBAAAA,GAEAD,EAAAA,eAAAA,EAAAA,MAAAA,EAAAA,GAEIA,EAAAA,eAAAA,EAAAA,UAAAA,GAA2CE,EAAAA,WAAAA,aAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,aAAAA,KAAAA,CAAmC,eAAA,SAAAC,GAAA,OAAAC,EAAAC,cAAAC,GAAAF,EAAAG,gBAAAC,YAAAL,KAAnCD,CAAmC,SAAA,SAAAC,GAAA,OAAAC,EAAAC,cAAAC,GAAAF,EAAAG,gBAAAE,QAAAN,MAE9EO,EAAAA,eACJA,EAAAA,eACJA,EAAAA,eACJC,EAAAA,wDAXcC,EAAAA,WAAAA,YAAAA,EAAAA,MAEWC,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,QAAAA,EAAAA,MAAAA,CAAe,aAAAE,EAAAC,WAAfH,CAAe,YAAAE,EAAAE,WAG5BH,EAAAA,UAAAA,GAAAI,EAAAA,YAAAA,SAAAA,EAAAA,aADkCL,EAAAA,WAAAA,UAAAA,EAAAA,WAAAA,mBAAAA,sBAEzBC,EAAAA,UAAAA,GAAAK,EAAAA,uBAAAA,KAAAA,GAAAA,EAAAA,IAAAA,IAAAA,EAAAA,SAAAA,gEASrBlB,EAAAA,eAAAA,EAAAA,KAAAA,IACIA,EAAAA,eAAAA,EAAAA,OAAAA,IAA6BmB,EAAAA,OAAAA,GAAWT,EAAAA,eACxCV,EAAAA,eAAAA,EAAAA,SAAAA,IACIA,EAAAA,eAAAA,EAAAA,YACIC,EAAAA,UAAAA,EAAAA,WAAAA,IAEJS,EAAAA,eACJA,EAAAA,eACJA,EAAAA,eACAV,EAAAA,eAAAA,EAAAA,MAAAA,GAAAA,IACIA,EAAAA,eAAAA,EAAAA,UAAAA,IAA4EE,EAAAA,WAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,YAAAA,KAAAA,CAAmC,SAAA,SAAAC,GAAA,OAAAC,EAAAC,cAAAe,GAAAhB,EAAAG,gBAAAE,QAAAN,MAE/GO,EAAAA,eACJA,EAAAA,kEAZiCG,EAAAA,UAAAA,GAAAQ,EAAAA,kBAAAA,EAAAA,OACVR,EAAAA,UAAAA,GAAAD,EAAAA,WAAAA,mBAAAA,MASfC,EAAAA,UAAAA,GAAAI,EAAAA,YAAAA,SAAAA,OAAAA,MADKC,EAAAA,uBAAAA,KAAAA,GAAAA,EAAAA,IAAAA,IAAAA,EAAAA,SAAAA,eAAqCN,EAAAA,WAAAA,eAAAA,4BAWlDX,EAAAA,UAAAA,EAAAA,kBAAAA,GAAAA,sBAAqDW,EAAAA,WAAAA,MAAAA,EAAAA,eCAzCU,EAAmBC,GAC/B,MAAO,CAGHC,QAAS,OAGTC,eAAgBF,EAAUG,QAAQ,8BAoBlCC,eAAgBC,EAAAA,mBAAmB,gBAAiB,YAAa,GAAG,GACpEC,iBAAkBD,EAAAA,mBAAmB,kBAAmB,gBAAiB,GAAG,GAC5EE,cAAeF,EAAAA,mBAAmB,WAAY,WAAY,GAAG,GAC7DG,aAAcH,EAAAA,mBAAmB,UAAW,UAAW,GAAG,GAC1DI,iBAAkBJ,EAAAA,mBAAmB,cAAe,cAAe,GAAG,GACtEK,kBAAmBL,EAAAA,mBAAmB,eAAgB,eAAgB,GAAG,GACzEM,YAAaN,EAAAA,mBAAmB,YAAa,QAAS,GAAG,qBAkG7D,SAAAO,EACYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACYC,EACyBC,GAVjD,IAAAC,EAAAC,KACYA,KAAAX,qBAAAA,EACAW,KAAAV,cAAAA,EACAU,KAAAT,cAAAA,EACAS,KAAAR,YAAAA,EACAQ,KAAAP,QAAAA,EACAO,KAAAN,SAAAA,EACAM,KAAAL,QAAAA,EACAK,KAAAJ,GAAAA,EACYI,KAAAH,UAAAA,EACyBG,KAAAF,KAAAA,EA7CxCE,KAAAC,MAAQ,GACRD,KAAAE,IAAM,GACNF,KAAAG,MAAQ,GACRH,KAAAhC,WAAa,IACbgC,KAAAI,QAAU,EAEnBJ,KAAAK,YAAc,SAELL,KAAAM,KAAkB,KAClBN,KAAAO,SAAW,GACXP,KAAA/B,WAAY,EAEZ+B,KAAAQ,UAAY,EACZR,KAAAS,gBAAiB,EAO1BT,KAAAU,MAAuB,KACvBV,KAAAW,UAAW,EAEXX,KAAAY,UAAW,EACXZ,KAAAa,UAAW,EACXb,KAAAc,UAAW,EACXd,KAAAe,YAAc,GACdf,KAAAgB,YAAa,EAEbhB,KAAAiB,aAAe,EAEfjB,KAAAkB,YAAa,EAiBLrB,GAAaC,IACbE,KAAKW,UAAW,EAEhBQ,OAAOC,KAAKtB,GAAMuB,SAAQ,SAAAnB,GAClBA,KAAOH,IACPA,EAAKG,GAAOJ,EAAKI,QAK7BF,KAAKsB,OAAS,CAEVC,QAASC,EAAAA,yBAAyB1B,KAOlC2B,SAAS,EACTC,UAAU,EAUVC,gBAAiBC,EAAAA,gBAAgBC,gBAKzCzC,EAAA0C,UAAAC,SAAA,WAaI,GAZK/B,KAAKW,WACY,OAAdX,KAAKM,OACLN,KAAKgB,YAAa,EAClBhB,KAAKM,KAAON,KAAKX,qBAAqB2C,oBAAoBhC,KAAKE,IAAKF,KAAKC,MAAOD,KAAKY,SACjFZ,KAAKa,SAAUb,KAAKc,UAExBd,KAAKN,SAASuC,SAASjC,KAAKL,QAAQuC,cAAeC,EAAAA,qBAAqBC,+BAG5EpC,KAAKe,YAAcf,KAAKX,qBAAqBgD,qBAAqBrC,KAAKsC,WAAYtC,KAAKI,QAASJ,KAAKgB,aAGvF,OAAfhB,KAAKU,MAAgB,CACrB,IAAM6B,EAASvC,KAAKC,MAAQD,KAAKC,MAAMuC,MAAM,KAAO,GAEpD,GAAsB,IAAlBD,EAAOE,OAAc,CACrB,IAAMC,EAAa1C,KAAKR,YAAYmD,iBACpCJ,EAAOK,KAAKF,GAGhB1C,KAAKU,MAAQ6B,EAAOM,KAAI,SAAAC,GAAO,OAAA,IAAIC,EAAAA,UAAU,CAAEC,IAAKF,EAAKG,MAAOH,OAGpE9C,KAAKsB,OAAO4B,KAAOlD,KAAKsB,OAAO6B,IAAMnD,KAAKU,MAAM+B,OAAS,EACzDzC,KAAKsB,OAAO2B,QAAsB,wBAAbjD,KAAKE,MAAiCF,KAAKS,kBAAmBT,KAAKU,MAAM+B,OAAS,IACvGzC,KAAKQ,UACY,wBAAbR,KAAKE,KACkB,IAAnBF,KAAKQ,WACLR,KAAKU,MAAM+B,OAAS,EACpBW,KAAKC,MAAMrD,KAAKU,MAAM+B,OAAS,GAAK,EAAIzC,KAAKQ,WAIzDpB,EAAA0C,UAAAwB,gBAAA,WACQtD,KAAKW,SACLX,KAAKuD,qBAELvD,KAAKwD,WAAaxD,KAAKP,QAAQgE,IAAIzD,KAAKE,IAAM,IAAMF,KAAKO,SAAW,YACpEP,KAAK0D,iBAAiB1D,KAAK2D,YAAa3D,KAAKwD,cAIrDpE,EAAA0C,UAAA8B,YAAA,WACQ5D,KAAKwD,YAAcxD,KAAKwD,WAAWK,UACnC7D,KAAK8D,kBAAoB9D,KAAK8D,iBAAiBD,WAIvDzE,EAAA0C,UAAA4B,iBAAA,SAAiBK,EAAkBP,GAE/BxD,KAAKgE,sBAAsBD,GAE3BP,EAAWS,UAAUjE,KAAKsB,QAC1BkC,EAAWU,KAAKlE,KAAKU,OAErB,IAAMyD,EAAenE,KAAKQ,UACtB2D,EAAe,GACfX,EAAWY,IAAID,IAIvB/E,EAAA0C,UAAApE,QAAA,SAAQ2G,GACJ,IAAM3B,EAAa1C,KAAKR,YAAYmD,iBAC9B2B,EAAQ,IAAIvB,EAAAA,UAAU,CAAEC,IAAKN,EAAYO,MAAOP,IACtD1C,KAAKU,MAAM6D,OAAOF,EAAEG,UAAW,EAAGF,IAGtClF,EAAA0C,UAAA2C,aAAA,SAAaC,GAAb,IAAA3E,EAAAC,KACUH,EAAYG,KAAKV,cAAcqF,WAAW3E,KAAK4E,uBAErD/E,EAAUgF,cAAcC,WAAU,WAC9B/E,EAAKwD,uBAIT1D,EAAUkF,cAAcD,WAAU,SAAA7E,GAC9BF,EAAKyD,WAAWY,IAAIrE,EAAKS,eAIjCpB,EAAA0C,UAAAyB,kBAAA,WACIvD,KAAK8D,iBAAmB9D,KAAKP,QAAQgE,IAAIzD,KAAKE,IAAM,IAAMF,KAAKO,SAAW,eAC1EP,KAAK0D,iBAAiB1D,KAAKgF,kBAAmBhF,KAAK8D,mBAGvD1E,EAAA0C,UAAAkC,sBAAA,SAAsBD,GAMlB,GALA/D,KAAKiB,aAAe8C,EAAiB7B,cAAc+C,YACnDjF,KAAKkF,cAAgBnB,EAAiB7B,cAAciD,aAEpDnF,KAAKkB,WAAalB,KAAKiB,aAAejB,KAAKkF,cAEvClF,KAAKkB,WAAY,CACjB,IAAIkE,GAASpF,KAAKiB,aAA0C,IAAzBjB,KAAKU,MAAM+B,OAAS,IAAYzC,KAAKU,MAAM+B,OAC9E2C,EAAQhC,KAAKiC,IAAIjC,KAAKkC,IAAIF,EAAO,IAAK,IAEtCpF,KAAKsB,OAAOiE,YAAcH,EAC1BpF,KAAKsB,OAAOkE,WAAcJ,EAAQ,OAC/B,CACH,IAAIK,GAAUzF,KAAKkF,cAA2C,IAAzBlF,KAAKU,MAAM+B,OAAS,IAAYzC,KAAKU,MAAM+B,OAChFgD,EAASrC,KAAKiC,IAAIjC,KAAKkC,IAAIG,EAAQ,IAAK,IAExCzF,KAAKsB,OAAOiE,YAAeE,EAAS,GACpCzF,KAAKsB,OAAOkE,WAAaC,EAG7BzF,KAAKsB,OAAOoE,cAAgB1F,KAAKkB,WAC7ByE,EAAAA,mBAAmBC,OAAS5F,KAAKT,cAAcsG,QAC3CF,EAAAA,mBAAmBG,MAAQH,EAAAA,mBAAmBI,KACtD/F,KAAKsB,OAAO0E,iBAAgC,wBAAbhG,KAAKE,KACFF,KAAKkB,WAAnC+E,EAAAA,iBAAiBC,WACiBD,EAAAA,iBAAiBE,UAG3D/G,EAAA0C,UAAArE,YAAA,SAAY2I,GACRpG,KAAKQ,UAAY4F,EAAK5F,iDAxMjBpB,GAA+B/B,EAAAgJ,kBAAAC,EAAAnE,sBAAA9E,EAAAgJ,kBAAAE,EAAAC,eAAAnJ,EAAAgJ,kBAAAC,EAAAG,eAAApJ,EAAAgJ,kBAAAC,EAAAI,aAAArJ,EAAAgJ,kBAAAM,EAAAC,SAAAvJ,EAAAgJ,kBAAAhJ,EAAAwJ,WAAAxJ,EAAAgJ,kBAAAhJ,EAAAyJ,YAAAzJ,EAAAgJ,kBAAAhJ,EAAA0J,mBAAA1J,EAAAgJ,kBAAAW,EAAAC,aAAA,GAAA5J,EAAAgJ,kBA+ChBa,EAAAA,gBAAe,sCA/C9B9H,EAA+B+H,UAAA,CAAA,CAAA,yBAAAC,UAAA,SAAAC,EAAAC,uDAkBIC,EAAAA,8eA3BjC,CACP,CACIC,QAASC,EAAAA,mBAETC,WAAYnJ,EACZoJ,KAAM,CAACC,EAAAA,sBAEdC,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,OAAA,WAAA,YAAA,CAAA,kBAAA,IAAA,CAAA,wBAAA,IAAA,CAAA,eAAA,IAAA,CAAA,EAAA,aAAA,CAAA,EAAA,8BAAA,CAAA,EAAA,QAAA,aAAA,aAAA,CAAA,EAAA,cAAA,EAAA,WAAA,CAAA,cAAA,IAAA,CAAA,EAAA,KAAA,YAAA,cAAA,SAAA,CAAA,mBAAA,GAAA,EAAA,yBAAA,CAAA,EAAA,YAAA,QAAA,CAAA,aAAA,GAAA,EAAA,iBAAA,cAAA,KAAA,OAAA,aAAA,OAAA,EAAA,oBAAA,CAAA,OAAA,gBAAA,CAAA,qBAAA,IAAA,CAAA,oBAAA,IAAA,CAAA,EAAA,KAAA,eAAA,cAAA,SAAA,CAAA,KAAA,iBAAA,EAAA,OAAA,CAAA,iBAAA,KAAAC,SAAA,SAAAX,EAAAC,YDlILW,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GACAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAeAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAkBAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wEAlCcpK,EAAAA,WAAAA,OAAAA,EAAAA,SAAAA,CAAkE,WAAAqK,EAAlErK,CAAkE,WAAAsK,26DEqE5E,SAAoBC,GAAApI,KAAAoI,oBAAAA,EAChBpI,KAAKoI,oBAAoBC,cAAc,CACnCC,EAAAA,sBACAC,EAAAA,uBACA/G,EAAAA,yBACAgH,EAAAA,2DANCC,iEAAAA,GAA4BpL,EAAAqL,SAAAC,EAAAC,uBAAAC,QAAA,CAvC5B,CACLC,EAAAA,aACAC,EAAAA,wBACAC,EAAAA,oBACAC,EAAAA,YAEAC,EAAAA,gBACAC,EAAAA,mBACAC,EAAAA,gBACAC,EAAAA,cAEAC,EAAAA,cACAC,EAAAA,kBAmBAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,wBACAC,EAAAA,yFAKKlB,EAA4B,CAAAmB,aAAA,CAFrBxK,GAA+ByJ,QAAA,CApC3CC,EAAAA,aACAC,EAAAA,wBACAC,EAAAA,oBACAC,EAAAA,YAEAC,EAAAA,gBACAC,EAAAA,mBACAC,EAAAA,gBACAC,EAAAA,cAEAC,EAAAA,cACAC,EAAAA,kBAmBAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,wBACAC,EAAAA,qBAAmBE,QAAA,CAEZzK","sourcesContent":["<ng-container *ngIf=\"inDialog; then galleryDialogTemplate; else regularTemplate\"></ng-container>\r\n<ng-template #regularTemplate>\r\n    <ng-container [formGroup]=\"form\">\r\n        <div class=\"images-filmstrip-container\">\r\n            <pep-field-title [label]=\"label\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\r\n            </pep-field-title>\r\n            <div #galleryCont class=\"img-wrapper\" [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\"\r\n                [style.height]=\"fieldHeight\">\r\n                <gallery id=\"{{key}}-{{objectId}}-gallery\" (itemClick)=\"enlargeImage($event);\"\r\n                    (indexChange)=\"indexChange($event)\" (error)=\"onError($event)\">\r\n                </gallery>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #galleryDialogTemplate>\r\n    <h2 mat-dialog-title class=\"pepperi-border-bottom\">\r\n        <span class=\"pull-left flip\">{{ label }}</span>\r\n        <button mat-button [mat-dialog-close]=\"null\" class=\"pepperi-button icon-button md weak pull-right flip\">\r\n            <mat-icon>\r\n                <pep-icon name=\"system_close\">\r\n                </pep-icon>\r\n            </mat-icon>\r\n        </button>\r\n    </h2>\r\n    <div mat-dialog-content #galleryDialogCont>\r\n        <gallery id=\"{{key}}-{{objectId}}-dlgGallery\" [itemTemplate]=\"itemTemplate\" (indexChange)=\"indexChange($event)\"\r\n            [style.height.px]=\"'auto'\" (error)=\"onError($event)\">\r\n        </gallery>\r\n    </div>\r\n</ng-template>\r\n\r\n<!-- Add custom template to image items -->\r\n<ng-template #itemTemplate let-index=\"index\" let-type=\"type\" let-data=\"data\" let-currIndex=\"currIndex\">\r\n    <!-- <span *ngIf=\"type === 'image' && index === currIndex\" [@slideAnimation] class=\"item-text\">\r\n        {{data?.title}}\r\n    </span> -->\r\n    <ngx-imageviewer id=\"ngxViewerImage\" #ngxViewerImage [src]=\"data.src\"></ngx-imageviewer>\r\n    <!-- <ngx-image-viewer #ngxViewerImage [config]=\"{ btnShow:{zoomIn: false, zoomOut: false }}\" [src]=\"[data.src]\"\r\n        (wheel)=\"scrollFunction($event)\">\r\n    </ngx-image-viewer> -->\r\n</ng-template>","import {\r\n    Component, ViewChild, OnInit, OnDestroy, AfterViewInit, ElementRef, Input,\r\n    TemplateRef, Renderer2, ChangeDetectorRef, Inject, Optional, ViewContainerRef\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Gallery, GalleryConfig, LoadingStrategy, SlidingDirection, ThumbnailsPosition, GalleryItem, ImageItem, GalleryRef } from '@ngx-gallery/core';\r\nimport { CustomizationService, LAYOUT_TYPE, LayoutService, FileService } from '@pepperi-addons/ngx-lib';\r\nimport { DialogService } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { pepperiIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport 'hammerjs';\r\n\r\nexport interface ImagesFilmstripDialogData {\r\n    currIndex: number;\r\n    key: string;\r\n    value: string;\r\n    label: string;\r\n    objectId: string;\r\n    showThumbnails: boolean;\r\n}\r\n\r\n// export const slideInAnimation = trigger('slideAnimation', [\r\n//     state('in', style({ transform: 'translateY(0)', opacity: 1 })),\r\n//     transition(':enter', [\r\n//         style({ transform: 'translateY(-100%)', opacity: 0 }),\r\n//         animate(400)\r\n//     ]),\r\n//     transition(':leave', [\r\n//         animate(400, style({ transform: 'translateY(-100%)', opacity: 0 }))\r\n//     ])\r\n// ]);\r\n\r\nimport { IMAGEVIEWER_CONFIG, ImageViewerConfig, createButtonConfig } from '@hallysonh/ngx-imageviewer';\r\n\r\n\r\nexport function createViewerConfig(translate: TranslateService): ImageViewerConfig {\r\n    return {\r\n        // width: 800, // component default width\r\n        // height: 600, // component default height\r\n        bgStyle: '#FFF', // component background style\r\n        // scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)\r\n        // rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees\r\n        loadingMessage: translate.instant('MESSAGES.INFO_LOADING_FILE'), // 'Loading...',\r\n        // buttonStyle: {\r\n        //     iconFontFamily: 'Material Icons', // font used to render the button icons\r\n        //     alpha: 0.5, // buttons' transparence value\r\n        //     hoverAlpha: 0.7, // buttons' transparence value when mouse is over\r\n        //     bgStyle: '#000000', //  buttons' background style\r\n        //     iconStyle: '#ffffff', // buttons' icon colors\r\n        //     borderStyle: '#000000', // buttons' border style\r\n        //     borderWidth: 0, // buttons' border width (0 == disabled)\r\n        // },\r\n        // tooltips: {\r\n        //     enabled: true, // enable or disable tooltips for buttons\r\n        //     bgStyle: '#000000', // tooltip background style\r\n        //     bgAlpha: 0.5, // tooltip background transparence\r\n        //     textStyle: '#ffffff', // tooltip's text style\r\n        //     textAlpha: 0.9, // tooltip's text transparence\r\n        //     padding: 15, // tooltip padding\r\n        //     radius: 20, // tooltip border radius\r\n        // },\r\n        // shorter button configuration style\r\n        nextPageButton: createButtonConfig('navigate_next', 'Next page', 0, false),\r\n        beforePageButton: createButtonConfig('navigate_before', 'Previous page', 1, false),\r\n        zoomOutButton: createButtonConfig('zoom_out', 'Zoom out', 0, false),\r\n        zoomInButton: createButtonConfig('zoom_in', 'Zoom in', 1, false),\r\n        rotateLeftButton: createButtonConfig('rotate_left', 'Rotate left', 2, false),\r\n        rotateRightButton: createButtonConfig('rotate_right', 'Rotate right', 3, false),\r\n        resetButton: createButtonConfig('autorenew', 'Reset', 4, false),\r\n    };\r\n}\r\n\r\n// This is the default\r\n// export const IMAGEVIEWER_CONFIG_DEFAULT: ImageViewerConfig = {\r\n//     width: 800, // component default width\r\n//     height: 600, // component default height\r\n//     bgStyle: '#ECEFF1', // component background style\r\n//     scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)\r\n//     rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees\r\n//     loadingMessage: 'Loading...',\r\n//     buttonStyle: {\r\n//         iconFontFamily: 'Material Icons', // font used to render the button icons\r\n//         alpha: 0.5, // buttons' transparence value\r\n//         hoverAlpha: 0.7, // buttons' transparence value when mouse is over\r\n//         bgStyle: '#000000', //  buttons' background style\r\n//         iconStyle: '#ffffff', // buttons' icon colors\r\n//         borderStyle: '#000000', // buttons' border style\r\n//         borderWidth: 0, // buttons' border width (0 == disabled)\r\n//     },\r\n//     tooltips: {\r\n//         enabled: true, // enable or disable tooltips for buttons\r\n//         bgStyle: '#000000', // tooltip background style\r\n//         bgAlpha: 0.5, // tooltip background transparence\r\n//         textStyle: '#ffffff', // tooltip's text style\r\n//         textAlpha: 0.9, // tooltip's text transparence\r\n//         padding: 15, // tooltip padding\r\n//         radius: 20, // tooltip border radius\r\n//     },\r\n//     zoomOutButton: {\r\n//         // zoomOut button config\r\n//         icon: 'zoom_out', // icon text\r\n//         tooltip: 'Zoom out', // button tooltip\r\n//         sortId: 0, // number used to determine the order of the buttons\r\n//         show: true, // used to show/hide the button\r\n//     },\r\n\r\n//     // shorter button configuration style\r\n//     nextPageButton: createButtonConfig('navigate_next', 'Next page', 0),\r\n//     beforePageButton: createButtonConfig('navigate_before', 'Previous page', 1),\r\n//     zoomInButton: createButtonConfig('zoom_in', 'Zoom in', 1),\r\n//     rotateLeftButton: createButtonConfig('rotate_left', 'Rotate left', 2),\r\n//     rotateRightButton: createButtonConfig('rotate_right', 'Rotate right', 3),\r\n//     resetButton: createButtonConfig('autorenew', 'Reset', 4),\r\n// };\r\n\r\n@Component({\r\n    selector: 'pep-images-filmstrip',\r\n    templateUrl: './images-filmstrip.component.html',\r\n    styleUrls: ['./images-filmstrip.component.scss'],\r\n    // animations: [slideInAnimation],\r\n    providers: [\r\n        {\r\n            provide: IMAGEVIEWER_CONFIG,\r\n            // useValue: IMAGEVIEWER_CONFIG_DEFAULT,\r\n            useFactory: createViewerConfig,\r\n            deps: [TranslateService]\r\n        }\r\n    ]\r\n})\r\nexport class PepperiImagesFilmstripComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    // @ViewChild('ngxViewerImage') ngxViewerImage: any; // TODO: Check if we need to use this??\r\n    @Input() value = '';\r\n    @Input() key = '';\r\n    @Input() label = '';\r\n    @Input() xAlignment = '0';\r\n    @Input() rowSpan = 1;\r\n\r\n    controlType = 'images';\r\n\r\n    @Input() form: FormGroup = null;\r\n    @Input() objectId = '';\r\n    @Input() showTitle = false;\r\n    @Input() layoutType: LAYOUT_TYPE.PepperiForm;\r\n    @Input() currIndex = 0;\r\n    @Input() showThumbnails = false;\r\n\r\n    @ViewChild('galleryCont') galleryCont: ElementRef;\r\n    @ViewChild('galleryDialogTemplate', { read: TemplateRef }) galleryDialogTemplate: TemplateRef<any>;\r\n    @ViewChild('galleryDialogCont') galleryDialogCont: ElementRef;\r\n\r\n    config: GalleryConfig;\r\n    items: GalleryItem[] = null;\r\n    inDialog = false;\r\n\r\n    required = false;\r\n    readonly = false;\r\n    disabled = false;\r\n    fieldHeight = '';\r\n    standAlone = false;\r\n\r\n    galleryWidth = 0;\r\n    galleryHeight;\r\n    isVertical = false;\r\n    galleryRef: GalleryRef;\r\n    dialogGalleryRef: GalleryRef;\r\n\r\n    constructor(\r\n        private customizationService: CustomizationService,\r\n        private dialogService: DialogService,\r\n        private layoutService: LayoutService,\r\n        private fileService: FileService,\r\n        private gallery: Gallery,\r\n        private renderer: Renderer2,\r\n        private element: ElementRef,\r\n        private cd: ChangeDetectorRef,\r\n        @Optional() private dialogRef: MatDialogRef<PepperiImagesFilmstripComponent>,\r\n        @Optional() @Inject(MAT_DIALOG_DATA) private data: ImagesFilmstripDialogData\r\n    ) {\r\n        // If data exist copy all data properties into this.\r\n        if (dialogRef && data) {\r\n            this.inDialog = true;\r\n\r\n            Object.keys(data).forEach(key => {\r\n                if (key in this) {\r\n                    this[key] = data[key];\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config = {\r\n            // nav: false, // Show navigation buttons\r\n            navIcon: pepperiIconArrowRightAlt.data,\r\n            // loop: true,\r\n            // zoomOut: 0,\r\n            // dots: false,\r\n            // dotsPosition: 'bottom',\r\n            // counterPosition: 'top',\r\n            // thumb: true,\r\n            counter: false, // Show counter\r\n            gestures: true, // Use touch events (requires hammer.js)\r\n            // autoPlay: false,\r\n            // thumbWidth: 120,\r\n            // thumbHeight: 90,\r\n            // imageSize: 'contain',\r\n            // panSensitivity: 25,\r\n            // disableThumb: false,\r\n            // playerInterval: 3000,\r\n            // thumbMode: ThumbnailsMode.Free,\r\n            // thumbPosition: ThumbnailsPosition.Bottom,\r\n            loadingStrategy: LoadingStrategy.Default,\r\n            // slidingDirection: SlidingDirection.Horizontal,\r\n        };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.inDialog) {\r\n            if (this.form === null) {\r\n                this.standAlone = true;\r\n                this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required,\r\n                    this.readonly, this.disabled);\r\n\r\n                this.renderer.addClass(this.element.nativeElement, CustomizationService.STAND_ALONE_FIELD_CLASS_NAME);\r\n            }\r\n\r\n            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);\r\n        }\r\n\r\n        if (this.items === null) {\r\n            const imgArr = this.value ? this.value.split(';') : [];\r\n            // add No image image when there is no images\r\n            if (imgArr.length === 0) {\r\n                const noImageSrc = this.fileService.getNoImagePath();\r\n                imgArr.push(noImageSrc);\r\n            }\r\n\r\n            this.items = imgArr.map(img => new ImageItem({ src: img, thumb: img }));\r\n        }\r\n\r\n        this.config.dots = this.config.nav = this.items.length > 1;\r\n        this.config.thumb = (this.key === 'ItemFilmstripImages' || this.showThumbnails) && this.items.length > 1 ? true : false;\r\n        this.currIndex =\r\n            this.key === 'ItemFilmstripImages' &&\r\n                this.currIndex === 0 &&\r\n                this.items.length > 1 ?\r\n                Math.floor(this.items.length / 2) - 1 : this.currIndex;\r\n\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.inDialog) {\r\n            this.afterDialogOpened();\r\n        } else {\r\n            this.galleryRef = this.gallery.ref(this.key + '-' + this.objectId + '-gallery');\r\n            this.initGalleryStyle(this.galleryCont, this.galleryRef);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.galleryRef) { this.galleryRef.destroy(); }\r\n        if (this.dialogGalleryRef) { this.dialogGalleryRef.destroy(); }\r\n        // if (this.myPinch) { this.myPinch.destroy(); }\r\n    }\r\n\r\n    initGalleryStyle(galleryContainer, galleryRef): void {\r\n        // Set thumbnails position and sliding direction\r\n        this.setThumbnailDimension(galleryContainer);\r\n\r\n        galleryRef.setConfig(this.config);\r\n        galleryRef.load(this.items);\r\n\r\n        const currentIndex = this.currIndex;\r\n        if (currentIndex > 0) {\r\n            galleryRef.set(currentIndex);\r\n        }\r\n    }\r\n\r\n    onError(e): void {\r\n        const noImageSrc = this.fileService.getNoImagePath();\r\n        const noimg = new ImageItem({ src: noImageSrc, thumb: noImageSrc });\r\n        this.items.splice(e.itemIndex, 1, noimg);\r\n    }\r\n\r\n    enlargeImage(event: any): void {\r\n        const dialogRef = this.dialogService.openDialog(this.galleryDialogTemplate);\r\n\r\n        dialogRef.afterOpened().subscribe(() => {\r\n            this.afterDialogOpened();\r\n        });\r\n\r\n        // Update currentIndex in galleryRef\r\n        dialogRef.afterClosed().subscribe(value => {\r\n            this.galleryRef.set(this.currIndex);\r\n        });\r\n    }\r\n\r\n    afterDialogOpened(): void {\r\n        this.dialogGalleryRef = this.gallery.ref(this.key + '-' + this.objectId + '-dlgGallery');\r\n        this.initGalleryStyle(this.galleryDialogCont, this.dialogGalleryRef);\r\n    }\r\n\r\n    setThumbnailDimension(galleryContainer): void {\r\n        this.galleryWidth = galleryContainer.nativeElement.clientWidth;\r\n        this.galleryHeight = galleryContainer.nativeElement.clientHeight;\r\n\r\n        this.isVertical = this.galleryWidth < this.galleryHeight;\r\n\r\n        if (this.isVertical) {\r\n            let width = (this.galleryWidth - ((this.items.length - 1) * 16)) / this.items.length;\r\n            width = Math.min(Math.max(width, 24), 96);\r\n\r\n            this.config.thumbHeight = width;\r\n            this.config.thumbWidth = (width + 16);\r\n        } else {\r\n            let height = (this.galleryHeight - ((this.items.length - 1) * 16)) / this.items.length;\r\n            height = Math.min(Math.max(height, 24), 96);\r\n\r\n            this.config.thumbHeight = (height + 16);\r\n            this.config.thumbWidth = height;\r\n        }\r\n\r\n        this.config.thumbPosition = this.isVertical ?\r\n            ThumbnailsPosition.Bottom : this.layoutService.isRtl() ?\r\n                ThumbnailsPosition.Right : ThumbnailsPosition.Left;\r\n        this.config.slidingDirection = this.key !== 'ItemFilmstripImages' ?\r\n            SlidingDirection.Horizontal : this.isVertical ?\r\n                SlidingDirection.Horizontal : SlidingDirection.Vertical;\r\n    }\r\n\r\n    indexChange(item: any): void {\r\n        this.currIndex = item.currIndex;\r\n        // if (this.ngxViewerImage && this.ngxViewerImage.scale) {\r\n        //     this.ngxViewerImage.scale = 1;\r\n        //     this.updateStyle();\r\n        // }\r\n    }\r\n\r\n    // scrollFunction(e: any): boolean {\r\n    //     e.deltaY > 0 ? this.zoomOut() : this.zoomIn();\r\n    //     return false;\r\n    // }\r\n\r\n    // zoomIn(): void {\r\n    //     if (this.ngxViewerImage.scale < 2) {\r\n    //         this.ngxViewerImage.scale *= (1 + this.ngxViewerImage.config.zoomFactor);\r\n    //     } else {\r\n    //         this.ngxViewerImage.scale = 2;\r\n    //     }\r\n    //     this.updateStyle();\r\n    // }\r\n\r\n    // zoomOut(): void {\r\n    //     if (this.ngxViewerImage.scale > this.ngxViewerImage.config.zoomFactor) {\r\n    //         this.ngxViewerImage.scale /= (1 + this.ngxViewerImage.config.zoomFactor);\r\n    //     }\r\n    //     this.updateStyle();\r\n    // }\r\n\r\n    // private updateStyle(): void {\r\n    //     this.ngxViewerImage.style.transform = `translate(${this.ngxViewerImage.translateX}px,\r\n    //         ${this.ngxViewerImage.translateY}px) rotate(${this.ngxViewerImage.rotation}deg) scale(${this.ngxViewerImage.scale})`;\r\n\r\n    //     this.cd.detectChanges();\r\n    // }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\nimport {\r\n    PepperiIconModule,\r\n    PepperiIconRegistry,\r\n    pepperiIconSystemEdit,\r\n    pepperiIconSystemClose,\r\n    pepperiIconArrowRightAlt,\r\n    pepperiIconArrowLeftAlt\r\n} from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepperiDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\n\r\nimport { GalleryModule } from '@ngx-gallery/core';\r\nimport { ImageViewerModule } from '@hallysonh/ngx-imageviewer';\r\n// import { ImageViewerModule } from 'ngx-image-viewer';\r\n\r\nimport { PepperiImagesFilmstripComponent } from './images-filmstrip.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        BrowserAnimationsModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatFormFieldModule,\r\n        MatDialogModule,\r\n        MatIconModule,\r\n        // External modules\r\n        GalleryModule,\r\n        ImageViewerModule,\r\n        // ImageViewerModule.forRoot({\r\n        //     btnClass: 'default', // The CSS class(es) that will apply to the buttons\r\n        //     zoomFactor: 0.1, // The amount that the scale will be increased by\r\n        //     containerBackgroundColor: 'transparent', // The color to use for the background. This can provided in hex, or rgb(a).\r\n        //     wheelZoom: true, // If true, the mouse wheel can be used to zoom in\r\n        //     allowFullscreen: false, // If true, the fullscreen button will be shown, allowing the user to entr fullscreen mode\r\n        //     btnIcons: {\r\n        //         // The icon classes that will apply to the buttons. By default, font-awesome is used.\r\n        //         zoomIn: 'fa fa-plus',\r\n        //         zoomOut: 'fa fa-minus',\r\n        //         rotateClockwise: 'fa fa-repeat',\r\n        //         rotateCounterClockwise: 'fa fa-undo',\r\n        //         next: 'fa fa-arrow-right',\r\n        //         prev: 'fa fa-arrow-left',\r\n        //         fullscreen: 'fa fa-arrows-alt'\r\n        //     }\r\n        // }),\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule,\r\n        PepperiFieldTitleModule,\r\n        PepperiDialogModule\r\n    ],\r\n    exports: [ PepperiImagesFilmstripComponent ],\r\n    declarations: [ PepperiImagesFilmstripComponent ],\r\n})\r\nexport class PepperiImagesFilmstripModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemEdit,\r\n            pepperiIconSystemClose,\r\n            pepperiIconArrowRightAlt,\r\n            pepperiIconArrowLeftAlt\r\n        ]);\r\n    }\r\n}\r\n"]}
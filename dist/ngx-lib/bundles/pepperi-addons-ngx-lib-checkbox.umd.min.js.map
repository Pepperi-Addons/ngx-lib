{"version":3,"sources":["../../../projects/ngx-lib/checkbox/checkbox.component.html","../../../projects/ngx-lib/checkbox/checkbox.component.ts","../../../projects/ngx-lib/checkbox/checkbox.module.ts"],"names":["i0.ɵɵelementContainer","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵproperty","i0.ɵɵtextInterpolate1","ctx_r10","label","length","value","toLowerCase","i0","ɵɵpipeBind1","disabled","i0.ɵɵpropertyInterpolate","_r7","_r9","i0.ɵɵelementContainerStart","i0.ɵɵelement","i0.ɵɵelementContainerEnd","ctx_r2","required","xAlignment","_r25","_r27","_r20","_r22","ctx_r5","PepperiCheckboxComponent","renderer","customizationService","translate","element","this","key","type","readonly","rowSpan","controlType","form","isActive","showTitle","layoutType","LAYOUT_TYPE","PepperiForm","valueChanged","EventEmitter","standAlone","jsonLib","JSON","prototype","ngOnInit","getDefaultFromGroup","addClass","nativeElement","CustomizationService","STAND_ALONE_FIELD_CLASS_NAME","additionalValue","additionalValueObject","parse","_a","CheckedText","instant","UncheckedText","ngOnDestroy","unsubscribe","onMaterialChange","e","changeValue","checked","toggleChecked","event","isChecked","toString","updateFormFieldValue","emit","apiName","ɵɵdirectiveInject","Renderer2","i1","i2","TranslateService","ElementRef","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","pepperiIconRegistry","registerIcons","pepperiIconSystemBolt","PepperiCheckboxModule","ɵɵinject","i1$1","PepperiIconRegistry","imports","CommonModule","ReactiveFormsModule","FormsModule","MatCommonModule","MatFormFieldModule","MatCheckboxModule","MatIconModule","PepperiModule","PepperiIconModule","PepperiFieldTitleModule","declarations","exports"],"mappings":"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","sourcesContent":["<ng-container [formGroup]=\"form\">\r\n    <!-- New code -->\r\n    <ng-template #pepperiTemplate>\r\n        <div class=\"pepperi-checkbox-container pepperi-input\" [ngClass]=\"{\r\n                'disable': disabled,\r\n                'pepperi-report-checkbox': layoutType === LAYOUT_TYPE.PepperiTable && !isActive,\r\n                'pepperi-card-checkbox': layoutType === LAYOUT_TYPE.PepperiCard,\r\n                'one-row': rowSpan === 1,\r\n                'no-title': label.length == 0,\r\n                'right-alignment pull-right flip': xAlignment == '2',\r\n                'center-alignment': xAlignment == '3'\r\n            }\" dir=\"{{ xAlignment == '2' ? 'rtl' : 'ltr' }}\">\r\n            <!-- (click)=\"toggleChecked($event)\" -->\r\n            <ng-container *ngIf=\"type == 'booleanText'; then booleanTextTemplate; else regularTemplate\"></ng-container>\r\n            <ng-template #booleanTextTemplate>\r\n                <div (click)=\"toggleChecked($event)\" class=\"mat-checkbox-layout body-sm\"\r\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + (value.toLowerCase() == 'true' || value == '1' ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\">\r\n                    <button [id]=\"key\" class=\"mat-icon-button emoji-icon pull-left flip\">\r\n                        {{ value.toLowerCase() == 'true' || value == '1' ? additionalValueObject.CheckedText : additionalValueObject.UncheckedText }}\r\n                    </button>\r\n                    <span *ngIf=\"label.length > 0 && layoutType !== LAYOUT_TYPE.PepperiTable\"\r\n                        class=\"mat-checkbox-label emoji-title\">{{ label }}</span>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template #regularTemplate>\r\n                <mat-checkbox [name]=\"key\" class=\"body-sm ellipsis\" type=\"checkbox\" (change)=\"onMaterialChange($event)\"\r\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + (value.toLowerCase() == 'true' || value == '1' ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\"\r\n                    [checked]=\"value.toLowerCase() == 'true' || value == '1' ? true : false\" [disabled]=\"disabled\">\r\n                    <span *ngIf=\"label.length > 0 && layoutType !== LAYOUT_TYPE.PepperiTable\">{{ label }}</span>\r\n                </mat-checkbox>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiForm\">\r\n        <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\r\n            [showTitle]=\"false\">\r\n        </pep-field-title>\r\n        <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiCard\">\r\n        <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiTable\">\r\n        <ng-container *ngIf=\"key === 'ItemHasActiveCampaign'; then itemCampaignBlock; else checkboxBlock\">\r\n        </ng-container>\r\n        <ng-template #itemCampaignBlock>\r\n            <ng-container *ngIf=\"value.toLowerCase() == 'true' || value == '1'; then trueTemplate; else falseTemplate\">\r\n            </ng-container>\r\n            <ng-template #trueTemplate>\r\n                <mat-icon class=\"has-active-campaign\" title=\"{{ 'CHECKBOX.TRUE' | translate }}\">\r\n                    <pep-icon name=\"system_bolt\">\r\n                    </pep-icon>\r\n                </mat-icon>\r\n            </ng-template>\r\n            <ng-template #falseTemplate>\r\n                <span>&nbsp;</span>\r\n            </ng-template>\r\n        </ng-template>\r\n        <ng-template #checkboxBlock>\r\n            <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.Editmodal\">\r\n        <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\r\n            [showTitle]=\"false\">\r\n        </pep-field-title>\r\n        <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container>\r\n    </ng-container>\r\n</ng-container>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectionStrategy, OnDestroy, Renderer2, ElementRef } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CustomizationService, LAYOUT_TYPE } from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'pep-checkbox',\r\n    templateUrl: './checkbox.component.html',\r\n    styleUrls: ['./checkbox.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PepperiCheckboxComponent implements OnInit, OnDestroy {\r\n    @Input() key = '';\r\n    @Input() value = '';\r\n    @Input() label = '';\r\n    @Input() type = 'checkbox'; // || 'booleanText'\r\n    @Input() required = false;\r\n    @Input() disabled = false;\r\n    @Input() readonly = false;\r\n    @Input() xAlignment = '0';\r\n    @Input() rowSpan = 1;\r\n    @Input() additionalValue: any;\r\n\r\n    controlType = 'checkbox';\r\n\r\n    @Input() form: FormGroup = null;\r\n    @Input() isActive = false;\r\n    @Input() showTitle = true;\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n\r\n    @Output() valueChanged: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n    standAlone = false;\r\n\r\n    additionalValueObject: any;\r\n    public jsonLib = JSON;\r\n\r\n    constructor(\r\n        private renderer: Renderer2,\r\n        private customizationService: CustomizationService,\r\n        public translate: TranslateService,\r\n        private element: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.form === null) {\r\n            this.standAlone = true;\r\n            this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled, 0, '', true);\r\n\r\n            this.renderer.addClass(this.element.nativeElement, CustomizationService.STAND_ALONE_FIELD_CLASS_NAME);\r\n        }\r\n\r\n        if (this.type === 'booleanText') {\r\n            try {\r\n                if (typeof this.additionalValue === 'string') {\r\n                    this.additionalValueObject = JSON.parse(this.additionalValue);\r\n                } else {\r\n                    this.additionalValueObject = this.additionalValue;\r\n                }\r\n            } catch {\r\n                this.additionalValueObject = {\r\n                    CheckedText: this.translate.instant('CHECKBOX.TRUE'),\r\n                    UncheckedText: this.translate.instant('CHECKBOX.FALSE')\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.valueChanged) {\r\n            this.valueChanged.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onMaterialChange(e: any): void {\r\n        this.changeValue(e.checked);\r\n    }\r\n\r\n    toggleChecked(event: any): void {\r\n        if (!this.disabled) {\r\n            const isChecked: boolean = this.value === 'true' || this.value === '1' ? true : false;\r\n            this.value = (!isChecked).toString();\r\n            this.changeValue(this.value);\r\n        }\r\n    }\r\n\r\n    changeValue(value: any): void {\r\n        this.customizationService.updateFormFieldValue(this.form, this.key, value);\r\n        this.valueChanged.emit({ apiName: this.key, value });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiIconModule, PepperiIconRegistry, pepperiIconSystemBolt } from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepperiFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\n\r\nimport { PepperiCheckboxComponent } from './checkbox.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        // Material modules\r\n        MatCommonModule,\r\n        MatFormFieldModule,\r\n        MatCheckboxModule,\r\n        MatIconModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule,\r\n        PepperiFieldTitleModule\r\n    ],\r\n    exports: [ PepperiCheckboxComponent ],\r\n    declarations: [ PepperiCheckboxComponent ],\r\n})\r\nexport class PepperiCheckboxModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemBolt\r\n        ]);\r\n    }\r\n}\r\n"]}
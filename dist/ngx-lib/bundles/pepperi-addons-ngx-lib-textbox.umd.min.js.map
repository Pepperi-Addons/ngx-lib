{"version":3,"sources":["../../../projects/ngx-lib/textbox/textbox.component.html","../../../projects/ngx-lib/textbox/textbox.component.ts","../../../projects/ngx-lib/textbox/textbox.module.ts"],"names":["i0.ɵɵelement","i0.ɵɵproperty","ctx_r8","required","disabled","maxFieldCharacters","xAlignment","showTitle","_r9","value","length","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","ctx_r10","key","i0.ɵɵtextInterpolate1","i0.ɵɵelementContainer","i0","ɵɵpipeBind2","ɵɵpureFunction1","_c1","ctx_r13","label","ɵɵpipeBind1","ctx_r15","maxValue","minValue","ɵɵpureFunction2","_c2","ctx_r16","type","ctx_r17","i0.ɵɵtemplate","$event","ɵɵrestoreView","_r21_1","ɵɵnextContext","onKeyPress","onBlur","currentTarget","blur","onFocus","i0.ɵɵpropertyInterpolate","ctx_r1","hasParent_r7","placeholder","_c3","textColor","formattedValue","isFocus","_c4","_r12","_r14","ɵɵpureFunction0","_c5","i0.ɵɵelementContainerStart","_r33_1","i0.ɵɵelementContainerEnd","ctx_r30","_r29","_r27","_c7","i0.ɵɵclassMap","i0.ɵɵtextInterpolate","_r39","_r41","_c9","ctx_r61","_c10","ctx_r60","_c11","_r55","_r57","_r49","_r51","PepperiTextboxComponent","fb","customizationService","renderer","element","this","readonly","rowSpan","NaN","controlType","form","isActive","layoutType","LAYOUT_TYPE","PepperiForm","parentFieldKey","valueChanged","EventEmitter","formValidationChanged","standAlone","isInEditMode","prototype","ngOnInit","isNaN","getDefaultFromGroup","addClass","nativeElement","CustomizationService","STAND_ALONE_FIELD_CLASS_NAME","ngOnChanges","changes","self","setTimeout","lastFocusField","focus","ngOnDestroy","unsubscribe","e","target","emit","apiName","lastFocusedField","relatedTarget","onKeyUp","event","updateFormFieldValue","valid","inputChar","String","fromCharCode","charCode","indexOf","which","ctrlKey","pattern","test","preventDefault","anchorClicked","currentValue","trim","window","open","cardTemplateClicked","input","ɵɵdirectiveInject","i1","FormBuilder","i2","Renderer2","ElementRef","selectors","viewQuery","rf","ctx","pepperiIconRegistry","registerIcons","pepperiIconSystemEdit","PepperiTextboxModule","ɵɵinject","i1$1","PepperiIconRegistry","imports","CommonModule","ReactiveFormsModule","FormsModule","MatCommonModule","MatButtonModule","MatFormFieldModule","MatInputModule","MatIconModule","PepperiModule","PepperiIconModule","PepperiFieldTitleModule","PepperiTextboxIconModule","declarations","exports"],"mappings":"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","sourcesContent":["<ng-container [formGroup]=\"form\">\r\n    <!-- New code -->\r\n    <ng-template #pepperiTemplate let-isFormView=\"isFormView\" let-hasParent=\"hasParent\">\r\n        <pep-field-title *ngIf=\"isFormView && !hasParent\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\r\n            [maxFieldCharacters]=\"maxFieldCharacters\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\"\r\n            [inputLength]=\"input.value?.length\">\r\n        </pep-field-title>\r\n        <mat-form-field appearance=\"outline\">\r\n            <input #input [id]=\"key\" [name]=\"key\" class=\" body-sm \" matInput autocomplete=\"off\"\r\n                (keyup)=\"onKeyUp($event)\" (keypress)=\"onKeyPress($event)\"\r\n                maxlength=\"{{ maxFieldCharacters > 0 ? maxFieldCharacters : 99999 }}\"\r\n                [placeholder]=\"hasParent && !disabled ? placeholder : ''\"\r\n                [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == '3' ? 'center' : xAlignment == '2' ? 'right' : 'left' }\"\r\n                title=\"{{ formattedValue }}\" [formControlName]=\"key\" [type]=\"type\"\r\n                [value]=\"type == 'link' ? formattedValue : (isFocus ? value : formattedValue)\" (blur)=\"onBlur($event)\"\r\n                (keyup.enter)=\"$event?.currentTarget?.blur()\" (focus)=\"onFocus($event)\" [disabled]=\"disabled\"\r\n                [ngClass]=\"{'disable-hidden': disabled && formattedValue.length > 0 && (type === 'phone' || type === 'email' || type === 'link')}\" />\r\n\r\n            <span\r\n                *ngIf=\"disabled && formattedValue.length > 0 && (type === 'phone' || type === 'email' || type === 'link')\"\r\n                class=\"dis-grid\">\r\n                <a href=\"javascript:void(0)\" (click)=\"anchorClicked()\" [id]=\"key\" [name]=\"key\"\r\n                    class=\"color-link body-sm \"> {{formattedValue}}</a>\r\n            </span>\r\n            <mat-error>\r\n                <ng-container *ngIf=\"required && input.value.length == 0 then requiredError else otherError\">\r\n                </ng-container>\r\n                <ng-template #requiredError>\r\n                    <span class=\"body-xs\" [title]=\"('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label })\"\r\n                        [innerText]=\"('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label })\">\r\n                    </span>\r\n                </ng-template>\r\n                <ng-template #otherError>\r\n                    <span class=\"body-xs\" [title]=\"(input.value | toNumber) > this.maxValue || (input.value | toNumber) < this.minValue ?\r\n                            ('MESSAGES.ERROR_RANGE_IS_NOT_VALID' | translate: { min: minValue, max: maxValue }) :\r\n                            ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\" [innerText]=\"(input.value | toNumber) > this.maxValue || (input.value | toNumber) < this.minValue ?\r\n                            ('MESSAGES.ERROR_RANGE_IS_NOT_VALID' | translate: { min: minValue, max: maxValue }) :\r\n                            ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\">\r\n                    </span>\r\n                </ng-template>\r\n            </mat-error>\r\n\r\n            <pep-textbox-icon *ngIf=\"isFormView && xAlignment == '2'\" matPrefix [value]=\"value\" [label]=\"label\"\r\n                [type]=\"type\" [disabled]=\"disabled\">\r\n            </pep-textbox-icon>\r\n            <pep-textbox-icon *ngIf=\"isFormView && (xAlignment == '1' || xAlignment == '0')\" matSuffix [value]=\"value\"\r\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\">\r\n            </pep-textbox-icon>\r\n        </mat-form-field>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiForm\">\r\n        <ng-container *ngIf=\"parentFieldKey; then groupedBlock; else regularBlock\"></ng-container>\r\n        <ng-template #regularBlock>\r\n            <ng-container *ngTemplateOutlet=\"pepperiTemplate; context: { isFormView: true, hasParent: false }\">\r\n            </ng-container>\r\n        </ng-template>\r\n        <ng-template #groupedBlock>\r\n            <ng-container [formGroupName]=\"parentFieldKey\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <input [id]=\"key\" [name]=\"key\" class=\" body-sm \" matInput autocomplete=\"off\"\r\n                        (keyup)=\"onKeyUp($event)\" (keypress)=\"onKeyPress($event)\"\r\n                        [placeholder]=\"!disabled ? placeholder : ''\" title=\"{{ formattedValue }}\"\r\n                        [formControlName]=\"key\" [value]=\"value\" (blur)=\"onBlur($event)\"\r\n                        (keyup.enter)=\"$event?.currentTarget?.blur()\" (focus)=\"onFocus($event)\" [disabled]=\"disabled\" />\r\n                </mat-form-field>\r\n                <!-- <ng-container *ngTemplateOutlet=\"pepperiTemplate; context: { isFormView: true, hasParent: true }\"></ng-container> -->\r\n            </ng-container>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiCard\">\r\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\r\n        <ng-template #editBlock>\r\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\r\n                <ng-container *ngTemplateOutlet=\"pepperiTemplate; context: { isFormView: false, hasParent: false }\">\r\n                </ng-container>\r\n            </div>\r\n        </ng-template>\r\n        <ng-template #readOnlyBlock>\r\n            <div class=\"pepperi-card-input card-flex-container\"\r\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pepperi-button weak': isActive && !disabled}\"\r\n                [class]=\"'text-align-' + xAlignment\" (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\r\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\"\r\n                    title=\"{{ label }}\">{{ label }}&nbsp;</span>\r\n                <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm value\">{{ formattedValue }}</span>\r\n                <button *ngIf=\"isActive && !disabled\" class=\"pepperi-button weak card-edit-button\" mat-button>\r\n                    <mat-icon>\r\n                        <pep-icon name=\"system_edit\">\r\n                        </pep-icon>\r\n                    </mat-icon>\r\n                </button>\r\n            </div>\r\n        </ng-template>\r\n\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiTable\">\r\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\r\n        <ng-template #selectedBlock>\r\n            <ng-container *ngTemplateOutlet=\"pepperiTemplate; context: { isFormView: false, hasParent: false }\">\r\n            </ng-container>\r\n        </ng-template>\r\n        <ng-template #notSelectedBlock>\r\n            <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\r\n            <ng-template #notEmptyBlock>\r\n                <ng-container [ngSwitch]=\"type\">\r\n                    <ng-container *ngSwitchCase=\"'link'\">\r\n                        <a [id]=\"key\" class=\"color-link body-sm pepperi-report-input\"\r\n                            [ngClass]=\"{'disable': (disabled && value === '')}\" *ngIf=\"formattedValue != null\"\r\n                            title=\"{{ formattedValue }}\" target=\"_blank\"\r\n                            href=\"{{ value ? value : formattedValue }}\">{{ formattedValue }}</a>\r\n                    </ng-container>\r\n                    <ng-container *ngSwitchDefault>\r\n                        <span [id]=\"key\" class=\"body-sm pepperi-report-input\" [ngClass]=\"{'readonly': disabled}\"\r\n                            title=\"{{ formattedValue }}\" [ngStyle]=\"{ color: textColor }\">{{ formattedValue }}</span>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-template>\r\n            <ng-template #emptyBlock>\r\n                <span [id]=\"key\">&nbsp;</span>\r\n            </ng-template>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType === LAYOUT_TYPE.Editmodal\">\r\n        <ng-container *ngTemplateOutlet=\"pepperiTemplate; context: { isFormView: true, hasParent: false }\">\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n</ng-container>","import {\r\n    Component, OnInit, OnChanges, Input, Output, EventEmitter,\r\n    ChangeDetectionStrategy, ElementRef, ViewChild, Renderer2, OnDestroy\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { LAYOUT_TYPE, CustomizationService } from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'pep-textbox',\r\n    templateUrl: './textbox.component.html',\r\n    styleUrls: ['./textbox.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PepperiTextboxComponent implements OnChanges, OnInit, OnDestroy {\r\n    @Input() key = '';\r\n    @Input() value = '';\r\n    @Input() formattedValue = '';\r\n    @Input() label = '';\r\n    @Input() placeholder = '';\r\n    @Input() type = 'text';\r\n    @Input() required = false;\r\n    @Input() disabled = false;\r\n    @Input() readonly = false;\r\n    @Input() maxFieldCharacters: number;\r\n    @Input() textColor = '';\r\n    @Input() xAlignment = '0';\r\n    @Input() rowSpan = 1;\r\n    @Input() lastFocusField: any;\r\n    @Input() minValue = NaN;\r\n    @Input() maxValue = NaN;\r\n\r\n    controlType = 'textbox';\r\n\r\n    @Input() form: FormGroup = null;\r\n    @Input() isActive = false;\r\n    @Input() showTitle = true;\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n    @Input() parentFieldKey: string = null;\r\n\r\n    @Output() valueChanged: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() formValidationChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n    standAlone = false;\r\n    isInEditMode = false;\r\n    isFocus = false;\r\n\r\n    constructor(\r\n        public fb: FormBuilder,\r\n        private customizationService: CustomizationService,\r\n        private renderer: Renderer2,\r\n        private element: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.form === null) {\r\n            this.standAlone = true;\r\n\r\n            this.minValue = isNaN(this.minValue) && !isNaN(this.maxValue) ? 0 : this.minValue;\r\n            this.maxValue = isNaN(this.maxValue) && !isNaN(this.minValue) ? 99999 : this.maxValue;\r\n            this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled,\r\n                this.maxFieldCharacters, this.type, false, true, this.minValue, this.maxValue);\r\n            this.formattedValue = this.formattedValue || this.value;\r\n\r\n            this.renderer.addClass(this.element.nativeElement, CustomizationService.STAND_ALONE_FIELD_CLASS_NAME);\r\n        }\r\n\r\n        this.readonly = this.type === 'duration' ? true : this.readonly; // Hack until we develop Timer UI for editing Duration field\r\n    }\r\n\r\n    ngOnChanges(changes: any): void {\r\n        this.readonly = this.type === 'duration' ? true : this.readonly; // Hack until we develop Timer UI for editing Duration field\r\n\r\n        const self = this;\r\n        setTimeout(() => {\r\n            if (self.lastFocusField) {\r\n                self.lastFocusField.focus();\r\n                self.lastFocusField = null;\r\n            } else {\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.valueChanged) {\r\n            this.valueChanged.unsubscribe();\r\n        }\r\n\r\n        if (this.formValidationChanged) {\r\n            this.formValidationChanged.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onFocus(e: any): void {\r\n        this.isFocus = true;\r\n    }\r\n\r\n    onBlur(e: any): void {\r\n        this.isFocus = false;\r\n\r\n        const value = e.target ? e.target.value : e;\r\n        if (value !== this.value) {\r\n            this.formattedValue = this.value = value;\r\n\r\n            // There is formControl.setValue in the onKeyUp so we don't need it here.\r\n            // this.propagateChange(value, e.relatedTarget);\r\n            this.valueChanged.emit({\r\n                apiName: this.key,\r\n                value,\r\n                lastFocusedField: e.relatedTarget\r\n            });\r\n            // return true; // What this is for? Tomer.p comment this in 16.4.\r\n        }\r\n\r\n        if (this.isInEditMode) {\r\n            this.isInEditMode = false;\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: any): void {\r\n        const value = event.target ? event.target.value : event;\r\n        this.customizationService.updateFormFieldValue(this.form, this.key, value, this.parentFieldKey);\r\n        this.formValidationChanged.emit(this.form.valid);\r\n    }\r\n\r\n    onKeyPress(event: any): any {\r\n        let inputChar = String.fromCharCode(event.charCode);\r\n        const e = event as KeyboardEvent;\r\n\r\n        if (\r\n            [8, 9, 13, 27, 190].indexOf(e.which) !== -1 ||\r\n            // Allow: Ctrl+A\r\n            (e.which === 65 && e.ctrlKey === true) ||\r\n            // Allow: Ctrl+C\r\n            (e.which === 67 && e.ctrlKey === true) ||\r\n            // Allow: Ctrl+V\r\n            (e.which === 86 && e.ctrlKey === true) ||\r\n            // Allow: Ctrl+X\r\n            (e.which === 88 && e.ctrlKey === true) /*||\r\n            // Allow: home, end, left, right\r\n            (e.which >= 35 && e.which <= 39)*/\r\n        ) {\r\n            // let it happen, don't do anything\r\n            return true;\r\n        }\r\n\r\n        switch (this.type) {\r\n            case 'int': {\r\n                const pattern = /[0-9\\+\\-\\ ]/;\r\n                if (!pattern.test(inputChar)) {\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case 'currency':\r\n            case 'real': {\r\n                const decPoint = '.';\r\n                const thousandSeparator = ',';\r\n                const pattern = /^\\d+(\\.\\d{1,9})?$/;\r\n                if (e.which === 46) {\r\n                    inputChar = inputChar + '0';\r\n                } else if (e.which === 44) {\r\n                    inputChar = inputChar + '000';\r\n                }\r\n                if (!pattern.test(event.target.value + inputChar)) {\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case 'phone': {\r\n                const pattern = /^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/;\r\n                if (!pattern.test(event.target.value + inputChar)) {\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case 'text': {\r\n                // if (this.maxFieldCharacters !== 0 && event.target.value.length >= this.maxFieldCharacters) {\r\n                //     e.preventDefault();\r\n                // }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    anchorClicked(): void {\r\n        const currentValue = this.value;\r\n        if (currentValue.trim().length > 0) {\r\n            switch (this.type) {\r\n                case 'email':\r\n                    window.open('mailto:' + currentValue, 'email');\r\n                    break;\r\n                case 'phone':\r\n                    window.open('tel:' + currentValue, 'tel');\r\n                    break;\r\n                case 'link':\r\n                    window.open(currentValue);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    cardTemplateClicked(event: any): void {\r\n        const self = this;\r\n        this.isInEditMode = true;\r\n\r\n        setTimeout(() => {\r\n            self.input.nativeElement.focus();\r\n        }, 0);\r\n    }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiIconModule, PepperiIconRegistry, pepperiIconSystemEdit } from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepperiTextboxIconModule } from '@pepperi-addons/ngx-lib/textbox-icon';\r\nimport { PepperiFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\n\r\nimport { PepperiTextboxComponent} from './textbox.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule,\r\n        PepperiFieldTitleModule,\r\n        PepperiTextboxIconModule\r\n    ],\r\n    exports: [PepperiTextboxComponent, ],\r\n    declarations: [PepperiTextboxComponent],\r\n})\r\nexport class PepperiTextboxModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemEdit\r\n        ]);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-lib/form/indicators.component.html","../../../projects/ngx-lib/form/indicators.component.ts","../../../projects/ngx-lib/form/internal-page.service.ts","../../../projects/ngx-lib/form/internal-list.component.html","../../../projects/ngx-lib/form/internal-list.component.ts","../../../projects/ngx-lib/form/internal-page.component.html","../../../projects/ngx-lib/form/internal-page.component.ts","../../../projects/ngx-lib/form/field-generator.component.html","../../../projects/ngx-lib/form/field-generator.component.ts","../../../projects/ngx-lib/form/form.component.html","../../../projects/ngx-lib/form/form.component.ts","../../../projects/ngx-lib/form/form.module.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","i0.ɵɵelementContainerStart","i0.ɵɵelement","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","i0.ɵɵproperty","PepperiIndicatorsComponent","this","controlType","layoutType","LAYOUT_TYPE","PepperiTable","selectors","inputs","key","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtemplate","i0.ɵɵelementEnd","PepperiInternalPageService","httpService","parentId","additionalApiName","transactionUrl","prototype","getBaseParentUrl","objectId","getChildren","callbackFunc","body","JSON","stringify","TransactionUID","SearchCode","searchCode","AdditionalApiName","ParentTransactionLineID","ViewType","viewType","moreParams","url","postWapiApiCall","subscribe","res","error","initDetails","getWapiApiCall","changeChildrenViewType","changeAdditionalApiName","childPlusClick","itemId","fieldApiName","TransactionLineUID","FieldApiName","childMinusClick","childValueChanged","FieldValue","i0","ɵɵinject","i11","HttpService","factory","ɵfac","i0.ɵɵtext","i0.ɵɵtextInterpolate","i0.ɵɵclassMapInterpolate1","i0.ɵɵpropertyInterpolate","i0.ɵɵtextInterpolate1","i0.ɵɵlistener","ɵɵpureFunction3","_c4","field_r12","ApiName","ctx_r11","pressedColumn","j_r13","uiControl","ControlFields","$event","ɵɵrestoreView","_r23_1","ɵɵnextContext","onListHeaderMouseEnter","onListHeaderMouseLeave","onListResize","i0.ɵɵelementContainer","_r34_1","pepperiObjectInput_r28","$implicit","onTableRowMouseLeave","Data","UID","Type","onCustomizeFieldClick","onCustomizeFieldMenuClicked","itemClicked","ɵɵpureFunction2","_c8","ctx_r31","calculatedObjectHeight","showItems","firstFieldAsLink","disabled","IsEditable","disableSelectionItems","listType","SEPARATOR","selectedItemId","hoveredItemId","isTouchDevice","pageType","VIEW_TYPE","_r45_1","onCardMouseLeave","i0.ɵɵclassMap","ctx_r32","checkForChanges","isCardView","getThumbnailsLayout","ctx_r3","trackByFunc","PepperiInternalListComponent","element","layoutService","cd","renderer","_this","currentListTypeTranslation","noDataFoundMsg","hideAllSelectionInMulti","top","supportResizing","parentScroll","isPrinting","totalsRow","notifyThumbnailClicked","EventEmitter","notifyFieldClicked","notifyMenuItemClicked","notifyValueChanged","notifySelectAllSingleActionClicked","notifySingleActionClicked","notifyListLoad","totalRows","isTable","hasColumnWidthOfTypePercentage","items","itemsCounter","nativeWindow","lockEvents","containerWidth","startX","startWidth","tableStartWidth","isUserSelected","useVirtualScroll","onResize$","pipe","delay","size","screenSize","window","ngOnInit","ngOnChanges","changes","setContainerWidth","ngOnDestroy","unsubscribe","style","getComputedStyle","nativeElement","parentElement","containerFluidSpacing","parseInt","paddingLeft","paddingRight","parentContainer","rowHeaderWidthToSub","clientHeight","offsetWidth","removeTable","cleanItems","toggleItems","isVisible","updateScrollItems","startIndex","endIndex","loadInChunks","scrollItems","slice","getUniqItemId","itemType","setLayout","self","forEach","cf","ColumnWidth","FieldType","FIELD_TYPE","Image","Signature","NumberIntegerQuantitySelector","NumberRealQuantitySelector","NumberIntegerForMatrix","NumberRealForMatrix","Package","Layout","XAlignment","detectChanges","calcColumnsWidth","Date","getTime","filter","ColumnWidthType","totalFixedColsWidth","map","reduce","sum","current","innerWidth","totalCalcColsWidth","totalColsWidth","index","calcColumnWidthPercentage","uiControlField","calcColumnWidth","Math","floor","calcTitleColumnWidthString","calcColumnWidthString","setStyle","currentFixedWidth","initResizeData","onListResizeStart","event","apiName","x","target","closest","noVirtualScrollCont","widthToAdd","isRtl","onListResizeEnd","$","srcElement","parents","self_1","setTimeout","onListChange","start","end","calculatedChildHeight","onListLoad","emit","getParentContainer","onValueChanged","valueChanged","customizeFieldClickedData","getIsDisabled","pepperiObjectInput","IsSelectableForActions","e","objectSingleData","toString","onTableRowMouseEnter","uniqItemId","onCardMouseEnter","PepperiCard","winResize","item","Array","getUIControl","initListData","itemClass","Table","Card","scrollTo","updateListItems","updateListItem","data","findIndex","getIsItemEditable","uid","getItemDataByID","_a","find","ɵɵdirectiveInject","ElementRef","LayoutService","ChangeDetectorRef","Renderer2","viewQuery","ɵɵresolveWindow","_r24_1","PepperiInternalPageComponent","fb","pepperiInternalPageService","customizationService","elementRef","changeDetectorRef","hasHeightLimit","PepperiForm","childChanged","childClicked","childModal","isShown","childData","additionalApiNames","currentAdditionalApiName","focusedQS","fieldIdWithFocus","columnWidth","coverChildTable","currentViewType","sumOfMinColWidth","totalRowsWidth","viewWidth","viewHeight","displayQSbtns","selectedApiName","showSort","defaultRowSpan","fillData","view","matrixTemplate","createEmbeddedView","orgCont","clear","modalCont","insert","buffer","Rows","_b","_c","childDataRow","osd","ObjectSingleData","push","isTableView","Line","customList","TotalRows","getItemClass","setTotalsRow","childrenCount","rowsToAdd","isMatrixView","isFlatMatrixView","formRowHeight","calculateFormFieldHeight","field","rowSpan","Key","maxRow","max","apply","f","Y","Height","rowSpanToAdd","calculateCardRowsHeight","rowsToAddHeight","calculateTableRowsHeight","tableRowsHeight","UIControl","minFieldWidth","mmToPx","setViewCover","markForCheck","fillChildData","AdditionalApiNames","mm","height","viewTypeKey","rows","childViewTypes","vt","scrollTop","currentViewTypeTitle","Value","numofrows","matrixCont","css","showMatrixDialog","resViewTypes","Default","viewTypeRow","loadLastAdditionalApiName","daa","sessionStorage","getItem","CURRENT_ADDITIONAL_API_NAME","parse","resize","row","updateChanges","setItem","totalCol","col","Fields","CalculatedInt","NumberInteger","CalculatedReal","NumberReal","e_5","listItem","num","parseFloat","isNaN","elementToUpdate","setValueCallback","id","onCustomizeObjectChanged","customizeObjectChangedData","handledEvent","boundSetValueCallback","bind","ControlType","Id","fieldClickEvent","ctx_r0","formattedValue","label","required","readonly","xAlignment","groupFields","_r21_1","ctx_r1","isActive","showTitle","ctx_r2","type","additionalValue","textColor","minValue","maxValue","ctx_r4","form","_r28_1","ctx_r5","options","indicatorsField","menuField","hasCampaignField","sizeLimitMB","_r31_1","ctx_r6","referenceObjectInternalType","onMenuItemClicked","ctx_r7","_r37_1","onFormValidationChanged","onClick","ctx_r8","lastFocusField","alowDecimal","notificationInfo","ctx_r9","maxFieldCharacters","_r43_1","ctx_r10","ctx_r12","ctx_r13","_r50_1","ctx_r14","placeholder","ctx_r15","_r53_1","onChildChanged","ctx_r16","i3","FormBuilder","CustomizationService","ViewContainerRef","PepperiFieldGeneratorComponent","formValidationChanged","elementClicked","notifyChildClicked","defineProperty","formControl","get","valid","touched","dirty","fieldClicked","fieldToEdit","onChildClick","_r11_1","onChildClicked","matrixIsLast","field_r8","colSpan","rowHeight","formGutterSize","_r22_1","ctx_r20","field_r19","outputs","features","ɵɵNgOnChangesFeature","ɵɵpureFunction1","_c0$3","cardGutterSize","_c1$2","_r39_1","ctx_r37","field_r35","_c3$2","ctx_r34","uiControlHeader","j_r36","_r29","_r31","_r48_1","ctx_r46","field_r44","isLocked","_c4$2","BackgroundColor","_c5$2","ctx_r54","field_r52","ctx_r55","ctx_r56","ctx_r57","ctx_r58","_r71_1","ctx_r59","_c6$1","_r80","_r82","_r75","_r77","_c2$2","PepperiFormComponent","dialogService","translate","differs","isReport","canEditObject","fields","columns","hasMenuFloatingOnOtherField","indicatorsDataField","shouldReloadForm","jsonLib","differ","convertAddressFields","controlField","addressFields","customField","toLowerCase","indexOf","PepperiTextboxField","Enabled","hidden","FormattedValue","yAlignment","YAlignment","order","PepperiSelectField","OptionalValues","sort","n1","n2","isMatrixField","apiNameToCheck","doesFieldHavaFloatingField","floatingField","hasFloatingField","X","Width","getOptionsForCustomField","dataField","ReadOnly","Title","accessory","Accessory","Hidden","Mandatory","AdditionalValue","undefined","MaxFieldCharacters","MinValue","MaxValue","TextColor","NotificationInfo","convertToCustomField","TransactionItemType","option","includes","PepperiMenuField","InternalLink","PepperiQuantitySelectorField","Indicators","InternalPage","Address","canEditGroupObject","GroupFields","PepperiAddressField","PepperiIndicatorsField","PepperiInternalPageField","Link","Button","PepperiButtonField","Attachment","PepperiAttachmentField","PepperiSignatureField","ImageURL","PepperiImageField","Images","PepperiImagesField","Email","Phone","Duration","TextBox","LimitedLengthTextBox","TextHeader","CalculatedString","MapDataString","TextArea","PepperiTextareaField","RichTextHTML","PepperiRichHtmlTextareaField","LimitedDate","CalculatedDate","DateAndTime","PepperiDateField","MapDataInt","Percentage","Currency","MapDataReal","Sum","Totals","Boolean","CalculatedBool","PepperiCheckboxField","BooleanText","ComboBox","EmptyComboBox","MapDataDropDown","MultiTickBox","MultiTickBoxToComboBox","EmptyMultiTickBox","GuidReferenceType","referenceObjectType","ReferenceObjectType","referenceObjectSubType","ReferenceObjectSubType","ReferenceObjectInternalType","ListOfObjects","Separator","PepperiSeparatorField","getFieldFormattedValue","fieldFormattedValue","toControlGroup","group","subGroup_1","groupField","Validators","nullValidator","validators","getValidatorsForField","showFormValidationMessage","emptyMandatoryFieldsMsg","notValidFieldsMsg","fields_1","fields_1_1","trim","instant","title","DialogData","content","contentType","DialogDataType","Html","openDefaultDialog","themeVars","getThemeVariables","getNumberThemeVariable","FORM_SPACEING_KEY","CARD_SPACEING_KEY","ngDoCheck","diff","updateForm","currentValue","previousValue","initForm","getUiControlFields","initFieldsStructure","cardFieldHeight","CARD_FIELD_HEIGHT_KEY","rowFieldHeight","FORM_FIELD_HEIGHT_KEY","rowFieldTitleHeight","FORM_FIELD_TITLE_HEIGHT_KEY","Editmodal","fields_2","fields_2_1","doesfieldExistIn","j","fields_3","fields_3_1","currentField","PepperiPlaceholderField","f1","f2","setForm","isForUpdate","allFieldsAreReadOnly","_f","_g","_h","e_6","_j","currentGroupField","updateFormField","_d","_e","isFormValid","convertCustomFields","cleanLastFocusedField","this_1","hasFocus","lastFocusedField","updateField","customGroupField","hasGroupFocus","e_8","ReloadForm","getFormControlById","setSpecialFields","controlFields","dataFields","controlFields_1","controlFields_1_1","dataFields_1","dataFields_1_1","df","menuDataField","hasCampaignDataField","controlFields_2","controlFields_2_1","matrixFields","matrixAlreadyPlaced","getInternalLinkHref","ReferenceType","MainAction","TransactionItemCustomMenu","isEditModal","PepperiObjectChangedData","clickedUiControlField","PepperiFieldClickedData","eventWhich","otherData","fieldType","ExtraInfo","ItemType","hrefStr","i1$1","DialogService","i3$2","TranslateService","KeyValueDiffers","pepperiComponentsModules","PepperiAddressModule","PepperiAttachmentModule","PepperiCheckboxModule","PepperiDateModule","PepperiImageModule","PepperiImagesFilmstripModule","PepperiInternalButtonModule","PepperiMenuModule","PepperiQuantitySelectorModule","PepperiRichHtmlTextareaModule","PepperiSelectModule","PepperiSeparatorModule","PepperiSignatureModule","PepperiTextareaModule","PepperiTextboxModule","pepperiIconRegistry","registerIcons","pepperiIconIndicatorDotPlaceholder","PepperiFormModule","i1","PepperiIconRegistry","imports","CommonModule","ReactiveFormsModule","FormsModule","MatCommonModule","MatGridListModule","MatIconModule","MatMenuModule","SignaturePadModule","PepperiModule","PepperiDialogModule","PepperiIconModule","declarations","exports","i2","NgClass","NgComponentOutlet","NgForOf","NgIf","NgTemplateOutlet","NgStyle","NgSwitch","NgSwitchCase","NgSwitchDefault","NgPlural","NgPluralCase","ɵangular_packages_forms_forms_y","NgSelectOption","ɵangular_packages_forms_forms_x","DefaultValueAccessor","NumberValueAccessor","RangeValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","SelectMultipleControlValueAccessor","RadioControlValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","MinLengthValidator","MaxLengthValidator","PatternValidator","CheckboxRequiredValidator","EmailValidator","FormControlDirective","FormGroupDirective","FormControlName","FormGroupName","FormArrayName","NgModel","NgModelGroup","NgForm","i4$1","Dir","i5","MatGridList","MatGridTile","MatGridTileText","i6","MatLine","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","i7","MatIcon","i8$1","CdkScrollable","i9","_MatMenu","MatMenuItem","MatMenuTrigger","MatMenuContent","i10","SignaturePad","ButtonBlurDirective","MenuBlurDirective","RtlClassDirective","RtlDirectionDirective","AttachDirective","TargetDirective","TranslateDirective","PepperiIconComponent","i3$1","PepperiAddressComponent","i4","PepperiAttachmentComponent","i5$1","PepperiCheckboxComponent","i6$1","PepperiDateComponent","i8","PepperiImageComponent","i7$1","PepperiImagesFilmstripComponent","i9$1","PepperiInternalButtonComponent","i10$1","PepperiMenuComponent","i11$1","PepperiQuantitySelectorComponent","i12","PepperiRichHtmlTextareaComponent","i13","PepperiSelectComponent","i14","PepperiSeparatorComponent","i15","PepperiSignatureComponent","i16","PepperiTextareaComponent","i17","PepperiTextboxComponent","AsyncPipe","UpperCasePipe","LowerCasePipe","JsonPipe","SlicePipe","DecimalPipe","PercentPipe","TitleCasePipe","CurrencyPipe","DatePipe","I18nPluralPipe","I18nSelectPipe","KeyValuePipe","CapitalizePipe","EncodePipe","EscapePipe","ReplaceLineBreaks","DateFormatter","DateStringFormatter","SafeHtmlPipe","SafePipe","SplitUppercase","ToNumber","TranslatePipe"],"mappings":";;;;;;;;;;;;;;oFAyG6BA,OAAOC,gBAYpBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEE,KAAKN,GACrB,GAAIA,GAAyB,iBAAbA,EAAEO,OAAqB,MAAO,CAC1CC,KAAM,WAEF,OADIR,GAAKK,GAAKL,EAAEO,SAAQP,OAAI,GACrB,CAAES,MAAOT,GAAKA,EAAEK,KAAMK,MAAOV,KAG5C,MAAM,IAAIW,UAAUV,EAAI,0BAA4B,mCAqE/BJ,OAAOC,gCClM5Bc,EAAAA,wBAAAA,GACIC,EAAAA,UAAAA,EAAAA,WAAAA,GACJC,EAAAA,gDADsEC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,0BAEtEJ,EAAAA,wBAAAA,GACIC,EAAAA,UAAAA,EAAAA,WAAAA,GACJC,EAAAA,wECGJG,EASI,WALAC,KAAAC,YAAc,aAELD,KAAAE,WAA0BC,EAAAA,YAAYC,aAC/CJ,KAAAG,YAAcA,EAAAA,8CAPLJ,qCAAAA,EAA0BM,UAAA,CAAA,CAAA,mBAAAC,OAAA,CAAAC,IAAA,MAAAhB,MAAA,QAAAW,WAAA,cAAAM,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,uBAAA,EAAA,WAAA,CAAA,EAAA,QAAA,WAAA,CAAA,EAAA,QAAA,CAAA,OAAA,4BAAA,EAAA,YAAA,OAAA,EAAA,QAAA,CAAA,OAAA,4BAAA,EAAA,YAAA,SAAAC,SAAA,SAAAC,EAAAC,SDTvCC,EAAAA,eAAAA,EAAAA,MAAAA,GACIC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GAGAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GAGJC,EAAAA,sBAPkClB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,EAAAA,aAAAA,EAAAA,YAAAA,eAChBD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,MAAAA,EAAAA,MAAAA,KAAAA,EAAAA,MAAAA,MAAAA,MAGAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,iCAAAA,EAAAA,MAAAA,MAAAA,EAAAA,MAAAA,KAAAA,EAAAA,MAAAA,MAAAA,KAAAA,QAAAA,0gBEAlB,IAAAmB,EAAA,WASI,SAAAA,EAAoBC,GAAAlB,KAAAkB,YAAAA,EALZlB,KAAAmB,SAAW,IAGZnB,KAAAoB,kBAAoB,GAGvBpB,KAAKqB,eAAiB,kDAG1BJ,EAAAK,UAAAC,iBAAA,WAEI,MADY,GAAGvB,KAAKqB,eAAiBrB,KAAKwB,SAAQ,eAAexB,KAAKmB,SAAQ,KAIlFF,EAAAK,UAAAG,YAAA,SAAYC,GACR,IAAMC,EAAOC,KAAKC,UAAU,CACxBC,eAAgB9B,KAAKwB,SACrBO,WAAY/B,KAAKgC,WACjBC,kBAAmBjC,KAAKoB,kBACxBc,wBAAyBlC,KAAKmB,SAC9BgB,SAAUnC,KAAKoC,WAIbC,EAAarC,KAAKoB,kBAAkB/B,OAAS,EAC5CW,KAAKoB,kBAAiB,IAAIpB,KAAKoC,SAClC,MAAMpC,KAAKoC,SAETE,EAAStC,KAAKuB,mBAAkB,SAASc,EAE/CrC,KAAKkB,YAAYqB,gBACbD,EACAX,GAAMa,WACF,SAACC,GAAUf,EAAae,MACxB,SAACC,OACD,gBAIZzB,EAAAK,UAAAqB,YAAA,SAAYnB,EAAkBL,EAAkBa,EAAoBN,GAC3DF,GAAaL,IAIlBnB,KAAKwB,SAAWA,EAChBxB,KAAKmB,SAAWA,EAChBnB,KAAKgC,WAAaA,EAElBhC,KAAKkB,YAAY0B,eACV5C,KAAKuB,mBAAkB,aAAaiB,WACnC,SAACC,GAAUf,EAAae,MACxB,SAACC,OACD,iBAIZzB,EAAAK,UAAAuB,uBAAA,SAAuBT,EAAkBV,GACrC1B,KAAKoC,SAAWA,EAChBpC,KAAKyB,YAAYC,IAGrBT,EAAAK,UAAAwB,wBAAA,SAAwB1B,EAA2BM,GAC/C1B,KAAKoB,kBAAoBA,EACzBpB,KAAKyB,YAAYC,IAGrBT,EAAAK,UAAAyB,eAAA,SAAeC,EAAgBC,EAAsBvB,GACjD,IAAMC,EAAOC,KAAKC,UAAU,CACxBC,eAAgB9B,KAAKwB,SACrBO,WAAY/B,KAAKgC,WACjBE,wBAAyBlC,KAAKmB,SAC9B+B,mBAAoBF,EACpBG,aAAcF,EACdd,SAAUnC,KAAKoC,WAGnBpC,KAAKkB,YAAYqB,gBACVvC,KAAKuB,mBAAkB,iBAC1BI,GAAMa,WACF,SAACC,GAAUf,EAAae,MACxB,SAACC,OACD,gBAIZzB,EAAAK,UAAA8B,gBAAA,SAAgBJ,EAAgBC,EAAsBvB,GAClD,IAAMC,EAAOC,KAAKC,UAAU,CACxBC,eAAgB9B,KAAKwB,SACrBO,WAAY/B,KAAKgC,WACjBE,wBAAyBlC,KAAKmB,SAC9B+B,mBAAoBF,EACpBG,aAAcF,EACdd,SAAUnC,KAAKoC,WAGnBpC,KAAKkB,YAAYqB,gBACVvC,KAAKuB,mBAAkB,iBAC1BI,GAAMa,WACF,SAACC,GAAUf,EAAae,MACxB,SAACC,OACD,gBAIZzB,EAAAK,UAAA+B,kBAAA,SAAkBL,EAAgBC,EAAsB1D,EAAemC,GACnE,IAAMC,EAAOC,KAAKC,UAAU,CACxBC,eAAgB9B,KAAKwB,SACrBO,WAAY/B,KAAKgC,WACjBE,wBAAyBlC,KAAKmB,SAC9B+B,mBAAoBF,EACpBG,aAAcF,EACdK,WAAY/D,EACZ4C,SAAUnC,KAAKoC,WAGnBpC,KAAKkB,YAAYqB,gBACVvC,KAAKuB,mBAAkB,gBAC1BI,GAAMa,WACF,SAACC,GAAUf,EAAae,MACxB,SAACC,OACD,kBA5HhB,oCAAazB,GAA0BsC,EAAAC,SAAAC,EAAAC,mDAA1BzC,EAA0B0C,QAA1B1C,EAA0B2C,kGCJvClE,EAAAA,wBAAAA,GACIoB,EAAAA,eAAAA,EAAAA,MAAAA,GAAqB+C,EAAAA,OAAAA,GAAoB7C,EAAAA,eAC7CpB,EAAAA,sDADyBC,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,0CAeLhD,EAAAA,eAAAA,EAAAA,QAAAA,IAGI+C,EAAAA,OAAAA,GACJ7C,EAAAA,uDAHI+C,EAAAA,uBAAAA,kDAAAA,EAAAA,OAAAA,WAAAA,IAD6BC,EAAAA,sBAAAA,KAAAA,EAAAA,SAE7BA,EAAAA,sBAAAA,QAAAA,EAAAA,OACAnE,EAAAA,UAAAA,GAAAoE,EAAAA,mBAAAA,IAAAA,EAAAA,MAAAA,+BAEJnD,EAAAA,eAAAA,EAAAA,QAAAA,IACgD+C,EAAAA,OAAAA,EAAAA,KAAM7C,EAAAA,uDADrBgD,EAAAA,sBAAAA,KAAAA,EAAAA,6DAGjClD,EAAAA,eAAAA,EAAAA,MAAAA,IACIoD,EAAAA,WAAAA,aAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,kBAAAA,EAAAA,EAAAA,YACApD,EAAAA,eAAAA,EAAAA,YACInB,EAAAA,UAAAA,EAAAA,WAAAA,IACJqB,EAAAA,eACJA,EAAAA,gJAnBJF,EAAAA,eAAAA,EAAAA,MAAAA,IAMIC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,IAKAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,IAGAA,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,IAMJC,EAAAA,sEAnBIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,EAAAA,4BAAAA,CAAuD,UAAAyD,EAAAY,gBAAA,EAAAC,EAAAC,EAAAC,UAAAC,EAAAC,cAAA,IAAAC,EAAAA,KAAA,MAAAF,EAAAG,WAAA,MAAAH,EAAAG,UAAAC,cAAA,KAAAJ,EAAAG,UAAAC,cAAAtF,QAAA,IAKhDQ,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,IAAAA,EAAAA,OAKAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,IAAAA,EAAAA,OAGFD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,6HApBrBgB,EAAAA,eAAAA,EAAAA,MAAAA,EAAAA,GACsEoD,EAAAA,WAAAA,WAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,KAAAA,CAAmC,cAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAC,GAAAvB,EAAAwB,cAAA,GAAAC,uBAAAJ,KAAnCV,CAAmC,cAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAC,GAAAvB,EAAAwB,cAAA,GAAAE,uBAAAL,KAAnCV,CAAmC,aAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAC,GAAAvB,EAAAwB,cAAA,GAAAG,aAAAN,MAGrG9D,EAAAA,eAAAA,EAAAA,WAAAA,IACIA,EAAAA,eAAAA,EAAAA,YACIC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,GAAAA,MAAAA,IAqBJC,EAAAA,eACJA,EAAAA,eACJA,EAAAA,gDA5BIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,MAAAA,EAAAA,eAKaD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,MAAAA,EAAAA,UAAAA,KAAAA,EAAAA,UAAAA,qCA0BbqF,EAAAA,mBAAAA,wBAEJA,EAAAA,mBAAAA,wFAnCJzF,EAAAA,wBAAAA,GACIqB,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GA+BAD,EAAAA,eAAAA,EAAAA,MAAAA,EAAAA,GACIC,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GACJC,EAAAA,eACAD,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GACJnB,EAAAA,4FAnCSC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,SA+BqBD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,UACRD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,mBAAAA,GAEJD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,mBAAAA,+LAKVJ,EAAAA,wBAAAA,GACIoB,EAAAA,eAAAA,EAAAA,MAAAA,IACIoD,EAAAA,WAAAA,cAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,qBAAAA,EAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,IAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,QAAAA,CAA0G,cAAA,SAAAU,GAAArB,EAAAsB,cAAAO,GAAA,IAAAC,EAAA9B,EAAAwB,gBAAAO,UAAA,OAAA/B,EAAAwB,cAAA,GAAAQ,qBAAAX,EAAA,MAAAS,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,IAAA,MAAAJ,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,SAM1G5E,EAAAA,eAAAA,EAAAA,WAAAA,IAEIA,EAAAA,eAAAA,EAAAA,WAAAA,IAOUoD,EAAAA,WAAAA,sBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAA6C,sBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAO,GAAA7B,EAAAwB,cAAA,GAAAY,sBAAAf,KAA7CV,CAA6C,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAO,GAAA7B,EAAAwB,cAAA,GAAAa,4BAAAhB,KAA7CV,CAA6C,SAAA,SAAAU,GAAArB,EAAAsB,cAAAO,GAAA,IAAAC,EAAA9B,EAAAwB,gBAAAO,UAAA,OAAA/B,EAAAwB,cAAA,GAAAc,YAAAjB,EAAAS,MAIvDrE,EAAAA,eACJA,EAAAA,eACJA,EAAAA,eACJpB,EAAAA,uFApBQC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,KAAAA,EAAAA,WAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,QAAAA,EAAAA,gBAAAA,CAEM,UAAAyD,EAAAuC,gBAAA,GAAAC,GAAAC,EAAAC,uBAAAD,EAAAE,WAAAb,EAAA,UAAA,WAGFxF,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,GAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,kBACUD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,kBAAAA,EAAAA,gBAAAA,CAAmC,kBAAAkG,EAAAtB,UAAnC5E,CAAmC,mBAAAkG,EAAAG,iBAAnCrG,CAAmC,qBAAAuF,EAAnCvF,CAAmC,iBAAAkG,EAAAI,WAAA,MAAAf,EAAA,KAAAA,EAAAgB,YAAnCvG,CAAmC,WAAAkG,EAAAxE,SAAnC1B,CAAmC,WAAAkG,EAAA7E,SAAnCrB,CAAmC,aAAAkG,EAAAhE,WAAnClC,CAAmC,aAAAkG,EAAAM,sBAAnCxG,CAAmC,aAAAkG,EAAA7F,YAAAC,aAAnCN,CAAmC,WAAAkG,EAAAO,SAAnCzG,CAAmC,aAAA,MAAAuF,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,KAAAO,EAAAQ,WAAA,MAAAnB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,QAAAM,EAAAS,iBAAA,MAAApB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,KAAAO,EAAAQ,WAAA,MAAAnB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,QAAAM,EAAAU,iBAAAV,EAAAW,cAAnC7G,CAAmC,WAAAkG,EAAAY,eC3CrDC,0GD2DJnH,EAAAA,wBAAAA,GACIoB,EAAAA,eAAAA,EAAAA,MAAAA,IACIoD,EAAAA,WAAAA,cAAAA,SAAAA,GAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,gBAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,iBAAAA,EAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,IAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,QAAAA,CAAsG,cAAA,SAAAU,GAAArB,EAAAsB,cAAAiC,GAAA,IAAAzB,EAAA9B,EAAAwB,gBAAAO,UAAA,OAAA/B,EAAAwB,cAAA,GAAAgC,iBAAAnC,EAAA,MAAAS,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,IAAA,MAAAJ,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,SAOtG5E,EAAAA,eAAAA,EAAAA,WAAAA,IAOUoD,EAAAA,WAAAA,sBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAA6C,sBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAiC,GAAAvD,EAAAwB,cAAA,GAAAY,sBAAAf,KAA7CV,CAA6C,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAiC,GAAAvD,EAAAwB,cAAA,GAAAa,4BAAAhB,KAA7CV,CAA6C,SAAA,SAAAU,GAAArB,EAAAsB,cAAAiC,GAAA,IAAAzB,EAAA9B,EAAAwB,gBAAAO,UAAA,OAAA/B,EAAAwB,cAAA,GAAAc,YAAAjB,EAAAS,MAIvDrE,EAAAA,eACJA,EAAAA,eACJpB,EAAAA,uFArBSC,EAAAA,UAAAA,GAAAmH,EAAAA,WAAAA,EAAAA,WAGDlH,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,KAAAA,EAAAA,WAAAA,MAAAA,GAAAA,MAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,QAAAA,EAAAA,eAAAA,EAAAA,YAAAA,CAGM,UAAAyD,EAAAuC,gBAAA,GAAAC,GAAAkB,EAAAhB,uBAAAgB,EAAAf,WAAAb,EAAA,UAAA,WAEIxF,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,qBAAAA,EAAAA,YAAAA,EAAAA,iBAAAA,CAA0D,kBAAAmH,EAAAC,gBAA1DpH,CAA0D,kBAAAmH,EAAAvC,UAA1D5E,CAA0D,qBAAAuF,EAA1DvF,CAA0D,aAAAmH,EAAAE,WAA1DrH,CAA0D,iBAAAmH,EAAAb,WAAA,MAAAf,EAAA,KAAAA,EAAAgB,YAA1DvG,CAA0D,WAAAmH,EAAAzF,SAA1D1B,CAA0D,WAAAmH,EAAA9F,SAA1DrB,CAA0D,aAAAmH,EAAAjF,WAA1DlC,CAA0D,aAAAmH,EAAAX,sBAA1DxG,CAA0D,aAAAmH,EAAAG,sBAA1DtH,CAA0D,WAAAmH,EAAAV,SAA1DzG,CAA0D,aAAA,MAAAuF,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,KAAAwB,EAAAT,WAAA,MAAAnB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,QAAAuB,EAAAR,iBAAA,MAAApB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAC,KAAAwB,EAAAT,WAAA,MAAAnB,GAAA,MAAAA,EAAAG,KAAA,KAAAH,EAAAG,KAAAE,QAAAuB,EAAAP,iBAAAO,EAAAN,cAA1D7G,CAA0D,WAAAmH,EAAAL,qCApChFlH,EAAAA,wBAAAA,GACIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GA0BAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAuBJnB,EAAAA,uDAjDkBC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,SA0BAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,QAAAA,EAAAA,mCA3BlBiB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,iCAAcjB,EAAAA,WAAAA,UAAAA,EAAAA,YAAAA,CAAoG,eAAAuH,EAAAC,wCAwD1GxG,EAAAA,eAAAA,EAAAA,MAAAA,IAEIA,EAAAA,eAAAA,EAAAA,SACI+C,EAAAA,OAAAA,GACJ7C,EAAAA,eACJA,EAAAA,sEAJIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,EAAAA,6BACOD,EAAAA,UAAAA,GAAAkE,EAAAA,uBAAAA,kCAAAA,EAAAA,OAAAA,WAAAA,IACHlE,EAAAA,UAAAA,GAAAoE,EAAAA,mBAAAA,IAAAA,EAAAA,UAAAA,GAAAA,gCALhBnD,EAAAA,eAAAA,EAAAA,MAAAA,IACIA,EAAAA,eAAAA,EAAAA,WAAAA,IACIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,IAMJC,EAAAA,eACJA,EAAAA,8CAPanB,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,MAAAA,EAAAA,UAAAA,KAAAA,EAAAA,UAAAA,yCAFbiB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,iCAAKjB,EAAAA,WAAAA,QAAAA,MAAAA,EAAAA,UAAAA,KAAAA,EAAAA,UAAAA,QAAAA,GAAAA,EAAAA,UAAAA,SAAAA,MAAAA,EAAAA,UAAAA,KAAAA,EAAAA,UAAAA,cAAAA,WCtFT,SAAY+G,GACRA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QAHJ,CAAYA,KAAAA,GAAS,KAcrB,IAAAU,GAAA,WAyEI,SAAAA,EACYC,EACAC,EACAC,EACAC,GAJZ,IAAAC,EAAA5H,KACYA,KAAAwH,QAAAA,EACAxH,KAAAyH,cAAAA,EACAzH,KAAA0H,GAAAA,EACA1H,KAAA2H,SAAAA,EA5EH3H,KAAA6H,2BAA6B,GAC7B7H,KAAA8H,eAAiB,kBACjB9H,KAAA+H,yBAA0B,EAE1B/H,KAAAgI,KAAO,EACPhI,KAAAuG,SAAW,GACXvG,KAAAwB,SAAW,IACXxB,KAAAmB,SAAW,IACXnB,KAAAgC,WAAa,IAEbhC,KAAAmG,kBAAmB,EACnBnG,KAAAiI,iBAAkB,EAClBjI,KAAAkI,aAAiC,KACjClI,KAAAoG,UAAW,EACXpG,KAAAmI,YAAa,EACbnI,KAAAsG,uBAAwB,EACxBtG,KAAAE,WAA0B,KAC1BF,KAAA4G,SAAW,GACX5G,KAAAoI,UAAY,GACZpI,KAAA2G,eAAgB,EAEf3G,KAAAqI,uBAAyD,IAAIC,EAAAA,aAC7DtI,KAAAuI,mBAAwC,IAAID,EAAAA,aAC5CtI,KAAAwI,sBAA2C,IAAIF,EAAAA,aAC/CtI,KAAAyI,mBAA6D,IAAIH,EAAAA,aACjEtI,KAAA0I,mCAAwD,IAAIJ,EAAAA,aAC5DtI,KAAA2I,0BAA+C,IAAIL,EAAAA,aAEnDtI,KAAA4I,eAAoC,IAAIN,EAAAA,aAMlDtI,KAAAG,YAAcA,EAAAA,YAEPH,KAAA0E,UAAuB,KACvB1E,KAAA6I,WAAa,EAEpB7I,KAAA8I,SAAU,EACF9I,KAAA+I,gCAAiC,EAClC/I,KAAAgJ,MAAiC,KACxChJ,KAAAmH,YAAa,EACLnH,KAAAiJ,aAAe,EACvBjJ,KAAAkG,WAAY,EAGLlG,KAAAwG,UAAY,IAEnBxG,KAAAkJ,aAAoB,KAEpBlJ,KAAAyG,eAAiB,GACjBzG,KAAA0G,cAAgB,GAER1G,KAAAmJ,YAAa,EACbnJ,KAAAoJ,eAAiB,EAOzBpJ,KAAAwE,cAAgB,GAChBxE,KAAAqJ,OAAS,EACTrJ,KAAAsJ,WAAa,EACbtJ,KAAAuJ,gBAAkB,EAElBvJ,KAAAwJ,gBAAiB,EACjBxJ,KAAAkH,gBAAuB,KACvBlH,KAAAyJ,kBAAmB,EASfzJ,KAAKyH,cAAciC,UACdC,KAAKC,EAAAA,MAAM,IACXpH,WAAU,SAAAqH,GACPjC,EAAKkC,WAAaD,KAE1B7J,KAAKkJ,aAAea,cAGxBxC,EAAAjG,UAAA0I,SAAA,WACIhK,KAAKoJ,eAAiB,GAG1B7B,EAAAjG,UAAA2I,YAAA,SAAYC,GACJlK,KAAKoJ,gBAAkB,GACvBpJ,KAAKmK,qBAIb5C,EAAAjG,UAAA8I,YAAA,WACQpK,KAAKyI,oBACLzI,KAAKyI,mBAAmB4B,cAGxBrK,KAAKuI,oBACLvI,KAAKuI,mBAAmB8B,cAGxBrK,KAAKwI,uBACLxI,KAAKwI,sBAAsB6B,cAG3BrK,KAAKqI,wBACLrI,KAAKqI,uBAAuBgC,eAIpC9C,EAAAjG,UAAA6I,kBAAA,WACI,IAGMG,EAAQP,OAAOQ,iBAAiBvK,KAAKwH,QAAQgD,cAAcC,eAE3DC,EAAwBC,SAASL,EAAMM,YAAa,IAAMD,SAASL,EAAMO,aAAc,IAEvFC,EAAkB9K,KAAKwH,QAAQgD,cAAcC,cAAcA,cAAgB,EAC7EzK,KAAKwH,QAAQgD,cAAcC,cAAcA,cAAgBzK,KAAKwH,QAAQgD,cAAcC,cAMlFM,EAAsBL,EAdG,GAWXI,EAAgBE,aATlB,IAS8ChL,KAAK6I,UAAY,GAAK,GAAK,GAI3F7I,KAAKoJ,eAAiB0B,EAAgBG,YAAcF,GAGxDxD,EAAAjG,UAAA4J,YAAA,WACIlL,KAAKmL,aACLnL,KAAK0E,UAAY,MAGb6C,EAAAjG,UAAA8J,YAAA,SAAYC,GAChBrL,KAAKkG,UAAYmF,EACjBrL,KAAKmJ,YAAckC,GAGf9D,EAAAjG,UAAAgK,kBAAA,SAAkBC,EAAYC,EAAUC,QAAA,IAAAA,IAAAA,GAAA,GAC5CzL,KAAK0L,YAAc1L,KAAKgJ,MAAM2C,MAAMJ,EAAYC,IAGpDjE,EAAAjG,UAAAsK,cAAA,SAAc5I,EAAgB6I,GAC1B,YAD0B,IAAAA,IAAAA,EAAA,IACnB7I,EAAShD,KAAKwG,UAAYqF,GAGrCtE,EAAAjG,UAAAwK,UAAA,WACI,IAAMC,EAAO/L,KACU,IAAnBA,KAAK6I,WACJ7I,KAAK0E,WACL1E,KAAK0E,UAAUC,eACwB,IAAxC3E,KAAK0E,UAAUC,cAActF,SAIjCW,KAAK0E,UAAUC,cAAcqH,SAAQ,SAACC,GACX,IAAnBA,EAAGC,cACHD,EAAGC,YAAc,KAGjBH,EAAKjD,SACJmD,EAAGE,YAAcC,EAAAA,WAAWC,OAEzBJ,EAAGE,YAAcC,EAAAA,WAAWE,WAC5BL,EAAGE,YAAcC,EAAAA,WAAWG,+BAC5BN,EAAGE,YAAcC,EAAAA,WAAWI,4BAC5BP,EAAGE,YAAcC,EAAAA,WAAWK,wBAC5BR,EAAGE,YAAcC,EAAAA,WAAWM,qBAC5BT,EAAGE,YAAcC,EAAAA,WAAWO,SACb,kBAAfV,EAAG3H,SACY,qBAAf2H,EAAG3H,UAEP2H,EAAGW,OAAOC,WAAa,MAI1B7M,KAAK0H,GAAc,WACpB1H,KAAK0H,GAAGoF,gBAIR9M,KAAKoJ,gBAAkB,GACvBpJ,KAAKmK,oBAGTnK,KAAK+M,mBACL/M,KAAKkH,iBAAkB,IAAI8F,MAAOC,YAG9B1F,EAAAjG,UAAAyL,iBAAA,WACJ,IACM1N,EAASW,KAAK0E,UAAUC,cAActF,OAW5C,GAPIW,KAAK8I,SACD9I,KAAK0E,WAAa1E,KAAK0E,UAAUC,gBACjC3E,KAAK+I,+BAAgH,IAA/E/I,KAAK0E,UAAUC,cAAcuI,QAAO,SAAAjB,GAAM,OAAuB,IAAvBA,EAAGkB,mBAAuB9N,SAK7GW,KAAK+I,+BAAgC,CACtC,IAAMqE,EAAsBpN,KAAK0E,UAAUC,cACtC0I,KAAI,SAAApB,GAAM,OAdG,KAcHA,EAAGC,eACboB,QAAO,SAACC,EAAKC,GAAY,OAAAD,EAAMC,KAEhCzD,OAAO0D,WAAaL,IACpBpN,KAAK+I,gCAAiC,GAI9C,IAAI2E,EAAqB,EAGzB,GAAI1N,KAAK+I,+BAAgC,CAGrC,IAFA,IAAM4E,EAAyB3N,KAAK0E,UAAUC,cAAc0I,KAAI,SAAApB,GAAM,OAAAA,EAAGC,eAAaoB,QAAO,SAACC,EAAKC,GAAY,OAAAD,EAAMC,KAE5GI,EAAQ,EAAGA,EAAQvO,EAAQuO,IAAS,CACzC,IACMC,EAA6B,IAAMF,GADnCG,EAAiC9N,KAAK0E,UAAUC,cAAciJ,IACM1B,YAE1E4B,EAAeC,gBAAkBC,KAAKC,MAAOjO,KAAKoJ,eAAiByE,EAA6B,KAE5FD,IAAUvO,EAAS,EACnByO,EAAeI,2BAA6BJ,EAAeK,sBACvD,eAAiBT,EAAqB,OAE1CI,EAAeI,2BAA6BJ,EAAeK,sBACvDL,EAAeC,gBAAkB,KACrCL,GAAsBI,EAAeC,iBAI7C/N,KAAK2H,SAASyG,SAASpO,KAAKwH,QAAQgD,cAAe,QAAS,eACzD,CACH,IAASoD,EAAQ,EAAGA,EAAQvO,EAAQuO,IAAS,CACzC,IAAME,EAAiC9N,KAAK0E,UAAUC,cAAciJ,GAC9DS,EAAoBL,KAAKC,MAhDjB,KAgDuBH,EAAe5B,aAEhD0B,IAAUvO,EAAS,GACnByO,EAAeI,2BAA6BG,EAAoB,KAChEP,EAAeK,sBAAwBE,EAAoB,EAAI,MAE/DP,EAAeI,2BAA6BJ,EAAeK,sBACvDE,EAAoB,KAG5BX,GAAsBW,EAG1BrO,KAAK2H,SAASyG,SAASpO,KAAKwH,QAAQgD,cAAe,QAASkD,EA3DjC,EA2D+E,QAI1GnG,EAAAjG,UAAAgN,eAAA,WACJtO,KAAKqJ,OAAS,EACdrJ,KAAKsJ,WAAa,EAClBtJ,KAAKuJ,gBAAkB,EACvBvJ,KAAKwE,cAAgB,IAGzB+C,EAAAjG,UAAAiN,kBAAA,SAAkBC,EAAOC,GACrBzO,KAAKwE,cAAgBiK,EACrBzO,KAAKqJ,OAASmF,EAAME,EACpB1O,KAAKsJ,WAAakF,EAAMG,OAAOC,QAAQ,kBAAkB3D,YAEzDjL,KAAKuJ,gBAAkBvJ,KAAK6O,oBAAoBrE,cAAcS,aAGlE1D,EAAAjG,UAAA4D,aAAA,SAAasJ,GACT,GAAIxO,KAAKwE,cAAcnF,OAAS,EAAG,CAC/B,IAAMyP,EAAa9O,KAAKyH,cAAcsH,QAAU/O,KAAKqJ,OAASmF,EAAME,EAAIF,EAAME,EAAI1O,KAAKqJ,OAGvF,GAAIrJ,KAAKsJ,WAAawF,GAAc,IAAMA,EAAa,EAAG,CAItD,IAHA,IAAMzP,EAASW,KAAK0E,UAAUC,cAActF,OACxCqO,EAAqB,EAEhBE,EAAQ,EAAGA,EAAQvO,EAAQuO,IAAS,CACzC,IAAME,EAAiC9N,KAAK0E,UAAUC,cAAciJ,GAEhEA,IAAUvO,EAAS,EAEfW,KAAK+I,+BACL+E,EAAeI,2BAA6BJ,EAAeK,sBACvD,eAAiBT,EAAqB,MAEtCI,EAAexJ,UAAYtE,KAAKwE,gBAChCsJ,EAAeC,gBAAkB/N,KAAKsJ,WAAawF,EACnDhB,EAAeI,2BAA6BJ,EAAeC,gBAAkB,KAC7ED,EAAeK,sBAAwBL,EAAeC,gBAAkB,EAAI,MAG7ED,EAAexJ,UAAYtE,KAAKwE,gBACvCsJ,EAAeC,gBAAkB/N,KAAKsJ,WAAawF,EACnDhB,EAAeI,2BAA6BJ,EAAeK,sBACvDL,EAAeC,gBAAkB,MAGzCL,GAAsBI,EAAeC,gBAGzC/N,KAAK2H,SAASyG,SAASpO,KAAKwH,QAAQgD,cAAe,QAASxK,KAAKuJ,gBAAkBuF,EAAa,MAGpG9O,KAAKkH,iBAAkB,IAAI8F,MAAOC,YAI1C1F,EAAAjG,UAAA0N,gBAAA,SAAgBR,GACZ,GAAIxO,KAAKwE,cAAcnF,OAAS,EAC5B,GAAImP,GAASS,EAAET,EAAMU,YAAYC,QAAQ,cAAc9P,OAAS,EAC5DW,KAAKsO,qBACF,CACH,IAAMc,EAAOpP,KACbqP,YAAW,WACPD,EAAKd,mBACN,KAKf/G,EAAAjG,UAAA0D,uBAAA,SAAuBwJ,KAIvBjH,EAAAjG,UAAA2D,uBAAA,SAAuBuJ,GAEnBxO,KAAKgP,gBAAgBR,GACrBxO,KAAKsO,kBAGT/G,EAAAjG,UAAAgO,aAAA,SAAad,GACLxO,KAAKmI,iBAKkB,IAAhBqG,EAAMe,YAA8C,IAAdf,EAAMgB,MAIvDxP,KAAKiG,uBAAyBuI,EAAMiB,sBAAwB,KAEvDzP,KAAKmJ,aACNnJ,KAAKoL,aAAY,GACjBpL,KAAKsL,kBAAkBkD,EAAMe,MAAOf,EAAMgB,KAAK,GAC/CxP,KAAKoL,aAAY,MAIzB7D,EAAAjG,UAAAoO,WAAA,SAAWlB,GACPxO,KAAK4I,eAAe+G,KAAKnB,IAG7BjH,EAAAjG,UAAAsO,mBAAA,WACI,OAAO5P,KAAKkI,aAAelI,KAAKkI,aAAe6B,QAGnDxC,EAAAjG,UAAAuO,eAAA,SAAeC,GACP9P,KAAKoG,UAITpG,KAAKyI,mBAAmBkH,KAAKG,IAGjCvI,EAAAjG,UAAAqE,sBAAA,SAAsBoK,GACd/P,KAAKoG,UAITpG,KAAKuI,mBAAmBoH,KAAKI,IAGjCxI,EAAAjG,UAAAsE,4BAAA,SAA4BmK,GACpB/P,KAAKoG,UAITpG,KAAKwI,sBAAsBmH,KAAKI,IAGpCxI,EAAAjG,UAAA0O,cAAA,SAAcC,GACV,QAAIjQ,KAAKsG,wBAG6B2J,MAAAA,OAAkB,EAAlBA,EAAoBzK,QAASyK,EAAmBzK,KAAK0K,wBAK/F3I,EAAAjG,UAAAuE,YAAA,SAAYsK,EAAQC,GAEhB,IAAMpN,EAASoN,EAAiB5K,KAAKC,IAAI4K,WACnCxE,EAAWuE,EAAiB5K,KAAKE,KAAK2K,WAQ5C,GALID,GAAoBA,EAAiB5K,MAAQ4K,EAAiB5K,KAAK0K,yBACnElQ,KAAKyG,eAAiBzG,KAAK4L,cAAc5I,EAAQ6I,IACrC,IAGX7L,KAAK8I,QAAS,CACf,GAAI9I,KAAKoG,SACL,OAGJpG,KAAKqI,uBAAuBsH,KAAKS,KAIzC7I,EAAAjG,UAAAgP,qBAAA,SAAqB9B,EAAYxL,EAAgB6I,GAC7C,IAAI7L,KAAK2G,cAAT,CAIA,IAAM4J,EAAavQ,KAAK4L,cAAc5I,EAAQ6I,GAC9C7L,KAAK0G,cAAgB6J,IAGzBhJ,EAAAjG,UAAAiE,qBAAA,SAAqBiJ,EAAYxL,EAAgB6I,GAC7C7L,KAAK0G,cAAgB,IAGzBa,EAAAjG,UAAAkP,iBAAA,SAAiBhC,EAAYxL,EAAgB6I,GACzC,IAAI7L,KAAK2G,cAAT,CAIA,IAAM4J,EAAavQ,KAAK4L,cAAc5I,EAAQ6I,GAC9C7L,KAAK0G,cAAgB6J,IAGzBhJ,EAAAjG,UAAAyF,iBAAA,SAAiByH,EAAYxL,EAAgB6I,GACzC7L,KAAK0G,cAAgB,IAGzBa,EAAAjG,UAAA8F,oBAAA,WACI,OAA0B,MAAnBpH,KAAKE,WAAqBC,EAAAA,YAAYsQ,YAAczQ,KAAKE,YAIpEqH,EAAAjG,UAAAoP,UAAA,SAAUP,GACNnQ,KAAKoJ,eAAiB,EACtBpJ,KAAK8L,aAGTvE,EAAAjG,UAAAgG,YAAA,SAAYsG,EAAe+C,GACvB,OAAOA,GAAQA,EAAKnL,MAAQmL,EAAKnL,KAAKC,IAAMkL,EAAKnL,KAAKC,IAAMmI,GAGhErG,EAAAjG,UAAA6J,WAAA,WACInL,KAAKiJ,aAAe,EACpBjJ,KAAKgJ,MAAQhJ,KAAK6I,UAAY,EAAI+H,MAAwB5Q,KAAK6I,WAAa,GAC5E7I,KAAK0L,YAAc,GACnB1L,KAAKiG,uBAAyB,IAGlCsB,EAAAjG,UAAAuP,aAAA,WACI,OAAO7Q,KAAK0E,WAGhB6C,EAAAjG,UAAAwP,aAAA,SAAapM,EAAsBmE,EAAmBG,EAA2B5G,EACpE2O,QADoE,IAAA3O,IAAAA,EAAsByE,GAAUmK,YACpG,IAAAD,IAAAA,EAAA,IACT/Q,KAAKmH,WAAa/E,IAAayE,GAAUoK,KACzCjR,KAAK0E,UAAYA,EACjB1E,KAAK+Q,UAAYA,EACjB/Q,KAAKyG,eAAiB,GACtBzG,KAAK8I,QAAU1G,IAAayE,GAAUmK,MACtChR,KAAK6I,UAAYA,EAGQ7I,KAAK4P,qBACbsB,SAAS,EAAG,GAE7BlR,KAAKmL,aAELnL,KAAKmR,gBAAgBnI,EAAO,MAC5BhJ,KAAK0P,WAAW,MAEhB1P,KAAK8L,aAGTvE,EAAAjG,UAAA6P,gBAAA,SAAgBnI,EAA2BwF,GACvCxO,KAAK0L,YAAc1L,KAAKgJ,MAAQA,EAChChJ,KAAKiJ,aAAeD,EAAM3J,QAG9BkI,EAAAjG,UAAA8P,eAAA,SAAeC,GACX,IAAIzD,EAAQ,GAGZA,EAAQ5N,KAAKgJ,MAAMsI,WAAU,SAAAnS,GAAK,OAAAA,GAAKA,EAAEqG,MAAQrG,EAAEqG,KAAKC,MAAQ4L,EAAK5L,SACxD,GAAKmI,EAAQ5N,KAAKgJ,MAAM3J,SACjCW,KAAKgJ,MAAM4E,GAAOpI,KAAO6L,IAG7BzD,EAAQ5N,KAAK0L,YAAY4F,WAAU,SAAAnS,GAAK,OAAAA,GAAKA,EAAEqG,MAAQrG,EAAEqG,KAAKC,MAAQ4L,EAAK5L,SAC9D,GAAKmI,EAAQ5N,KAAK0L,YAAYrM,SACvCW,KAAK0L,YAAYkC,GAAOpI,KAAO6L,EAC/BrR,KAAKkH,iBAAkB,IAAI8F,MAAOC,YAI1C1F,EAAAjG,UAAAiQ,kBAAA,SAAkBC,GACd,IAAMb,EAAO3Q,KAAKgJ,MAAMkE,QAAO,SAAAwB,GAAK,OAAAA,EAAElJ,KAAKC,IAAI4K,aAAemB,KAC9D,OAAIb,EAAKtR,OAAS,GACPsR,EAAK,GAAGnL,KAAKa,YAM5BkB,EAAAjG,UAAAmQ,gBAAA,SAAgBD,SACZ,OAAgE,QAAhEE,EAAO1R,KAAKgJ,MAAM2I,MAAK,SAAAhB,GAAQ,OAAAA,EAAKnL,KAAKC,IAAI4K,aAAemB,YAAI,IAAAE,OAAA,EAAAA,EAAElM,QA1gB1E,qCAAa+B,IAA4BhE,EAAAqO,kBAAArO,EAAAsO,YAAAtO,EAAAqO,kBAAAnO,EAAAqO,eAAAvO,EAAAqO,kBAAArO,EAAAwO,mBAAAxO,EAAAqO,kBAAArO,EAAAyO,+CAA5BzK,GAA4BlH,UAAA,CAAA,CAAA,sBAAA4R,UAAA,SAAArR,EAAAC,+VAA5BA,EAAA6P,UAAA9L,MAAiB,EAAArB,EAAA2O,moFDxB9BnR,EAAAA,WAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,GAGAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,GAsCAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAsDAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,+BA/FcjB,EAAAA,WAAAA,OAAAA,GAAAA,EAAAA,WAGAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,UAAAA,+dEMMgB,EAAAA,eAAAA,EAAAA,OAAAA,IACqC+C,EAAAA,OAAAA,GAAiD7C,EAAAA,8CAAjDnB,EAAAA,UAAAA,GAAAoE,EAAAA,mBAAAA,IAAAA,MAAAA,EAAAA,yBAAAA,KAAAA,EAAAA,yBAAAA,MAAAA,iGAWrCnD,EAAAA,eAAAA,EAAAA,SAAAA,IAGIoD,EAAAA,WAAAA,SAAAA,WAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,wBAAAA,MACApD,EAAAA,eAAAA,EAAAA,QAAM+C,EAAAA,OAAAA,GAA6B7C,EAAAA,eACvCA,EAAAA,8DAJIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,IAAAA,MAAAA,EAAAA,yBAAAA,KAAAA,EAAAA,yBAAAA,OAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAGMD,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,2GApBlBpE,EAAAA,wBAAAA,GAEIoB,EAAAA,eAAAA,EAAAA,SAAAA,IAEIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,IAGAD,EAAAA,eAAAA,EAAAA,WAAAA,IACInB,EAAAA,UAAAA,EAAAA,WAAAA,IACJqB,EAAAA,eACJA,EAAAA,eACAF,EAAAA,eAAAA,EAAAA,WAAAA,GAAAA,IACIA,EAAAA,eAAAA,EAAAA,SAAAA,IACIoD,EAAAA,WAAAA,SAAAA,WAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,wBAAiC,SACjCpD,EAAAA,eAAAA,EAAAA,QAAM+C,EAAAA,OAAAA,4BAA6B7C,EAAAA,eACvCA,EAAAA,eACAD,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,EAAAA,SAAAA,IAMJC,EAAAA,eACJpB,EAAAA,4EArBkFC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,oBAAAA,GAGtED,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,0BAEMD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,GAAAA,EAAAA,2BAKYD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,GAAAA,GAAAA,OAAAA,EAAAA,2BAEZD,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,YAAAA,GAAAA,EAAAA,cAINjE,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,2CAkBIH,EAAAA,UAAAA,EAAAA,WAAAA,0BACAA,EAAAA,UAAAA,EAAAA,WAAAA,0BACAA,EAAAA,UAAAA,EAAAA,WAAAA,wDALRmB,EAAAA,eAAAA,EAAAA,SAAAA,IAC4CoD,EAAAA,WAAAA,SAAAA,WAAAA,EAAAA,cAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,cAAAA,GAAAA,uBAAAA,MAAAA,EAAAA,KAAAA,EAAAA,QACxCpD,EAAAA,eAAAA,EAAAA,WAAAA,IACIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,IACAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,IACAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,IACJC,EAAAA,eACAF,EAAAA,eAAAA,EAAAA,QAAM+C,EAAAA,OAAAA,GAAqB7C,EAAAA,eAC/BA,EAAAA,8DARsBlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,IAAAA,MAAAA,EAAAA,gBAAAA,KAAAA,EAAAA,gBAAAA,OAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAERD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,WAAAA,MAAAA,EAAAA,KAAAA,EAAAA,KACID,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,qBACAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,6BACAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,6BAERD,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,MAAAA,EAAAA,KAAAA,EAAAA,kCAhBlBpE,EAAAA,wBAAAA,GACIoB,EAAAA,eAAAA,EAAAA,SAAAA,IAEIA,EAAAA,eAAAA,EAAAA,YACInB,EAAAA,UAAAA,EAAAA,WAAAA,IACJqB,EAAAA,eACJA,EAAAA,eAEAF,EAAAA,eAAAA,EAAAA,WAAAA,GAAAA,IACIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,IASJC,EAAAA,eACJpB,EAAAA,0EAjBQC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,oBAAAA,GAQID,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,qEAtCpBgB,EAAAA,eAAAA,EAAAA,MAAAA,GACIA,EAAAA,eAAAA,EAAAA,OAAAA,GAAsC+C,EAAAA,OAAAA,GAAiB7C,EAAAA,eAEvDF,EAAAA,eAAAA,EAAAA,MAAAA,GACIC,EAAAA,WAAAA,EAAAA,GAAAA,GAAAA,GAAAA,eAAAA,GAwBAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,GAoBJC,EAAAA,eACJA,EAAAA,eAEAF,EAAAA,eAAAA,EAAAA,oBAAAA,IAAmBoD,EAAAA,WAAAA,sBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,yBAAAA,KAAAA,CAAuD,sBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAsN,GAAA5O,EAAAwB,gBAAAY,sBAAAf,MACO5D,EAAAA,+CApD5E+C,EAAAA,uBAAAA,sDAAAA,EAAAA,MAAAA,WAAAA,IAAkFC,EAAAA,sBAAAA,QAAAA,EAAAA,MAAAA,OAC7CnE,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,MAAAA,OAI9BjE,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,sBAAAA,MAAAA,EAAAA,gBAAAA,KAAAA,EAAAA,gBAAAA,MAAAA,EAAAA,oBAAAA,EAAAA,mBAAAA,OAAAA,GAuBUD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,gBAAAA,EAAAA,eAAAA,OAAAA,GAwBmCD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,YAAAA,EAAAA,kCAKzDH,EAAAA,UAAAA,EAAAA,MAAAA,wDACAmB,EAAAA,eAAAA,EAAAA,SAAAA,IAAqDoD,EAAAA,WAAAA,SAAAA,WAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,sBACGL,EAAAA,OAAAA,2BAAgD7C,EAAAA,qBAAhDnB,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,YAAAA,EAAAA,EAAAA,6FC9B5DsO,GAAA,WAkDI,SAAAA,EACcC,EACFC,EACDC,EACCC,EACAC,GAJEzS,KAAAqS,GAAAA,EACFrS,KAAAsS,2BAAAA,EACDtS,KAAAuS,qBAAAA,EACCvS,KAAAwS,WAAAA,EACAxS,KAAAyS,kBAAAA,EApDZzS,KAAAC,YAAc,eAGLD,KAAA0S,gBAAiB,EACjB1S,KAAAE,WAAaC,EAAAA,YAAYwS,YACxB3S,KAAA4S,aAAkC,IAAItK,EAAAA,aACtCtI,KAAA6S,aAAsD,IAAIvK,EAAAA,aAIpEtI,KAAA8S,WAAa,CAAEC,SAAS,GAOxB/S,KAAAG,YAAcA,EAAAA,YAGdH,KAAAkH,gBAAuB,KAEvBlH,KAAAgT,UAAiB,KAMjBhT,KAAAoI,UAAiB,GACjBpI,KAAAiT,mBAA0B,KAC1BjT,KAAAkT,yBAAgC,KAChClT,KAAAmT,WAAY,EACZnT,KAAAoT,iBAAmB,GACnBpT,KAAAqT,YAAc,IACdrT,KAAAsT,iBAAkB,EAElBtT,KAAAuT,gBAAwC,KAExCvT,KAAAwT,iBAAmB,EACnBxT,KAAAyT,eAAiB,EACjBzT,KAAA0T,UAAY,OACZ1T,KAAA2T,WAAa,OACb3T,KAAA4T,eAAgB,EAChB5T,KAAA6T,gBAAkB,GAClB7T,KAAA8T,UAAW,EACX9T,KAAA+T,gBAAkB,SAUV3B,EAAA9Q,UAAA0S,SAAA,WAAA,IAAApM,EAAA5H,KACEiU,EAAOjU,KAAKkU,eAAeC,mBAAmB,MAEhDnU,KAAK8S,WAAWC,SAChB/S,KAAKoU,QAAQC,QACbrU,KAAKsU,UAAUD,QACfrU,KAAKsU,UAAUC,OAAON,KAEtBjU,KAAKsU,UAAUD,QACfrU,KAAKoU,QAAQC,QACbrU,KAAKoU,QAAQG,OAAON,IAGxB5E,YAAW,mBACDmF,EAAS,GAEf,GAAI5M,EAAKoL,UAAUyB,SAEf,IAA2B,IAAAC,EAAA7V,EAAA+I,EAAKoL,UAAUyB,MAAIE,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAE,CAA3C,IAAMsV,EAAYD,EAAApV,MACbsV,EAAM,IAAIC,EAAAA,iBAAiBlN,EAAKlD,UAAWkQ,GACjDC,EAAIxO,YAAa,EACjBmO,EAAOO,KAAKF,qGAIpB,IAAMzS,EAAsBwF,EAAKoN,cAAgBnO,GAAUmK,MAAQnK,GAAUoO,KAI7E,GAHArN,EAAKsN,WAAWpE,aAAalJ,EAAKlD,UAAWkD,EAAKoL,UAAUmC,UAAWX,EAAQpS,EAAUwF,EAAKwN,gBAC9FxN,EAAKyN,gBAEAzN,EAAKkL,WAAWC,QAAS,CAC1B,IAAMuC,EAAgB1N,EAAKoL,UAAUyB,KAAO7M,EAAKoL,UAAUyB,KAAKpV,OAAS,EAGnEkW,EAAY3N,EAAK4N,gBAAkB5N,EAAK6N,mBAAqB,EAAI,EAEjEC,EAAuE,GAAvD9N,EAAK2K,qBAAqBoD,2BAQhD,IAL6B,IAAzB/N,EAAKmM,iBACLnM,EAAKmM,eAAiBnM,EAAKgO,MAAMC,SAIJ,8BAA7BjO,EAAK2L,gBAAgBuC,IAAqC,CAC1D,IAAMC,EAAS/H,KAAKgI,IAAIC,MACpBjI,KACApG,EAAKlD,UAAUC,cAAc0I,KAAI,SAAC6I,GAC9B,OAAOA,EAAEtJ,OAAOuJ,EAAID,EAAEtJ,OAAOwJ,WAU/BC,EAAgBf,GAL6D,GAA5D1N,EAAK2K,qBAAqB+D,wBAAwBP,GAKjB,IAAOL,EAAgBH,EAC/E3N,EAAKgO,MAAMC,QAAUQ,MAClB,CAIH,IAAME,EAAyF,GAAvE3O,EAAK2K,qBAAqBiE,yBAAyBjB,GAAW,GAChFkB,EAAsF,GAApE7O,EAAK2K,qBAAqBiE,yBAAyBlB,GAC3E1N,EAAKgO,MAAMC,SAAWU,EAAkBE,GAAmBf,EAG/D,IAAMtG,EAAOxH,EACbwH,EAAKoE,iBAAmB,EACxBpE,EAAKqE,eAAiB,EAEtB7L,EAAKoL,UAAU0D,UAAU/R,cAAcqH,SAAQ,SAAC8B,GAC5CsB,EAAKqE,gBAAkB3F,EAAe5B,YACtC4B,EAAe6I,cAAgBvH,EAAKwH,OAAO,IAC3CxH,EAAKoE,kBAAoB,MAG7BnE,YAAW,WACPD,EAAKyH,aAAajP,EAAKoL,UAAUyB,QAClC,MAER,KAEHzU,KAAKyS,kBAAkBqE,gBAGnB1E,EAAA9Q,UAAAyV,cAAA,SAActU,GAGlBzC,KAAKgT,UAAYvQ,EACjBzC,KAAK0E,UAAYjC,EAAIiU,UACrB1W,KAAKiT,mBAAqBxQ,EAAIuU,mBAE9BhX,KAAKgU,YAGT5B,EAAA9Q,UAAAsV,OAAA,SAAOK,GACH,OAAOjJ,KAAKC,MAAMgJ,EAAKhI,EAAE,WAAWiI,WAGhC9E,EAAA9Q,UAAAkU,aAAA,WACJ,OAAOxV,KAAKuT,iBAAgD,sBAA7BvT,KAAKuT,gBAAgBuC,KAGhD1D,EAAA9Q,UAAAmU,iBAAA,WACJ,OAAOzV,KAAKuT,iBAAgD,8BAA7BvT,KAAKuT,gBAAgBuC,KAGxD1D,EAAA9Q,UAAA0T,YAAA,WACI,OAAOhV,KAAKwV,gBAAkBxV,KAAKyV,oBAG/BrD,EAAA9Q,UAAA8T,aAAA,WACJ,IAAI3S,EAAM,GAMV,OAJKzC,KAAKgV,gBACNvS,EAAM,aAGHA,GAGX2P,EAAA9Q,UAAAuB,uBAAA,SAAuBsU,WACbpL,EAAO/L,KACbA,KAAKoX,KAAO,GACZpX,KAAK0E,UAAY,SAEjB,IAAiB,IAAAgQ,EAAA7V,EAAAmB,KAAKqX,gBAAc1C,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAE,CAAjC,IAAMgY,EAAE3C,EAAApV,MACT,GAAI+X,EAAGxB,MAAQqB,EAAa,CACxBnX,KAAKuT,gBAAkB+D,EACvB,yGAKRrI,EAAE,QAAQsI,UAAU,GACpBvX,KAAKwX,qBAAuBxX,KAAKuT,gBAAgBkE,MAEjDzX,KAAKsS,2BAA2BzP,uBAAuB7C,KAAKuT,gBAAgBuC,KAAK,SAACrT,GAC1EA,EAAIgS,MACJ1I,EAAKgL,cAActU,OAK/B2P,EAAA9Q,UAAAuV,aAAA,SAAaO,GACT,GAAKA,EAAL,CAEA,IAAMM,EAAYN,EAAK/X,OAEjBsY,EAAa1I,EAAE,iBACfyE,EAAYiE,EAAWxI,QAAQ,iBAAiByI,IAAI,SACpDjE,EAAagE,EAAWxI,QAAQ,iBAAiByI,IAAI,UAE3D5X,KAAK0T,UAAYA,EAAYA,EAAUrD,WAAa,OACpDrQ,KAAK2T,WAAa3T,KAAK0S,eAAiBiB,EAAWtD,WAAa,OAI5D1F,SAAS+I,EAAW,IAAM1T,KAAK4W,OAAO5W,KAAKwT,mBAC1CxT,KAAK0S,gBAAkB/H,SAASgJ,EAAY,IAAkB,GAAZ+D,EAAiB,GACpE1X,KAAKsT,iBAAkB,EAEvBtT,KAAKsT,iBAAkB,EAG3BtT,KAAKyS,kBAAkBqE,iBAG3B1E,EAAA9Q,UAAAuW,iBAAA,aAgBAzF,EAAA9Q,UAAA0I,SAAA,WACI,IAAM+B,EAAO/L,KAGbA,KAAKsS,2BAA2B3P,YAAY3C,KAAK4V,MAAMpU,SAAUxB,KAAK4V,MAAMzU,SACxEnB,KAAK4V,MAAM5T,YAAY,SAAC8V,WAIxB,GAFAA,EAAarD,KAAOqD,EAAarD,KAAKvH,QAAO,SAACyD,GAAS,MAAa,qBAAbA,EAAKmF,OAExDgC,EAAarD,MAAQqD,EAAarD,KAAKpV,OAAS,EAAG,CAC9CyY,EAAaC,UACdD,EAAaC,QAAUD,EAAarD,KAAK,GAAGqB,KAEhD/J,EAAKsL,eAAiBS,EAAarD,KACnC1I,EAAKwH,gBAAkBuE,EAAarD,KAAK,OAGzC,IAA0B,IAAAC,EAAA7V,EAAAiZ,EAAarD,MAAIE,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAE,CAAxC,IAAM0Y,EAAWrD,EAAApV,MACdyY,EAAYP,QAAUK,EAAaC,UACnChM,EAAKwH,gBAAkByE,qGAI/BjM,EAAKkM,4BACLlM,EAAKlJ,uBAAuBkJ,EAAKwH,gBAAgBuC,UAY7D1D,EAAA9Q,UAAA2W,0BAAA,WACI,IAAMC,EAAMC,eAAeC,QAAQhG,EAA6BiG,6BAChE,GAAIH,GAAOA,EAAI7Y,OAAS,EAAG,CACvB,IAAM+B,EAAoBQ,KAAK0W,MAAMJ,GACrClY,KAAKkT,yBAA2B9R,EAChCpB,KAAKsS,2BAA2BlR,kBAAoBA,EAAkB0U,MAI9E1D,EAAA9Q,UAAA8I,YAAA,WACQpK,KAAK4S,cAAgB5S,KAAK4S,aAAavI,cAEvCrK,KAAK6S,cAAgB7S,KAAK6S,aAAaxI,cAEvCrK,KAAKuY,QAAUvY,KAAKuY,OAAOlO,eAGnC+H,EAAA9Q,UAAAwB,wBAAA,SAAwB1B,GAAxB,IAAAwG,EAAA5H,KACU+L,EAAO/L,KACbA,KAAKsS,2BAA2BxP,wBAAwB1B,EAAoBA,EAAkB0U,IAAM,IAChG,SAACrT,eAEG,IAAkB,IAAAiS,EAAA7V,EAAA4D,EAAIgS,MAAIE,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAE,CAAvB,IAAMkZ,EAAG7D,EAAApV,MACNwM,EAAK0M,cAAcD,qGAG3BzM,EAAK0G,kBAAkBqE,kBAI/BqB,eAAeO,QAAQtG,EAA6BiG,4BAA6BzW,KAAKC,UAAUT,IAEhGiO,YAAW,WACPzH,EAAKsL,yBAA2B9R,IACjC,IAGPgR,EAAA9Q,UAAA+T,aAAA,mBAGI,GAFArV,KAAKoI,UAAY,GAEbpI,KAAKwV,gBAAkBxV,KAAKyV,mBAAoB,CAChD,IAAIkD,EAAW,EAEf,GAAI3Y,KAAKkV,WAAWlM,MAChB,IAAK,IAAI4P,EAAM,EAAGA,EAAM5Y,KAAKkV,WAAWlM,MAAM,GAAGxD,KAAKqT,OAAOxZ,OAAQuZ,IAAO,CACxE,IAAMhD,EAAQ5V,KAAKkV,WAAWlM,MAAM,GAAGxD,KAAKqT,OAAOD,GACnD,GACIhD,EAAMzJ,YAAcC,EAAAA,WAAWK,wBAC/BmJ,EAAMzJ,YAAcC,EAAAA,WAAWG,+BAC/BqJ,EAAMzJ,YAAcC,EAAAA,WAAWM,qBAC/BkJ,EAAMzJ,YAAcC,EAAAA,WAAWI,4BAC/BoJ,EAAMzJ,YAAcC,EAAAA,WAAW0M,eAC/BlD,EAAMzJ,YAAcC,EAAAA,WAAW2M,eAC/BnD,EAAMzJ,YAAcC,EAAAA,WAAW4M,gBAC/BpD,EAAMzJ,YAAcC,EAAAA,WAAW6M,WACjC,CACEN,EAAW,MAEX,IAAuB,IAAAjE,GAAAwE,OAAA,EAAAra,EAAAmB,KAAKkV,WAAWlM,QAAK2L,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAE,CAAzC,IAAM6Z,EAAQxE,EAAApV,MAEf,GAAI4Z,EAAS3T,KAAKqT,OAAOD,IAAQO,EAAS3T,KAAKqT,OAAOD,GAAKnB,MAAO,CAC9D,IAAM2B,EAAMC,WAAWF,EAAS3T,KAAKqT,OAAOD,GAAKnB,OACjDkB,GAAYW,MAAMF,GAAO,EAAIA,qGAGrCpZ,KAAKoI,UAAU2M,KAAK4D,QAEpB3Y,KAAKoI,UAAU2M,KAAK,OAOxC3C,EAAA9Q,UAAAmX,cAAA,SAAcc,GACVvZ,KAAKkV,WAAW9D,eAAemI,GAG/B,IAAK,IAAI3L,EAAQ,EAAGA,EAAQ5N,KAAKgT,UAAUyB,KAAKpV,OAAQuO,IAChD5N,KAAKgT,UAAUyB,KAAK7G,GAAOnI,MAAQ8T,EAAgB9T,MACnDzF,KAAKgT,UAAUyB,KAAK7G,GAAS2L,IAKzCnH,EAAA9Q,UAAAkY,iBAAA,SAAiBC,EAAShX,GACE,IAApBA,EAAIgS,KAAKpV,QACTW,KAAKyY,cAAchW,EAAIgS,KAAK,IAGhCzU,KAAKqV,eACLrV,KAAKkH,gBAAkB,IAAI8F,KAG3BhN,KAAK4S,aAAajD,KAAKlN,GAEvBzC,KAAKyS,kBAAkBqE,gBAG3B1E,EAAA9Q,UAAAoY,yBAAA,SAAyBC,GACrB,IAAIC,GAAe,EACbC,EAAwB7Z,KAAKwZ,iBAAiBM,KAAK9Z,MAGV,OAA3C2Z,EAA2BI,cACc,MAArCJ,EAA2BlC,OAC3BmC,GAAe,EACf5Z,KAAKsS,2BAA2BvP,eAAe4W,EAA2BK,GAAIL,EAA2BrV,SACrG,SAAC7B,GACGoX,EAAsBF,EAA2BK,GAAIvX,OAGjB,MAArCkX,EAA2BlC,QAClCmC,GAAe,EACf5Z,KAAKsS,2BAA2BlP,gBAAgBuW,EAA2BK,GAAIL,EAA2BrV,SACtG,SAAC7B,GACGoX,EAAsBF,EAA2BK,GAAIvX,QAMhEmX,GACD5Z,KAAKsS,2BAA2BjP,kBAAkBsW,EAA2BK,GAAIL,EAA2BrV,QACxGqV,EAA2BlC,OAAO,SAAChV,GAC/BoX,EAAsBF,EAA2BK,GAAIvX,OAMrE2P,EAAA9Q,UAAAqE,sBAAA,SAAsBsU,GAClBja,KAAK6S,aAAalD,KAAKsK,MA5Z/B,uDC5BInZ,EAAAA,eAAAA,EAAAA,cAAAA,IAG8BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MAC9BlD,EAAAA,+CAJuClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAAoa,EAAAtE,MAAArV,IAAbT,CAAa,iBAAAoa,EAAAtE,MAAAuE,eAAbra,CAAa,QAAAoa,EAAAtE,MAAAwE,MAAbta,CAAa,WAAAoa,EAAAtE,MAAAyE,SAAbva,CAAa,WAAAoa,EAAAtE,MAAAxP,SAAbtG,CAAa,WAAAoa,EAAAtE,MAAA0E,SAAbxa,CAAa,aAAAoa,EAAAtE,MAAA2E,WAAbza,CAAa,UAAAoa,EAAAtE,MAAAC,QAAb/V,CAAa,cAAAoa,EAAAtE,MAAA4E,YAAb1a,CAAa,aAAAoa,EAAAha,iEAMpDY,EAAAA,eAAAA,EAAAA,iBAAAA,IAG8BoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,QAAAA,KAAAA,CAAkC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAA4V,GAAAlX,EAAAwB,gBAAA8K,eAAAjL,MAChE5D,EAAAA,+CAJ6ClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA4a,EAAA9E,MAAArV,IAAbT,CAAa,MAAA4a,EAAA9E,MAAArW,MAAbO,CAAa,QAAA4a,EAAA9E,MAAAwE,MAAbta,CAAa,WAAA4a,EAAA9E,MAAAyE,SAAbva,CAAa,WAAA4a,EAAA9E,MAAAxP,SAAbtG,CAAa,WAAA4a,EAAA9E,MAAA0E,SAAbxa,CAAa,aAAA4a,EAAA9E,MAAA2E,WAAbza,CAAa,UAAA4a,EAAA9E,MAAAC,QAAb/V,CAAa,WAAA4a,EAAAC,SAAb7a,CAAa,YAAA4a,EAAAE,UAAb9a,CAAa,aAAA4a,EAAAxa,iEAM1DY,EAAAA,eAAAA,EAAAA,eAAAA,IAGsDoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MACtDlD,EAAAA,+CAJyClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA+a,EAAAjF,MAAArV,IAAbT,CAAa,QAAA+a,EAAAjF,MAAArW,MAAbO,CAAa,QAAA+a,EAAAjF,MAAAwE,MAAbta,CAAa,OAAA+a,EAAAjF,MAAAkF,KAAbhb,CAAa,WAAA+a,EAAAjF,MAAAyE,SAAbva,CAAa,WAAA+a,EAAAjF,MAAAxP,SAAbtG,CAAa,WAAA+a,EAAAjF,MAAA0E,SAAbxa,CAAa,aAAA+a,EAAAjF,MAAA2E,WAAbza,CAAa,UAAA+a,EAAAjF,MAAAC,QAAb/V,CAAa,kBAAA+a,EAAAjF,MAAAmF,gBAAbjb,CAAa,YAAA+a,EAAAD,UAAb9a,CAAa,aAAA+a,EAAA3a,WAAbJ,CAAa,WAAA+a,EAAAF,+DAMtD7Z,EAAAA,eAAAA,EAAAA,WAAAA,IAKIoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MACJlD,EAAAA,+CANiClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAAuH,EAAAuO,MAAArV,IAAbT,CAAa,QAAAuH,EAAAuO,MAAArW,MAAbO,CAAa,iBAAAuH,EAAAuO,MAAAuE,eAAbra,CAAa,QAAAuH,EAAAuO,MAAAwE,MAAbta,CAAa,OAAAuH,EAAAuO,MAAAkF,KAAbhb,CAAa,WAAAuH,EAAAuO,MAAAyE,SAAbva,CAAa,WAAAuH,EAAAuO,MAAAxP,SAAbtG,CAAa,WAAAuH,EAAAuO,MAAA0E,SAAbxa,CAAa,YAAAuH,EAAAuO,MAAAoF,UAAblb,CAAa,aAAAuH,EAAAuO,MAAA2E,WAAbza,CAAa,UAAAuH,EAAAuO,MAAAC,QAAb/V,CAAa,WAAAuH,EAAAuO,MAAAqF,SAAbnb,CAAa,WAAAuH,EAAAuO,MAAAsF,SAAbpb,CAAa,YAAAuH,EAAAuT,UAAb9a,CAAa,aAAAuH,EAAAnH,WAAbJ,CAAa,WAAAuH,EAAAsT,oCAQ9Chb,EAAAA,UAAAA,EAAAA,uBAAAA,iCAA+CG,EAAAA,WAAAA,WAAAA,EAAAA,SAAAA,CAAqB,OAAAqb,EAAAC,KAArBtb,CAAqB,MAAAqb,EAAAvF,MAAArV,IAArBT,CAAqB,QAAAqb,EAAAvF,MAAAwE,MAArBta,CAAqB,YAAAqb,EAAAP,UAArB9a,CAAqB,QAAAqb,EAAAvF,MAAArW,MAArBO,CAAqB,aAAAqb,EAAAjb,iEAIpEY,EAAAA,eAAAA,EAAAA,YAAAA,IAKoDoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,QAAAA,KAAAA,CAAkC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAwW,GAAA9X,EAAAwB,gBAAA8K,eAAAjL,MAEtF5D,EAAAA,+CAPmClB,EAAAA,WAAAA,WAAAA,EAAAA,SAAAA,CAAqB,OAAAwb,EAAAF,KAArBtb,CAAqB,MAAAwb,EAAA1F,MAAArV,IAArBT,CAAqB,MAAAwb,EAAA1F,MAAAuE,eAArBra,CAAqB,WAAAwb,EAAA1F,MAAArW,MAArBO,CAAqB,UAAAwb,EAAA1F,MAAA2F,QAArBzb,CAAqB,QAAAwb,EAAA1F,MAAAwE,MAArBta,CAAqB,OAAAwb,EAAA1F,MAAAkF,KAArBhb,CAAqB,WAAAwb,EAAA1F,MAAAyE,SAArBva,CAAqB,WAAAwb,EAAA1F,MAAAxP,SAArBtG,CAAqB,WAAAwb,EAAA1F,MAAA0E,SAArBxa,CAAqB,aAAAwb,EAAA1F,MAAA2E,WAArBza,CAAqB,UAAAwb,EAAA1F,MAAAC,QAArB/V,CAAqB,kBAAAwb,EAAA1F,MAAA4F,gBAArB1b,CAAqB,YAAAwb,EAAA1F,MAAA6F,UAArB3b,CAAqB,mBAAAwb,EAAA1F,MAAA8F,iBAArB5b,CAAqB,cAAAwb,EAAA1F,MAAA+F,YAArB7b,CAAqB,WAAAwb,EAAAX,SAArB7a,CAAqB,aAAAwb,EAAApb,iEASxDY,EAAAA,eAAAA,EAAAA,sBAAAA,IAI8BoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,QAAAA,KAAAA,CAAkC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAA+W,GAAArY,EAAAwB,gBAAA8K,eAAAjL,MAChE5D,EAAAA,+CAL8ClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA+b,EAAAjG,MAAArV,IAAbT,CAAa,QAAA+b,EAAAjG,MAAArW,MAAbO,CAAa,iBAAA+b,EAAAjG,MAAAuE,eAAbra,CAAa,QAAA+b,EAAAjG,MAAAwE,MAAbta,CAAa,8BAAA+b,EAAAjG,MAAAkG,4BAAbhc,CAAa,OAAA+b,EAAAjG,MAAAkF,KAAbhb,CAAa,WAAA+b,EAAAjG,MAAAxP,SAAbtG,CAAa,WAAA+b,EAAAjG,MAAA0E,SAAbxa,CAAa,aAAA+b,EAAAjG,MAAA2E,WAAbza,CAAa,aAAA+b,EAAA3b,iEAQ3DY,EAAAA,eAAAA,EAAAA,WAAAA,IAEIoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,QAAAA,KAAAA,CAAkC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAO,GAAA7B,EAAAwB,gBAAAgX,kBAAAnX,MACtC5D,EAAAA,+CAHiClB,EAAAA,WAAAA,MAAAA,EAAAA,MAAAA,IAAAA,CAAiB,QAAAkc,EAAApG,MAAAwE,MAAjBta,CAAiB,WAAAkc,EAAApG,MAAAxP,SAAjBtG,CAAiB,aAAAkc,EAAApG,MAAA2E,WAAjBza,CAAiB,UAAAkc,EAAApG,MAAA2F,QAAjBzb,CAAiB,aAAAkc,EAAA9b,iEAKlDY,EAAAA,eAAAA,EAAAA,wBAAAA,IAM4BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,KAAAA,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAoX,GAAA1Y,EAAAwB,gBAAAmX,wBAAAtX,KAAvCV,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAoX,GAAA1Y,EAAAwB,gBAAAoX,QAAAvX,MAEnE5D,EAAAA,+CAR4ClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAAsc,EAAAxG,MAAArV,IAAbT,CAAa,QAAAsc,EAAAxG,MAAArW,MAAbO,CAAa,iBAAAsc,EAAAxG,MAAAuE,eAAbra,CAAa,QAAAsc,EAAAxG,MAAAwE,MAAbta,CAAa,OAAAsc,EAAAxG,MAAAkF,KAAbhb,CAAa,WAAAsc,EAAAxG,MAAAyE,SAAbva,CAAa,WAAAsc,EAAAxG,MAAAxP,SAAbtG,CAAa,WAAAsc,EAAAxG,MAAA0E,SAAbxa,CAAa,YAAAsc,EAAAxG,MAAAoF,UAAblb,CAAa,aAAAsc,EAAAxG,MAAA2E,WAAbza,CAAa,UAAAsc,EAAAxG,MAAAC,QAAb/V,CAAa,iBAAAsc,EAAAxG,MAAAyG,eAAbvc,CAAa,cAAAsc,EAAAxG,MAAA0G,YAAbxc,CAAa,kBAAAsc,EAAAxG,MAAAmF,gBAAbjb,CAAa,mBAAAsc,EAAAxG,MAAA2G,iBAAbzc,CAAa,WAAAsc,EAAAzB,SAAb7a,CAAa,aAAAsc,EAAAlc,WAAbJ,CAAa,YAAAsc,EAAAxB,gEAUzD9Z,EAAAA,eAAAA,EAAAA,yBAAAA,IAGsDoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MACtDlD,EAAAA,+CAJ2DlB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA0c,EAAA5G,MAAArV,IAAbT,CAAa,QAAA0c,EAAA5G,MAAArW,MAAbO,CAAa,QAAA0c,EAAA5G,MAAAwE,MAAbta,CAAa,WAAA0c,EAAA5G,MAAAyE,SAAbva,CAAa,WAAA0c,EAAA5G,MAAAxP,SAAbtG,CAAa,WAAA0c,EAAA5G,MAAA0E,SAAbxa,CAAa,qBAAA0c,EAAA5G,MAAA6G,mBAAb3c,CAAa,aAAA0c,EAAA5G,MAAA2E,WAAbza,CAAa,UAAA0c,EAAA5G,MAAAC,QAAb/V,CAAa,YAAA0c,EAAA5B,UAAb9a,CAAa,aAAA0c,EAAAtc,WAAbJ,CAAa,WAAA0c,EAAA7B,+DAMxE7Z,EAAAA,eAAAA,EAAAA,aAAAA,IAIIoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,KAAAA,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAA6X,GAAAnZ,EAAAwB,gBAAAmX,wBAAAtX,MAE3C5D,EAAAA,+CANqClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA6c,EAAA/G,MAAArV,IAAbT,CAAa,QAAA6c,EAAA/G,MAAArW,MAAbO,CAAa,iBAAA6c,EAAA/G,MAAAuE,eAAbra,CAAa,QAAA6c,EAAA/G,MAAAwE,MAAbta,CAAa,OAAA6c,EAAA/G,MAAAkF,KAAbhb,CAAa,WAAA6c,EAAA/G,MAAAyE,SAAbva,CAAa,WAAA6c,EAAA/G,MAAAxP,SAAbtG,CAAa,WAAA6c,EAAA/G,MAAA0E,SAAbxa,CAAa,aAAA6c,EAAA/G,MAAA2E,WAAbza,CAAa,UAAA6c,EAAA/G,MAAAC,QAAb/V,CAAa,UAAA6c,EAAA/G,MAAA2F,QAAbzb,CAAa,YAAA6c,EAAA/B,UAAb9a,CAAa,aAAA6c,EAAAzc,WAAbJ,CAAa,WAAA6c,EAAAhC,oCAQlDhb,EAAAA,UAAAA,EAAAA,gBAAAA,iCAA2CG,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAAyE,EAAAqR,MAAArV,IAAbT,CAAa,QAAAyE,EAAAqR,MAAAwE,MAAbta,CAAa,aAAAyE,EAAAqR,MAAA2E,WAAbza,CAAa,aAAAyE,EAAArE,iEAIxDY,EAAAA,eAAAA,EAAAA,gBAAAA,IAGIoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MACJlD,EAAAA,+CAJ2ClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA8c,EAAAhH,MAAArV,IAAbT,CAAa,MAAA8c,EAAAhH,MAAArW,MAAbO,CAAa,QAAA8c,EAAAhH,MAAAwE,MAAbta,CAAa,WAAA8c,EAAAhH,MAAAyE,SAAbva,CAAa,WAAA8c,EAAAhH,MAAAxP,SAAbtG,CAAa,WAAA8c,EAAAhH,MAAA0E,SAAbxa,CAAa,aAAA8c,EAAAhH,MAAA2E,WAAbza,CAAa,UAAA8c,EAAAhH,MAAAC,QAAb/V,CAAa,WAAA8c,EAAAjC,SAAb7a,CAAa,aAAA8c,EAAA1c,iEAMxDY,EAAAA,eAAAA,EAAAA,eAAAA,IAI8BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,MAC9BlD,EAAAA,+CALyClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA+c,EAAAjH,MAAArV,IAAbT,CAAa,QAAA+c,EAAAjH,MAAArW,MAAbO,CAAa,QAAA+c,EAAAjH,MAAAwE,MAAbta,CAAa,WAAA+c,EAAAjH,MAAAyE,SAAbva,CAAa,WAAA+c,EAAAjH,MAAAxP,SAAbtG,CAAa,WAAA+c,EAAAjH,MAAA0E,SAAbxa,CAAa,qBAAA+c,EAAAjH,MAAA6G,mBAAb3c,CAAa,YAAA+c,EAAAjH,MAAAoF,UAAblb,CAAa,aAAA+c,EAAAjH,MAAA2E,WAAbza,CAAa,UAAA+c,EAAAjH,MAAAC,QAAb/V,CAAa,iBAAA+c,EAAAjH,MAAAyG,eAAbvc,CAAa,YAAA+c,EAAAjC,UAAb9a,CAAa,aAAA+c,EAAA3c,WAAbJ,CAAa,WAAA+c,EAAAlC,+DAOtD7Z,EAAAA,eAAAA,EAAAA,cAAAA,IAK8BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,eAAAA,KAAAA,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAiY,GAAAvZ,EAAAwB,gBAAAmX,wBAAAtX,MAErE5D,EAAAA,+CAPuClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAAid,EAAAnH,MAAArV,IAAbT,CAAa,QAAAid,EAAAnH,MAAArW,MAAbO,CAAa,iBAAAid,EAAAnH,MAAAuE,eAAbra,CAAa,QAAAid,EAAAnH,MAAAwE,MAAbta,CAAa,cAAAid,EAAAnH,MAAAoH,YAAbld,CAAa,OAAAid,EAAAnH,MAAAkF,KAAbhb,CAAa,WAAAid,EAAAnH,MAAAyE,SAAbva,CAAa,WAAAid,EAAAnH,MAAAxP,SAAbtG,CAAa,WAAAid,EAAAnH,MAAA0E,SAAbxa,CAAa,qBAAAid,EAAAnH,MAAA6G,mBAAb3c,CAAa,YAAAid,EAAAnH,MAAAoF,UAAblb,CAAa,aAAAid,EAAAnH,MAAA2E,WAAbza,CAAa,UAAAid,EAAAnH,MAAAC,QAAb/V,CAAa,iBAAAid,EAAAnH,MAAAyG,eAAbvc,CAAa,YAAAid,EAAAnC,UAAb9a,CAAa,aAAAid,EAAA7c,WAAbJ,CAAa,WAAAid,EAAApC,oCASpDhb,EAAAA,UAAAA,EAAAA,iBAAAA,iCAA6CG,EAAAA,WAAAA,MAAAA,EAAAA,MAAAA,IAAAA,CAAiB,QAAAmd,EAAArH,MAAArW,MAAjBO,CAAiB,aAAAmd,EAAA/c,iEAE9DY,EAAAA,eAAAA,EAAAA,oBAAAA,IAC8BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,gBAAAA,aAAAA,KAAAA,CAAqC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAqY,GAAA3Z,EAAAwB,gBAAAoY,eAAAvY,MACnE5D,EAAAA,+CAFkDlB,EAAAA,WAAAA,iBAAAA,EAAAA,eAAAA,CAAiC,QAAAsd,EAAAxH,MAAjC9V,CAAiC,aAAAsd,EAAAld,mCAInFiF,EAAAA,mBAAAA,GD/EOiN,GAAAiG,4BAA8B,0EAD5BjG,IAA4B7O,EAAAqO,kBAAAyL,EAAAC,aAAA/Z,EAAAqO,kBAAA3Q,GAAAsC,EAAAqO,kBAAAnO,EAAA8Z,sBAAAha,EAAAqO,kBAAArO,EAAAsO,YAAAtO,EAAAqO,kBAAArO,EAAAwO,uDAA5BK,GAA4B/R,UAAA,CAAA,CAAA,sBAAA4R,UAAA,SAAArR,EAAAC,oCAeR2c,EAAAA,sCACEA,EAAAA,qDAGpBjW,IAA4B,6aAtB5B,CAACtG,KAA2BT,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,iBAAA,IAAA,CAAA,KAAA,eAAA,EAAA,WAAA,CAAA,KAAA,SAAA,EAAA,SAAA,MAAA,QAAA,MAAA,UAAA,QAAA,CAAA,QAAA,cAAA,EAAA,QAAA,CAAA,QAAA,8CAAA,EAAA,QAAA,EAAA,QAAA,CAAA,UAAA,IAAA,CAAA,EAAA,SAAA,CAAA,EAAA,kBAAA,WAAA,CAAA,EAAA,oBAAA,2BAAA,aAAA,QAAA,CAAA,EAAA,QAAA,CAAA,EAAA,YAAA,qBAAA,sBAAA,CAAA,aAAA,GAAA,YAAA,GAAA,EAAA,kBAAA,iBAAA,cAAA,KAAA,OAAA,EAAA,qBAAA,CAAA,QAAA,iBAAA,EAAA,QAAA,CAAA,EAAA,WAAA,CAAA,OAAA,eAAA,CAAA,YAAA,UAAA,CAAA,OAAA,WAAA,CAAA,gBAAA,GAAA,EAAA,UAAA,SAAA,CAAA,gBAAA,GAAA,EAAA,UAAA,QAAA,EAAA,QAAA,WAAA,CAAA,EAAA,YAAA,QAAA,CAAA,OAAA,gBAAA,CAAA,YAAA,WAAA,CAAA,EAAA,YAAA,CAAA,OAAA,cAAA,EAAA,gBAAA,CAAA,OAAA,aAAA,EAAA,gBAAA,CAAA,OAAA,YAAA,EAAA,gBAAA,CAAA,OAAA,eAAA,CAAA,OAAA,cAAA,CAAA,OAAA,aAAA,CAAA,EAAA,eAAA,CAAA,EAAA,iBAAA,SAAA,KAAA,qBAAA,EAAA,UAAAC,SAAA,SAAAC,EAAAC,SD3B3CE,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,wBAwDAD,EAAAA,eAAAA,EAAAA,MAAAA,GACInB,EAAAA,UAAAA,EAAAA,MAAAA,GACAoB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GACAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,SAAAA,GAGAoE,EAAAA,mBAAAA,EAAAA,KAAAA,GACJnE,EAAAA,sBAPuBnB,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,GAAAA,EAAAA,UAAAA,EAAAA,aAEdD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,iBAAAA,MAAAA,EAAAA,WACGD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,iBAAAA,MAAAA,EAAAA,4lDG7CZ,IAAA2d,GAAA,WAyCI,SAAAA,IAvCSzd,KAAA0S,gBAAiB,EACjB1S,KAAA2a,UAAW,EACX3a,KAAAwB,SAAgB,KAEhBxB,KAAAE,WAA0BC,EAAAA,YAAYwS,YACtC3S,KAAA4a,WAAY,EAEZ5a,KAAAkH,gBAAuB,KACtBlH,KAAA8P,aAAkC,IAAIxH,EAAAA,aACtCtI,KAAA4S,aAAkC,IAAItK,EAAAA,aACtCtI,KAAA0d,sBAA+C,IAAIpV,EAAAA,aACnDtI,KAAA2d,eAAoC,IAAIrV,EAAAA,aACxCtI,KAAAwI,sBAA2C,IAAIF,EAAAA,aAC/CtI,KAAA4d,mBAAwC,IAAItV,EAAAA,oBAEtD3J,OAAAkf,eAAIJ,EAAAnc,UAAA,UAAO,KAAX,WACI,GAAItB,KAAK4V,MAAM0E,UAAYta,KAAK4V,MAAMxP,SAClC,OAAO,EAEP,IAAM0X,EAAc9d,KAAKob,MAAQpb,KAAKob,KAAK2C,IAAI/d,KAAK4V,MAAMrV,KAE1D,QAAIud,GACOA,EAAYE,uCAO/Brf,OAAAkf,eAAIJ,EAAAnc,UAAA,YAAS,KAAb,WACI,IAAMwc,EAAc9d,KAAKob,MAAQpb,KAAKob,KAAK2C,IAAI/d,KAAK4V,MAAMrV,KAC1D,QAAOud,GAAcA,EAAYG,yCAGrCtf,OAAAkf,eAAIJ,EAAAnc,UAAA,UAAO,KAAX,WACI,IAAMwc,EAAc9d,KAAKob,MAAQpb,KAAKob,KAAK2C,IAAI/d,KAAK4V,MAAMrV,KAC1D,QAAOud,GAAcA,EAAYI,uCAKrCT,EAAAnc,UAAA8I,YAAA,WACQpK,KAAK8P,cAAgB9P,KAAK8P,aAAazF,cAEvCrK,KAAK0d,uBAAyB1d,KAAK0d,sBAAsBrT,cAEzDrK,KAAK4S,cAAgB5S,KAAK4S,aAAavI,cAEvCrK,KAAK2d,gBAAkB3d,KAAK2d,eAAetT,cAE3CrK,KAAKwI,uBAAyBxI,KAAKwI,sBAAsB6B,cAEzDrK,KAAK4d,oBAAsB5d,KAAK4d,mBAAmBvT,eAG3DoT,EAAAnc,UAAAuO,eAAA,SAAeC,GACX9P,KAAK8P,aAAaH,KAAKG,IAG3B2N,EAAAnc,UAAA6b,eAAA,SAAevK,GACX5S,KAAK4S,aAAajD,KAAKiD,IAG3B6K,EAAAnc,UAAA4a,wBAAA,SAAwBwB,GACpB1d,KAAK0d,sBAAsB/N,KAAK+N,IAGpCD,EAAAnc,UAAA6a,QAAA,SAAQgC,GACJne,KAAK2d,eAAehO,KAAKwO,IAG7BV,EAAAnc,UAAAya,kBAAA,SAAkBqC,GACdpe,KAAKwI,sBAAsBmH,KAAKyO,IAGpCX,EAAAnc,UAAA+c,aAAA,SAAaxL,GACT7S,KAAK4d,mBAAmBjO,KAAKkD,IAGjC4K,EAAAnc,UAAA2I,YAAA,SAAYC,OAjFhB,uDCJYpJ,EAAAA,eAAAA,EAAAA,sBAAAA,IAGIoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAAuC,sBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAyZ,GAAA/a,EAAAwB,cAAA,GAAAwZ,eAAA3Z,KAAvCV,CAAuC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAyZ,GAAA/a,EAAAwB,cAAA,GAAAoY,eAAAvY,KAAvCV,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAyZ,GAAA/a,EAAAwB,cAAA,GAAAoX,QAAAvX,KAAvCV,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAyZ,GAAA/a,EAAAwB,cAAA,GAAAgX,kBAAAnX,KAAvCV,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAyZ,GAAA/a,EAAAwB,cAAA,GAAAmX,wBAAAtX,MAI3C5D,EAAAA,8EAPgElB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,aAAA0c,EAAAtc,WAAbJ,CAAa,kBAAA0c,EAAAtV,gBAAbpH,CAAa,WAAA0c,EAAAvM,mBAAAzK,KAAAC,IAAb3F,CAAa,kBAAA0c,EAAAgC,aAAb1e,CAAa,QAAA2e,EAAb3e,CAAa,YAAA0c,EAAA5B,sCADjF9Z,EAAAA,eAAAA,EAAAA,gBAAAA,GACIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,sBAAAA,GAQJC,EAAAA,uCAT4ClB,EAAAA,WAAAA,UAAAA,EAAAA,QAAAA,CAAyB,UAAA2e,EAAAC,SAC5C7e,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,eAAAA,EAAAA,wCAH7BgB,EAAAA,eAAAA,EAAAA,gBAAAA,GAEIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,GAUJC,EAAAA,8CAZ6DlB,EAAAA,WAAAA,OAAAA,EAAAA,QAAAA,CAAgB,YAAAuH,EAAAsX,UAAA,MAAhB7e,CAAgB,aAAAuH,EAAAuX,gBAE1D/e,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,6DAiBXgB,EAAAA,eAAAA,EAAAA,sBAAAA,IAGIoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAAuC,sBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAga,GAAAtb,EAAAwB,cAAA,GAAAwZ,eAAA3Z,KAAvCV,CAAuC,gBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAga,GAAAtb,EAAAwB,cAAA,GAAAoY,eAAAvY,KAAvCV,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAga,GAAAtb,EAAAwB,cAAA,GAAAoX,QAAAvX,KAAvCV,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAga,GAAAtb,EAAAwB,cAAA,GAAAgX,kBAAAnX,MAG3C5D,EAAAA,8EANgElB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,aAAAgf,EAAA5e,WAAbJ,CAAa,WAAAgf,EAAAnE,SAAb7a,CAAa,kBAAAgf,EAAA5X,gBAAbpH,CAAa,WAAAgf,EAAA7O,mBAAAzK,KAAAC,IAAb3F,CAAa,kBAAAgf,EAAAN,aAAb1e,CAAa,QAAAif,EAAbjf,CAAa,YAAAgf,EAAAlE,8CDZ5E6C,uCAAAA,GAA8Bpd,UAAA,CAAA,CAAA,wBAAAC,OAAA,CAAAsV,MAAA,QAAAlD,eAAA,iBAAAiI,SAAA,WAAAnZ,SAAA,WAAA4Z,KAAA,OAAAlb,WAAA,aAAA0a,UAAA,YAAA1T,gBAAA,mBAAA8X,QAAA,CAAAlP,aAAA,eAAA8C,aAAA,eAAA8K,sBAAA,wBAAAC,eAAA,iBAAAnV,sBAAA,wBAAAoV,mBAAA,sBAAAqB,SAAA,CAAA1b,EAAA2b,sBAAA1e,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,WAAA,aAAA,CAAA,EAAA,OAAA,MAAA,iBAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,cAAA,aAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,WAAA,YAAA,aAAA,iBAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,YAAA,aAAA,WAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,WAAA,WAAA,YAAA,aAAA,WAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,WAAA,OAAA,MAAA,QAAA,YAAA,QAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,WAAA,OAAA,MAAA,MAAA,WAAA,UAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,YAAA,mBAAA,cAAA,WAAA,aAAA,iBAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,8BAAA,OAAA,WAAA,WAAA,aAAA,aAAA,iBAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,MAAA,QAAA,WAAA,aAAA,UAAA,aAAA,iBAAA,wBAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,iBAAA,cAAA,kBAAA,mBAAA,WAAA,aAAA,YAAA,eAAA,wBAAA,iBAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,aAAA,UAAA,YAAA,aAAA,WAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,UAAA,YAAA,aAAA,WAAA,eAAA,wBAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,aAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,WAAA,aAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,iBAAA,YAAA,aAAA,WAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,cAAA,OAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,iBAAA,YAAA,aAAA,WAAA,eAAA,wBAAA,EAAA,gBAAA,CAAA,EAAA,MAAA,QAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,iBAAA,QAAA,aAAA,eAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,iBAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,cAAA,aAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,WAAA,YAAA,aAAA,iBAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,YAAA,aAAA,WAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,WAAA,WAAA,YAAA,aAAA,WAAA,gBAAA,CAAA,EAAA,WAAA,OAAA,MAAA,QAAA,YAAA,QAAA,cAAA,CAAA,EAAA,WAAA,OAAA,MAAA,MAAA,WAAA,UAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,YAAA,mBAAA,cAAA,WAAA,aAAA,iBAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,8BAAA,OAAA,WAAA,WAAA,aAAA,aAAA,iBAAA,gBAAA,CAAA,EAAA,MAAA,QAAA,WAAA,aAAA,UAAA,aAAA,iBAAA,yBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,iBAAA,cAAA,kBAAA,mBAAA,WAAA,aAAA,YAAA,eAAA,wBAAA,kBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,aAAA,UAAA,YAAA,aAAA,WAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,UAAA,YAAA,aAAA,WAAA,eAAA,yBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,aAAA,cAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,WAAA,aAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,iBAAA,YAAA,aAAA,WAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,cAAA,OAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,iBAAA,YAAA,aAAA,WAAA,eAAA,yBAAA,CAAA,EAAA,MAAA,QAAA,cAAA,CAAA,EAAA,iBAAA,QAAA,aAAA,eAAA,iBAAAC,SAAA,SAAAC,EAAAC,SDd3CnB,EAAAA,wBAAAA,EAAAA,GAEIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,cAAAA,GAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,iBAAAA,GAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,WAAAA,GAQAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,uBAAAA,GAIAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,YAAAA,GASAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,sBAAAA,GAQAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,GAKAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,wBAAAA,GAUAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,GAAAA,yBAAAA,IAMAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,GAAAA,aAAAA,IAQAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,IAIAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,GAAAA,gBAAAA,IAMAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,GAAAA,eAAAA,IAOAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,GAAAA,cAAAA,IASAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,EAAAA,iBAAAA,IAEAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,IAIAA,EAAAA,WAAAA,GAAAA,GAAAA,EAAAA,EAAAA,eAAAA,IAEJnB,EAAAA,+BAhHcE,EAAAA,WAAAA,WAAAA,EAAAA,MAAAA,YAAAA,CAA8B,YAAAe,EAAAua,MAE3Bvb,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,WAMGD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,cAMFD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,YAMJD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,QAQYD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,UAIXD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,SASUD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,UAQXD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,QAKaD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,MAUCD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,oBAMZD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,UAQGD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,aAIAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,aAMDD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,YAODD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,WASGD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,cAEGD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,gBAILD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,ypBEtFVgB,EAAAA,eAAAA,EAAAA,gBAAAA,IAEIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,sBAAAA,IAOJC,EAAAA,uCAT4ClB,EAAAA,WAAAA,UAAAA,EAAAA,QAAAA,CAAyB,UAAAif,EAAAL,QAAzB5e,CAAyB,UAAAyD,EAAA4b,gBAAA,EAAAC,GAAA,MAAAL,EAAAjE,KAAA,QAAA,WAE5Cjb,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,eAAAA,EAAAA,oFAJ7BgB,EAAAA,eAAAA,EAAAA,gBAAAA,IAEIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,IAUJC,EAAAA,8CAZ6DlB,EAAAA,WAAAA,OAAAA,EAAAA,QAAAA,CAAgB,YAAAqb,EAAAwD,UAAA,MAAhB7e,CAAgB,aAAAqb,EAAAkE,eAAhBvf,CAAgB,UAAAyD,EAAA4b,gBAAA,EAAAG,GAAAnE,EAAAhS,aAE1DtJ,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,+BAafqF,EAAAA,mBAAAA,yBAEIA,EAAAA,mBAAAA,4BAAApE,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,mDAAcjB,EAAAA,WAAAA,mBAAAA,wDAMVgB,EAAAA,eAAAA,EAAAA,sBAAAA,IAC6DoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAA0a,GAAAhc,EAAAwB,cAAA,GAAAoX,QAAAvX,KAAvCV,CAAuC,yBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAA0a,GAAAhc,EAAAwB,cAAA,GAAAgX,kBAAAnX,MAGpG5D,EAAAA,8EAJgElB,EAAAA,WAAAA,kBAAAA,EAAAA,gBAAAA,CAAmC,WAAA0f,EAAAvP,mBAAAzK,KAAAC,IAAnC3F,CAAmC,QAAA2f,EAAnC3f,CAAmC,OAAA0f,EAAApE,KAAnCtb,CAAmC,aAAA0f,EAAAtf,WAAnCJ,CAAmC,aAAA,EAAnCA,CAAmC,WAAA0f,EAAA7E,mGAHvG7Z,EAAAA,eAAAA,EAAAA,MAAAA,IAGIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,sBAAAA,IAKJC,EAAAA,sEAPIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,GAAAA,cAAAA,EAAAA,YAAAA,CAA8C,UAAAyD,EAAA4b,gBAAA,EAAAO,GAAA,MAAAC,EAAAC,iBAAA,MAAAD,EAAAC,gBAAAjb,cAAAkb,GAAA,KAAAF,EAAAC,gBAAAjb,cAAAkb,GAAA1R,wBAEzBtO,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,eAAAA,EAAAA,uCAHzBiB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,kCAAKjB,EAAAA,WAAAA,UAAAA,EAAAA,mCANbJ,EAAAA,wBAAAA,GACIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,IACAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,wBAGAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,wBAWJnB,EAAAA,6FAfkBC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,SAAAA,CAAuD,WAAAggB,EAAvDhgB,CAAuD,WAAAigB,wDAmBjEjf,EAAAA,eAAAA,EAAAA,sBAAAA,IAC6DoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAmb,GAAAzc,EAAAwB,cAAA,GAAAoX,QAAAvX,MAGpG5D,EAAAA,8EAJgElB,EAAAA,WAAAA,kBAAAA,EAAAA,gBAAAA,CAAmC,WAAAmgB,EAAAhQ,mBAAAzK,KAAAC,IAAnC3F,CAAmC,QAAAogB,EAAnCpgB,CAAmC,OAAAmgB,EAAA7E,KAAnCtb,CAAmC,aAAAmgB,EAAA/f,WAAnCJ,CAAmC,aAAA,EAAnCA,CAAmC,WAAAmgB,EAAAtF,qCADvG7Z,EAAAA,eAAAA,EAAAA,MAAAA,IACIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,sBAAAA,IAKJC,EAAAA,uCALyBnB,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,eAAAA,EAAAA,wCAF7BJ,EAAAA,wBAAAA,GACIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,IAOJnB,EAAAA,uDAPSC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,UAAAA,EAAAA,2IAvDbgB,EAAAA,eAAAA,EAAAA,WAAAA,GAOIC,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,GAeAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,GAcAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,GAkBAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,GAcJC,EAAAA,6CApEuBlB,EAAAA,WAAAA,YAAAA,EAAAA,KAAAA,CAAkB,WAAAoa,EAAAiG,SAAlBrgB,CAAkB,UAAAyD,EAAA4b,gBAAA,EAAAiB,GAAAlG,EAAAha,YAAAga,EAAA/Z,YAAAsQ,cAAA,MAAAyJ,EAAAjK,oBAAA,MAAAiK,EAAAjK,mBAAAzK,KAAA,KAAA0U,EAAAjK,mBAAAzK,KAAA6a,kBAAlBvgB,CAAkB,UAAAyD,EAAAuC,gBAAA,GAAAwa,GAAApG,EAAAha,YAAAga,EAAA/Z,YAAAwS,YAAA,GAAAuH,EAAA/S,aAOtBtH,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,YAAAA,EAAAA,YAAAA,aAeAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,YAAAA,EAAAA,YAAAA,aAcDD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,YAAAA,EAAAA,YAAAA,cAkBAD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,OAAAA,EAAAA,YAAAA,EAAAA,YAAAA,gEAqBNgB,EAAAA,eAAAA,EAAAA,YAAAA,IAIIoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,QAAAA,MACJlD,EAAAA,8EALmClB,EAAAA,WAAAA,WAAAA,EAAAA,SAAAA,CAAqB,OAAAygB,EAAAnF,KAArBtb,CAAqB,MAAA0gB,EAAAjgB,IAArBT,CAAqB,MAAA0gB,EAAArG,eAArBra,CAAqB,WAAA0gB,EAAAjhB,MAArBO,CAAqB,UAAA0gB,EAAAjF,QAArBzb,CAAqB,QAAA0gB,EAAApG,MAArBta,CAAqB,OAAA0gB,EAAA1F,KAArBhb,CAAqB,WAAA0gB,EAAAnG,SAArBva,CAAqB,WAAA0gB,EAAApa,SAArBtG,CAAqB,WAAA0gB,EAAAlG,SAArBxa,CAAqB,aAAA0gB,EAAAjG,WAArBza,CAAqB,UAAA0gB,EAAA3K,QAArB/V,CAAqB,aAAAygB,EAAArgB,sCAOxDP,EAAAA,UAAAA,EAAAA,gBAAAA,gEAA2CG,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA0gB,EAAAjgB,IAAbT,CAAa,MAAA0gB,EAAAjhB,MAAbO,CAAa,QAAA0gB,EAAApG,MAAbta,CAAa,WAAA0gB,EAAAnG,SAAbva,CAAa,WAAA0gB,EAAApa,SAAbtG,CAAa,WAAA0gB,EAAAlG,SAAbxa,CAAa,aAAA0gB,EAAAjG,WAAbza,CAAa,UAAA0gB,EAAA3K,QAAb/V,CAAa,aAAA2gB,EAAAvgB,sCAMxDP,EAAAA,UAAAA,EAAAA,eAAAA,gEAAyCG,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA0gB,EAAAjgB,IAAbT,CAAa,QAAA0gB,EAAAjhB,MAAbO,CAAa,QAAA0gB,EAAApG,MAAbta,CAAa,OAAA0gB,EAAA1F,KAAbhb,CAAa,WAAA0gB,EAAAnG,SAAbva,CAAa,WAAA0gB,EAAApa,SAAbtG,CAAa,WAAA0gB,EAAAlG,SAAbxa,CAAa,aAAA0gB,EAAAjG,WAAbza,CAAa,UAAA0gB,EAAA3K,QAAb/V,CAAa,kBAAA0gB,EAAAzF,gBAAbjb,CAAa,aAAA4gB,EAAAxgB,iEAMtDY,EAAAA,eAAAA,EAAAA,sBAAAA,IAG8BoD,EAAAA,WAAAA,kBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,QAAAA,MAC9BlD,EAAAA,8EAJ8ClB,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA0gB,EAAAjgB,IAAbT,CAAa,QAAA0gB,EAAAjhB,MAAbO,CAAa,iBAAA0gB,EAAArG,eAAbra,CAAa,QAAA0gB,EAAApG,MAAbta,CAAa,OAAA0gB,EAAA1F,KAAbhb,CAAa,WAAA0gB,EAAApa,SAAbtG,CAAa,WAAA0gB,EAAAlG,SAAbxa,CAAa,aAAA0gB,EAAAjG,WAAbza,CAAa,aAAA6gB,EAAAzgB,sCAM3DP,EAAAA,UAAAA,EAAAA,eAAAA,gEAAyCG,EAAAA,WAAAA,OAAAA,EAAAA,KAAAA,CAAa,MAAA0gB,EAAAjgB,IAAbT,CAAa,QAAA0gB,EAAAjhB,MAAbO,CAAa,QAAA0gB,EAAApG,MAAbta,CAAa,WAAA0gB,EAAAnG,SAAbva,CAAa,WAAA0gB,EAAApa,SAAbtG,CAAa,WAAA0gB,EAAAlG,SAAbxa,CAAa,qBAAA0gB,EAAA/D,mBAAb3c,CAAa,YAAA0gB,EAAAxF,UAAblb,CAAa,aAAA0gB,EAAAjG,WAAbza,CAAa,UAAA0gB,EAAA3K,QAAb/V,CAAa,aAAA8gB,EAAA1gB,iEAOtDY,EAAAA,eAAAA,EAAAA,wBAAAA,IAI8BoD,EAAAA,WAAAA,gBAAAA,SAAAA,GAAAA,OAAAA,EAAAA,cAAAA,GAAAA,EAAAA,cAAAA,GAAAA,eAAAA,KAAAA,CAAuC,kBAAA,SAAAU,GAAA,OAAArB,EAAAsB,cAAAgc,GAAAtd,EAAAwB,cAAA,GAAAoX,QAAAvX,MACrE5D,EAAAA,8EAL4ClB,EAAAA,WAAAA,KAAAA,EAAAA,IAAAA,CAAgB,OAAAghB,EAAA1F,KAAhBtb,CAAgB,MAAA0gB,EAAAjgB,IAAhBT,CAAgB,QAAA0gB,EAAAjhB,MAAhBO,CAAgB,iBAAA0gB,EAAArG,eAAhBra,CAAgB,QAAA0gB,EAAApG,MAAhBta,CAAgB,OAAA0gB,EAAA1F,KAAhBhb,CAAgB,WAAA0gB,EAAAnG,SAAhBva,CAAgB,WAAA0gB,EAAApa,SAAhBtG,CAAgB,WAAA0gB,EAAAlG,SAAhBxa,CAAgB,YAAA0gB,EAAAxF,UAAhBlb,CAAgB,aAAA0gB,EAAAjG,WAAhBza,CAAgB,UAAA0gB,EAAA3K,QAAhB/V,CAAgB,aAAAghB,EAAA5gB,mCAQxDiF,EAAAA,mBAAAA,yBAGIA,EAAAA,mBAAAA,6BAIIrE,EAAAA,eAAAA,EAAAA,IAAAA,IAE6B+C,EAAAA,OAAAA,GAA0B7C,EAAAA,wDADdgD,EAAAA,sBAAAA,QAAAA,EAAAA,gBACrCA,EAAAA,sBAAAA,OAAAA,EAAAA,MAAAA,EAAAA,eAFDlE,EAAAA,WAAAA,KAAAA,EAAAA,KAE0BD,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,0CAF7B/C,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IAAAA,4CACIjB,EAAAA,WAAAA,OAAAA,MAAAA,EAAAA,+EAIJgB,EAAAA,eAAAA,EAAAA,OAAAA,IAE2C+C,EAAAA,OAAAA,GAA0B7C,EAAAA,wDADjEgD,EAAAA,sBAAAA,QAAAA,EAAAA,gBADElE,EAAAA,WAAAA,KAAAA,EAAAA,IAAAA,CAAgB,UAAAyD,EAAA4b,gBAAA,EAAA4B,GAAAP,EAAAxF,YAEqBnb,EAAAA,UAAAA,GAAAiE,EAAAA,kBAAAA,EAAAA,2CAX/C/C,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,IAGAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,wBAKAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,uGAPIjB,EAAAA,WAAAA,OAAAA,eAAAA,EAAAA,MAAAA,SAAAA,EAAAA,KAAAA,CAA+F,WAAAkhB,EAA/FlhB,CAA+F,WAAAmhB,2BAcnGngB,EAAAA,eAAAA,EAAAA,QAAM+C,EAAAA,OAAAA,EAAAA,KAAM7C,EAAAA,0CAnBpBtB,EAAAA,wBAAAA,GACIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,IAEAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,wBAeAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,wBAGJnB,EAAAA,sGApBkBC,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,QAAAA,MAAAA,EAAAA,eAAAA,KAAAA,EAAAA,eAAAA,QAAAA,EAAAA,CAA6E,WAAAohB,EAA7EphB,CAA6E,WAAAqhB,8BA5CvGrgB,EAAAA,eAAAA,EAAAA,MAAAA,IAGIpB,EAAAA,wBAAAA,EAAAA,IACIqB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,YAAAA,IAOAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,gBAAAA,IAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,eAAAA,IAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,sBAAAA,IAMAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,eAAAA,IAOAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,wBAAAA,IAOAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,eAAAA,IAsBJnB,EAAAA,wBACJoB,EAAAA,sEAjEIlB,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,GAAAA,MAAAA,EAAAA,iBAAAA,MAAAA,EAAAA,gBAAAA,cAAAA,GAAAA,KAAAA,EAAAA,gBAAAA,cAAAA,GAAAA,uBAAAA,CAAiF,UAAAyD,EAAA4b,gBAAA,GAAAiC,GAAA,cAAAZ,EAAAjG,aAEnE1a,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,WAAAA,EAAAA,aACCD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,SAOID,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,aAMDD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,YAMOD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,UAMPD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,YAOSD,EAAAA,UAAAA,GAAAC,EAAAA,WAAAA,eAAAA,gCApC/BiB,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,MAAAA,iCAAKjB,EAAAA,WAAAA,UAAAA,EAAAA,2BCufL,SAAAuhB,EACYC,EACA/O,EACAgP,EACDlP,EACPmP,GAJQxhB,KAAAshB,cAAAA,EACAthB,KAAAuS,qBAAAA,EACAvS,KAAAuhB,UAAAA,EACDvhB,KAAAqS,GAAAA,EAnhBFrS,KAAAyhB,UAAW,EAEXzhB,KAAAmJ,YAAa,EACbnJ,KAAA0hB,eAAgB,EAEhB1hB,KAAA2a,UAAW,EACX3a,KAAAE,WAA0BC,EAAAA,YAAYwS,YACtC3S,KAAAuG,SAAW,GACXvG,KAAAwB,SAAW,IACXxB,KAAAmB,SAAW,IACXnB,KAAAgC,WAAa,IACbhC,KAAA4a,WAAY,EACZ5a,KAAAmG,kBAAmB,EACnBnG,KAAAmH,YAAa,EACbnH,KAAAkH,gBAAuB,KACvBlH,KAAA4G,SAAW,GAEV5G,KAAAyI,mBAA6D,IAAIH,EAAAA,aACjEtI,KAAA0d,sBAA+C,IAAIpV,EAAAA,aACnDtI,KAAA6S,aAAmC,IAAIvK,EAAAA,aACvCtI,KAAA4S,aAAmC,IAAItK,EAAAA,aACvCtI,KAAAuI,mBAAwC,IAAID,EAAAA,aAC5CtI,KAAAwI,sBAA2C,IAAIF,EAAAA,aAEzDtI,KAAAG,YAAcA,EAAAA,YACdH,KAAAmgB,UAAW,EAKXngB,KAAAwe,cAAe,EAMfxe,KAAAoX,KAAkC,GAClCpX,KAAA2hB,OAA6B,GAC7B3hB,KAAA4hB,QAAU,EAEV5hB,KAAA6hB,6BAA8B,EAM9B7hB,KAAA8hB,oBAA2B,KAE3B9hB,KAAA+hB,kBAAmB,EAGZ/hB,KAAAgiB,QAAUpgB,KAoeb5B,KAAKiiB,OAAST,EAAQ7P,KAAK,IAAI/S,gBAle5ByiB,EAAAa,qBAAP,SAA4BC,EAAmBC,EAA0CV,GACrF,IAAMC,EAA6B,GA+GnC,OA7GAS,EAAcpW,SAAQ,SAAA4J,GAClB,IAAIyM,EACErF,EAAcpH,EAAMtR,QAEtBsR,EAAMtR,QAAQge,cAAcC,QAAQ,WAAa,EACjDF,EAAc,IAAIG,EAAAA,oBAAoB,CAClCjiB,IAAKqV,EAAMtR,QACX8V,MAAOxE,EAAMtR,QACbwW,KAAM,OACNkC,YAAWA,EACX1C,UAAWoH,EACXtb,UAAWwP,EAAM6M,UAAYf,EAC7BgB,QAAQ,EACRrI,UAAU,EACV9a,MAAOqW,EAAM6B,MACb0C,eAAgBvE,EAAM+M,eACtBnK,IAAK,EACL3C,QAAS,EACT+C,IAAK,EACL8F,QAAS,EACTnE,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCC,MAAO,IAEJlN,EAAMtR,QAAQge,cAAcC,QAAQ,SAAW,EACtDF,EAAc,IAAIG,EAAAA,oBAAoB,CAClCjiB,IAAKqV,EAAMtR,QACX8V,MAAOxE,EAAMtR,QACbwW,KAAM,OACNkC,YAAWA,EACX1C,UAAWoH,EACXtb,UAAWwP,EAAM6M,UAAYf,EAC7BgB,QAAQ,EACRrI,UAAU,EACV9a,MAAOqW,EAAM6B,MACb0C,eAAgBvE,EAAM+M,eACtBnK,IAAK,EACL3C,QAAS,EACT+C,IAAK,EACL8F,QAAS,EACTnE,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCC,MAAO,IAEJlN,EAAMtR,QAAQge,cAAcC,QAAQ,UAAY,EACvDF,EAAc,IAAIU,EAAAA,mBAAmB,CACjCxiB,IAAKqV,EAAMtR,QACX8V,MAAOxE,EAAMtR,QACb0Y,YAAWA,EACXzB,QAAS3F,EAAMoN,eACf1I,UAAWoH,EACXtb,UAAWwP,EAAM6M,UAAYf,EAC7BgB,QAAQ,EACRrI,UAAU,EACV9a,MAAOqW,EAAM6B,MACb0C,eAAgBvE,EAAM+M,eACtBnK,IAAK,EACL3C,QAAS,EACT+C,IAAK,EACL8F,QAAS,EACTnE,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCC,MAAO,IAEJlN,EAAMtR,QAAQge,cAAcC,QAAQ,YAAc,EACzDF,EAAc,IAAIG,EAAAA,oBAAoB,CAClCjiB,IAAKqV,EAAMtR,QACX8V,MAAOxE,EAAMtR,QACbwW,KAAM,OACNkC,YAAWA,EACX1C,UAAWoH,EACXtb,UAAWwP,EAAM6M,UAAYf,EAC7BgB,QAAQ,EACRrI,UAAU,EACV9a,MAAOqW,EAAM6B,MACb0C,eAAgBvE,EAAM+M,eACtBnK,IAAK,EACL3C,QAAS,EACT+C,IAAK,EACL8F,QAAS,EACTnE,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCC,MAAO,IAEJlN,EAAMtR,QAAQge,cAAcC,QAAQ,YAAc,IACzDF,EAAc,IAAIU,EAAAA,mBAAmB,CACjCxiB,IAAKqV,EAAMtR,QACX8V,MAAOxE,EAAMtR,QACb0Y,YAAWA,EACXzB,QAAS3F,EAAMoN,eACf1I,UAAWoH,EACXtb,UAAWwP,EAAM6M,UAAYf,EAC7BgB,QAAQ,EACRrI,UAAU,EACV9a,MAAOqW,EAAM6B,MACb0C,eAAgBvE,EAAM+M,eACtBnK,IAAK,EACL3C,QAAS,EACT+C,IAAK,EACL8F,QAAS,EACTnE,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCC,MAAO,KAIfnB,EAAO5M,KAAKsN,MAGTV,EAAOsB,MAAK,SAACC,EAAIC,GAAO,OAACD,EAAGJ,MAAQK,EAAGL,MAAQ,EAAII,EAAGJ,MAAQK,EAAGL,OAAS,EAAI,MAGlFzB,EAAA+B,cAAP,SAAqBC,GACjB,OAAOA,EAAed,QAAQ,WAAa,GAGjClB,EAAAiC,2BAAP,SAAkCnB,EAAmBoB,GACxD,IAAIC,GAAmB,EAUvB,OARID,EAAc3W,OAAOuJ,GAAKgM,EAAavV,OAAOuJ,GAC9CoN,EAAc3W,OAAOuJ,EAAIgM,EAAavV,OAAOuJ,EAAIgM,EAAavV,OAAOwJ,QACrEmN,EAAc3W,OAAO6W,GAAKtB,EAAavV,OAAO6W,GAC9CF,EAAc3W,OAAO6W,EAAItB,EAAavV,OAAO6W,EAAItB,EAAavV,OAAO8W,QAErEF,GAAmB,GAGhBA,GAGGnC,EAAAsC,yBAAP,SAAgCxB,EAAmByB,EAAgBlC,GACtE,GAAKS,GAAiByB,EAAtB,CAEA,IAAM5G,EAAcmF,EAAa0B,WAAanC,EAAgB,GAAKS,EAAa2B,MAEhF,MAAO,CACHvjB,IAAK4hB,EAAa7d,QAClB8V,MAAO+H,EAAa2B,MACpBhJ,KAAM,OACNiJ,UAAWH,EAAUI,UACrBhH,YAAWA,EACX1C,SAAU6H,EAAa0B,WAAanC,EACpCtb,UAAWwd,EAAUnB,UAAYf,EACjCgB,OAAQP,EAAa8B,OACrB5J,SAAU8H,EAAa+B,UACvB3kB,MAAOqkB,EAAUnM,MACjB0C,eAAgByJ,EAAUjB,eAC1B5H,gBAAiB6I,EAAUO,gBAC3B3L,IAAK2J,EAAavV,OAAOuJ,EACzBN,QAASsM,EAAavV,OAAOwJ,OAC7BwC,IAAKuJ,EAAavV,OAAO6W,EACzB/E,QAASyD,EAAavV,OAAO8W,MAC7BnJ,WAAY4H,EAAavV,OAAOC,WAChC+V,WAAYT,EAAavV,OAAOiW,WAChCtH,QAASqI,EAAUZ,eACnBxI,iBAAa4J,EACb3H,mBAAoB0F,EAAakC,mBACjCpJ,SAAUkH,EAAamC,SACvBpJ,SAAUiH,EAAaoC,SAIvBvJ,UAAW4I,EAAUY,UACrBjI,iBAAkBqH,EAAUa,oBAItBpD,EAAAqD,qBAAP,SAA4BvC,EAAmByB,EAAgBlC,EAClEjG,EAAgBC,EAAuBF,EACvCha,EAAeL,EAAea,GAC9B,IAAIqgB,EACE9G,EAAU8F,EAAqBsC,yBAAyBxB,EAAcyB,EAAWlC,GAEvF,GAA6B,eAAzBS,EAAa7d,QAA0B,CAGvC,GAFAiX,EAAQT,KAAO,OAEuB,IAAlC8I,EAAUe,qBAA6Bf,EAAUZ,eAAe3jB,OAAS,EAAG,CAE5Ekc,EAAQA,QADe,CAAC,CAAEzF,IAAK,cAAe2B,MAAO,QAAU,CAAE3B,IAAK,gBAAiB2B,MAAO,WAC7DvK,QAAO,SAAA0X,GAAU,OAAAA,GAAUhB,EAAUZ,eAAe6B,SAASD,EAAO9O,aAGrGyF,EAAQA,QAAU,KAGtB8G,EAAc,IAAIyC,EAAAA,iBAAiBvJ,QAChC,GAA6B,qBAAzB4G,EAAa7d,SACK,kBAAzB6d,EAAa7d,SAC6B,IAA1C6d,EAAa7d,QAAQie,QAAQ,SACzBqB,EAAUzX,YAAcC,EAAAA,WAAW2Y,aACnCxJ,EAAQT,KAAO,SACR8I,EAAUzX,YAAcC,EAAAA,WAAWO,QAC1C4O,EAAQT,KAAO,gBACR8I,EAAUzX,YAAcC,EAAAA,WAAWI,4BAC1CoX,EAAUzX,YAAcC,EAAAA,WAAW6M,YACnCsC,EAAQT,KAAO,KACfS,EAAQe,aAAc,GACfsH,EAAUzX,YAAcC,EAAAA,WAAWG,+BAC1CqX,EAAUzX,YAAcC,EAAAA,WAAW2M,eACnCwC,EAAQT,KAAO,KACfS,EAAQe,aAAc,GACfsH,EAAUzX,YAAcC,EAAAA,WAAWK,wBAC1C8O,EAAQT,KAAO,cACfS,EAAQe,aAAc,GACfsH,EAAUzX,YAAcC,EAAAA,WAAWM,sBAC1C6O,EAAQT,KAAO,cACfS,EAAQe,aAAc,GAG1B+F,EAAc,IAAI2C,EAAAA,6BAA6BzJ,QAO/C,OAJIqI,EAAUzX,YAAcC,EAAAA,WAAW6Y,YAAc5D,EAAqB+B,cAAcQ,EAAUtf,WAC9Fsf,EAAUzX,UAAYC,EAAAA,WAAW8Y,cAG7BtB,EAAUzX,WACd,KAAKC,EAAAA,WAAW+Y,QACZ,IAAMC,GAAqBjD,EAAa0B,UAAmBnC,EAC3DnG,EAAQf,YAAc6G,EAAqBa,qBAAqBC,EAC5DyB,EAAUyB,YAAaD,GAC3B/C,EAAc,IAAIiD,EAAAA,oBAAoB/J,GACtC,MAEJ,KAAKnP,EAAAA,WAAW6Y,WAEZ5C,EAAc,IAAIkD,EAAAA,uBAAuBhK,GACzC,MAEJ,KAAKnP,EAAAA,WAAW8Y,aACR7D,EAAqB+B,cAAcjB,EAAa7d,WAChDiX,EAAQ1F,QAAUsM,EAAavV,OAAOwJ,OACtCmF,EAAQ/Z,SAAWA,EACnB+Z,EAAQpa,SAAWA,EACnBoa,EAAQvZ,WAAaA,EAErBqgB,EAAc,IAAImD,EAAAA,yBAAyBjK,IAI/C,MAEJ,KAAKnP,EAAAA,WAAWqZ,KACZlK,EAAQT,KAAO,QACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,IAG1BpB,eAAiBkI,EAAYjc,UAA2C,KAA/Bic,EAAYlI,gBACvC,KAAtBkI,EAAY9iB,MAAe8iB,EAAYlI,eAAiBkI,EAAY9iB,MAExE,MAEJ,KAAK6M,EAAAA,WAAW2Y,aAChB,KAAK3Y,EAAAA,WAAWsZ,OACZnK,EAAQT,KAAO,SACfuH,EAAc,IAAIsD,EAAAA,mBAAmBpK,GACrC,MAEJ,KAAKnP,EAAAA,WAAWwZ,WACZrK,EAAQT,KAAO,aACfuH,EAAc,IAAIwD,EAAAA,uBAAuBtK,GACzC,MAEJ,KAAKnP,EAAAA,WAAWE,UACZiP,EAAQT,KAAO,YACfuH,EAAc,IAAIyD,EAAAA,sBAAsBvK,GACxC,MAEJ,KAAKnP,EAAAA,WAAWC,MAChB,KAAKD,EAAAA,WAAW2Z,SACZxK,EAAQT,KAAO,QACfS,EAAQE,UAAYA,GAAazb,KAAKsjB,2BAA2BnB,EAAc1G,GAAaA,EAAY,KACxGF,EAAQG,iBAAmBA,GACvB1b,KAAKsjB,2BAA2BnB,EAAczG,GAAoBA,EAAmB,KACzFH,EAAQC,gBAAkBA,GACtBxb,KAAKsjB,2BAA2BnB,EAAc3G,GAAmBA,EAAkB,KAEvF6G,EAAc,IAAI2D,EAAAA,kBAAkBzK,GACpC,MAEJ,KAAKnP,EAAAA,WAAW6Z,OACZ1K,EAAQT,KAAO,SACfuH,EAAc,IAAI6D,EAAAA,mBAAmB3K,GACrC,MAEJ,KAAKnP,EAAAA,WAAW+Z,MACZ5K,EAAQT,KAAO,QACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWga,MACZ7K,EAAQT,KAAO,QACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWia,SACZ9K,EAAQT,KAAO,WACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAW2L,QAChB,KAAK3L,EAAAA,WAAWka,QAChB,KAAKla,EAAAA,WAAWma,qBAChB,KAAKna,EAAAA,WAAWoa,WAChB,KAAKpa,EAAAA,WAAWqa,iBAChB,KAAKra,EAAAA,WAAWsa,cACZrE,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWua,SACZtE,EAAc,IAAIuE,EAAAA,qBAAqBrL,GACvC,MAGJ,KAAKnP,EAAAA,WAAWya,aACZxE,EAAc,IAAIyE,EAAAA,6BAA6BvL,GAC/C,MAEJ,KAAKnP,EAAAA,WAAWY,KAChB,KAAKZ,EAAAA,WAAW2a,YAChB,KAAK3a,EAAAA,WAAW4a,eAChB,KAAK5a,EAAAA,WAAW6a,YACZ1L,EAAQT,KAAO8I,EAAUzX,YAAcC,EAAAA,WAAW6a,YAAc,WAAa,OAC7E5E,EAAc,IAAI6E,EAAAA,iBAAiB3L,GACnC,MAEJ,KAAKnP,EAAAA,WAAW2M,cAChB,KAAK3M,EAAAA,WAAW0M,cAChB,KAAK1M,EAAAA,WAAW+a,WACZ5L,EAAQT,KAAO,MACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWgb,WACZ7L,EAAQT,KAAO,aACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWib,SACZ9L,EAAQT,KAAO,WACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAW6M,WAChB,KAAK7M,EAAAA,WAAW4M,eAChB,KAAK5M,EAAAA,WAAWkb,YAChB,KAAKlb,EAAAA,WAAWmb,IAChB,KAAKnb,EAAAA,WAAWob,OACZjM,EAAQT,KAAO,OACfuH,EAAc,IAAIG,EAAAA,oBAAoBjH,GACtC,MAEJ,KAAKnP,EAAAA,WAAWqb,QAChB,KAAKrb,EAAAA,WAAWsb,eACZrF,EAAc,IAAIsF,EAAAA,qBAAqBpM,GACvC,MAEJ,KAAKnP,EAAAA,WAAWwb,YACZrM,EAAQT,KAAO,cACfuH,EAAc,IAAIsF,EAAAA,qBAAqBpM,GACvC,MAEJ,KAAKnP,EAAAA,WAAWyb,SAChB,KAAKzb,EAAAA,WAAW0b,cAChB,KAAK1b,EAAAA,WAAW2b,gBAEZ1F,EAAc,IAAIU,EAAAA,mBAAmBxH,GACrC,MAEJ,KAAKnP,EAAAA,WAAW4b,aAChB,KAAK5b,EAAAA,WAAW6b,uBAChB,KAAK7b,EAAAA,WAAW8b,kBACZ3M,EAAQT,KAAO,QACfuH,EAAc,IAAIU,EAAAA,mBAAmBxH,GACrC,MAEJ,KAAKnP,EAAAA,WAAW+b,kBACZ5M,EAAQT,KAAO,YACfS,EAAQ6M,oBAAsBxE,EAAUyE,oBACxC9M,EAAQ+M,uBAAyB1E,EAAU2E,uBAC3ChN,EAAQO,4BAA8B8H,EAAU4E,4BAChDnG,EAAc,IAAIsD,EAAAA,mBAAmBpK,GACrC,MAEJ,KAAKnP,EAAAA,WAAWqc,cACZlN,EAAQT,KAAO,gBACfuH,EAAc,IAAIsD,EAAAA,mBAAmBpK,GACrC,MAEJ,KAAKnP,EAAAA,WAAWsc,UACZrG,EAAc,IAAIsG,EAAAA,sBAAsBpN,GACxC,MAKJ,KAAKnP,EAAAA,WAAWI,2BAChB,KAAKJ,EAAAA,WAAWG,8BACZgP,EAAQT,KAAO,KACfS,EAAQe,YAAcsH,EAAUzX,YAAcC,EAAAA,WAAWI,2BAEzD6V,EAAc,IAAI2C,EAAAA,6BAA6BzJ,GAC/C,MAEJ,KAAKnP,EAAAA,WAAWO,QACZ4O,EAAQT,KAAO,gBAEfuH,EAAc,IAAI2C,EAAAA,6BAA6BzJ,GAW3D,OALK8G,IACD9G,EAAQnB,MAAQ+H,EAAa7d,QAAU,uBACvC+d,EAAc,IAAIsG,EAAAA,sBAAsBpN,IAGrC8G,GAGGhB,EAAAuH,uBAAP,SAA8BhT,GACjC,IAAIiT,EAAsBjT,EAAMuE,eAYhC,MAT0B,aAAtBvE,EAAM3V,cACN4oB,EAA8C,SAAxBA,GAIA,WAAtBjT,EAAM3V,cACN4oB,EAA8C,MAAxBA,EAA8B,GAAKA,GAGtDA,GAGIxH,EAAAyH,eAAP,SAAsBnH,EAA4BtP,EACtDE,GACA,IAAMwW,EAAQ,GA8Bd,OA7BIpH,GAAUA,EAAOtiB,OAAS,GAC1BsiB,EAAO3V,SAAQ,SAAA4J,GACX,GAAIA,EAAM4E,aAAe5E,EAAM4E,YAAYnb,OAAS,EAAG,CACnD,IAAM2pB,EAAW,GAEjBpT,EAAM4E,YAAYxO,SAAQ,SAAAid,IAClBA,EAAW5O,UAAczE,EAAM0E,UAAa1E,EAAMxP,SAMlD4iB,EAASC,EAAW1oB,KAAO,CAAC,CACxBhB,MAAO0pB,EAAW9O,gBAAkB,GACpC/T,SAAUwP,EAAM0E,UAAY1E,EAAMxP,UAAY6iB,EAAW7iB,UAC1D,CAAC8iB,EAAAA,WAAWC,gBARfH,EAASC,EAAW1oB,KAAO,CAAC,CACxBhB,MAAO0pB,EAAW9O,gBAAkB,GACpC/T,SAAUwP,EAAM0E,UAAY1E,EAAMxP,UAAY6iB,EAAW7iB,UAC1D,CAAC8iB,EAAAA,WAAW7O,cASvB0O,EAAMnT,EAAMrV,KAAO8R,EAAG0W,MAAMC,OACzB,CACH,IAAMI,EAAa7W,EAAqB8W,sBAAsBzT,EAAMyE,SAAUzE,EAAM0E,SAChF1E,EAAMxP,SAAUwP,EAAM6G,mBAAoB7G,EAAMkF,KAA4B,aAAtBlF,EAAM3V,aAC1D4oB,EAAsBxH,EAAqBuH,uBAAuBhT,GACxEmT,EAAMnT,EAAMrV,KAAO,CAAC,CAAEhB,MAAOspB,GAAuB,GAAIziB,SAAUwP,EAAMxP,UAAYgjB,OAKzF/W,EAAG0W,MAAMA,IAcb1H,EAAA/f,UAAAgoB,0BAAA,mBACG3H,EAA6B3hB,KAAK2hB,OACpC4H,EAA0B,GAC1BC,EAAoB,OAIxB,IAAoB,IAAAC,EAAA5qB,EAAA8iB,GAAM+H,EAAAD,EAAAnqB,QAAAoqB,EAAAlqB,KAAAkqB,EAAAD,EAAAnqB,OAAE,CAAvB,IAAMsW,EAAK8T,EAAAnqB,MACNue,EAAc9d,KAAKob,MAAQpb,KAAKob,KAAK2C,IAAInI,EAAMrV,KAEjDud,IAEIlI,EAAMyE,UAA2D,IAA/CyD,EAAYve,MAAM8Q,WAAWsZ,OAAOtqB,OACtDkqB,GAA2B,cAAgB3T,EAAMwE,MAAQ,gBACjDxE,EAAMxP,UAAa0X,EAAYE,QACvCwL,GAAqB,cAAgB5T,EAAMwE,MAAQ,oHAM3DmP,EAAwBlqB,OAAS,IACjCkqB,EAA0B,QAAUvpB,KAAKuhB,UAAUqI,QAAQ,mCACvD,sCAA0CL,EAA0B,cAIxEC,EAAkBnqB,OAAS,IAC3BmqB,EAAoB,QAAUxpB,KAAKuhB,UAAUqI,QAAQ,iCACjD,sCAA0CJ,EAAoB,SAGtE,IAAMK,EAAQ7pB,KAAKuhB,UAAUqI,QAAQ,yBAC/BvY,EAAO,IAAIyY,EAAAA,WAAW,CACxBD,MAAKA,EACLE,QAASR,EAA0BC,EACnCQ,YAAaC,EAAAA,eAAeC,OAEhClqB,KAAKshB,cAAc6I,kBAAkB9Y,IAGzCgQ,EAAA/f,UAAA0I,SAAA,WACI,IAAMogB,EAAYpqB,KAAKuS,qBAAqB8X,oBAG5CrqB,KAAK4e,eADc,GACG5e,KAAKuS,qBAAqB+X,uBAAuBF,EACnE7M,EAAAA,qBAAqBgN,mBACzBvqB,KAAKqf,eAHc,GAGGrf,KAAKuS,qBAAqB+X,uBAAuBF,EACnE7M,EAAAA,qBAAqBiN,oBAG7BnJ,EAAA/f,UAAAmpB,UAAA,WACoBzqB,KAAKiiB,OAAOyI,KAAK1qB,KAAKiQ,qBAGlCjQ,KAAK2qB,YAAW,IAIxBtJ,EAAA/f,UAAA2I,YAAA,SAAYC,GACJA,EAAQ+F,oBAAsB/F,EAAQ+F,mBAAmB2a,gBAEpD5qB,KAAK+hB,kBAAoB7X,EAAQ+F,mBAAmB4a,eACrD7qB,KAAKiQ,mBAAqB/F,EAAQ+F,mBAAmB2a,aACrD5qB,KAAK2qB,eAEL3qB,KAAK+hB,kBAAmB,EACxB/hB,KAAK8qB,SAAS5gB,KAItBlK,KAAKkH,gBAAkB,IAAI8F,MAG/BqU,EAAA/f,UAAA8I,YAAA,WACQpK,KAAKyI,oBAAsBzI,KAAKyI,mBAAmB4B,cAEnDrK,KAAK0d,uBAAyB1d,KAAK0d,sBAAsBrT,cAEzDrK,KAAK6S,cAAgB7S,KAAK6S,aAAaxI,cAEvCrK,KAAK4S,cAAgB5S,KAAK4S,aAAavI,cAEvCrK,KAAKuI,oBAAsBvI,KAAKuI,mBAAmB8B,cAEnDrK,KAAKwI,uBAAyBxI,KAAKwI,sBAAsB6B,eAGjEgX,EAAA/f,UAAAypB,mBAAA,WACI,OAAO/qB,KAAK4f,gBACR5f,KAAK4f,gBAAgBjb,cACrB3E,KAAKiQ,mBAAmByG,UAAU/R,eAG1C0c,EAAA/f,UAAA0pB,oBAAA,SAAoBrJ,EAA4B5L,eACtCqU,EAAYpqB,KAAKuS,qBAAqB8X,oBAG5C,GAAIrqB,KAAKE,aAAeC,EAAAA,YAAYsQ,YAAa,CAC7C,IAAMwa,EAAkBjrB,KAAKuS,qBAAqB+X,uBAAuBF,EACrE7M,EAAAA,qBAAqB2N,uBACzBlrB,KAAK2e,UAAYsM,MACd,CACH,IAAME,EAAiBnrB,KAAKuS,qBAAqB+X,uBAAuBF,EACpE7M,EAAAA,qBAAqB6N,uBACnBC,EAAsBrrB,KAAKuS,qBAAqB+X,uBAAuBF,EACzE7M,EAAAA,qBAAqB+N,6BACzBtrB,KAAK2e,UAAYwM,EAAiBE,EAItC,GAAI1J,EAAOtiB,OAAS,EAEhB,GAEIW,KAAKE,aAAeC,EAAAA,YAAYC,cAChCJ,KAAKE,aAAeC,EAAAA,YAAYorB,UAClC,CACEvrB,KAAK2hB,OAASA,EACd3hB,KAAKoX,KAAO,GAEZ,IAAK,IAAIjY,EAAI,EAAGA,GAAK4W,EAAQ5W,IACzBa,KAAKoX,KAAKjY,GAAK,OAKnB,IAAoB,IAAAqsB,EAAA3sB,EAAA8iB,GAAM8J,EAAAD,EAAAlsB,QAAAmsB,EAAAjsB,KAAAisB,EAAAD,EAAAlsB,OAAE,CAAvB,IAAMsW,EAAK6V,EAAAlsB,MACZS,KAAKoX,KAAKxB,EAAM4C,KAAKzD,KAAKa,0GAE3B,CACH,IAAM8V,EAAgC,IAAI9a,MAAMmF,GAEhD,IAAS5W,EAAI,EAAGA,EAAIusB,EAAiBrsB,OAAQF,IAAK,CAC9CusB,EAAiBvsB,GAAK,IAAIyR,MAAM5Q,KAAK4hB,SAErC,IAAK,IAAI+J,EAAI,EAAGA,EAAID,EAAiBvsB,GAAGE,OAAQssB,IAC5CD,EAAiBvsB,GAAGwsB,IAAK,MAOjC,IAA2B,IAAAC,EAAA/sB,EAAA8iB,GAAMkK,EAAAD,EAAAtsB,QAAAusB,EAAArsB,KAAAqsB,EAAAD,EAAAtsB,OAAE,CAA9B,IAAMwsB,EAAYD,EAAAtsB,MACnB,GAAIusB,EAAajW,QAAU,EACvB,IAAK,IAAI2C,EAAcsT,EAAatT,IAAKA,EAAMsT,EAAatT,IAAMsT,EAAajW,QAAS2C,IACpF,GAAIsT,EAAapN,QAAU,EACvB,IAAK,IAAI9F,EAAckT,EAAalT,IAAKA,EAAMkT,EAAalT,IAAMkT,EAAapN,QAAS9F,IAChF8S,EAAiBrsB,OAASmZ,GAAOkT,EAAiB,GAAGrsB,OAASuZ,IAC9D8S,EAAiBlT,GAAKI,IAAO,QAIjC8S,EAAiBrsB,OAASmZ,GAAOkT,EAAiB,GAAGrsB,OAASysB,EAAalT,MAC3E8S,EAAiBlT,GAAKsT,EAAalT,MAAO,QAInD,GAAIkT,EAAapN,QAAU,EAC9B,IAAS9F,EAAckT,EAAalT,IAAKA,EAAMkT,EAAalT,IAAMkT,EAAapN,QAAS9F,IAChF8S,EAAiBrsB,OAASysB,EAAatT,KAAOkT,EAAiB,GAAGrsB,OAASuZ,IAC3E8S,EAAiBI,EAAatT,KAAKI,IAAO,QAI9C8S,EAAiBrsB,OAASysB,EAAatT,KAAOkT,EAAiB,GAAGrsB,OAASysB,EAAalT,MACxF8S,EAAiBI,EAAatT,KAAKsT,EAAalT,MAAO,qGAMnE,IAASzZ,EAAI,EAAGA,EAAIusB,EAAiBrsB,OAAQF,IACzC,IAASwsB,EAAI,EAAGA,EAAID,EAAiBvsB,GAAGE,OAAQssB,IACvCD,EAAiBvsB,GAAGwsB,IAErBhK,EAAO5M,KACH,IAAIgX,EAAAA,wBAAwB,CACxBxrB,IAAKpB,EAAI,IAAMwsB,EACfvR,MAAO,GACPU,KAAM,OACNkC,YAAa,GACb1C,UAAU,EACVlU,UAAU,EACVsc,QAAQ,EACRrI,UAAU,EACV9a,MAAO,GACP4a,eAAgB,GAChB3B,IAAKrZ,EACL0W,QAAS,EACT+C,IAAK+S,EACLjN,QAAS,EACToE,MAAO,KAQ3B9iB,KAAK2hB,OAASA,EAAOsB,MAAK,SAAC+I,EAAIC,GAAO,OAACD,EAAGxT,IAAMyT,EAAGzT,IAC/C,EAAIwT,EAAGxT,IAAMyT,EAAGzT,KACX,EAAIwT,EAAGpT,IAAMqT,EAAGrT,IACb,EAAIoT,EAAGpT,IAAMqT,EAAGrT,KAAO,EAAI,OAKnDyI,EAAA/f,UAAA4qB,QAAA,SAAQC,wBAAA,IAAAA,IAAAA,GAAA,GACJ,IAAIC,GAAuB,EAE3B,GAAKD,MAqBD,IAA2B,IAAAE,EAAAxtB,EAAAmB,KAAK2hB,QAAM2K,EAAAD,EAAA/sB,QAAAgtB,EAAA9sB,KAAA8sB,EAAAD,EAAA/sB,OAAE,CAEpC,GAAiC,kBAF1BwsB,EAAYQ,EAAA/sB,OAEFU,YACb,GAAI6rB,EAAatR,aAAesR,EAAatR,YAAYnb,OAAS,MAG9D,IAAgC,IAAAktB,GAAAC,OAAA,EAAA3tB,EAAAitB,EAAatR,cAAWiS,EAAAF,EAAAjtB,QAAAmtB,EAAAjtB,KAAAitB,EAAAF,EAAAjtB,OAAE,CAArD,IAAMotB,EAAiBD,EAAAltB,MAClBspB,EAAsBxH,EAAqBuH,uBAAuB8D,GACxE1sB,KAAKuS,qBAAqBoa,gBAAgB3sB,KAAKob,KAAMsR,EACjD7D,EAAqBiD,yGAG1B,CACGjD,EAAsBxH,EAAqBuH,uBAAuBkD,GAExE9rB,KAAKuS,qBAAqBoa,gBAAgB3sB,KAAKob,KAAM0Q,EAAcjD,GAItEiD,EAAaxR,WACd8R,GAAuB,yGAzCjB,CACd,IAAMzK,EAAS,OAGf,IAA2B,IAAAiL,EAAA/tB,EAAAmB,KAAK2hB,QAAMkL,EAAAD,EAAAttB,QAAAutB,EAAArtB,KAAAqtB,EAAAD,EAAAttB,OAAE,CAAnC,IAAMwsB,EAE0B,kBAF1BA,EAAYe,EAAAttB,OAEFU,aACb0hB,EAAO5M,KAAK+W,GAGXA,EAAaxR,WACd8R,GAAuB,qGAI/BpsB,KAAKob,KAAOiG,EAAqByH,eAAenH,EAAQ3hB,KAAKqS,GAAIrS,KAAKuS,sBA+B1E,IAAIua,EAAc9sB,KAAKob,KAAK4C,OAGvB8O,GAAeV,IAChBU,GAAc,GAGlB9sB,KAAKkc,wBAAwB4Q,GAG7B9sB,KAAKmgB,UAAW,GAGpBkB,EAAA/f,UAAAwpB,SAAA,SAAS5gB,GACL,GAAIlK,KAAKiQ,mBAAmBzK,MAAQxF,KAAKiQ,mBAAmBzK,KAAKqT,OAAQ,CACrE,IAAM8I,EAA6B3hB,KAAK+sB,oBACpC/sB,KAAK+qB,qBAAsB/qB,KAAKiQ,mBAAmBzK,KAAKqT,QAEtD9C,EAAS/H,KAAKgI,IAAIC,MACpBjI,KACA2T,EAAOtU,KAAI,SAAC6I,GACR,OAAOA,EAAEsC,IAAMtC,EAAEL,YAGzB7V,KAAK4hB,QAAU5T,KAAKgI,IAAIC,MACpBjI,KACA2T,EAAOtU,KAAI,SAAC6I,GACR,OAAOA,EAAE0C,IAAM1C,EAAEwI,YAIzB1e,KAAKgrB,oBAAoBrJ,EAAQ5L,GACjC/V,KAAKksB,YAIb7K,EAAA/f,UAAAqpB,WAAA,SAAWqC,WACP,QADO,IAAAA,IAAAA,GAAA,GACHhtB,KAAKiQ,mBAAmBzK,MAAQxF,KAAKiQ,mBAAmBzK,KAAKqT,OAAQ,gBAG1DiT,WACDzJ,EAAc4K,EAAKtL,OAAOzU,QAAO,SAAAgJ,GAAK,OAAAA,EAAE3V,MAAQurB,EAAaxnB,WAAS,GAE5E,GAAI+d,GAA2C,iBAA5BA,EAAYpiB,YAAgC,CAC3D,IAAMitB,EAAWD,EAAKE,kBAAoBF,EAAKE,iBAAiB1T,KAAO4I,EAAY9hB,IAInF,GAHA8hB,EAAY+K,YAAYtB,EAAcmB,EAAKvL,cAAewL,EAAWD,EAAKE,iBAAmB,MAG7D,YAA5B9K,EAAYpiB,aAA6B6rB,EAAazG,YAAa,gBAGxDqH,GACPA,EAAkBjK,UAAWqJ,EAAarJ,SAAkBiK,EAAkBjK,QAE9E,IAAM4K,EAAmBhL,EAAY7H,YAAYtN,QAAO,SAAAgJ,GAAK,OAAAA,EAAE3V,MAAQmsB,EAAkBpoB,WAAS,GAC5FgpB,EAAgBL,EAAKE,kBAAoBF,EAAKE,iBAAiB1T,KAAO4T,EAAiB9sB,IAE7F8sB,EAAiBD,YAAYV,EAAmBO,EAAKvL,cACjD4L,EAAgBL,EAAKE,iBAAmB,WAPhD,IAAgC,IAAAzY,GAAA6Y,OAAA,EAAA1uB,EAAAitB,EAAazG,cAAW1Q,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAA,GAA5BqV,EAAApV,wHAXxC,IAA2B,IAAAmV,EAAA7V,EAAAmB,KAAKiQ,mBAAmBzK,KAAKqT,QAAMlE,EAAAD,EAAApV,QAAAqV,EAAAnV,KAAAmV,EAAAD,EAAApV,OAAA,GAAvCqV,EAAApV,yGAwBvBS,KAAKksB,SAAQ,GAETc,IAEAhtB,KAAKmtB,iBAAmB,QAK7B9L,EAAA/f,UAAAksB,WAAA,WACHxtB,KAAK+hB,kBAAmB,GAUpBV,EAAA/f,UAAAmsB,mBAAA,SAAmBltB,GACvB,IAAMwL,EAAO/L,KACT8d,EAAc,KAgBlB,OAdA9d,KAAK2hB,OAAO3V,SAAQ,SAAC4J,GACbA,EAAMrV,MAAQA,EAGPqV,EAAM4E,aAAe5E,EAAM4E,YAAYnb,OAAS,GACvDuW,EAAM4E,YAAYxO,SAAQ,SAACid,GACnBA,EAAW1oB,MAAQA,IACnBud,EAAc/R,EAAKqP,KAAK2C,IAAInI,EAAMrV,IAAM,IAAM0oB,EAAW1oB,SALjEud,EAAc/R,EAAKqP,KAAK2C,IAAInI,EAAMrV,QAYnCud,GAGHuD,EAAA/f,UAAAosB,iBAAA,SAAiBC,EAA2BC,uBAIhD,IAAiB,IAAAC,EAAAhvB,EAAA8uB,GAAaG,EAAAD,EAAAvuB,QAAAwuB,EAAAtuB,KAAAsuB,EAAAD,EAAAvuB,OAAE,CACT,gBADZ2M,EAAE6hB,EAAAvuB,OACF+E,QACHtE,KAAKyb,UAAYxP,EACK,0BAAfA,EAAG3H,QACVtE,KAAK0b,iBAAmBzP,EACF,kCAAfA,EAAG3H,UACVtE,KAAKwb,gBAAkBvP,yGAO/B,IAAiB,IAAA8hB,EAAAlvB,EAAA+uB,GAAUI,EAAAD,EAAAzuB,QAAA0uB,EAAAxuB,KAAAwuB,EAAAD,EAAAzuB,OAAE,CAAxB,IAAM2uB,EAAED,EAAAzuB,MACU,eAAf0uB,EAAG3pB,QACHtE,KAAKkuB,cAAgBD,EACC,0BAAfA,EAAG3pB,QACVtE,KAAKmuB,qBAAuBF,EACN,kCAAfA,EAAG3pB,UACVtE,KAAK8hB,oBAAsBmM,qGAI/BjuB,KAAKyb,WAAazb,KAAKkuB,gBACvBluB,KAAKkuB,cAActhB,OAAS5M,KAAKyb,UAAU7O,QAG3C5M,KAAK0b,kBAAoB1b,KAAKmuB,uBAC9BnuB,KAAKmuB,qBAAqBvhB,OAAS5M,KAAK0b,iBAAiB9O,QAGzD5M,KAAKwb,iBAAmBxb,KAAK8hB,sBAC7B9hB,KAAK8hB,oBAAoBlV,OAAS5M,KAAKwb,gBAAgB5O,YAM3D,IAAiB,IAAAwhB,EAAAvvB,EAAA8uB,GAAaU,EAAAD,EAAA9uB,QAAA+uB,EAAA7uB,KAAA6uB,EAAAD,EAAA9uB,OAAE,CAA3B,IAAM2M,EAAEoiB,EAAA9uB,MACT,GAAIS,KAAKyb,WAA4B,eAAfxP,EAAG3H,UACrBtE,KAAK6hB,4BAA8BR,EAAqBiC,2BAA2BrX,EAAIjM,KAAKyb,WAExFzb,KAAK6hB,6BACL,0GAMhBR,EAAA/f,UAAAyrB,oBAAA,SAAoBY,EAA2BC,GAA/C,IAAAhmB,EAAA5H,KACU+L,EAAO/L,KAETA,KAAKE,aAAeC,EAAAA,YAAYC,aAChCJ,KAAK0tB,iBAAiBC,EAAeC,GAGrCD,EAAc3hB,SAAQ,SAAC4J,EAAOhI,GAEJ,kBAAlBgI,EAAMtR,SACY,qBAAlBsR,EAAMtR,SACY,eAAlBsR,EAAMtR,SACNsR,EAAMzJ,YAAcC,EAAAA,WAAWC,OAC/BuJ,EAAMzJ,YAAcC,EAAAA,WAAW2Z,UAC/BnQ,EAAMzJ,YAAcC,EAAAA,WAAW6Y,YAC/BrP,EAAMzJ,YAAcC,EAAAA,WAAWqb,SAC/B7R,EAAMzJ,YAAcC,EAAAA,WAAWsb,gBAC/B9R,EAAMzJ,YAAcC,EAAAA,WAAWE,WAC/BsJ,EAAMzJ,YAAcC,EAAAA,WAAWG,+BAC/BqJ,EAAMzJ,YAAcC,EAAAA,WAAWI,4BAC/BoJ,EAAMzJ,YAAcC,EAAAA,WAAWO,SAC/BiJ,EAAMzJ,YAAcC,EAAAA,WAAWK,wBAC/BmJ,EAAMzJ,YAAcC,EAAAA,WAAWM,sBAE/BkJ,EAAMhJ,OAAOC,WAAa,MAKtC,IAAM8U,EAA6B,GAE7B2M,EAAeX,EAAczgB,QAAO,SAAAjB,GAAM,OAAAoV,EAAqB+B,cAAcnX,EAAG3H,YAAUjF,OAC5FkvB,GAAsB,EAkE1B,OAhEAZ,EAAc3hB,SAAQ,SAAC4J,EAAOhI,GAC1B,IAAMgW,EAAYgK,EAAW1gB,QAAO,SAAA+gB,GAAM,OAAAA,EAAG3pB,UAAYsR,EAAMtR,WAAS,GAExE,GAAKsf,IAIDhc,EAAK1H,aAAeC,EAAAA,YAAYC,gBAC9BwH,EAAKia,6BAA+Bja,EAAK6T,WAAa7T,EAAK6T,UAAUnX,UAAYsR,EAAMtR,SACpFsD,EAAK4T,iBAAmB5T,EAAK4T,gBAAgBlX,UAAYsR,EAAMtR,SAC/DsD,EAAK8T,kBAAoB9T,EAAK8T,iBAAiBpX,UAAYsR,EAAMtR,UAJ1E,CAUA,GAAIgqB,EAAe,GAAKjN,EAAqB+B,cAAcxN,EAAMtR,SAAU,CACvE,GAAIgqB,EAAe,GAAKC,EACpB,OAGJA,GAAsB,EAGlBxiB,EAAKyS,aADL8P,EAAe,EACKX,EAActuB,QAAU,GACxCsuB,EAAcA,EAActuB,OAAS,GAAGiF,UAAYsR,EAAMtR,QAE1CqpB,EAAcA,EAActuB,OAAS,GAAGiF,UAAYsR,EAAMtR,QAKtF,GAAIsD,EAAKzB,kBAA8B,IAAVyH,EACzBgW,EAAUzX,UAAYC,EAAAA,WAAW2Y,aACjCnB,EAAUnM,MAAQ7P,EAAK4mB,2BACpB,GAAI5K,EAAUnM,MAAMpY,OAAS,IAC/BuW,EAAMzJ,YAAcC,EAAAA,WAAWqiB,eAAiB7Y,EAAMzJ,YAAcC,EAAAA,WAAW+b,mBAAoB,CACpG,IAAM9mB,EAA6D,MAA5CuG,EAAKqI,mBAAmBzK,KAAKkpB,WAAqB,4BAA8B,qBACvG9K,EAAUnM,MAAQpW,EAAiBuiB,EAAUnM,MAGjD,GAAsB,eAAlB7B,EAAMtR,QAA0B,CAChC,IAAM+M,EAAYzJ,EAAKqI,mBAAmBzK,KAG1Coe,EAAUnB,QAA4B,SAAlB7a,EAAKhB,SACzBgd,EAAUZ,eAAiB3R,EAAKsd,0BAChC/K,EAAUe,oBAAsBtT,EAAKsT,oBAEzC,IAAMtC,EAAgChB,EAAqBqD,qBACvD9O,EACAgO,EACAhc,EAAK8Z,cACL9Z,EAAKsmB,cACLtmB,EAAKumB,qBACLvmB,EAAKka,oBACLla,EAAKpG,SACLoG,EAAKzG,SACLyG,EAAK5F,YAGT2f,EAAO5M,KAAKsN,OAGTV,EAAOsB,MAAK,SAAC+I,EAAIC,GAAO,OAACD,EAAGxT,IAAMyT,EAAGzT,IACxC,EAAIwT,EAAGxT,IAAMyT,EAAGzT,KACX,EAAIwT,EAAGpT,IAAMqT,EAAGrT,IACb,EAAIoT,EAAGpT,IAAMqT,EAAGrT,KAAO,EAAI,MAG3CyI,EAAA/f,UAAAuO,eAAA,SAAeC,EAAmB8e,QAAA,IAAAA,IAAAA,GAAA,GAI9B5uB,KAAKkc,wBAAwBlc,KAAKob,KAAK4C,OAEvC,IAAMF,EAAc9d,KAAKytB,mBAAmB3d,EAAarB,SAKzD,IAHgBqP,GAAcA,EAAYE,MAG7B,CAELhe,KAAKE,aAAeC,EAAAA,YAAYwS,cAChC3S,KAAKmgB,UAAW,GAGpBngB,KAAKmtB,iBAAmBrd,EAAaqd,iBACrC,IAAMxT,EAA6B,IAAIkV,EAAAA,yBAAyB7uB,KAAKiQ,mBAAmBzK,KAAKC,IAAI4K,WAC7FP,EAAarB,QAASqB,EAAavQ,MAAOuQ,EAAa7P,aAC3DD,KAAKyI,mBAAmBkH,KAAKgK,KAMrC0H,EAAA/f,UAAAid,eAAA,SAAe1L,GACX7S,KAAK6S,aAAalD,KAAKkD,IAG3BwO,EAAA/f,UAAA6b,eAAA,SAAevK,GACX5S,KAAK4S,aAAajD,KAAKiD,IAG3ByO,EAAA/f,UAAA4a,wBAAA,SAAwBwB,GAChB1d,KAAKE,aAAeC,EAAAA,YAAYwS,aAAe3S,KAAKE,aAAeC,EAAAA,YAAYsQ,aAC/EzQ,KAAK0d,sBAAsB/N,KAAK+N,IAIxC2D,EAAA/f,UAAA6a,QAAA,SAAQlC,GACJ,IAAM6U,EAAwB9uB,KAAKiQ,mBAAmBzK,KAAKqT,OAAO3L,QAAO,SAAAgJ,GAAK,OAAAA,EAAE5R,UAAY2V,EAAgBxL,WAAS,GAGrH,GAAIqgB,EACA,GAAIA,EAAsB3iB,YAAcC,EAAAA,WAAW+b,kBAAmB,CAClE,IAAMpY,EAA4B,IAAIgf,EAAAA,wBAClC/uB,KAAKiQ,mBAAmBzK,KAAKC,IAAI4K,WACjC4J,EAAgBxL,QAChBzO,KAAKiQ,mBAAmBzK,KAAKE,KAC7BuU,EAAgB+U,WAChB/U,EAAgB1a,MAChBuvB,EAAsB3iB,UACtB8N,EAAgB6B,6BAEpB9b,KAAKuI,mBAAmBoH,KAAKI,QAC1B,GAAI+e,EAAsB3iB,YAAcC,EAAAA,WAAWqc,cAAe,CAC/D1Y,EAA4B,IAAIgf,EAAAA,wBAClC/uB,KAAKiQ,mBAAmBzK,KAAKC,IAAI4K,WACjC4J,EAAgBxL,QAChBzO,KAAKiQ,mBAAmBzK,KAAKE,KAC7BuU,EAAgB+U,WAChB/U,EAAgB1a,MAChBuvB,EAAsB3iB,UACtB8N,EAAgBgV,WAEpBjvB,KAAKuI,mBAAmBoH,KAAKI,OAC1B,CACGA,EAA4B,IAAIgf,EAAAA,wBAClC/uB,KAAKiQ,mBAAmBzK,KAAKC,IAAI4K,WACjC4J,EAAgBxL,QAChBzO,KAAKiQ,mBAAmBzK,KAAKE,KAC7BuU,EAAgB+U,WAChB/U,EAAgB1a,MAChBuvB,EAAsB3iB,UACtB8N,EAAgBgV,WAEpBjvB,KAAKuI,mBAAmBoH,KAAKI,OAE9B,CAEGA,EAA4B,IAAIgf,EAAAA,wBAClC/uB,KAAKiQ,mBAAmBzK,KAAKC,IAAI4K,WACjC4J,EAAgBxL,QAChBzO,KAAKiQ,mBAAmBzK,KAAKE,KAC7BuU,EAAgB+U,WAChB/U,EAAgB1a,MAChB,KACA0a,EAAgBgV,WAEpBjvB,KAAKuI,mBAAmBoH,KAAKI,KAIrCsR,EAAA/f,UAAAya,kBAAA,SAAkB9B,GACd,IAAM6U,EAAwB9uB,KAAKiQ,mBAAmBzK,KAAKqT,OAAO3L,QAAO,SAAAgJ,GAAK,OAAAA,EAAE5R,UAAY2V,EAAgBxL,WAAS,GAC/GmV,EAAiB5jB,KAAKiQ,mBAAmBzK,KACzC0pB,OAA6C,IAA1BJ,EAAwCA,EAAsB3iB,UAAYC,EAAAA,WAAWO,QACxGoD,EAA4B,IAAIgf,EAAAA,wBAAwBnL,EAAUne,IAAI4K,WAAY4J,EAAgBxL,QACpGmV,EAAUle,KAAMuU,EAAgB+U,WAAY/U,EAAgB1a,MAAO2vB,EAAW,CAC9EC,UAAWvL,EAAUuL,UACrBC,SAAUxL,EAAUe,sBAExB3kB,KAAKwI,sBAAsBmH,KAAKI,IAGpCsR,EAAA/f,UAAAktB,oBAAA,WACI,IAAIa,EAAU,GACR7d,EAAMxR,KAAKiQ,mBAAmBzK,KAAKC,IACnCpE,EAA6D,MAA5CrB,KAAKiQ,mBAAmBzK,KAAKkpB,WAAqB,4BAA8B,qBASvG,MANsB,mBAAlB1uB,KAAKuG,SACL8oB,EAAgD,IAAtCrvB,KAAKiQ,mBAAmBzK,KAAKE,KAAarE,EAAiBmQ,EAAM,sBAAwBA,EAC1E,aAAlBxR,KAAKuG,WACZ8oB,EAAU,sBAAwB7d,GAG/B6d,0CAzpCFhO,IAAoB9d,EAAAqO,kBAAA0d,EAAAC,eAAAhsB,EAAAqO,kBAAAnO,EAAA8Z,sBAAAha,EAAAqO,kBAAA4d,EAAAC,kBAAAlsB,EAAAqO,kBAAAyL,EAAAC,aAAA/Z,EAAAqO,kBAAArO,EAAAmsB,qDAApBrO,GAAoBhhB,UAAA,CAAA,CAAA,aAAAC,OAAA,CAAAmhB,SAAA,WAAA7B,gBAAA,kBAAAzW,WAAA,aAAAuY,cAAA,gBAAAzR,mBAAA,qBAAA0K,SAAA,WAAAza,WAAA,aAAAqG,SAAA,WAAA/E,SAAA,WAAAL,SAAA,WAAAa,WAAA,aAAA4Y,UAAA,YAAAzU,iBAAA,mBAAAgB,WAAA,aAAAD,gBAAA,kBAAAN,SAAA,YAAAoY,QAAA,CAAAvW,mBAAA,qBAAAiV,sBAAA,wBAAA7K,aAAA,eAAAD,aAAA,eAAArK,mBAAA,qBAAAC,sBAAA,yBAAAyW,SAAA,CAAA1b,EAAA2b,sBAAA1e,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,QAAA,eAAA,EAAA,YAAA,WAAA,UAAA,UAAA,EAAA,QAAA,CAAA,SAAA,IAAA,CAAA,EAAA,eAAA,EAAA,YAAA,WAAA,UAAA,WAAA,CAAA,EAAA,OAAA,YAAA,aAAA,EAAA,QAAA,CAAA,QAAA,eAAA,EAAA,OAAA,YAAA,aAAA,UAAA,EAAA,QAAA,CAAA,EAAA,QAAA,CAAA,EAAA,OAAA,YAAA,cAAA,CAAA,EAAA,UAAA,UAAA,EAAA,QAAA,WAAA,CAAA,EAAA,UAAA,WAAA,CAAA,EAAA,OAAA,aAAA,kBAAA,WAAA,iBAAA,QAAA,YAAA,eAAA,qBAAA,eAAA,iBAAA,wBAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,OAAA,aAAA,kBAAA,WAAA,iBAAA,QAAA,YAAA,eAAA,qBAAA,eAAA,iBAAA,wBAAA,yBAAA,CAAA,EAAA,eAAA,EAAA,OAAA,YAAA,aAAA,WAAA,CAAA,EAAA,UAAA,UAAA,UAAA,EAAA,QAAA,WAAA,CAAA,EAAA,UAAA,UAAA,WAAA,CAAA,EAAA,OAAA,aAAA,WAAA,kBAAA,WAAA,iBAAA,QAAA,YAAA,eAAA,qBAAA,eAAA,iBAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,OAAA,aAAA,WAAA,kBAAA,WAAA,iBAAA,QAAA,YAAA,eAAA,qBAAA,eAAA,iBAAA,yBAAA,CAAA,EAAA,OAAA,WAAA,YAAA,CAAA,cAAA,IAAA,CAAA,iBAAA,IAAA,CAAA,EAAA,oBAAA,CAAA,QAAA,6BAAA,QAAA,eAAA,EAAA,UAAA,UAAA,EAAA,QAAA,WAAA,CAAA,EAAA,YAAA,OAAA,aAAA,EAAA,SAAA,OAAA,EAAA,UAAA,WAAA,CAAA,EAAA,kBAAA,WAAA,QAAA,OAAA,aAAA,YAAA,WAAA,eAAA,iBAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,kBAAA,WAAA,QAAA,OAAA,aAAA,YAAA,WAAA,eAAA,iBAAA,yBAAA,CAAA,QAAA,iBAAA,QAAA,cAAA,EAAA,QAAA,WAAA,CAAA,EAAA,YAAA,OAAA,EAAA,QAAA,QAAA,CAAA,EAAA,kBAAA,WAAA,QAAA,OAAA,aAAA,YAAA,WAAA,eAAA,iBAAA,EAAA,QAAA,CAAA,EAAA,kBAAA,WAAA,QAAA,OAAA,aAAA,YAAA,WAAA,eAAA,kBAAA,CAAA,QAAA,uCAAA,EAAA,UAAA,UAAA,EAAA,QAAA,WAAA,CAAA,EAAA,YAAA,OAAA,wBAAA,EAAA,UAAA,WAAA,CAAA,EAAA,YAAA,CAAA,EAAA,WAAA,OAAA,MAAA,MAAA,WAAA,UAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,aAAA,iBAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,aAAA,aAAA,iBAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,aAAA,EAAA,gBAAA,CAAA,EAAA,KAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,aAAA,eAAA,iBAAA,EAAA,gBAAA,CAAA,EAAA,mBAAA,CAAA,EAAA,WAAA,OAAA,MAAA,MAAA,WAAA,UAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,aAAA,kBAAA,CAAA,EAAA,OAAA,MAAA,MAAA,QAAA,WAAA,WAAA,WAAA,aAAA,UAAA,cAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,OAAA,WAAA,WAAA,WAAA,aAAA,UAAA,kBAAA,cAAA,CAAA,EAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,aAAA,aAAA,kBAAA,CAAA,EAAA,OAAA,MAAA,QAAA,QAAA,WAAA,WAAA,WAAA,qBAAA,YAAA,aAAA,UAAA,cAAA,CAAA,EAAA,KAAA,OAAA,MAAA,QAAA,iBAAA,QAAA,OAAA,WAAA,WAAA,WAAA,YAAA,aAAA,UAAA,aAAA,eAAA,kBAAA,CAAA,gBAAA,IAAA,CAAA,aAAA,IAAA,CAAA,YAAA,IAAA,CAAA,eAAA,IAAA,CAAA,QAAA,mDAAA,SAAA,SAAA,EAAA,KAAA,QAAA,OAAA,EAAA,QAAA,CAAA,SAAA,SAAA,EAAA,aAAA,UAAA,uBAAA,WAAA,EAAA,KAAA,QAAA,QAAA,CAAA,EAAA,UAAA,uBAAA,WAAA,EAAA,KAAA,QAAA,YAAAC,SAAA,SAAAC,EAAAC,SD9CjCE,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,GAAAA,WAAAA,GAsEAA,EAAAA,WAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,8BAtEUjB,EAAAA,WAAAA,OAAAA,EAAAA,gcEoCV,IAAM6vB,GAA2B,CAC7BC,EAAAA,qBACAC,EAAAA,wBACAC,EAAAA,sBACAC,EAAAA,kBACAC,EAAAA,mBACAC,EAAAA,6BACAC,EAAAA,4BAEAC,EAAAA,kBACAC,EAAAA,8BACAC,EAAAA,8BACAC,EAAAA,oBACAC,EAAAA,uBACAC,EAAAA,uBACAC,EAAAA,sBACAC,EAAAA,yBAqCA,SAAoBC,GAAA3wB,KAAA2wB,oBAAAA,EAChB3wB,KAAK2wB,oBAAoBC,cAAc,CACnCC,EAAAA,uEAHCC,mEAAAA,IAAiBvtB,EAAAC,SAAAutB,EAAAC,uBAAAC,QAAA,CA1BjB,CACLC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,YAEAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,cAEAC,EAAAA,mBAEAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,kBACAjC,wEAWKmB,GAAiB,CAAAe,aAAA,CAPtBxQ,GACA5D,GACA1d,EACAqS,GACA7K,IAA4B0pB,QAAA,CAtB5BC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,YAEAC,EAAAA,gBACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,cAEAC,EAAAA,mBAEAC,EAAAA,cACAC,EAAAA,oBACAC,EAAAA,kBAvCJhC,EAAAA,qBACAC,EAAAA,wBACAC,EAAAA,sBACAC,EAAAA,kBACAC,EAAAA,mBACAC,EAAAA,6BACAC,EAAAA,4BAEAC,EAAAA,kBACAC,EAAAA,8BACAC,EAAAA,8BACAC,EAAAA,oBACAC,EAAAA,uBACAC,EAAAA,uBACAC,EAAAA,sBACAC,EAAAA,sBAAoBoB,QAAA,CA2BVzQ,4BAMN9Z,GAA4B,CAAAwqB,EAAAC,QAAAD,EAAAE,kBAAAF,EAAAG,QAAAH,EAAAI,KAAAJ,EAAAK,iBAAAL,EAAAM,QAAAN,EAAAO,SAAAP,EAAAQ,aAAAR,EAAAS,gBAAAT,EAAAU,SAAAV,EAAAW,aAAArV,EAAAsV,gCAAAtV,EAAAuV,eAAAvV,EAAAwV,gCAAAxV,EAAAyV,qBAAAzV,EAAA0V,oBAAA1V,EAAA2V,mBAAA3V,EAAA4V,6BAAA5V,EAAA6V,2BAAA7V,EAAA8V,mCAAA9V,EAAA+V,0BAAA/V,EAAAgW,gBAAAhW,EAAAiW,qBAAAjW,EAAAkW,kBAAAlW,EAAAmW,mBAAAnW,EAAAoW,mBAAApW,EAAAqW,iBAAArW,EAAAsW,0BAAAtW,EAAAuW,eAAAvW,EAAAwW,qBAAAxW,EAAAyW,mBAAAzW,EAAA0W,gBAAA1W,EAAA2W,cAAA3W,EAAA4W,cAAA5W,EAAA6W,QAAA7W,EAAA8W,aAAA9W,EAAA+W,OAAAC,EAAAC,IAAAC,EAAAC,YAAAD,EAAAE,YAAAF,EAAAG,gBAAAC,EAAAC,QAAAL,EAAAM,8BAAAN,EAAAO,8BAAAP,EAAAQ,0BAAAC,EAAAC,QAAAC,EAAAC,cAAAC,EAAAC,SAAAD,EAAAE,YAAAF,EAAAG,eAAAH,EAAAI,eAAAC,EAAAC,aAAAjyB,EAAAkyB,oBAAAlyB,EAAAmyB,kBAAAnyB,EAAAoyB,kBAAApyB,EAAAqyB,sBAAAryB,EAAAsyB,gBAAAtyB,EAAAuyB,gBAAAxG,EAAAyG,mBAAAlF,EAAAmF,qBAAAC,EAAAC,wBAAAC,EAAAC,2BAAAC,EAAAC,yBAAAC,EAAAC,qBAAAC,EAAAC,sBAAAC,EAAAC,gCAAAC,EAAAC,+BAAAC,EAAAC,qBAAAC,EAAAC,iCAAAC,EAAAC,iCAAAC,EAAAC,uBAAAC,EAAAC,0BAAAC,EAAAC,0BAAAC,EAAAC,yBAAAC,EAAAC,wBAJ5B3W,GACA5D,GACA1d,EACAqS,GACA7K,IAA4B,CAAAwqB,EAAAkG,UAAAlG,EAAAmG,cAAAnG,EAAAoG,cAAApG,EAAAqG,SAAArG,EAAAsG,UAAAtG,EAAAuG,YAAAvG,EAAAwG,YAAAxG,EAAAyG,cAAAzG,EAAA0G,aAAA1G,EAAA2G,SAAA3G,EAAA4G,eAAA5G,EAAA6G,eAAA7G,EAAA8G,aAAAp1B,EAAAq1B,eAAAr1B,EAAAs1B,WAAAt1B,EAAAu1B,WAAAv1B,EAAAw1B,kBAAAx1B,EAAAy1B,cAAAz1B,EAAA01B,oBAAA11B,EAAA21B,aAAA31B,EAAA41B,SAAA51B,EAAA61B,eAAA71B,EAAA81B,SAAA/J,EAAAgK","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","<div class=\"indicators-container\" [ngClass]=\"{ 'is-inside-table': layoutType === LAYOUT_TYPE.PepperiTable }\">\r\n    <ng-container *ngFor=\"let value of value?.split(';')\">\r\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\" [fill]=\"value\"></pep-icon>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"key != 'ItemIndicatorsWithoutCampaign' && value?.split(';').length < 4\">\r\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\"></pep-icon>\r\n    </ng-container>\r\n</div>","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { LAYOUT_TYPE } from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'pep-indicators',\r\n    templateUrl: './indicators.component.html',\r\n    styleUrls: ['./indicators.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PepperiIndicatorsComponent {\r\n    @Input() key: string;\r\n    @Input() value: string;\r\n\r\n    controlType = 'indicators';\r\n\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiTable;\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n\r\n    constructor() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpService } from '@pepperi-addons/ngx-lib';\r\n\r\n@Injectable()\r\nexport class PepperiInternalPageService {\r\n\r\n    private transactionUrl: string;\r\n    private objectId: string;\r\n    private parentId = '0';\r\n    private searchCode: string;\r\n    private viewType: string;\r\n    public additionalApiName = '';\r\n\r\n    constructor(private httpService: HttpService) {\r\n        this.transactionUrl = 'Service1.svc/v1/OrderCenter/Transaction/';\r\n    }\r\n\r\n    getBaseParentUrl(): string {\r\n        const url = `${this.transactionUrl}${this.objectId}/ParentLine/${this.parentId}/`;\r\n        return url;\r\n    }\r\n\r\n    getChildren(callbackFunc: any): void {\r\n        const body = JSON.stringify({\r\n            TransactionUID: this.objectId,\r\n            SearchCode: this.searchCode,\r\n            AdditionalApiName: this.additionalApiName,\r\n            ParentTransactionLineID: this.parentId,\r\n            ViewType: this.viewType\r\n        });\r\n\r\n        // Set the additional api name with view type string.\r\n        const moreParams = this.additionalApiName.length > 0 ?\r\n            `${this.additionalApiName}/${this.viewType}` :\r\n            `''/${this.viewType}`;\r\n\r\n        const url = `${this.getBaseParentUrl()}Items/${moreParams}`;\r\n\r\n        this.httpService.postWapiApiCall(\r\n            url,\r\n            body).subscribe(\r\n                (res) => { callbackFunc(res); },\r\n                (error) => { },\r\n                () => { }\r\n        );\r\n    }\r\n\r\n    initDetails(objectId: string, parentId: string, searchCode: string, callbackFunc: any): void {\r\n        if (!objectId || !parentId) {\r\n            return;\r\n        }\r\n\r\n        this.objectId = objectId;\r\n        this.parentId = parentId;\r\n        this.searchCode = searchCode;\r\n\r\n        this.httpService.getWapiApiCall(\r\n            `${this.getBaseParentUrl()}ViewTypes`).subscribe(\r\n                (res) => { callbackFunc(res); },\r\n                (error) => { },\r\n                () => { }\r\n        );\r\n    }\r\n\r\n    changeChildrenViewType(viewType: string, callbackFunc: any): void {\r\n        this.viewType = viewType;\r\n        this.getChildren(callbackFunc);\r\n    }\r\n\r\n    changeAdditionalApiName(additionalApiName: string, callbackFunc: any): void {\r\n        this.additionalApiName = additionalApiName;\r\n        this.getChildren(callbackFunc);\r\n    }\r\n\r\n    childPlusClick(itemId: string, fieldApiName: string, callbackFunc: any): void {\r\n        const body = JSON.stringify({\r\n            TransactionUID: this.objectId,\r\n            SearchCode: this.searchCode,\r\n            ParentTransactionLineID: this.parentId,\r\n            TransactionLineUID: itemId,\r\n            FieldApiName: fieldApiName,\r\n            ViewType: this.viewType\r\n        });\r\n\r\n        this.httpService.postWapiApiCall(\r\n            `${this.getBaseParentUrl()}IncrementValue`,\r\n            body).subscribe(\r\n                (res) => { callbackFunc(res); },\r\n                (error) => { },\r\n                () => { }\r\n        );\r\n    }\r\n\r\n    childMinusClick(itemId: string, fieldApiName: string, callbackFunc: any): void {\r\n        const body = JSON.stringify({\r\n            TransactionUID: this.objectId,\r\n            SearchCode: this.searchCode,\r\n            ParentTransactionLineID: this.parentId,\r\n            TransactionLineUID: itemId,\r\n            FieldApiName: fieldApiName,\r\n            ViewType: this.viewType\r\n        });\r\n\r\n        this.httpService.postWapiApiCall(\r\n            `${this.getBaseParentUrl()}DecrementValue`,\r\n            body).subscribe(\r\n                (res) => { callbackFunc(res); },\r\n                (error) => { },\r\n                () => { }\r\n        );\r\n    }\r\n\r\n    childValueChanged(itemId: string, fieldApiName: string, value: string, callbackFunc: any): void {\r\n        const body = JSON.stringify({\r\n            TransactionUID: this.objectId,\r\n            SearchCode: this.searchCode,\r\n            ParentTransactionLineID: this.parentId,\r\n            TransactionLineUID: itemId,\r\n            FieldApiName: fieldApiName,\r\n            FieldValue: value,\r\n            ViewType: this.viewType\r\n        });\r\n\r\n        this.httpService.postWapiApiCall(\r\n            `${this.getBaseParentUrl()}SetFieldValue`,\r\n            body).subscribe(\r\n                (res) => { callbackFunc(res); },\r\n                (error) => { },\r\n                () => { }\r\n        );\r\n    }\r\n\r\n}\r\n","<ng-container *ngIf=\"totalRows == 0\">\r\n    <div class=\"no-data\">{{ noDataFoundMsg }}</div>\r\n</ng-container>\r\n<ng-container *ngIf=\"totalRows > 0\">\r\n    <div *ngIf=\"isTable\" #tableHeader class=\"table-header\"\r\n        [ngClass]=\"{ 'below-header-and-top-bar' : parentScroll == null }\" (mouseup)=\"onListResizeEnd($event)\"\r\n        (mouseenter)=\"onListHeaderMouseEnter($event)\" (mouseleave)=\"onListHeaderMouseLeave($event)\"\r\n        (mousemove)=\"onListResize($event)\">\r\n        <fieldset class=\"table-header-fieldset\">\r\n            <fieldset>\r\n                <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"header-column pull-left flip\"\r\n                    [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\" [ngClass]=\"{\r\n                            'is-resizing': field.ApiName === pressedColumn,\r\n                            'is-first': j === 0,\r\n                            'is-last': j === uiControl?.ControlFields?.length - 1\r\n                        }\">\r\n                    <label *ngIf=\"field.Title != ''\" id=\"{{ field.ApiName }}\"\r\n                        class=\"header-label body-sm pull-left flip text-align-{{ field.Layout.XAlignment }}\"\r\n                        title=\"{{ field.Title }}\">\r\n                        {{ field.Title }}\r\n                    </label>\r\n                    <label *ngIf=\"field.Title == ''\" id=\"{{ field.ApiName }}\"\r\n                        class=\"header-label body-sm pull-left flip\">&nbsp;</label>\r\n\r\n                    <div *ngIf=\"supportResizing\" class=\"resizeBox pull-right flip\"\r\n                        (mousedown)=\"onListResizeStart($event, field.ApiName)\">\r\n                        <mat-icon>\r\n                            <pep-icon name=\"arrow-up\" class=\"asc\"></pep-icon>\r\n                        </mat-icon>\r\n                    </div>\r\n                </div>\r\n            </fieldset>\r\n        </fieldset>\r\n    </div>\r\n\r\n    <div #noVirtualScrollCont [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable }\">\r\n        <ng-container *ngTemplateOutlet=\"listData\"></ng-container>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"listTotals\"></ng-container>\r\n</ng-container>\r\n\r\n<ng-template #listData>\r\n    <ng-container *ngFor=\"let pepperiObjectInput of scrollItems; let index; let isFirst = first; trackBy: trackByFunc\">\r\n        <ng-container *ngIf=\"isTable\">\r\n            <div class=\"table-row\"\r\n                (mouseenter)=\"onTableRowMouseEnter($event, pepperiObjectInput?.Data?.UID, pepperiObjectInput?.Data?.Type)\"\r\n                (mouseleave)=\"onTableRowMouseLeave($event, pepperiObjectInput?.Data?.UID, pepperiObjectInput?.Data?.Type)\"\r\n                [ngClass]=\"{\r\n                        highlighted: pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === selectedItemId\r\n                    }\"\r\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || pepperiObjectInput ? 'visible' : 'hidden' }\">\r\n                <fieldset class=\"table-row-fieldset\"\r\n                    [ngStyle]=\"{ 'background-color': pepperiObjectInput?.Data?.BackgroundColor }\">\r\n                    <pep-form [checkForChanges]=\"checkForChanges\" [uiControlHeader]=\"uiControl\"\r\n                        [firstFieldAsLink]=\"firstFieldAsLink\" [pepperiObjectInput]=\"pepperiObjectInput\"\r\n                        [canEditObject]=\"!disabled && pepperiObjectInput?.IsEditable\" [objectId]=\"objectId\"\r\n                        [parentId]=\"parentId\" [searchCode]=\"searchCode\" [lockEvents]=\"disableSelectionItems\"\r\n                        [layoutType]=\"LAYOUT_TYPE.PepperiTable\" [listType]=\"listType\" [isActive]=\"\r\n                                (pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === selectedItemId ||\r\n                                pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === hoveredItemId) && !isTouchDevice\r\n                            \" (notifyValueChanged)=\"onValueChanged($event)\"\r\n                        (notifyFieldClicked)=\"onCustomizeFieldClick($event)\"\r\n                        (notifyMenuItemClicked)=\"onCustomizeFieldMenuClicked($event)\"\r\n                        (click)=\"itemClicked($event, pepperiObjectInput)\" [pageType]=\"pageType\">\r\n                    </pep-form>\r\n                </fieldset>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"!isTable\">\r\n            <div [class]=\"itemClass\"\r\n                (mouseenter)=\"onCardMouseEnter($event, pepperiObjectInput?.Data?.UID, pepperiObjectInput?.Data?.Type)\"\r\n                (mouseleave)=\"onCardMouseLeave($event, pepperiObjectInput?.Data?.UID, pepperiObjectInput?.Data?.Type)\"\r\n                [ngClass]=\"{\r\n                        highlighted: pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === selectedItemId,\r\n                        cardView: isCardView\r\n                    }\" class=\"pull-left flip\"\r\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || pepperiObjectInput ? 'visible' : 'hidden' }\">\r\n                <pep-form [firstFieldAsLink]=\"isCardView ? firstFieldAsLink : false\" [checkForChanges]=\"checkForChanges\"\r\n                    [uiControlHeader]=\"uiControl\" [pepperiObjectInput]=\"pepperiObjectInput\" [isCardView]=\"isCardView\"\r\n                    [canEditObject]=\"!disabled && pepperiObjectInput?.IsEditable\" [objectId]=\"objectId\"\r\n                    [parentId]=\"parentId\" [searchCode]=\"searchCode\" [lockEvents]=\"disableSelectionItems\"\r\n                    [layoutType]=\"getThumbnailsLayout()\" [listType]=\"listType\" [isActive]=\"\r\n                            (pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === selectedItemId ||\r\n                                pepperiObjectInput?.Data?.UID + SEPARATOR + pepperiObjectInput?.Data?.Type === hoveredItemId) && !isTouchDevice\r\n                        \" (notifyValueChanged)=\"onValueChanged($event)\"\r\n                    (notifyFieldClicked)=\"onCustomizeFieldClick($event)\"\r\n                    (notifyMenuItemClicked)=\"onCustomizeFieldMenuClicked($event)\"\r\n                    (click)=\"itemClicked($event, pepperiObjectInput)\" [pageType]=\"pageType\">\r\n                </pep-form>\r\n            </div>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #listTotals>\r\n    <div *ngIf=\"totalsRow?.length > 0 && totalsRow.length <= uiControl?.ControlFields.length\" class=\"table-total\">\r\n        <fieldset class=\"table-header-fieldset\">\r\n            <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"total-column pull-left flip\"\r\n                [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\">\r\n                <label class=\"total-label body-sm text-align-{{ field.Layout.XAlignment }}\">\r\n                    {{ totalsRow[j] }}\r\n                </label>\r\n            </div>\r\n        </fieldset>\r\n    </div>\r\n</ng-template>","import {\r\n    Component, Input, Output, EventEmitter, OnInit, Renderer2, ViewChild, ElementRef,\r\n    ChangeDetectorRef, OnDestroy, OnChanges\r\n} from '@angular/core';\r\nimport { delay } from 'rxjs/operators';\r\nimport {\r\n    LAYOUT_TYPE, LayoutService, ObjectSingleData, UIControl, UIControlField,\r\n    FIELD_TYPE, ObjectsDataRow, SCREEN_SIZE, PepperiObjectChangedData, PepperiFieldClickedData\r\n} from '@pepperi-addons/ngx-lib';\r\n\r\nexport enum VIEW_TYPE {\r\n    Card,\r\n    Line,\r\n    Table\r\n}\r\n\r\n@Component({\r\n    selector: 'pep-internal-list',\r\n    templateUrl: './internal-list.component.html',\r\n    styleUrls: ['./internal-list.component.scss'],\r\n    host: {\r\n        '(window:resize)': 'winResize($event)'\r\n    }\r\n})\r\nexport class PepperiInternalListComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() currentListTypeTranslation = '';\r\n    @Input() noDataFoundMsg = 'Items not found';\r\n    @Input() hideAllSelectionInMulti = false;\r\n\r\n    @Input() top = -1;\r\n    @Input() listType = '';\r\n    @Input() objectId = '0';\r\n    @Input() parentId = '0';\r\n    @Input() searchCode = '0';\r\n    // @Input() showTopBorder = false;\r\n    @Input() firstFieldAsLink = false;\r\n    @Input() supportResizing = true;\r\n    @Input() parentScroll: Element | Window = null;\r\n    @Input() disabled = false;\r\n    @Input() isPrinting = false;\r\n    @Input() disableSelectionItems = false;\r\n    @Input() layoutType: LAYOUT_TYPE = null;\r\n    @Input() pageType = '';\r\n    @Input() totalsRow = [];\r\n    @Input() isTouchDevice = false;\r\n\r\n    @Output() notifyThumbnailClicked: EventEmitter<ObjectSingleData> = new EventEmitter<ObjectSingleData>();\r\n    @Output() notifyFieldClicked: EventEmitter<any> = new EventEmitter<PepperiFieldClickedData>();\r\n    @Output() notifyMenuItemClicked: EventEmitter<any> = new EventEmitter<PepperiFieldClickedData>();\r\n    @Output() notifyValueChanged: EventEmitter<PepperiObjectChangedData> = new EventEmitter<PepperiObjectChangedData>();\r\n    @Output() notifySelectAllSingleActionClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() notifySingleActionClicked: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output() notifyListLoad: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ViewChild('noVirtualScrollCont') noVirtualScrollCont: ElementRef;\r\n    @ViewChild('tableHeader') tableHeader: ElementRef;\r\n    @ViewChild('selectAllCB') selectAllCB: any;\r\n\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n\r\n    public uiControl: UIControl = null;\r\n    public totalRows = -1;\r\n    itemClass: string;\r\n    isTable = false;\r\n    private hasColumnWidthOfTypePercentage = true;\r\n    public items: Array<ObjectSingleData> = null;\r\n    isCardView = false;\r\n    private itemsCounter = 0;\r\n    showItems = true;\r\n    scrollItems: Array<ObjectSingleData>;\r\n\r\n    public SEPARATOR = ',';\r\n\r\n    nativeWindow: any = null;\r\n\r\n    selectedItemId = '';\r\n    hoveredItemId = '';\r\n\r\n    private lockEvents = false;\r\n    private containerWidth = 0;\r\n\r\n    screenSize: SCREEN_SIZE;\r\n\r\n    // headerIsInFocus = false;\r\n\r\n    // For resize\r\n    pressedColumn = '';\r\n    startX = 0;\r\n    startWidth = 0;\r\n    tableStartWidth = 0;\r\n\r\n    isUserSelected = false;\r\n    checkForChanges: any = null;\r\n    useVirtualScroll = true;\r\n    calculatedObjectHeight: string;\r\n\r\n    constructor(\r\n        private element: ElementRef,\r\n        private layoutService: LayoutService,\r\n        private cd: ChangeDetectorRef,\r\n        private renderer: Renderer2,\r\n    ) {\r\n        this.layoutService.onResize$\r\n            .pipe(delay(0))\r\n            .subscribe(size => {\r\n                this.screenSize = size;\r\n            });\r\n        this.nativeWindow = window;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.containerWidth = 0;\r\n    }\r\n\r\n    ngOnChanges(changes): void {\r\n        if (this.containerWidth <= 0) {\r\n            this.setContainerWidth();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.notifyValueChanged) {\r\n            this.notifyValueChanged.unsubscribe();\r\n        }\r\n\r\n        if (this.notifyFieldClicked) {\r\n            this.notifyFieldClicked.unsubscribe();\r\n        }\r\n\r\n        if (this.notifyMenuItemClicked) {\r\n            this.notifyMenuItemClicked.unsubscribe();\r\n        }\r\n\r\n        if (this.notifyThumbnailClicked) {\r\n            this.notifyThumbnailClicked.unsubscribe();\r\n        }\r\n    }\r\n\r\n    setContainerWidth(): void {\r\n        const selectionCheckBoxWidth = 0;\r\n\r\n        const rowHeight = 40; // the table row height (2.5rem * 16font-size).\r\n        const style = window.getComputedStyle(this.element.nativeElement.parentElement);\r\n        // The container-fluid class padding left + right + border\r\n        const containerFluidSpacing = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\r\n\r\n        const parentContainer = this.element.nativeElement.parentElement.parentElement > 0 ?\r\n            this.element.nativeElement.parentElement.parentElement : this.element.nativeElement.parentElement;\r\n\r\n        // Calculate if vertical scroll should appear, if so set the scroll width. (this.totalRows + 1) + 1 is for the header row.\r\n        const scrollWidth = parentContainer.clientHeight < rowHeight * (this.totalRows + 1) ? 18 : 0; // 18 is the default scroll width.\r\n\r\n        // The selectionCheckBoxWidth width + containerFluidSpacing + scrollWidth.\r\n        const rowHeaderWidthToSub = containerFluidSpacing + selectionCheckBoxWidth + scrollWidth;\r\n        this.containerWidth = parentContainer.offsetWidth - rowHeaderWidthToSub;\r\n    }\r\n\r\n    removeTable(): void {\r\n        this.cleanItems();\r\n        this.uiControl = null;\r\n    }\r\n\r\n    private toggleItems(isVisible: boolean): void {\r\n        this.showItems = isVisible;\r\n        this.lockEvents = !isVisible;\r\n    }\r\n\r\n    private updateScrollItems(startIndex, endIndex, loadInChunks = true): void {\r\n        this.scrollItems = this.items.slice(startIndex, endIndex);\r\n    }\r\n\r\n    getUniqItemId(itemId: string, itemType: string = ''): string {\r\n        return itemId + this.SEPARATOR + itemType;\r\n    }\r\n\r\n    setLayout(): void {\r\n        const self = this;\r\n        if (this.totalRows === 0 ||\r\n            !this.uiControl ||\r\n            !this.uiControl.ControlFields ||\r\n            this.uiControl.ControlFields.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.uiControl.ControlFields.forEach((cf) => {\r\n            if (cf.ColumnWidth === 0) {\r\n                cf.ColumnWidth = 10;\r\n            }\r\n\r\n            if (self.isTable &&\r\n                (cf.FieldType === FIELD_TYPE.Image ||\r\n                    // cf.FieldType === FIELD_TYPE.Indicators || ???\r\n                    cf.FieldType === FIELD_TYPE.Signature ||\r\n                    cf.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\r\n                    cf.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\r\n                    cf.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\r\n                    cf.FieldType === FIELD_TYPE.NumberRealForMatrix ||\r\n                    cf.FieldType === FIELD_TYPE.Package ||\r\n                    cf.ApiName === 'UnitsQuantity' ||\r\n                    cf.ApiName === 'QuantitySelector')\r\n            ) {\r\n                cf.Layout.XAlignment = 3;\r\n            }\r\n        });\r\n\r\n        if (!this.cd['destroyed']) {\r\n            this.cd.detectChanges();\r\n        }\r\n\r\n        // Set the columns width.\r\n        if (this.containerWidth <= 0) {\r\n            this.setContainerWidth();\r\n        }\r\n\r\n        this.calcColumnsWidth();\r\n        this.checkForChanges = new Date().getTime();\r\n    }\r\n\r\n    private calcColumnsWidth(): void {\r\n        const fixedMultiple = 3.78; // for converting em to pixel.\r\n        const length = this.uiControl.ControlFields.length;\r\n        const selectionCheckBoxWidth = 0;\r\n\r\n        // Is table AND there is at least one column of width type of percentage.\r\n        if (this.isTable) {\r\n            if (this.uiControl && this.uiControl.ControlFields) {\r\n                this.hasColumnWidthOfTypePercentage = this.uiControl.ControlFields.filter(cf => cf.ColumnWidthType === 1).length === 0;\r\n            }\r\n        }\r\n\r\n        // If the columns size is fixed and the total is small then the container change it to percentage.\r\n        if (!this.hasColumnWidthOfTypePercentage) {\r\n            const totalFixedColsWidth = this.uiControl.ControlFields\r\n                .map(cf => cf.ColumnWidth * fixedMultiple)\r\n                .reduce((sum, current) => sum + current);\r\n\r\n            if (window.innerWidth > totalFixedColsWidth) {\r\n                this.hasColumnWidthOfTypePercentage = true;\r\n            }\r\n        }\r\n\r\n        let totalCalcColsWidth = 0;\r\n\r\n        // Calc by percentage\r\n        if (this.hasColumnWidthOfTypePercentage) {\r\n            const totalColsWidth: number = this.uiControl.ControlFields.map(cf => cf.ColumnWidth).reduce((sum, current) => sum + current);\r\n\r\n            for (let index = 0; index < length; index++) {\r\n                const uiControlField: UIControlField = this.uiControl.ControlFields[index];\r\n                const calcColumnWidthPercentage = (100 / totalColsWidth) * uiControlField.ColumnWidth;\r\n\r\n                uiControlField.calcColumnWidth = Math.floor((this.containerWidth * calcColumnWidthPercentage) / 100);\r\n\r\n                if (index === length - 1) {\r\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\r\n                        'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\r\n                } else {\r\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\r\n                        uiControlField.calcColumnWidth + 'px';\r\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\r\n                }\r\n            }\r\n\r\n            this.renderer.setStyle(this.element.nativeElement, 'width', 'inherit');\r\n        } else {\r\n            for (let index = 0; index < length; index++) {\r\n                const uiControlField: UIControlField = this.uiControl.ControlFields[index];\r\n                const currentFixedWidth = Math.floor(uiControlField.ColumnWidth * fixedMultiple);\r\n\r\n                if (index === length - 1) {\r\n                    uiControlField.calcTitleColumnWidthString = currentFixedWidth + 'px';\r\n                    uiControlField.calcColumnWidthString = currentFixedWidth - 4 + 'px'; // -4 for the row padding.\r\n                } else {\r\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\r\n                        currentFixedWidth + 'px';\r\n                }\r\n\r\n                totalCalcColsWidth += currentFixedWidth;\r\n            }\r\n\r\n            this.renderer.setStyle(this.element.nativeElement, 'width', totalCalcColsWidth + selectionCheckBoxWidth + 'px');\r\n        }\r\n    }\r\n\r\n    private initResizeData(): void {\r\n        this.startX = 0;\r\n        this.startWidth = 0;\r\n        this.tableStartWidth = 0;\r\n        this.pressedColumn = '';\r\n    }\r\n\r\n    onListResizeStart(event, apiName): void {\r\n        this.pressedColumn = apiName;\r\n        this.startX = event.x;\r\n        this.startWidth = event.target.closest('.header-column').offsetWidth;\r\n        // Set the tableStartWidth to the container offsetWidth\r\n        this.tableStartWidth = this.noVirtualScrollCont.nativeElement.offsetWidth;\r\n    }\r\n\r\n    onListResize(event): void {\r\n        if (this.pressedColumn.length > 0) {\r\n            const widthToAdd = this.layoutService.isRtl() ? this.startX - event.x : event.x - this.startX;\r\n\r\n            // Set the width of the column and the container of the whole columns.\r\n            if (this.startWidth + widthToAdd >= 48 || widthToAdd > 0) {\r\n                const length = this.uiControl.ControlFields.length;\r\n                let totalCalcColsWidth = 0;\r\n\r\n                for (let index = 0; index < length; index++) {\r\n                    const uiControlField: UIControlField = this.uiControl.ControlFields[index];\r\n\r\n                    if (index === length - 1) {\r\n                        // Calc the last column only in percentage type.\r\n                        if (this.hasColumnWidthOfTypePercentage) {\r\n                            uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\r\n                                'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\r\n                        } else {\r\n                            if (uiControlField.ApiName === this.pressedColumn) {\r\n                                uiControlField.calcColumnWidth = this.startWidth + widthToAdd;\r\n                                uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidth + 'px';\r\n                                uiControlField.calcColumnWidthString = uiControlField.calcColumnWidth - 4 + 'px';\r\n                            }\r\n                        }\r\n                    } else if (uiControlField.ApiName === this.pressedColumn) {\r\n                        uiControlField.calcColumnWidth = this.startWidth + widthToAdd;\r\n                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\r\n                            uiControlField.calcColumnWidth + 'px';\r\n                    }\r\n\r\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\r\n                }\r\n\r\n                this.renderer.setStyle(this.element.nativeElement, 'width', this.tableStartWidth + widthToAdd + 'px');\r\n            }\r\n\r\n            this.checkForChanges = new Date().getTime();\r\n        }\r\n    }\r\n\r\n    onListResizeEnd(event): void {\r\n        if (this.pressedColumn.length > 0) {\r\n            if (event && $(event.srcElement).parents('.resizeBox').length > 0) {\r\n                this.initResizeData();\r\n            } else {\r\n                const self = this;\r\n                setTimeout(() => {\r\n                    self.initResizeData();\r\n                }, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    onListHeaderMouseEnter(event): void {\r\n        // this.headerIsInFocus = true;\r\n    }\r\n\r\n    onListHeaderMouseLeave(event): void {\r\n        // this.headerIsInFocus = false;\r\n        this.onListResizeEnd(event);\r\n        this.initResizeData();\r\n    }\r\n\r\n    onListChange(event: any): void {\r\n        if (this.isPrinting) {\r\n            return;\r\n        }\r\n\r\n        // For other events do nothing.\r\n        if (typeof event.start === 'undefined' || typeof event.end === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        this.calculatedObjectHeight = event.calculatedChildHeight + 'px';\r\n\r\n        if (!this.lockEvents) {\r\n            this.toggleItems(false);\r\n            this.updateScrollItems(event.start, event.end, false);\r\n            this.toggleItems(true);\r\n        }\r\n    }\r\n\r\n    onListLoad(event: any): void {\r\n        this.notifyListLoad.emit(event);\r\n    }\r\n\r\n    getParentContainer(): Element | Window {\r\n        return this.parentScroll ? this.parentScroll : window;\r\n    }\r\n\r\n    onValueChanged(valueChanged: any): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.notifyValueChanged.emit(valueChanged);\r\n    }\r\n\r\n    onCustomizeFieldClick(customizeFieldClickedData: PepperiFieldClickedData): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.notifyFieldClicked.emit(customizeFieldClickedData);\r\n    }\r\n\r\n    onCustomizeFieldMenuClicked(customizeFieldClickedData: PepperiFieldClickedData): void {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.notifyMenuItemClicked.emit(customizeFieldClickedData);\r\n    }\r\n\r\n    getIsDisabled(pepperiObjectInput: ObjectSingleData): boolean {\r\n        if (this.disableSelectionItems) {\r\n            return true;\r\n        } else {\r\n            const IsNotSelectableForActions = pepperiObjectInput?.Data && !pepperiObjectInput.Data.IsSelectableForActions;\r\n            return IsNotSelectableForActions;\r\n        }\r\n    }\r\n\r\n    itemClicked(e: any, objectSingleData: ObjectSingleData): void {\r\n        // Set seleted item\r\n        const itemId = objectSingleData.Data.UID.toString();\r\n        const itemType = objectSingleData.Data.Type.toString();\r\n        let isChecked = false;\r\n\r\n        if (objectSingleData && objectSingleData.Data && objectSingleData.Data.IsSelectableForActions) {\r\n            this.selectedItemId = this.getUniqItemId(itemId, itemType);\r\n            isChecked = true;\r\n        }\r\n\r\n        if (!this.isTable) {\r\n            if (this.disabled) {\r\n                return;\r\n            }\r\n\r\n            this.notifyThumbnailClicked.emit(objectSingleData);\r\n        }\r\n    }\r\n\r\n    onTableRowMouseEnter(event: any, itemId: string, itemType: string): void {\r\n        if (this.isTouchDevice) {\r\n            return;\r\n        }\r\n\r\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\r\n        this.hoveredItemId = uniqItemId;\r\n    }\r\n\r\n    onTableRowMouseLeave(event: any, itemId: string, itemType: string): void {\r\n        this.hoveredItemId = '';\r\n    }\r\n\r\n    onCardMouseEnter(event: any, itemId: string, itemType: string): void {\r\n        if (this.isTouchDevice) {\r\n            return;\r\n        }\r\n\r\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\r\n        this.hoveredItemId = uniqItemId;\r\n    }\r\n\r\n    onCardMouseLeave(event: any, itemId: string, itemType: string): void {\r\n        this.hoveredItemId = '';\r\n    }\r\n\r\n    getThumbnailsLayout(): LAYOUT_TYPE {\r\n        return this.layoutType == null ? LAYOUT_TYPE.PepperiCard : this.layoutType;\r\n    }\r\n\r\n    // call this function after resize + animation end\r\n    winResize(e): void {\r\n        this.containerWidth = 0;\r\n        this.setLayout();\r\n    }\r\n\r\n    trackByFunc(index: number, item: ObjectSingleData): any {\r\n        return item && item.Data && item.Data.UID ? item.Data.UID : index;\r\n    }\r\n\r\n    cleanItems(): void {\r\n        this.itemsCounter = 0;\r\n        this.items = this.totalRows > 0 ? Array<ObjectSingleData>(this.totalRows) : [];\r\n        this.scrollItems = [];\r\n        this.calculatedObjectHeight = '';\r\n    }\r\n\r\n    getUIControl(): UIControl {\r\n        return this.uiControl;\r\n    }\r\n\r\n    initListData(uiControl: UIControl, totalRows: number, items: ObjectSingleData[], viewType: VIEW_TYPE = VIEW_TYPE.Table,\r\n                 itemClass: string = ''): void {\r\n        this.isCardView = viewType === VIEW_TYPE.Card;\r\n        this.uiControl = uiControl;\r\n        this.itemClass = itemClass;\r\n        this.selectedItemId = '';\r\n        this.isTable = viewType === VIEW_TYPE.Table;\r\n        this.totalRows = totalRows;\r\n\r\n        // fix bug for the scrollTo that doesn't work on edge div , not window\r\n        const scrollingElement = this.getParentContainer();\r\n        scrollingElement.scrollTo(0, 0);\r\n\r\n        this.cleanItems();\r\n\r\n        this.updateListItems(items, null);\r\n        this.onListLoad(null);\r\n\r\n        this.setLayout();\r\n    }\r\n\r\n    updateListItems(items: ObjectSingleData[], event: any): void {\r\n        this.scrollItems = this.items = items;\r\n        this.itemsCounter = items.length;\r\n    }\r\n\r\n    updateListItem(data: any): void {\r\n        let index = 0;\r\n\r\n        // Update items list\r\n        index = this.items.findIndex(i => i && i.Data && i.Data.UID === data.UID);\r\n        if (index >= 0 && index < this.items.length) {\r\n            this.items[index].Data = data;\r\n        }\r\n        // Update scrollItems list\r\n        index = this.scrollItems.findIndex(i => i && i.Data && i.Data.UID === data.UID);\r\n        if (index >= 0 && index < this.scrollItems.length) {\r\n            this.scrollItems[index].Data = data;\r\n            this.checkForChanges = new Date().getTime();\r\n        }\r\n    }\r\n\r\n    getIsItemEditable(uid: string): boolean {\r\n        const item = this.items.filter(x => x.Data.UID.toString() === uid);\r\n        if (item.length > 0) {\r\n            return item[0].Data.IsEditable;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getItemDataByID(uid: string): ObjectsDataRow {\r\n        return this.items.find(item => item.Data.UID.toString() === uid)?.Data;\r\n    }\r\n}\r\n","<ng-template #matrixTemplate>\r\n    <div class=\"matrix-title-container pepperi-border-bottom align-{{ field.xAlignment }}\" title=\"{{ field.label }}\">\r\n        <span class=\"block-with-text body-md\">{{ field.label }}</span>\r\n\r\n        <div class=\"buttons-container spacing-element-negative pull-right flip\">\r\n            <ng-container\r\n                *ngIf=\"currentViewType?.Key == 'OrderCenterMatrix' && additionalApiNames && additionalApiNames.length > 0\">\r\n                <button class=\"spacing-element pepperi-button icon-button sm weak\" mat-button [matMenuTriggerFor]=\"menu\"\r\n                    menu-blur>\r\n                    <span class=\"pull-left flip\"\r\n                        *ngIf=\"currentAdditionalApiName\">&nbsp;{{ currentAdditionalApiName?.Value }}&nbsp;</span>\r\n\r\n                    <mat-icon [ngClass]=\"{ 'pull-left flip': currentAdditionalApiName}\">\r\n                        <pep-icon name=\"system_info\"></pep-icon>\r\n                    </mat-icon>\r\n                </button>\r\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\r\n                    <button mat-menu-item [ngClass]=\"{ selected: currentAdditionalApiName === null }\"\r\n                        (click)=\"changeAdditionalApiName(null)\">\r\n                        <span>{{ 'LIST.NONE' | translate }}</span>\r\n                    </button>\r\n                    <button mat-menu-item\r\n                        [ngClass]=\"{ selected: currentAdditionalApiName?.Key == additionalApiName?.Key }\"\r\n                        *ngFor=\"let additionalApiName of additionalApiNames\"\r\n                        (click)=\"changeAdditionalApiName(additionalApiName)\">\r\n                        <span>{{ additionalApiName.Value }}</span>\r\n                    </button>\r\n                </mat-menu>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"childViewTypes && childViewTypes.length > 1\">\r\n                <button class=\"spacing-element pepperi-button icon-button sm weak\" mat-button\r\n                    [matMenuTriggerFor]=\"viewsMenu\" menu-blur>\r\n                    <mat-icon>\r\n                        <pep-icon name=\"view_card_md\"></pep-icon>\r\n                    </mat-icon>\r\n                </button>\r\n\r\n                <mat-menu #viewsMenu=\"matMenu\" xPosition=\"before\">\r\n                    <button mat-menu-item [ngClass]=\"{ selected: currentViewType?.Key == viewType?.Key }\"\r\n                        *ngFor=\"let viewType of childViewTypes\" (click)=\"changeChildrenViewType(viewType?.Key)\">\r\n                        <mat-icon [ngSwitch]=\"viewType?.Key\">\r\n                            <pep-icon *ngSwitchCase=\"'OrderCenterMatrix'\" name=\"view_matrix\"></pep-icon>\r\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixGrid'\" name=\"view_table\"></pep-icon>\r\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixLine'\" name=\"view_line\"></pep-icon>\r\n                        </mat-icon>\r\n                        <span>{{ viewType?.Value }}</span>\r\n                    </button>\r\n                </mat-menu>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n\r\n    <pep-internal-list (notifyValueChanged)=\"onCustomizeObjectChanged($event)\"\r\n        (notifyFieldClicked)=\"onCustomizeFieldClick($event)\" [totalsRow]=\"totalsRow\"></pep-internal-list>\r\n</ng-template>\r\n\r\n<div id=\"mainViewCont\" [ngStyle]=\"{ 'max-width': viewWidth, 'max-height': viewHeight }\">\r\n    <div id=\"my1_mm\" style=\"height:1mm;width:1mm;display:none;\"></div>\r\n    <div *ngIf=\"coverChildTable && uiControl != null\" class=\"table-cover\"></div>\r\n    <button *ngIf=\"coverChildTable && uiControl != null\" (click)=\"showMatrixDialog()\"\r\n        class=\"pepperi-button strong sm table-cover-button\">{{ 'INTERNAL_PAGE.CLICK_TO_ORDER' | translate }}</button>\r\n\r\n    <ng-container #orgCont></ng-container>\r\n</div>\r\n\r\n<!-- <div id=\"childGridModal\" bsModal (onShown)=\"onShown()\" (onHidden)=\"onHidden()\" #childModal=\"bs-modal\" class=\"modal\"\r\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-body matrix-dialog-body\">\r\n                <ng-container #modalCont></ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> -->","import {\r\n    Component,\r\n    OnInit,\r\n    OnDestroy,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChild,\r\n    ElementRef,\r\n    ViewContainerRef,\r\n    TemplateRef,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { PepperiInternalPageService } from './internal-page.service';\r\n\r\nimport { LAYOUT_TYPE, UIControl, KeyValuePair, CustomizationService, ObjectSingleData,\r\n    UIControlField, ObjectsData, FIELD_TYPE, PepperiFieldClickedData, PepperiObjectChangedData } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiInternalListComponent, VIEW_TYPE } from './internal-list.component';\r\n\r\nimport * as $ from 'jquery';\r\n\r\n@Component({\r\n    selector: 'pep-internal-page',\r\n    templateUrl: './internal-page.component.html',\r\n    styleUrls: ['./internal-page.component.scss'],\r\n    providers: [PepperiInternalPageService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PepperiInternalPageComponent implements OnInit, OnDestroy {\r\n    static CURRENT_ADDITIONAL_API_NAME = 'item_details_currentAdditionalApiName';\r\n\r\n    controlType = 'internalPage';\r\n\r\n    @Input() field: any;\r\n    @Input() hasHeightLimit = false;\r\n    @Input() layoutType = LAYOUT_TYPE.PepperiForm;\r\n    @Output() childChanged: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() childClicked: EventEmitter<PepperiFieldClickedData> = new EventEmitter<PepperiFieldClickedData>();\r\n\r\n    // TODO: Implement\r\n    // @ViewChild('childModal') public childModal: ModalDirective;\r\n    childModal = { isShown: false };\r\n\r\n    @ViewChild('orgCont', {read: ViewContainerRef}) orgCont: ViewContainerRef;\r\n    @ViewChild('modalCont', {read: ViewContainerRef}) modalCont: ViewContainerRef;\r\n    @ViewChild('matrixTemplate') matrixTemplate: TemplateRef<any>;\r\n\r\n    @ViewChild(PepperiInternalListComponent) customList: PepperiInternalListComponent;\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n\r\n    resize: any;\r\n    checkForChanges: any = null;\r\n\r\n    childData: any = null;\r\n\r\n    emptyForm: FormGroup;\r\n    uiControl: UIControl;\r\n    rows: any;\r\n    lineViewRows: any;\r\n    totalsRow: any = [];\r\n    additionalApiNames: any = null;\r\n    currentAdditionalApiName: any = null;\r\n    focusedQS = false;\r\n    fieldIdWithFocus = '';\r\n    columnWidth = 100;\r\n    coverChildTable = false;\r\n    childViewTypes: Array<KeyValuePair<string>>;\r\n    currentViewType: KeyValuePair<string> = null;\r\n    currentViewTypeTitle: string;\r\n    sumOfMinColWidth = 0;\r\n    totalRowsWidth = 0;\r\n    viewWidth = '100%';\r\n    viewHeight = 'auto';\r\n    displayQSbtns = true;\r\n    selectedApiName = '';\r\n    showSort = false;\r\n    defaultRowSpan = -1;\r\n\r\n    constructor(\r\n        protected fb: FormBuilder,\r\n        private pepperiInternalPageService: PepperiInternalPageService,\r\n        public customizationService: CustomizationService,\r\n        private elementRef: ElementRef,\r\n        private changeDetectorRef: ChangeDetectorRef\r\n    ) {}\r\n\r\n    private fillData(): void {\r\n        const view = this.matrixTemplate.createEmbeddedView(null);\r\n\r\n        if (this.childModal.isShown) {\r\n            this.orgCont.clear();\r\n            this.modalCont.clear();\r\n            this.modalCont.insert(view);\r\n        } else {\r\n            this.modalCont.clear();\r\n            this.orgCont.clear();\r\n            this.orgCont.insert(view);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            const buffer = [];\r\n\r\n            if (this.childData.Rows) {\r\n                // for (let i = 0; i < this.childData.Rows.length; i++) {\r\n                for (const childDataRow of this.childData.Rows) {\r\n                    const osd = new ObjectSingleData(this.uiControl, childDataRow);\r\n                    osd.IsEditable = true;\r\n                    buffer.push(osd);\r\n                }\r\n            }\r\n\r\n            const viewType: VIEW_TYPE = this.isTableView() ? VIEW_TYPE.Table : VIEW_TYPE.Line;\r\n            this.customList.initListData(this.uiControl, this.childData.TotalRows, buffer, viewType, this.getItemClass());\r\n            this.setTotalsRow();\r\n\r\n            if (!this.childModal.isShown) {\r\n                const childrenCount = this.childData.Rows ? this.childData.Rows.length : 0;\r\n                const isEven = childrenCount % 2 === 0;\r\n                // 3 for matrix & flat matrix because the header + total is 2 more rows.\r\n                const rowsToAdd = this.isMatrixView() || this.isFlatMatrixView() ? 3 : 1;\r\n\r\n                const formRowHeight = this.customizationService.calculateFormFieldHeight() * 16; // convert rem to pixel\r\n\r\n                // Set the default only if not set yet.\r\n                if (this.defaultRowSpan === -1) {\r\n                    this.defaultRowSpan = this.field.rowSpan;\r\n                }\r\n\r\n                // For line view Add the height of the line (form height).\r\n                if (this.currentViewType.Key === 'OrderCenterFlatMatrixLine') {\r\n                    const maxRow = Math.max.apply(\r\n                        Math,\r\n                        this.uiControl.ControlFields.map((f) => {\r\n                            return f.Layout.Y + f.Layout.Height;\r\n                        })\r\n                    );\r\n\r\n                    // * 16 convert rem to pixel\r\n                    const cardRowsHeight = this.customizationService.calculateCardRowsHeight(maxRow) * 16;\r\n\r\n                    // maxRow * 24 + 60 - 24 for each row in card + 60 for the padding of each card.\r\n                    // const rowSpanToAdd = Math.floor(childrenCount * ((cardRowsHeight + 56) / formRowHeight) + rowsToAdd);\r\n                    // + 16 is the 1rem margin outside card.\r\n                    const rowSpanToAdd = (childrenCount * (cardRowsHeight + 16)) / formRowHeight + rowsToAdd;\r\n                    this.field.rowSpan = rowSpanToAdd;\r\n                } else {\r\n                    // const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;\r\n                    // this.field.rowSpan = Math.ceil((tableRowsHeight + (rowsToAdd * 40)) / formRowHeight);\r\n                    // * 16 convert rem to pixel\r\n                    const rowsToAddHeight = this.customizationService.calculateTableRowsHeight(rowsToAdd, false) * 16;\r\n                    const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;\r\n                    this.field.rowSpan = (rowsToAddHeight + tableRowsHeight) / formRowHeight;\r\n                }\r\n\r\n                const self = this;\r\n                self.sumOfMinColWidth = 0;\r\n                self.totalRowsWidth = 0;\r\n\r\n                this.childData.UIControl.ControlFields.forEach((uiControlField: UIControlField) => {\r\n                    self.totalRowsWidth += uiControlField.ColumnWidth;\r\n                    uiControlField.minFieldWidth = self.mmToPx(12); // NEED TO GET THIS PARAM FROM CUSTOMIZATION;\r\n                    self.sumOfMinColWidth += 12;\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    self.setViewCover(this.childData.Rows);\r\n                }, 0);\r\n            }\r\n        }, 150);\r\n\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    private fillChildData(res: any): void {\r\n        // TODO: ??\r\n        // this.userService.setOptionalValuesDic(res.Rows);\r\n        this.childData = res;\r\n        this.uiControl = res.UIControl;\r\n        this.additionalApiNames = res.AdditionalApiNames;\r\n\r\n        this.fillData();\r\n    }\r\n\r\n    mmToPx(mm): number {\r\n        return Math.floor(mm * $('#my1_mm').height()); // JQuery returns sizes in PX\r\n    }\r\n\r\n    private isMatrixView(): boolean {\r\n        return this.currentViewType && this.currentViewType.Key === 'OrderCenterMatrix';\r\n    }\r\n\r\n    private isFlatMatrixView(): boolean {\r\n        return this.currentViewType && this.currentViewType.Key === 'OrderCenterFlatMatrixGrid';\r\n    }\r\n\r\n    isTableView(): boolean {\r\n        return this.isMatrixView() || this.isFlatMatrixView();\r\n    }\r\n\r\n    private getItemClass(): string {\r\n        let res = '';\r\n\r\n        if (!this.isTableView()) {\r\n            res = 'line-view';\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    changeChildrenViewType(viewTypeKey: string): void {\r\n        const self = this;\r\n        this.rows = [];\r\n        this.uiControl = null;\r\n\r\n        for (const vt of this.childViewTypes) {\r\n            if (vt.Key === viewTypeKey) {\r\n                this.currentViewType = vt;\r\n                break;\r\n            }\r\n        }\r\n        // check if view type changed\r\n        // if (this.currentViewType.Key != viewTypeKey) {\r\n        $('body').scrollTop(0);\r\n        this.currentViewTypeTitle = this.currentViewType.Value;\r\n\r\n        this.pepperiInternalPageService.changeChildrenViewType(this.currentViewType.Key, (res: ObjectsData) => {\r\n            if (res.Rows) {\r\n                self.fillChildData(res);\r\n            }\r\n        });\r\n    }\r\n\r\n    setViewCover(rows): void {\r\n        if (!rows) { return; }\r\n\r\n        const numofrows = rows.length;\r\n\r\n        const matrixCont = $('#mainViewCont');\r\n        const viewWidth = matrixCont.parents('mat-grid-tile').css('width');\r\n        const viewHeight = matrixCont.parents('mat-grid-tile').css('height');\r\n\r\n        this.viewWidth = viewWidth ? viewWidth.toString() : '100%';\r\n        this.viewHeight = this.hasHeightLimit ? viewHeight.toString() : 'auto';\r\n\r\n        // if the matrix located on the bottom / there is nothing under the matrix we dont need to check the height\r\n\r\n        if (parseInt(viewWidth, 10) < this.mmToPx(this.sumOfMinColWidth) ||\r\n            (this.hasHeightLimit && parseInt(viewHeight, 10) < numofrows * 41 + 72)) {\r\n            this.coverChildTable = true;\r\n        } else {\r\n            this.coverChildTable = false;\r\n        }\r\n\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    showMatrixDialog(): void {\r\n        // this.childModal.config.ignoreBackdropClick = true;\r\n        // TODO: Show modal\r\n        // this.childModal.show();\r\n    }\r\n\r\n    // TODO:\r\n    // onShown() {\r\n    //     this.fillData();\r\n    // }\r\n\r\n    // TODO:\r\n    // onHidden() {\r\n    //     this.fillData();\r\n    // }\r\n\r\n    ngOnInit(): void {\r\n        const self = this;\r\n        // let field = this.field as PepperiInternalPageField;\r\n\r\n        this.pepperiInternalPageService.initDetails(this.field.objectId, this.field.parentId,\r\n            this.field.searchCode, (resViewTypes: any) => {\r\n            // my code DI-7134\r\n            resViewTypes.Rows = resViewTypes.Rows.filter((item) => item.Key !== 'OrderCenterView1');\r\n\r\n            if (resViewTypes.Rows && resViewTypes.Rows.length > 0) {\r\n                if (!resViewTypes.Default) {\r\n                    resViewTypes.Default = resViewTypes.Rows[0].Key;\r\n                }\r\n                self.childViewTypes = resViewTypes.Rows;\r\n                self.currentViewType = resViewTypes.Rows[0];\r\n\r\n                // for (var i = 0; i < resViewTypes.Rows.length; i++) {\r\n                for (const viewTypeRow of resViewTypes.Rows) {\r\n                    if (viewTypeRow.Value === resViewTypes.Default) {\r\n                        self.currentViewType = viewTypeRow;\r\n                    }\r\n                }\r\n\r\n                self.loadLastAdditionalApiName();\r\n                self.changeChildrenViewType(self.currentViewType.Key);\r\n            }\r\n        });\r\n\r\n        // TODO:\r\n        // this.resize = Observable.fromEvent(window, 'resize')\r\n        //     .debounceTime(10)\r\n        //     .subscribe((event) => {\r\n        //         self.setViewCover(self.rows);\r\n        //     });\r\n    }\r\n\r\n    loadLastAdditionalApiName(): void {\r\n        const daa = sessionStorage.getItem(PepperiInternalPageComponent.CURRENT_ADDITIONAL_API_NAME);\r\n        if (daa && daa.length > 0) {\r\n            const additionalApiName = JSON.parse(daa);\r\n            this.currentAdditionalApiName = additionalApiName;\r\n            this.pepperiInternalPageService.additionalApiName = additionalApiName.Key;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.childChanged) { this.childChanged.unsubscribe(); }\r\n\r\n        if (this.childClicked) { this.childClicked.unsubscribe(); }\r\n\r\n        if (this.resize) { this.resize.unsubscribe(); }\r\n    }\r\n\r\n    changeAdditionalApiName(additionalApiName): void {\r\n        const self = this;\r\n        this.pepperiInternalPageService.changeAdditionalApiName(additionalApiName ? additionalApiName.Key : '',\r\n            (res: any) => {\r\n                // for (let index = 0; index < res.Rows.length; index++) {\r\n                for (const row of res.Rows) {\r\n                        self.updateChanges(row);\r\n                }\r\n\r\n                self.changeDetectorRef.markForCheck();\r\n            }\r\n        );\r\n\r\n        sessionStorage.setItem(PepperiInternalPageComponent.CURRENT_ADDITIONAL_API_NAME, JSON.stringify(additionalApiName));\r\n\r\n        setTimeout(() => {\r\n            this.currentAdditionalApiName = additionalApiName;\r\n        }, 0);\r\n    }\r\n\r\n    setTotalsRow(): void {\r\n        this.totalsRow = [];\r\n\r\n        if (this.isMatrixView() || this.isFlatMatrixView()) {\r\n            let totalCol = 0;\r\n\r\n            if (this.customList.items) {\r\n                for (let col = 0; col < this.customList.items[0].Data.Fields.length; col++) {\r\n                    const field = this.customList.items[0].Data.Fields[col];\r\n                    if (\r\n                        field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\r\n                        field.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\r\n                        field.FieldType === FIELD_TYPE.NumberRealForMatrix ||\r\n                        field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\r\n                        field.FieldType === FIELD_TYPE.CalculatedInt ||\r\n                        field.FieldType === FIELD_TYPE.NumberInteger ||\r\n                        field.FieldType === FIELD_TYPE.CalculatedReal ||\r\n                        field.FieldType === FIELD_TYPE.NumberReal\r\n                    ) {\r\n                        totalCol = 0;\r\n                        // for (var i = 0; i < this.customList.items.length; i++) {\r\n                        for (const listItem of this.customList.items) {\r\n\r\n                            if (listItem.Data.Fields[col] && listItem.Data.Fields[col].Value) {\r\n                                const num = parseFloat(listItem.Data.Fields[col].Value);\r\n                                totalCol += isNaN(num) ? 0 : num;\r\n                            }\r\n                        }\r\n                        this.totalsRow.push(totalCol);\r\n                    } else {\r\n                        this.totalsRow.push('');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateChanges(elementToUpdate: any): void {\r\n        this.customList.updateListItem(elementToUpdate);\r\n\r\n        // Update memory data\r\n        for (let index = 0; index < this.childData.Rows.length; index++) {\r\n            if (this.childData.Rows[index].UID === elementToUpdate.UID) {\r\n                this.childData.Rows[index] = elementToUpdate;\r\n            }\r\n        }\r\n    }\r\n\r\n    setValueCallback(id: any, res: any): void {\r\n        if (res.Rows.length === 1) {\r\n            this.updateChanges(res.Rows[0]);\r\n        }\r\n\r\n        this.setTotalsRow();\r\n        this.checkForChanges = new Date();\r\n\r\n        // DI-15985\r\n        this.childChanged.emit(res);\r\n\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    onCustomizeObjectChanged(customizeObjectChangedData: PepperiObjectChangedData): void {\r\n        let handledEvent = false;\r\n        const boundSetValueCallback = this.setValueCallback.bind(this); // .bind() to have this in the bound function.\r\n\r\n        // For the new custom form, the plus and minus events transform in the PepperiObjectChangedData\r\n        if (customizeObjectChangedData.ControlType === 'qs') {\r\n            if (customizeObjectChangedData.Value === '+') {\r\n                handledEvent = true;\r\n                this.pepperiInternalPageService.childPlusClick(customizeObjectChangedData.Id, customizeObjectChangedData.ApiName,\r\n                    (res: any) => {\r\n                        boundSetValueCallback(customizeObjectChangedData.Id, res);\r\n                    }\r\n                );\r\n            } else if (customizeObjectChangedData.Value === '-') {\r\n                handledEvent = true;\r\n                this.pepperiInternalPageService.childMinusClick(customizeObjectChangedData.Id, customizeObjectChangedData.ApiName,\r\n                    (res: any) => {\r\n                        boundSetValueCallback(customizeObjectChangedData.Id, res);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!handledEvent) {\r\n            this.pepperiInternalPageService.childValueChanged(customizeObjectChangedData.Id, customizeObjectChangedData.ApiName,\r\n                customizeObjectChangedData.Value, (res: any) => {\r\n                    boundSetValueCallback(customizeObjectChangedData.Id, res);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    onCustomizeFieldClick(fieldClickEvent: any): void {\r\n        this.childClicked.emit(fieldClickEvent);\r\n    }\r\n}\r\n","<ng-container [ngSwitch]=\"field.controlType\" [formGroup]=\"form\">\r\n\r\n    <pep-address *ngSwitchCase=\"'address'\" [form]=\"form\" [key]=\"field.key\" [formattedValue]=\"field.formattedValue\"\r\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [groupFields]=\"field.groupFields\"\r\n        [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\">\r\n    </pep-address>\r\n\r\n    <pep-attachment *ngSwitchCase=\"'attachment'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\r\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [showTitle]=\"showTitle\"\r\n        [layoutType]=\"layoutType\" (elementClicked)=\"onClick($event)\" (valueChanged)=\"onValueChanged($event)\">\r\n    </pep-attachment>\r\n\r\n    <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\r\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [additionalValue]=\"field.additionalValue\"\r\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\" [isActive]=\"isActive\">\r\n    </pep-checkbox>\r\n\r\n    <pep-date *ngSwitchCase=\"'date'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\"\r\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [minValue]=\"field.minValue\"\r\n        [maxValue]=\"field.maxValue\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\r\n        (valueChanged)=\"onValueChanged($event)\" [isActive]=\"isActive\">\r\n    </pep-date>\r\n\r\n    <pep-images-filmstrip *ngSwitchCase=\"'images'\" [objectId]=\"objectId\" [form]=\"form\" [key]=\"field.key\"\r\n        [label]=\"field.label\" [showTitle]=\"showTitle\" [value]=\"field.value\" [layoutType]=\"layoutType\">\r\n    </pep-images-filmstrip>\r\n\r\n    <pep-image *ngSwitchCase=\"'image'\" [objectId]=\"objectId\" [form]=\"form\" [key]=\"field.key\"\r\n        [src]=\"field.formattedValue\" [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\"\r\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [indicatorsField]=\"field.indicatorsField\"\r\n        [menuField]=\"field.menuField\" [hasCampaignField]=\"field.hasCampaignField\" [sizeLimitMB]=\"field.sizeLimitMB\"\r\n        [isActive]=\"isActive\" [layoutType]=\"layoutType\" (elementClicked)=\"onClick($event)\"\r\n        (valueChanged)=\"onValueChanged($event)\">\r\n    </pep-image>\r\n\r\n    <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\"\r\n        [referenceObjectInternalType]=\"field.referenceObjectInternalType\" [type]=\"field.type\"\r\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\r\n        [layoutType]=\"layoutType\" (elementClicked)=\"onClick($event)\" (valueChanged)=\"onValueChanged($event)\">\r\n    </pep-internal-button>\r\n\r\n    <!-- [hasSubMenu]=\"field.hasSubMenu\" -->\r\n    <pep-menu *ngSwitchCase=\"'menu'\" [key]=\"field.key\" [label]=\"field.label\" [disabled]=\"field.disabled\"\r\n        [xAlignment]=\"field.xAlignment\" [options]=\"field.options\" [layoutType]=\"layoutType\"\r\n        (elementClicked)=\"onClick($event)\" (notifyMenuItemClicked)=\"onMenuItemClicked($event)\">\r\n    </pep-menu>\r\n\r\n    <pep-quantity-selector *ngSwitchCase=\"'qs'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\"\r\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [lastFocusField]=\"field.lastFocusField\"\r\n        [alowDecimal]=\"field.alowDecimal\" [additionalValue]=\"field.additionalValue\"\r\n        [notificationInfo]=\"field.notificationInfo\" [isActive]=\"isActive\" [layoutType]=\"layoutType\"\r\n        [showTitle]=\"showTitle\" (valueChanged)=\"onValueChanged($event)\"\r\n        (formValidationChanged)=\"onFormValidationChanged($event)\" (elementClicked)=\"onClick($event)\">\r\n    </pep-quantity-selector>\r\n\r\n    <pep-rich-html-textarea *ngSwitchCase=\"'richhtmltextarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\r\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\" [isActive]=\"isActive\">\r\n    </pep-rich-html-textarea>\r\n\r\n    <pep-select *ngSwitchCase=\"'select'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\"\r\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\r\n        [rowSpan]=\"field.rowSpan\" [options]=\"field.options\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\r\n        (valueChanged)=\"onValueChanged($event)\" (formValidationChanged)=\"onFormValidationChanged($event)\"\r\n        [isActive]=\"isActive\">\r\n    </pep-select>\r\n\r\n    <pep-separator *ngSwitchCase=\"'separator'\" [form]=\"form\" [key]=\"field.key\" [label]=\"field.label\"\r\n        [xAlignment]=\"field.xAlignment\" [layoutType]=\"layoutType\">\r\n    </pep-separator>\r\n\r\n    <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\" [label]=\"field.label\"\r\n        [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [layoutType]=\"layoutType\"\r\n        (valueChanged)=\"onValueChanged($event)\">\r\n    </pep-signature>\r\n\r\n    <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\r\n        [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\r\n        [rowSpan]=\"field.rowSpan\" [lastFocusField]=\"field.lastFocusField\" [showTitle]=\"showTitle\"\r\n        [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\" [isActive]=\"isActive\">\r\n    </pep-textarea>\r\n\r\n    <pep-textbox *ngSwitchCase=\"'textbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [placeholder]=\"field.placeholder\"\r\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\r\n        [rowSpan]=\"field.rowSpan\" [lastFocusField]=\"field.lastFocusField\" [showTitle]=\"showTitle\"\r\n        [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\"\r\n        (formValidationChanged)=\"onFormValidationChanged($event)\" [isActive]=\"isActive\">\r\n    </pep-textbox>\r\n\r\n    <pep-indicators *ngSwitchCase=\"'indicators'\" [key]=\"field.key\" [value]=\"field.value\" [layoutType]=\"layoutType\">\r\n    </pep-indicators>\r\n    <pep-internal-page *ngSwitchCase=\"'internalPage'\" [hasHeightLimit]=\"hasHeightLimit\" [field]=\"field\"\r\n        [layoutType]=\"layoutType\" (childClicked)=\"onChildClick($event)\" (childChanged)=\"onChildChanged($event)\">\r\n    </pep-internal-page>\r\n\r\n    <ng-container *ngSwitchCase=\"'placeholder'\">\r\n    </ng-container>\r\n</ng-container>","import {\r\n    Component, OnChanges, Input, Output, EventEmitter,\r\n    ViewEncapsulation, ChangeDetectionStrategy, OnDestroy\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { LAYOUT_TYPE } from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'pep-field-generator',\r\n    templateUrl: './field-generator.component.html',\r\n    styleUrls: ['./field-generator.component.scss'],\r\n    encapsulation: ViewEncapsulation.Emulated,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PepperiFieldGeneratorComponent implements OnChanges, OnDestroy {\r\n    @Input() field: any;\r\n    @Input() hasHeightLimit = false;\r\n    @Input() isActive = false;\r\n    @Input() objectId: any = null;\r\n    @Input() form: FormGroup;\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n    @Input() showTitle = true;\r\n\r\n    @Input() checkForChanges: any = null;\r\n    @Output() valueChanged: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() childChanged: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() formValidationChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n    @Output() elementClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() notifyMenuItemClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() notifyChildClicked: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    get isValid(): boolean {\r\n        if (this.field.readonly || this.field.disabled) {\r\n            return true;\r\n        } else {\r\n            const formControl = this.form && this.form.get(this.field.key);\r\n\r\n            if (formControl) {\r\n                return formControl.valid;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isTouched(): boolean {\r\n        const formControl = this.form && this.form.get(this.field.key);\r\n        return formControl ? formControl.touched : false;\r\n    }\r\n\r\n    get isDirty(): boolean {\r\n        const formControl = this.form && this.form.get(this.field.key);\r\n        return formControl ? formControl.dirty : false;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.valueChanged) { this.valueChanged.unsubscribe(); }\r\n\r\n        if (this.formValidationChanged) { this.formValidationChanged.unsubscribe(); }\r\n\r\n        if (this.childChanged) { this.childChanged.unsubscribe(); }\r\n\r\n        if (this.elementClicked) { this.elementClicked.unsubscribe(); }\r\n\r\n        if (this.notifyMenuItemClicked) { this.notifyMenuItemClicked.unsubscribe(); }\r\n\r\n        if (this.notifyChildClicked) { this.notifyChildClicked.unsubscribe(); }\r\n    }\r\n\r\n    onValueChanged(valueChanged: any): void {\r\n        this.valueChanged.emit(valueChanged);\r\n    }\r\n\r\n    onChildChanged(childChanged: any): void {\r\n        this.childChanged.emit(childChanged);\r\n    }\r\n\r\n    onFormValidationChanged(formValidationChanged: any): void {\r\n        this.formValidationChanged.emit(formValidationChanged);\r\n    }\r\n\r\n    onClick(fieldClicked: any): void {\r\n        this.elementClicked.emit(fieldClicked);\r\n    }\r\n\r\n    onMenuItemClicked(fieldToEdit: any): void {\r\n        this.notifyMenuItemClicked.emit(fieldToEdit);\r\n    }\r\n\r\n    onChildClick(childClicked: any): void {\r\n        this.notifyChildClicked.emit(childClicked);\r\n    }\r\n\r\n    ngOnChanges(changes: any): void {\r\n        // debugger;\r\n        // TODO: Remove it only for testing.\r\n        // this.field.disabled = this.field.readonly = false;\r\n    }\r\n}\r\n","<fieldset *ngIf=\"form\" [formGroup]=\"form\" [disabled]=\"isLocked\" class=\"pepperi-form\"\r\n    [ngStyle]=\"{ 'background-color': layoutType == LAYOUT_TYPE.PepperiCard && pepperiObjectInput?.Data?.BackgroundColor }\"\r\n    [ngClass]=\"{\r\n        'material-form': layoutType == LAYOUT_TYPE.PepperiForm,\r\n        cardView: isCardView == true\r\n    }\">\r\n    <!-- New Form -->\r\n    <mat-grid-list *ngIf=\"layoutType == LAYOUT_TYPE.PepperiForm\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\r\n        [gutterSize]=\"formGutterSize\">\r\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\">\r\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\r\n                [checkForChanges]=\"checkForChanges\" [objectId]=\"pepperiObjectInput.Data.UID\"\r\n                [hasHeightLimit]=\"!matrixIsLast\" [field]=\"field\" [showTitle]=\"showTitle\"\r\n                (valueChanged)=\"onValueChanged($event)\" (notifyChildClicked)=\"onChildClicked($event)\"\r\n                (childChanged)=\"onChildChanged($event)\" (elementClicked)=\"onClick($event)\"\r\n                (notifyMenuItemClicked)=\"onMenuItemClicked($event)\"\r\n                (formValidationChanged)=\"onFormValidationChanged($event)\">\r\n            </pep-field-generator>\r\n        </mat-grid-tile>\r\n    </mat-grid-list>\r\n\r\n    <!-- Thumbnails -->\r\n    <mat-grid-list *ngIf=\"layoutType == LAYOUT_TYPE.PepperiCard\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\r\n        [gutterSize]=\"cardGutterSize\" class=\"card-spacing\" [ngClass]=\"{ 'lock-events': lockEvents }\">\r\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\"\r\n            [ngStyle]=\"{ overflow: field.type == 'qs' ? 'unset' : 'hidden' }\">\r\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\r\n                [isActive]=\"isActive\" [checkForChanges]=\"checkForChanges\" [objectId]=\"pepperiObjectInput.Data.UID\"\r\n                [hasHeightLimit]=\"!matrixIsLast\" [field]=\"field\" [showTitle]=\"showTitle\"\r\n                (valueChanged)=\"onValueChanged($event)\" (notifyChildClicked)=\"onChildClicked($event)\"\r\n                (childChanged)=\"onChildChanged($event)\" (elementClicked)=\"onClick($event)\"\r\n                (notifyMenuItemClicked)=\"onMenuItemClicked($event)\">\r\n            </pep-field-generator>\r\n        </mat-grid-tile>\r\n    </mat-grid-list>\r\n\r\n    <ng-container *ngIf=\"layoutType == LAYOUT_TYPE.PepperiTable\">\r\n        <ng-container *ngIf=\"isReport; then reportBlock; else notReportBlock\"></ng-container>\r\n        <ng-template #reportBlock>\r\n            <ng-container *ngTemplateOutlet=\"report\"></ng-container>\r\n        </ng-template>\r\n        <ng-template #notReportBlock>\r\n            <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip table-cell \"\r\n                [ngClass]=\"['text-align-' + field.xAlignment]\" style=\"height: 100%\"\r\n                [ngStyle]=\"{ width: (uiControlHeader?.ControlFields)[j]?.calcColumnWidthString}\">\r\n                <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [checkForChanges]=\"checkForChanges\"\r\n                    [objectId]=\"pepperiObjectInput.Data.UID\" [field]=\"field\" (valueChanged)=\"onValueChanged($event)\"\r\n                    (elementClicked)=\"onClick($event)\" (notifyMenuItemClicked)=\"onMenuItemClicked($event)\" [form]=\"form\"\r\n                    [layoutType]=\"layoutType\" [showTitle]=\"false\" [isActive]=\"isActive\">\r\n                </pep-field-generator>\r\n            </div>\r\n        </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"layoutType == LAYOUT_TYPE.Editmodal\">\r\n        <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip\" style=\"width:100%;\">\r\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [checkForChanges]=\"checkForChanges\"\r\n                [objectId]=\"pepperiObjectInput.Data.UID\" [field]=\"field\" (valueChanged)=\"onValueChanged($event)\"\r\n                (elementClicked)=\"onClick($event)\" [form]=\"form\" [layoutType]=\"layoutType\" [showTitle]=\"false\"\r\n                [isActive]=\"isActive\">\r\n            </pep-field-generator>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <!------- For testing ------------\r\n    {{ form.value | json }}\r\n    {{ form.valid }}\r\n    ---------------------------------->\r\n</fieldset>\r\n\r\n<ng-template #report>\r\n    <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip pepperi-report-fields\"\r\n        [ngStyle]=\"{ width: (uiControlHeader?.ControlFields)[j]?.calcColumnWidthString }\"\r\n        [ngClass]=\"['text-align-' + field.xAlignment]\">\r\n        <ng-container [ngSwitch]=\"field.controlType\">\r\n            <pep-image *ngSwitchCase=\"'image'\" [objectId]=\"objectId\" [form]=\"form\" [key]=\"field.key\"\r\n                [src]=\"field.formattedValue\" [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\"\r\n                [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n                [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [layoutType]=\"layoutType\"\r\n                (elementClicked)=\"onClick($event)\">\r\n            </pep-image>\r\n\r\n            <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\r\n                [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\"\r\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\r\n                [layoutType]=\"layoutType\">\r\n            </pep-signature>\r\n\r\n            <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n                [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\"\r\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\r\n                [additionalValue]=\"field.additionalValue\" [layoutType]=\"layoutType\">\r\n            </pep-checkbox>\r\n\r\n            <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\r\n                [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\r\n                [layoutType]=\"layoutType\" (elementClicked)=\"onClick($event)\">\r\n            </pep-internal-button>\r\n\r\n            <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\r\n                [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\"\r\n                [readonly]=\"field.readonly\" [maxFieldCharacters]=\"field.maxFieldCharacters\"\r\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\r\n                [layoutType]=\"layoutType\">\r\n            </pep-textarea>\r\n\r\n            <pep-quantity-selector *ngSwitchCase=\"'qs'\" [id]=\"field.key\" [form]=\"form\" [key]=\"field.key\"\r\n                [value]=\"field.value\" [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\r\n                [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\r\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\r\n                [layoutType]=\"layoutType\" (valueChanged)=\"onValueChanged($event)\" (elementClicked)=\"onClick($event)\">\r\n            </pep-quantity-selector>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n                <ng-container *ngIf=\"field.formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\">\r\n                </ng-container>\r\n                <ng-template #notEmptyBlock>\r\n                    <ng-container\r\n                        *ngIf=\"field.type === 'attachment' || field.type === 'link'; then linkBlock; else notLinkBlock\">\r\n                    </ng-container>\r\n                    <ng-template #linkBlock>\r\n                        <a [id]=\"field.key\" class=\"color-link body-sm pepperi-report-input readonly\"\r\n                            *ngIf=\"field.formattedValue != null\" title=\"{{ field.formattedValue }}\" target=\"_blank\"\r\n                            href=\"{{ field.value }}\">{{ field.formattedValue }}</a>\r\n                    </ng-template>\r\n                    <ng-template #notLinkBlock>\r\n                        <span [id]=\"field.key\" class=\"body-sm pepperi-report-input readonly\"\r\n                            title=\"{{ field.formattedValue }}\"\r\n                            [ngStyle]=\"{ color: field.textColor }\">{{ field.formattedValue }}</span>\r\n                    </ng-template>\r\n                </ng-template>\r\n                <ng-template #emptyBlock>\r\n                    <span>&nbsp;</span>\r\n                </ng-template>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>","import {\r\n    Component, ChangeDetectionStrategy, OnInit, OnDestroy,\r\n    Input, KeyValueDiffers, Output, EventEmitter, OnChanges, DoCheck\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { DialogService, DialogData, DialogDataType } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { Subscription } from 'rxjs';\r\nimport {\r\n    PepperiFieldClickedData,\r\n    PepperiObjectChangedData,\r\n    LAYOUT_TYPE,\r\n    FIELD_TYPE,\r\n    CustomizationService,\r\n    UIControl,\r\n    UIControlField,\r\n    ObjectSingleData,\r\n    ObjectsDataRowCell,\r\n    PepperiFieldBase,\r\n    PepperiTextboxField,\r\n    PepperiSelectField,\r\n    PepperiMenuField,\r\n    PepperiQuantitySelectorField,\r\n    PepperiAddressField,\r\n    PepperiIndicatorsField,\r\n    PepperiInternalPageField,\r\n    PepperiButtonField,\r\n    PepperiAttachmentField,\r\n    PepperiSignatureField,\r\n    PepperiImageField,\r\n    PepperiImagesField,\r\n    PepperiTextareaField,\r\n    PepperiRichHtmlTextareaField,\r\n    PepperiDateField,\r\n    PepperiCheckboxField,\r\n    PepperiSeparatorField,\r\n    PepperiPlaceholderField,\r\n} from '@pepperi-addons/ngx-lib';\r\n\r\n// tslint:disable-next-line: no-conflicting-lifecycle\r\n@Component({\r\n    selector: 'pep-form',\r\n    templateUrl: './form.component.html',\r\n    styleUrls: ['./form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PepperiFormComponent implements OnInit, DoCheck, OnChanges, OnDestroy {\r\n    @Input() isReport = false;\r\n    @Input() uiControlHeader: UIControl;\r\n    @Input() lockEvents = false;\r\n    @Input() canEditObject = true;\r\n    @Input() pepperiObjectInput: ObjectSingleData;\r\n    @Input() isActive = false;\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n    @Input() listType = '';\r\n    @Input() objectId = '0';\r\n    @Input() parentId = '0';\r\n    @Input() searchCode = '0';\r\n    @Input() showTitle = true;\r\n    @Input() firstFieldAsLink = false;\r\n    @Input() isCardView = false;\r\n    @Input() checkForChanges: any = null;\r\n    @Input() pageType = '';\r\n\r\n    @Output() notifyValueChanged: EventEmitter<PepperiObjectChangedData> = new EventEmitter<PepperiObjectChangedData>();\r\n    @Output() formValidationChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n    @Output() childClicked: EventEmitter<void> = new EventEmitter<void>();\r\n    @Output() childChanged: EventEmitter<void> = new EventEmitter<void>();\r\n    @Output() notifyFieldClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() notifyMenuItemClicked: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n    isLocked = false;\r\n    formGutterSize;\r\n    cardGutterSize;\r\n    rowHeight;\r\n    lastFocusedField: any;\r\n    matrixIsLast = false;\r\n    // lastUpdatedFieldApiName: string = '';\r\n    form: FormGroup;\r\n    differ: any;\r\n\r\n    // payLoad = '';\r\n    rows: Array<PepperiFieldBase[]> = [];\r\n    fields: PepperiFieldBase[] = [];\r\n    columns = 1;\r\n\r\n    hasMenuFloatingOnOtherField = false;\r\n    menuField: any;\r\n    menuDataField: any;\r\n    hasCampaignField: any;\r\n    hasCampaignDataField: any;\r\n    indicatorsField: any;\r\n    indicatorsDataField: any = null;\r\n\r\n    shouldReloadForm = false;\r\n    eventServiceSub: Subscription;\r\n\r\n    public jsonLib = JSON;\r\n\r\n    static convertAddressFields(controlField: any, addressFields: Array<ObjectsDataRowCell>, canEditObject: boolean): PepperiFieldBase[] {\r\n        const fields: PepperiFieldBase[] = [];\r\n\r\n        addressFields.forEach(field => {\r\n            let customField: PepperiFieldBase;\r\n            const placeholder = field.ApiName;\r\n\r\n            if (field.ApiName.toLowerCase().indexOf('street') >= 0) {\r\n                customField = new PepperiTextboxField({\r\n                    key: field.ApiName,\r\n                    label: field.ApiName,\r\n                    type: 'text',\r\n                    placeholder,\r\n                    readonly: !canEditObject,\r\n                    disabled: !field.Enabled || !canEditObject,\r\n                    hidden: false,\r\n                    required: false,\r\n                    value: field.Value,\r\n                    formattedValue: field.FormattedValue,\r\n                    row: 0,\r\n                    rowSpan: 1,\r\n                    col: 0,\r\n                    colSpan: 2,\r\n                    xAlignment: controlField.Layout.XAlignment,\r\n                    yAlignment: controlField.Layout.YAlignment,\r\n                    order: 0\r\n                });\r\n            } else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {\r\n                customField = new PepperiTextboxField({\r\n                    key: field.ApiName,\r\n                    label: field.ApiName,\r\n                    type: 'text',\r\n                    placeholder,\r\n                    readonly: !canEditObject,\r\n                    disabled: !field.Enabled || !canEditObject,\r\n                    hidden: false,\r\n                    required: false,\r\n                    value: field.Value,\r\n                    formattedValue: field.FormattedValue,\r\n                    row: 0,\r\n                    rowSpan: 1,\r\n                    col: 2,\r\n                    colSpan: 1,\r\n                    xAlignment: controlField.Layout.XAlignment,\r\n                    yAlignment: controlField.Layout.YAlignment,\r\n                    order: 1\r\n                });\r\n            } else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {\r\n                customField = new PepperiSelectField({\r\n                    key: field.ApiName,\r\n                    label: field.ApiName,\r\n                    placeholder,\r\n                    options: field.OptionalValues,\r\n                    readonly: !canEditObject,\r\n                    disabled: !field.Enabled || !canEditObject,\r\n                    hidden: false,\r\n                    required: false,\r\n                    value: field.Value,\r\n                    formattedValue: field.FormattedValue,\r\n                    row: 1,\r\n                    rowSpan: 1,\r\n                    col: 0,\r\n                    colSpan: 1,\r\n                    xAlignment: controlField.Layout.XAlignment,\r\n                    yAlignment: controlField.Layout.YAlignment,\r\n                    order: 2\r\n                });\r\n            } else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {\r\n                customField = new PepperiTextboxField({\r\n                    key: field.ApiName,\r\n                    label: field.ApiName,\r\n                    type: 'text',\r\n                    placeholder,\r\n                    readonly: !canEditObject,\r\n                    disabled: !field.Enabled || !canEditObject,\r\n                    hidden: false,\r\n                    required: false,\r\n                    value: field.Value,\r\n                    formattedValue: field.FormattedValue,\r\n                    row: 1,\r\n                    rowSpan: 1,\r\n                    col: 1,\r\n                    colSpan: 1,\r\n                    xAlignment: controlField.Layout.XAlignment,\r\n                    yAlignment: controlField.Layout.YAlignment,\r\n                    order: 3\r\n                });\r\n            } else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {\r\n                customField = new PepperiSelectField({\r\n                    key: field.ApiName,\r\n                    label: field.ApiName,\r\n                    placeholder,\r\n                    options: field.OptionalValues,\r\n                    readonly: !canEditObject,\r\n                    disabled: !field.Enabled || !canEditObject,\r\n                    hidden: false,\r\n                    required: false,\r\n                    value: field.Value,\r\n                    formattedValue: field.FormattedValue,\r\n                    row: 2,\r\n                    rowSpan: 1,\r\n                    col: 2,\r\n                    colSpan: 1,\r\n                    xAlignment: controlField.Layout.XAlignment,\r\n                    yAlignment: controlField.Layout.YAlignment,\r\n                    order: 4\r\n                });\r\n            }\r\n\r\n            fields.push(customField);\r\n        });\r\n\r\n        return fields.sort((n1, n2) => (n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0));\r\n    }\r\n\r\n    static isMatrixField(apiNameToCheck: string): boolean {\r\n        return apiNameToCheck.indexOf('Matrix') >= 0;\r\n    }\r\n\r\n    public static doesFieldHavaFloatingField(controlField: any, floatingField: any): boolean {\r\n        let hasFloatingField = false;\r\n        if (\r\n            floatingField.Layout.Y >= controlField.Layout.Y &&\r\n            floatingField.Layout.Y < controlField.Layout.Y + controlField.Layout.Height &&\r\n            floatingField.Layout.X >= controlField.Layout.X &&\r\n            floatingField.Layout.X < controlField.Layout.X + controlField.Layout.Width\r\n        ) {\r\n            hasFloatingField = true;\r\n        }\r\n\r\n        return hasFloatingField;\r\n    }\r\n\r\n    public static getOptionsForCustomField(controlField: any, dataField: any, canEditObject: boolean): any {\r\n        if (!controlField || !dataField) { return; }\r\n\r\n        const placeholder = controlField.ReadOnly || !canEditObject ? '' : controlField.Title;\r\n\r\n        return {\r\n            key: controlField.ApiName,\r\n            label: controlField.Title,\r\n            type: 'text',\r\n            accessory: dataField.Accessory,\r\n            placeholder,\r\n            readonly: controlField.ReadOnly || !canEditObject,\r\n            disabled: !dataField.Enabled || !canEditObject,\r\n            hidden: controlField.Hidden,\r\n            required: controlField.Mandatory,\r\n            value: dataField.Value,\r\n            formattedValue: dataField.FormattedValue,\r\n            additionalValue: dataField.AdditionalValue,\r\n            row: controlField.Layout.Y,\r\n            rowSpan: controlField.Layout.Height,\r\n            col: controlField.Layout.X,\r\n            colSpan: controlField.Layout.Width,\r\n            xAlignment: controlField.Layout.XAlignment,\r\n            yAlignment: controlField.Layout.YAlignment,\r\n            options: dataField.OptionalValues,\r\n            groupFields: undefined,\r\n            maxFieldCharacters: controlField.MaxFieldCharacters,\r\n            minValue: controlField.MinValue,\r\n            maxValue: controlField.MaxValue,\r\n            // hasMenu: hasMenu,\r\n            // hasCampaign: hasCampaign,\r\n            // hasIndicators: hasIndicators,\r\n            textColor: dataField.TextColor,\r\n            notificationInfo: dataField.NotificationInfo\r\n        };\r\n    }\r\n\r\n    public static convertToCustomField(controlField: any, dataField: any, canEditObject: boolean,\r\n        menuField: any, hasCampaignField: any, indicatorsField: any,\r\n        objectId: any, parentId: any, searchCode: any): PepperiFieldBase {\r\n        let customField: PepperiFieldBase;\r\n        const options = PepperiFormComponent.getOptionsForCustomField(controlField, dataField, canEditObject);\r\n\r\n        if (controlField.ApiName === 'ObjectMenu') {\r\n            options.type = 'menu';\r\n\r\n            if (dataField.TransactionItemType === 1 && dataField.OptionalValues.length > 0) {\r\n                const subMenuOptions = [{ Key: 'EditPackage', Value: 'Edit' }, { Key: 'DeletePackage', Value: 'Delete' }];\r\n                options.options = subMenuOptions.filter(option => option && dataField.OptionalValues.includes(option.Key));\r\n            }\r\n            else {\r\n                options.options = null;\r\n            }\r\n\r\n            customField = new PepperiMenuField(options);\r\n        } else if (controlField.ApiName === 'QuantitySelector' ||\r\n            controlField.ApiName === 'UnitsQuantity' ||\r\n            controlField.ApiName.indexOf('size_') === 0) {\r\n            if (dataField.FieldType === FIELD_TYPE.InternalLink) {\r\n                options.type = 'button';\r\n            } else if (dataField.FieldType === FIELD_TYPE.Package) {\r\n                options.type = 'packageButton';\r\n            } else if (dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\r\n                dataField.FieldType === FIELD_TYPE.NumberReal) {\r\n                options.type = 'qs';\r\n                options.alowDecimal = true;\r\n            } else if (dataField.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\r\n                dataField.FieldType === FIELD_TYPE.NumberInteger) {\r\n                options.type = 'qs';\r\n                options.alowDecimal = false;\r\n            } else if (dataField.FieldType === FIELD_TYPE.NumberIntegerForMatrix) {\r\n                options.type = 'qsForMatrix';\r\n                options.alowDecimal = false;\r\n            } else if (dataField.FieldType === FIELD_TYPE.NumberRealForMatrix) {\r\n                options.type = 'qsForMatrix';\r\n                options.alowDecimal = true;\r\n            }\r\n\r\n            customField = new PepperiQuantitySelectorField(options);\r\n        } else {\r\n            // Hack need to remove this..\r\n            if (dataField.FieldType === FIELD_TYPE.Indicators && PepperiFormComponent.isMatrixField(dataField.ApiName)) {\r\n                dataField.FieldType = FIELD_TYPE.InternalPage;\r\n            }\r\n\r\n            switch (dataField.FieldType) {\r\n                case FIELD_TYPE.Address: {\r\n                    const canEditGroupObject = controlField.ReadOnly ? false : canEditObject;\r\n                    options.groupFields = PepperiFormComponent.convertAddressFields(controlField,\r\n                        dataField.GroupFields, canEditGroupObject);\r\n                    customField = new PepperiAddressField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Indicators: {\r\n                    // options['type'] = 'indicators'; // Not needed this is PepperiIndicatorsField.\r\n                    customField = new PepperiIndicatorsField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.InternalPage: {\r\n                    if (PepperiFormComponent.isMatrixField(controlField.ApiName)) {\r\n                        options.rowSpan = controlField.Layout.Height;\r\n                        options.objectId = objectId;\r\n                        options.parentId = parentId;\r\n                        options.searchCode = searchCode;\r\n\r\n                        customField = new PepperiInternalPageField(options);\r\n                    } else {\r\n                        // Not supported\r\n                    }\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Link: {\r\n                    options.type = 'link';\r\n                    customField = new PepperiTextboxField(options);\r\n\r\n                    // DI-11292 - add changes for link field for the \"Read Only display value\" prop\r\n                    customField.formattedValue = customField.disabled && customField.formattedValue !== '' &&\r\n                        customField.value !== '' ? customField.formattedValue : customField.value;\r\n\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.InternalLink:\r\n                case FIELD_TYPE.Button: {\r\n                    options.type = 'button';\r\n                    customField = new PepperiButtonField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Attachment: {\r\n                    options.type = 'attachment';\r\n                    customField = new PepperiAttachmentField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Signature: {\r\n                    options.type = 'signature';\r\n                    customField = new PepperiSignatureField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Image:\r\n                case FIELD_TYPE.ImageURL: {\r\n                    options.type = 'image';\r\n                    options.menuField = menuField && this.doesFieldHavaFloatingField(controlField, menuField) ? menuField : null;\r\n                    options.hasCampaignField = hasCampaignField &&\r\n                        this.doesFieldHavaFloatingField(controlField, hasCampaignField) ? hasCampaignField : null;\r\n                    options.indicatorsField = indicatorsField &&\r\n                        this.doesFieldHavaFloatingField(controlField, indicatorsField) ? indicatorsField : null;\r\n\r\n                    customField = new PepperiImageField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Images: {\r\n                    options.type = 'images';\r\n                    customField = new PepperiImagesField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Email: {\r\n                    options.type = 'email';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Phone: {\r\n                    options.type = 'phone';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Duration: {\r\n                    options.type = 'duration';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Default:\r\n                case FIELD_TYPE.TextBox:\r\n                case FIELD_TYPE.LimitedLengthTextBox:\r\n                case FIELD_TYPE.TextHeader:\r\n                case FIELD_TYPE.CalculatedString:\r\n                case FIELD_TYPE.MapDataString: {\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.TextArea: {\r\n                    customField = new PepperiTextareaField(options);\r\n                    break;\r\n                }\r\n\r\n                case FIELD_TYPE.RichTextHTML: {\r\n                    customField = new PepperiRichHtmlTextareaField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Date:\r\n                case FIELD_TYPE.LimitedDate:\r\n                case FIELD_TYPE.CalculatedDate:\r\n                case FIELD_TYPE.DateAndTime: {\r\n                    options.type = dataField.FieldType === FIELD_TYPE.DateAndTime ? 'datetime' : 'date';\r\n                    customField = new PepperiDateField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.NumberInteger:\r\n                case FIELD_TYPE.CalculatedInt:\r\n                case FIELD_TYPE.MapDataInt: {\r\n                    options.type = 'int';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Percentage: {\r\n                    options.type = 'percentage';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Currency: {\r\n                    options.type = 'currency';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.NumberReal:\r\n                case FIELD_TYPE.CalculatedReal:\r\n                case FIELD_TYPE.MapDataReal:\r\n                case FIELD_TYPE.Sum:\r\n                case FIELD_TYPE.Totals: {\r\n                    options.type = 'real';\r\n                    customField = new PepperiTextboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Boolean:\r\n                case FIELD_TYPE.CalculatedBool: {\r\n                    customField = new PepperiCheckboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.BooleanText: {\r\n                    options.type = 'booleanText';\r\n                    customField = new PepperiCheckboxField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.ComboBox:\r\n                case FIELD_TYPE.EmptyComboBox:\r\n                case FIELD_TYPE.MapDataDropDown: {\r\n                    // options.type = 'select';\r\n                    customField = new PepperiSelectField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.MultiTickBox:\r\n                case FIELD_TYPE.MultiTickBoxToComboBox:\r\n                case FIELD_TYPE.EmptyMultiTickBox: {\r\n                    options.type = 'multi';\r\n                    customField = new PepperiSelectField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.GuidReferenceType: {\r\n                    options.type = 'reference';\r\n                    options.referenceObjectType = dataField.ReferenceObjectType;\r\n                    options.referenceObjectSubType = dataField.ReferenceObjectSubType;\r\n                    options.referenceObjectInternalType = dataField.ReferenceObjectInternalType;\r\n                    customField = new PepperiButtonField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.ListOfObjects: {\r\n                    options.type = 'listofobjects';\r\n                    customField = new PepperiButtonField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Separator: {\r\n                    customField = new PepperiSeparatorField(options);\r\n                    break;\r\n                }\r\n                /*\r\n                    case FIELD_TYPE.Images: return that.field(value);\r\n                */\r\n                case FIELD_TYPE.NumberRealQuantitySelector:\r\n                case FIELD_TYPE.NumberIntegerQuantitySelector: {\r\n                    options.type = 'qs';\r\n                    options.alowDecimal = dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector;\r\n\r\n                    customField = new PepperiQuantitySelectorField(options);\r\n                    break;\r\n                }\r\n                case FIELD_TYPE.Package: {\r\n                    options.type = 'packageButton';\r\n\r\n                    customField = new PepperiQuantitySelectorField(options);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!customField) {\r\n            options.label = controlField.ApiName + ' is not supported!!!';\r\n            customField = new PepperiSeparatorField(options);\r\n        }\r\n\r\n        return customField;\r\n    }\r\n\r\n    public static getFieldFormattedValue(field: PepperiFieldBase): string {\r\n        let fieldFormattedValue = field.formattedValue;\r\n\r\n        // Fix for the custom check box component.\r\n        if (field.controlType === 'checkbox') {\r\n            fieldFormattedValue = fieldFormattedValue === 'true';\r\n        }\r\n\r\n        // Fix for the custom button component.\r\n        if (field.controlType === 'button') {\r\n            fieldFormattedValue = fieldFormattedValue === '0' ? '' : fieldFormattedValue;\r\n        }\r\n\r\n        return fieldFormattedValue;\r\n    }\r\n\r\n    private static toControlGroup(fields: PepperiFieldBase[], fb: FormBuilder,\r\n        customizationService: CustomizationService): FormGroup {\r\n        const group = {};\r\n        if (fields && fields.length > 0) {\r\n            fields.forEach(field => {\r\n                if (field.groupFields && field.groupFields.length > 0) {\r\n                    const subGroup = {};\r\n\r\n                    field.groupFields.forEach(groupField => {\r\n                        if (groupField.required && (!field.readonly && !field.disabled)) {\r\n                            subGroup[groupField.key] = [{\r\n                                value: groupField.formattedValue || '',\r\n                                disabled: field.readonly || field.disabled || groupField.disabled\r\n                            }, [Validators.required]];\r\n                        } else {\r\n                            subGroup[groupField.key] = [{\r\n                                value: groupField.formattedValue || '',\r\n                                disabled: field.readonly || field.disabled || groupField.disabled\r\n                            }, [Validators.nullValidator]];\r\n                        }\r\n                    });\r\n\r\n                    group[field.key] = fb.group(subGroup);\r\n                } else {\r\n                    const validators = customizationService.getValidatorsForField(field.required, field.readonly,\r\n                        field.disabled, field.maxFieldCharacters, field.type, field.controlType === 'checkbox');\r\n                    const fieldFormattedValue = PepperiFormComponent.getFieldFormattedValue(field);\r\n                    group[field.key] = [{ value: fieldFormattedValue || '', disabled: field.disabled }, validators];\r\n                }\r\n            });\r\n        }\r\n\r\n        return fb.group(group);\r\n    }\r\n\r\n    constructor(\r\n        private dialogService: DialogService,\r\n        private customizationService: CustomizationService,\r\n        private translate: TranslateService,\r\n        public fb: FormBuilder,\r\n        differs: KeyValueDiffers\r\n    ) {\r\n        // store the initial value to compare with\r\n        this.differ = differs.find({}).create();\r\n    }\r\n\r\n    public showFormValidationMessage(): void {\r\n        const fields: PepperiFieldBase[] = this.fields;\r\n        let emptyMandatoryFieldsMsg = '';\r\n        let notValidFieldsMsg = '';\r\n\r\n        // for (let i: number = 0; i < fields.length; i++) {\r\n        //     let field = fields[i];\r\n        for (const field of fields) {\r\n            const formControl = this.form && this.form.get(field.key);\r\n\r\n            if (formControl) {\r\n                // Mandatory is empty.\r\n                if (field.required && formControl.value.toString().trim().length === 0) {\r\n                    emptyMandatoryFieldsMsg += '<li><small>' + field.label + '</small></li>';\r\n                } else if (!field.disabled && !formControl.valid) {\r\n                    notValidFieldsMsg += '<li><small>' + field.label + '</small></li>';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Add the header message of the empty mandatory fields\r\n        if (emptyMandatoryFieldsMsg.length > 0) {\r\n            emptyMandatoryFieldsMsg = '<div>' + this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +\r\n                '</div><ul style=\\'padding: 0 20px;\\'>' + emptyMandatoryFieldsMsg + '</ul><br/>';\r\n        }\r\n\r\n        // Add the header message of the empty mandatory fields\r\n        if (notValidFieldsMsg.length > 0) {\r\n            notValidFieldsMsg = '<div>' + this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +\r\n                '</div><ul style=\\'padding: 0 20px;\\'>' + notValidFieldsMsg + '</ul>';\r\n        }\r\n\r\n        const title = this.translate.instant('MESSAGES.TITLE_NOTICE');\r\n        const data = new DialogData({\r\n            title,\r\n            content: emptyMandatoryFieldsMsg + notValidFieldsMsg,\r\n            contentType: DialogDataType.Html\r\n        });\r\n        this.dialogService.openDefaultDialog(data);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const themeVars = this.customizationService.getThemeVariables();\r\n        // convert rem to pixel\r\n        const RemToPixel = 16;\r\n        this.formGutterSize = this.customizationService.getNumberThemeVariable(themeVars,\r\n            CustomizationService.FORM_SPACEING_KEY) * RemToPixel;\r\n        this.cardGutterSize = this.customizationService.getNumberThemeVariable(themeVars,\r\n            CustomizationService.CARD_SPACEING_KEY) * RemToPixel;\r\n    }\r\n\r\n    ngDoCheck(): void {\r\n        const changes = this.differ.diff(this.pepperiObjectInput); // check for changes\r\n\r\n        if (changes) {\r\n            this.updateForm(true);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes): void {\r\n        if (changes.pepperiObjectInput && changes.pepperiObjectInput.currentValue) {\r\n            // Load changes\r\n            if (!this.shouldReloadForm && changes.pepperiObjectInput.previousValue) {\r\n                this.pepperiObjectInput = changes.pepperiObjectInput.currentValue;\r\n                this.updateForm();\r\n            } else {\r\n                this.shouldReloadForm = false;\r\n                this.initForm(changes);\r\n            }\r\n        }\r\n\r\n        this.checkForChanges = new Date();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.notifyValueChanged) { this.notifyValueChanged.unsubscribe(); }\r\n\r\n        if (this.formValidationChanged) { this.formValidationChanged.unsubscribe(); }\r\n\r\n        if (this.childClicked) { this.childClicked.unsubscribe(); }\r\n\r\n        if (this.childChanged) { this.childChanged.unsubscribe(); }\r\n\r\n        if (this.notifyFieldClicked) { this.notifyFieldClicked.unsubscribe(); }\r\n\r\n        if (this.notifyMenuItemClicked) { this.notifyMenuItemClicked.unsubscribe(); }\r\n    }\r\n\r\n    getUiControlFields(): Array<UIControlField> {\r\n        return this.uiControlHeader ?\r\n            this.uiControlHeader.ControlFields :\r\n            this.pepperiObjectInput.UIControl.ControlFields;\r\n    }\r\n\r\n    initFieldsStructure(fields: PepperiFieldBase[], maxRow: number): void {\r\n        const themeVars = this.customizationService.getThemeVariables();\r\n\r\n        // Set form row height.\r\n        if (this.layoutType === LAYOUT_TYPE.PepperiCard) {\r\n            const cardFieldHeight = this.customizationService.getNumberThemeVariable(themeVars,\r\n                CustomizationService.CARD_FIELD_HEIGHT_KEY);\r\n            this.rowHeight = cardFieldHeight;\r\n        } else {\r\n            const rowFieldHeight = this.customizationService.getNumberThemeVariable(themeVars,\r\n                CustomizationService.FORM_FIELD_HEIGHT_KEY);\r\n            const rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(themeVars,\r\n                CustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY);\r\n            this.rowHeight = rowFieldHeight + rowFieldTitleHeight;\r\n        }\r\n\r\n        // Create the fields structure (the fields must be sorted!!!).\r\n        if (fields.length > 0) {\r\n            // Init the layout.\r\n            if (\r\n                // this.layoutType === LAYOUT_TYPE.PepperiForm ||\r\n                this.layoutType === LAYOUT_TYPE.PepperiTable ||\r\n                this.layoutType === LAYOUT_TYPE.Editmodal\r\n            ) {\r\n                this.fields = fields;\r\n                this.rows = [];\r\n\r\n                for (let i = 0; i <= maxRow; i++) {\r\n                    this.rows[i] = [];\r\n                }\r\n\r\n                // for (let i = 0; i < fields.length; i++) {\r\n                // const field = fields[i]\r\n                for (const field of fields) {\r\n                    this.rows[field.row].push(field);\r\n                }\r\n            } else {\r\n                const doesfieldExistIn: boolean[][] = new Array(maxRow);\r\n\r\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\r\n                    doesfieldExistIn[i] = new Array(this.columns);\r\n\r\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\r\n                        doesfieldExistIn[i][j] = false;\r\n                    }\r\n                }\r\n\r\n                // Run in squere (row - colspan, col - rowspan) and put true where it should.\r\n                // for (let index = 0; index < fields.length; index++) {\r\n                //     const currentField = fields[index];\r\n                for (const currentField of fields) {\r\n                    if (currentField.rowSpan > 1) {\r\n                        for (let row: number = currentField.row; row < currentField.row + currentField.rowSpan; row++) {\r\n                            if (currentField.colSpan > 1) {\r\n                                for (let col: number = currentField.col; col < currentField.col + currentField.colSpan; col++) {\r\n                                    if (doesfieldExistIn.length > row && doesfieldExistIn[0].length > col) {\r\n                                        doesfieldExistIn[row][col] = true;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (doesfieldExistIn.length > row && doesfieldExistIn[0].length > currentField.col) {\r\n                                    doesfieldExistIn[row][currentField.col] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (currentField.colSpan > 1) {\r\n                        for (let col: number = currentField.col; col < currentField.col + currentField.colSpan; col++) {\r\n                            if (doesfieldExistIn.length > currentField.row && doesfieldExistIn[0].length > col) {\r\n                                doesfieldExistIn[currentField.row][col] = true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (doesfieldExistIn.length > currentField.row && doesfieldExistIn[0].length > currentField.col) {\r\n                            doesfieldExistIn[currentField.row][currentField.col] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).\r\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\r\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\r\n                        if (!doesfieldExistIn[i][j]) {\r\n                            // Create empty field and add it to the fields list.\r\n                            fields.push(\r\n                                new PepperiPlaceholderField({\r\n                                    key: i + '_' + j,\r\n                                    label: '',\r\n                                    type: 'text',\r\n                                    placeholder: '',\r\n                                    readonly: false,\r\n                                    disabled: false,\r\n                                    hidden: false,\r\n                                    required: false,\r\n                                    value: '',\r\n                                    formattedValue: '',\r\n                                    row: i,\r\n                                    rowSpan: 1,\r\n                                    col: j,\r\n                                    colSpan: 1,\r\n                                    order: 1\r\n                                })\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Sort the fields again.\r\n                this.fields = fields.sort((f1, f2) => (f1.row > f2.row ?\r\n                    1 : f1.row < f2.row ?\r\n                        -1 : f1.col > f2.col ?\r\n                            1 : f1.col < f2.col ? -1 : 0));\r\n            }\r\n        }\r\n    }\r\n\r\n    setForm(isForUpdate = false): void {\r\n        let allFieldsAreReadOnly = true;\r\n\r\n        if (!isForUpdate) {\r\n            const fields = [];\r\n            // for (let i = 0; i < this.fields.length; i++) {\r\n            // const currentField = this.fields[i];\r\n            for (const currentField of this.fields) {\r\n                // Add all fields except 'internalPage' type (for children).\r\n                if (currentField.controlType !== 'internalPage') {\r\n                    fields.push(currentField);\r\n                }\r\n\r\n                if (!currentField.readonly) {\r\n                    allFieldsAreReadOnly = false;\r\n                }\r\n            }\r\n\r\n            this.form = PepperiFormComponent.toControlGroup(fields, this.fb, this.customizationService);\r\n        }\r\n        else {\r\n            // Update form values if changed by calculated fields.\r\n            // for (let i = 0; i < this.fields.length; i++) {\r\n            // const currentField = this.fields[i];\r\n            for (const currentField of this.fields) {\r\n\r\n                if (currentField.controlType !== 'internalPage') {\r\n                    if (currentField.groupFields && currentField.groupFields.length > 0) {\r\n                        // for (let j = 0; j < currentField.groupFields.length; j++) {\r\n                        //     let currentGroupField = currentField.groupFields[j];\r\n                        for (const currentGroupField of currentField.groupFields) {\r\n                            const fieldFormattedValue = PepperiFormComponent.getFieldFormattedValue(currentGroupField);\r\n                            this.customizationService.updateFormField(this.form, currentGroupField,\r\n                                fieldFormattedValue, currentField);\r\n\r\n                        }\r\n                    } else {\r\n                        const fieldFormattedValue = PepperiFormComponent.getFieldFormattedValue(currentField);\r\n                        // this.form.controls[currentField.key].setValue(fieldFormattedValue);\r\n                        this.customizationService.updateFormField(this.form, currentField, fieldFormattedValue);\r\n                    }\r\n                }\r\n\r\n                if (!currentField.readonly) {\r\n                    allFieldsAreReadOnly = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isFormValid = this.form.valid;\r\n\r\n        // Change validation to true if all fields are read only. (By Amir.L request).\r\n        if (!isFormValid && allFieldsAreReadOnly) {\r\n            isFormValid = true;\r\n        }\r\n\r\n        this.onFormValidationChanged(isFormValid);\r\n\r\n        // Set it to false to enable all fields.\r\n        this.isLocked = false;\r\n    }\r\n\r\n    initForm(changes): void {\r\n        if (this.pepperiObjectInput.Data && this.pepperiObjectInput.Data.Fields) {\r\n            const fields: PepperiFieldBase[] = this.convertCustomFields(\r\n                this.getUiControlFields(), this.pepperiObjectInput.Data.Fields);\r\n\r\n            const maxRow = Math.max.apply(\r\n                Math,\r\n                fields.map((f) => {\r\n                    return f.row + f.rowSpan;\r\n                })\r\n            );\r\n            this.columns = Math.max.apply(\r\n                Math,\r\n                fields.map((f) => {\r\n                    return f.col + f.colSpan;\r\n                })\r\n            );\r\n\r\n            this.initFieldsStructure(fields, maxRow);\r\n            this.setForm();\r\n        }\r\n    }\r\n\r\n    updateForm(cleanLastFocusedField: boolean = false): void {\r\n        if (this.pepperiObjectInput.Data && this.pepperiObjectInput.Data.Fields) {\r\n            // for (let i = 0; i < this.pepperiObjectInput.Data.Fields.length; i++) {\r\n            // let currentField = this.pepperiObjectInput.Data.Fields[i];\r\n            for (const currentField of this.pepperiObjectInput.Data.Fields) {\r\n                const customField = this.fields.filter(f => f.key === currentField.ApiName)[0];\r\n                // Update all fields except 'internalPage' type (for children).\r\n                if (customField && customField.controlType !== 'internalPage') {\r\n                    const hasFocus = this.lastFocusedField && this.lastFocusedField.id === customField.key;\r\n                    customField.updateField(currentField, this.canEditObject, hasFocus ? this.lastFocusedField : null);\r\n\r\n                    // Update the group fields.\r\n                    if (customField.controlType === 'address' && currentField.GroupFields) {\r\n                        // for (let j = 0; j < currentField.GroupFields.length; j++) {\r\n                        // let currentGroupField = currentField.GroupFields[j];\r\n                        for (const currentGroupField of currentField.GroupFields) {\r\n                            currentGroupField.Enabled = !currentField.Enabled ? false : currentGroupField.Enabled;\r\n\r\n                            const customGroupField = customField.groupFields.filter(f => f.key === currentGroupField.ApiName)[0];\r\n                            const hasGroupFocus = this.lastFocusedField && this.lastFocusedField.id === customGroupField.key;\r\n\r\n                            customGroupField.updateField(currentGroupField, this.canEditObject,\r\n                                hasGroupFocus ? this.lastFocusedField : null);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setForm(true);\r\n\r\n            if (cleanLastFocusedField) {\r\n                // Clean the last focused field.\r\n                this.lastFocusedField = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public ReloadForm(): void {\r\n        this.shouldReloadForm = true;\r\n    }\r\n\r\n    // onSubmit() {\r\n    //     if (this.form.valid) {\r\n    //         this.payLoad = JSON.stringify(this.form.value);\r\n    //         //this.submitted.emit(this.form.value);\r\n    //     }\r\n    // }\r\n\r\n    private getFormControlById(key: string): AbstractControl | null {\r\n        const self = this;\r\n        let formControl = null;\r\n\r\n        this.fields.forEach((field) => {\r\n            if (field.key === key) {\r\n                formControl = self.form.get(field.key);\r\n                return;\r\n            } else if (field.groupFields && field.groupFields.length > 0) {\r\n                field.groupFields.forEach((groupField) => {\r\n                    if (groupField.key === key) {\r\n                        formControl = self.form.get(field.key + '.' + groupField.key);\r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return formControl;\r\n    }\r\n\r\n    private setSpecialFields(controlFields: Array<any>, dataFields: Array<any>): void {\r\n        // let cf;\r\n        // for (let index = 0; index < controlFields.length; index++) {\r\n        //     cf = controlFields[index];\r\n        for (const cf of controlFields) {\r\n            if (cf.ApiName === 'ObjectMenu') {\r\n                this.menuField = cf;\r\n            } else if (cf.ApiName === 'ItemHasActiveCampaign') {\r\n                this.hasCampaignField = cf;\r\n            } else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {\r\n                this.indicatorsField = cf;\r\n            }\r\n        }\r\n\r\n        // let df;\r\n        // for (let index = 0; index < dataFields.length; index++) {\r\n        //     df = dataFields[index];\r\n        for (const df of dataFields) {\r\n            if (df.ApiName === 'ObjectMenu') {\r\n                this.menuDataField = df;\r\n            } else if (df.ApiName === 'ItemHasActiveCampaign') {\r\n                this.hasCampaignDataField = df;\r\n            } else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {\r\n                this.indicatorsDataField = df;\r\n            }\r\n        }\r\n\r\n        if (this.menuField && this.menuDataField) {\r\n            this.menuDataField.Layout = this.menuField.Layout;\r\n        }\r\n\r\n        if (this.hasCampaignField && this.hasCampaignDataField) {\r\n            this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;\r\n        }\r\n\r\n        if (this.indicatorsField && this.indicatorsDataField) {\r\n            this.indicatorsDataField.Layout = this.indicatorsField.Layout;\r\n        }\r\n\r\n        // Check if menu is floating on other field.\r\n        // for (let index = 0; index < controlFields.length; index++) {\r\n        //     cf = controlFields[index];\r\n        for (const cf of controlFields) {\r\n            if (this.menuField && cf.ApiName !== 'ObjectMenu') {\r\n                this.hasMenuFloatingOnOtherField = PepperiFormComponent.doesFieldHavaFloatingField(cf, this.menuField);\r\n\r\n                if (this.hasMenuFloatingOnOtherField) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    convertCustomFields(controlFields: Array<any>, dataFields: Array<any>): PepperiFieldBase[] {\r\n        const self = this;\r\n\r\n        if (this.layoutType !== LAYOUT_TYPE.PepperiTable) {\r\n            this.setSpecialFields(controlFields, dataFields);\r\n        } else {\r\n            // Hack: convert to center alignment if table view & special fields)\r\n            controlFields.forEach((field, index) => {\r\n                if (\r\n                    field.ApiName === 'UnitsQuantity' ||\r\n                    field.ApiName === 'QuantitySelector' ||\r\n                    field.ApiName === 'ObjectMenu' ||\r\n                    field.FieldType === FIELD_TYPE.Image ||\r\n                    field.FieldType === FIELD_TYPE.ImageURL ||\r\n                    field.FieldType === FIELD_TYPE.Indicators ||\r\n                    field.FieldType === FIELD_TYPE.Boolean ||\r\n                    field.FieldType === FIELD_TYPE.CalculatedBool ||\r\n                    field.FieldType === FIELD_TYPE.Signature ||\r\n                    field.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\r\n                    field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\r\n                    field.FieldType === FIELD_TYPE.Package ||\r\n                    field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\r\n                    field.FieldType === FIELD_TYPE.NumberRealForMatrix\r\n                ) {\r\n                    field.Layout.XAlignment = 3;\r\n                }\r\n            });\r\n        }\r\n\r\n        const fields: PepperiFieldBase[] = [];\r\n\r\n        const matrixFields = controlFields.filter(cf => PepperiFormComponent.isMatrixField(cf.ApiName)).length;\r\n        let matrixAlreadyPlaced = false;\r\n\r\n        controlFields.forEach((field, index) => {\r\n            const dataField = dataFields.filter(df => df.ApiName === field.ApiName)[0];\r\n\r\n            if (!dataField) { return; }\r\n\r\n            // If current view is not table view and those fields are special.\r\n            if (\r\n                this.layoutType !== LAYOUT_TYPE.PepperiTable &&\r\n                ((this.hasMenuFloatingOnOtherField && this.menuField && this.menuField.ApiName === field.ApiName) ||\r\n                    (this.indicatorsField && this.indicatorsField.ApiName === field.ApiName) ||\r\n                    (this.hasCampaignField && this.hasCampaignField.ApiName === field.ApiName))\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            // Remove this. (fix two matrix into one)\r\n            if (matrixFields > 0 && PepperiFormComponent.isMatrixField(field.ApiName)) {\r\n                if (matrixFields > 1 && matrixAlreadyPlaced) {\r\n                    return;\r\n                }\r\n\r\n                matrixAlreadyPlaced = true;\r\n\r\n                if (matrixFields > 1) {\r\n                    self.matrixIsLast = controlFields.length >= 2 ?\r\n                        controlFields[controlFields.length - 2].ApiName === field.ApiName : false;\r\n                } else {\r\n                    self.matrixIsLast = controlFields[controlFields.length - 1].ApiName === field.ApiName;\r\n                }\r\n            }\r\n\r\n            // Set type to link\r\n            if (this.firstFieldAsLink && index === 0) {\r\n                dataField.FieldType = FIELD_TYPE.InternalLink;\r\n                dataField.Value = this.getInternalLinkHref();\r\n            } else if (dataField.Value.length > 0 &&\r\n                (field.FieldType === FIELD_TYPE.ReferenceType || field.FieldType === FIELD_TYPE.GuidReferenceType)) {\r\n                const transactionUrl = this.pepperiObjectInput.Data.MainAction === '2' ? 'transactions/scope_items/' : 'transactions/cart/';\r\n                dataField.Value = transactionUrl + dataField.Value;\r\n            }\r\n\r\n            if (field.ApiName === 'ObjectMenu') {\r\n                const data: any = this.pepperiObjectInput.Data;\r\n                // HACK : Until \"Enabled\" returns from the server, we set PepperiMenu to be\r\n                //        Disabled in cart on regular items and not campign items.\r\n                dataField.Enabled = this.pageType !== 'cart';\r\n                dataField.OptionalValues = data.TransactionItemCustomMenu;\r\n                dataField.TransactionItemType = data.TransactionItemType;\r\n            }\r\n            const customField: PepperiFieldBase = PepperiFormComponent.convertToCustomField(\r\n                field,\r\n                dataField,\r\n                this.canEditObject,\r\n                this.menuDataField,\r\n                this.hasCampaignDataField,\r\n                this.indicatorsDataField,\r\n                this.objectId,\r\n                this.parentId,\r\n                this.searchCode\r\n            );\r\n\r\n            fields.push(customField);\r\n        });\r\n\r\n        return fields.sort((f1, f2) => (f1.row > f2.row ?\r\n            1 : f1.row < f2.row ?\r\n                -1 : f1.col > f2.col ?\r\n                    1 : f1.col < f2.col ? -1 : 0));\r\n    }\r\n\r\n    onValueChanged(valueChanged: any, isEditModal: boolean = false): void {\r\n        // This was comment by Tomer cause the address has stop working because this change.\r\n        // let clickedUiControlField = this.pepperiObjectInput.Data.Fields.filter(f => f.ApiName === valueChanged.apiName)[0];\r\n        // if (clickedUiControlField) {\r\n        this.onFormValidationChanged(this.form.valid);\r\n\r\n        const formControl = this.getFormControlById(valueChanged.apiName);\r\n\r\n        const isValid = formControl ? formControl.valid : true;\r\n        // const isValid = true;\r\n\r\n        if (isValid) {\r\n            // Set it to false to disable all fields.\r\n            if (this.layoutType === LAYOUT_TYPE.PepperiForm) {\r\n                this.isLocked = true;\r\n            }\r\n\r\n            this.lastFocusedField = valueChanged.lastFocusedField;\r\n            const customizeObjectChangedData = new PepperiObjectChangedData(this.pepperiObjectInput.Data.UID.toString(),\r\n                valueChanged.apiName, valueChanged.value, valueChanged.controlType);\r\n            this.notifyValueChanged.emit(customizeObjectChangedData);\r\n        }\r\n        // }\r\n\r\n    }\r\n\r\n    onChildClicked(childClicked: any): void {\r\n        this.childClicked.emit(childClicked);\r\n    }\r\n\r\n    onChildChanged(childChanged: any): void {\r\n        this.childChanged.emit(childChanged);\r\n    }\r\n\r\n    onFormValidationChanged(formValidationChanged: any): void {\r\n        if (this.layoutType === LAYOUT_TYPE.PepperiForm || this.layoutType === LAYOUT_TYPE.PepperiCard) {\r\n            this.formValidationChanged.emit(formValidationChanged);\r\n        }\r\n    }\r\n\r\n    onClick(fieldClickEvent: any): void {\r\n        const clickedUiControlField = this.pepperiObjectInput.Data.Fields.filter(f => f.ApiName === fieldClickEvent.apiName)[0];\r\n        // let clickedField = this.fields.filter(f => f.key === fieldClickEvent.apiName)[0];\r\n\r\n        if (clickedUiControlField) {\r\n            if (clickedUiControlField.FieldType === FIELD_TYPE.GuidReferenceType) {\r\n                const customizeFieldClickedData = new PepperiFieldClickedData(\r\n                    this.pepperiObjectInput.Data.UID.toString(),\r\n                    fieldClickEvent.apiName,\r\n                    this.pepperiObjectInput.Data.Type,\r\n                    fieldClickEvent.eventWhich,\r\n                    fieldClickEvent.value,\r\n                    clickedUiControlField.FieldType,\r\n                    fieldClickEvent.referenceObjectInternalType\r\n                );\r\n                this.notifyFieldClicked.emit(customizeFieldClickedData);\r\n            } else if (clickedUiControlField.FieldType === FIELD_TYPE.ListOfObjects) {\r\n                const customizeFieldClickedData = new PepperiFieldClickedData(\r\n                    this.pepperiObjectInput.Data.UID.toString(),\r\n                    fieldClickEvent.apiName,\r\n                    this.pepperiObjectInput.Data.Type,\r\n                    fieldClickEvent.eventWhich,\r\n                    fieldClickEvent.value,\r\n                    clickedUiControlField.FieldType,\r\n                    fieldClickEvent.otherData\r\n                );\r\n                this.notifyFieldClicked.emit(customizeFieldClickedData);\r\n            } else {\r\n                const customizeFieldClickedData = new PepperiFieldClickedData(\r\n                    this.pepperiObjectInput.Data.UID.toString(),\r\n                    fieldClickEvent.apiName,\r\n                    this.pepperiObjectInput.Data.Type,\r\n                    fieldClickEvent.eventWhich,\r\n                    fieldClickEvent.value,\r\n                    clickedUiControlField.FieldType,\r\n                    fieldClickEvent.otherData\r\n                );\r\n                this.notifyFieldClicked.emit(customizeFieldClickedData);\r\n            }\r\n        } else {\r\n            // For other api names (like enter children etc).\r\n            const customizeFieldClickedData = new PepperiFieldClickedData(\r\n                this.pepperiObjectInput.Data.UID.toString(),\r\n                fieldClickEvent.apiName,\r\n                this.pepperiObjectInput.Data.Type,\r\n                fieldClickEvent.eventWhich,\r\n                fieldClickEvent.value,\r\n                null,\r\n                fieldClickEvent.otherData\r\n            );\r\n            this.notifyFieldClicked.emit(customizeFieldClickedData);\r\n        }\r\n    }\r\n\r\n    onMenuItemClicked(fieldClickEvent: any): void {\r\n        const clickedUiControlField = this.pepperiObjectInput.Data.Fields.filter(f => f.ApiName === fieldClickEvent.apiName)[0];\r\n        const dataField: any = this.pepperiObjectInput.Data;\r\n        const fieldType = typeof clickedUiControlField !== 'undefined' ? clickedUiControlField.FieldType : FIELD_TYPE.Package;\r\n        const customizeFieldClickedData = new PepperiFieldClickedData(dataField.UID.toString(), fieldClickEvent.apiName,\r\n            dataField.Type, fieldClickEvent.eventWhich, fieldClickEvent.value, fieldType, {\r\n            ExtraInfo: dataField.ExtraInfo,\r\n            ItemType: dataField.TransactionItemType\r\n        });\r\n        this.notifyMenuItemClicked.emit(customizeFieldClickedData);\r\n    }\r\n\r\n    getInternalLinkHref(): string {\r\n        let hrefStr = '';\r\n        const uid = this.pepperiObjectInput.Data.UID;\r\n        const transactionUrl = this.pepperiObjectInput.Data.MainAction === '2' ? 'transactions/scope_items/' : 'transactions/cart/';\r\n        // let isBuyer = sessionStorage.getItem('userRole') == 'Buyer' ? true : false;\r\n\r\n        if (this.listType === 'all_activities') {\r\n            hrefStr = this.pepperiObjectInput.Data.Type === 0 ? transactionUrl + uid : 'activities/details/' + uid;\r\n        } else if (this.listType === 'accounts') {\r\n            hrefStr = 'accounts/home_page/' + uid;\r\n        }\r\n\r\n        return hrefStr;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\nimport { SignaturePadModule } from 'angular2-signaturepad';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport {\r\n    PepperiIconModule,\r\n    PepperiIconRegistry,\r\n    pepperiIconIndicatorDotPlaceholder } from '@pepperi-addons/ngx-lib/icon';\r\n\r\nimport { PepperiDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\n\r\nimport { PepperiAddressModule } from '@pepperi-addons/ngx-lib/address';\r\nimport { PepperiAttachmentModule } from '@pepperi-addons/ngx-lib/attachment';\r\nimport { PepperiCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\r\nimport { PepperiDateModule } from '@pepperi-addons/ngx-lib/date';\r\nimport { PepperiImageModule } from '@pepperi-addons/ngx-lib/image';\r\nimport { PepperiImagesFilmstripModule } from '@pepperi-addons/ngx-lib/images-filmstrip';\r\nimport { PepperiInternalButtonModule } from '@pepperi-addons/ngx-lib/internal-button';\r\n// import { PepperiInternalPageModule } from '@pepperi-addons/ngx-lib/internal-page';\r\nimport { PepperiMenuModule } from '@pepperi-addons/ngx-lib/menu';\r\nimport { PepperiQuantitySelectorModule } from '@pepperi-addons/ngx-lib/quantity-selector';\r\nimport { PepperiRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\r\nimport { PepperiSelectModule } from '@pepperi-addons/ngx-lib/select';\r\nimport { PepperiSeparatorModule } from '@pepperi-addons/ngx-lib/separator';\r\nimport { PepperiSignatureModule } from '@pepperi-addons/ngx-lib/signature';\r\nimport { PepperiTextareaModule } from '@pepperi-addons/ngx-lib/textarea';\r\nimport { PepperiTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\n\r\nconst pepperiComponentsModules = [\r\n    PepperiAddressModule,\r\n    PepperiAttachmentModule,\r\n    PepperiCheckboxModule,\r\n    PepperiDateModule,\r\n    PepperiImageModule,\r\n    PepperiImagesFilmstripModule,\r\n    PepperiInternalButtonModule,\r\n    // PepperiInternalPageModule,\r\n    PepperiMenuModule,\r\n    PepperiQuantitySelectorModule,\r\n    PepperiRichHtmlTextareaModule,\r\n    PepperiSelectModule,\r\n    PepperiSeparatorModule,\r\n    PepperiSignatureModule,\r\n    PepperiTextareaModule,\r\n    PepperiTextboxModule,\r\n];\r\n\r\nimport { PepperiFormComponent } from './form.component';\r\nimport { PepperiFieldGeneratorComponent } from './field-generator.component';\r\nimport { PepperiIndicatorsComponent } from './indicators.component';\r\nimport { PepperiInternalPageComponent } from './internal-page.component';\r\nimport { PepperiInternalListComponent } from './internal-list.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        // External modules\r\n        SignaturePadModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiDialogModule,\r\n        PepperiIconModule,\r\n        pepperiComponentsModules,\r\n    ],\r\n    exports: [PepperiFormComponent],\r\n    declarations: [\r\n        PepperiFormComponent,\r\n        PepperiFieldGeneratorComponent,\r\n        PepperiIndicatorsComponent,\r\n        PepperiInternalPageComponent,\r\n        PepperiInternalListComponent\r\n    ],\r\n})\r\nexport class PepperiFormModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconIndicatorDotPlaceholder\r\n        ]);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../projects/ngx-lib/menu/menu.component.html","../../../projects/ngx-lib/menu/menu.component.ts","../../../projects/ngx-lib/menu/menu.module.ts"],"names":["i0.ɵɵelementContainer","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵclassMapInterpolate1","i0.ɵɵpropertyInterpolate","i0.ɵɵproperty","i0.ɵɵtext","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0","ɵɵpureFunction4","_c1","ctx_r4","xAlignment","invertClass","PepperiMenuComponent","this","key","label","disabled","options","controlType","layoutType","LAYOUT_TYPE","PepperiForm","elementClicked","EventEmitter","notifyMenuItemClicked","prototype","ngOnDestroy","unsubscribe","menuClicked","event","emit","apiName","eventWhich","which","menuItemClicked","itemKey","selectors","inputs","outputs","decls","vars","consts","template","rf","ctx","_r3","_r1","pepperiIconRegistry","registerIcons","pepperiIconSystemMenu","PepperiMenuModule","ɵɵinject","i1$1","PepperiIconRegistry","imports","CommonModule","MatCommonModule","MatFormFieldModule","MatMenuModule","MatIconModule","PepperiModule","PepperiIconModule","declarations","exports"],"mappings":"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","sourcesContent":["<ng-container *ngIf=\"options?.length > 0; then subMenuBlock; else noSubMenuBlock\"></ng-container>\r\n<ng-template #noSubMenuBlock>\r\n    <button (click)=\"menuClicked($event)\" title=\"{{ label }}\" mat-button\r\n        class=\"pepperi-menu pepperi-button icon-button weak {{ layoutType === LAYOUT_TYPE.PepperiTable ? 'sm' : 'md' }}\"\r\n        [ngClass]=\"{\r\n            'lock-events': disabled,\r\n            'left-alignment': xAlignment == '1' || xAlignment == '0',\r\n            'right-alignment': xAlignment == '2',\r\n            'center-alignment': xAlignment == '3',\r\n            'invert': invertClass\r\n        }\">\r\n        <mat-icon>\r\n            <pep-icon name=\"system_menu\">\r\n            </pep-icon>\r\n        </mat-icon>\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #subMenuBlock>\r\n    <button mat-button [matMenuTriggerFor]=\"menu\" menu-blur\r\n        class=\"pepperi-menu pepperi-button icon-button weak {{ layoutType === LAYOUT_TYPE.PepperiTable ? 'sm' : 'md' }}\"\r\n        [ngClass]=\"{\r\n            'left-alignment': xAlignment == '1' || xAlignment == '0',\r\n            'right-alignment': xAlignment == '2',\r\n            'center-alignment': xAlignment == '3',\r\n            'invert': invertClass\r\n        }\" title=\"{{ label }}\">\r\n        <mat-icon>\r\n            <pep-icon name=\"system_menu\">\r\n            </pep-icon>\r\n        </mat-icon>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\" xPosition=\"{{xAlignment == '2' ? 'after' : 'before'}}\"\r\n        [ngClass]=\"{ rtlMenu: xAlignment == '2' }\">\r\n        <button *ngFor=\"let option of options\" mat-menu-item (click)=\"menuItemClicked(option.Key)\">\r\n            <span>{{ option.Value | translate }}</span>\r\n        </button>\r\n    </mat-menu>\r\n\r\n</ng-template>\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, ChangeDetectionStrategy, OnDestroy } from '@angular/core';\r\nimport { LAYOUT_TYPE, PepperiOption } from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'pep-menu',\r\n    templateUrl: './menu.component.html',\r\n    styleUrls: ['./menu.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PepperiMenuComponent implements OnDestroy {\r\n    @Input() key = '';\r\n    @Input() label = '';\r\n    @Input() disabled = false;\r\n    @Input() xAlignment = '0';\r\n    // @Input() hasSubMenu = false;\r\n    @Input() options: PepperiOption[] = [];\r\n    @Input() invertClass = true;\r\n\r\n    controlType = 'menu';\r\n\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n    @Output() elementClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() notifyMenuItemClicked: EventEmitter<any> = new EventEmitter<any>();\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n\r\n    constructor() { }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.elementClicked) {\r\n            this.elementClicked.unsubscribe();\r\n        }\r\n\r\n        if (this.notifyMenuItemClicked) {\r\n            this.notifyMenuItemClicked.unsubscribe();\r\n        }\r\n    }\r\n\r\n    menuClicked(event: any): void {\r\n        this.elementClicked.emit({ apiName: this.key, eventWhich: event.which });\r\n    }\r\n\r\n    menuItemClicked(itemKey: any): void {\r\n        this.notifyMenuItemClicked.emit({ apiName: itemKey });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepperiIconModule, PepperiIconRegistry, pepperiIconSystemMenu } from '@pepperi-addons/ngx-lib/icon';\r\n\r\nimport { PepperiMenuComponent } from './menu.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatFormFieldModule,\r\n        MatMenuModule,\r\n        MatIconModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule\r\n    ],\r\n    exports: [ PepperiMenuComponent ],\r\n    declarations: [ PepperiMenuComponent ],\r\n})\r\nexport class PepperiMenuModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemMenu\r\n        ]);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../projects/ngx-lib/files-uploader/files-uploader.component.html","../../../projects/ngx-lib/files-uploader/files-uploader.component.ts","../../../projects/ngx-lib/files-uploader/files-uploader.module.ts"],"names":["i0.ɵɵelementContainer","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵstyleProp","ctx_r11","label","i0","ɵɵpureFunction1","_c3","xAlignment","i0.ɵɵtext","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","i0.ɵɵtextInterpolate1","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","i0.ɵɵpropertyInterpolate1","$event","ɵɵrestoreView","_r28_1","ɵɵnextContext","onKeyPress_ChooseFile","_r6","_r8","ctx_r1","key","src","disabled","required","length","ɵɵpipeBind2","_c5","FilesUploaderComponent","translate","dialogService","customizationService","fileService","this","rowSpan","controlType","sizeLimitMB","standAlone","acceptedExtensions","layoutType","LAYOUT_TYPE","PepperiForm","fileChanged","EventEmitter","elementClicked","fieldHeight","progress","intervalID","self","uploader","FileUploader","removeAfterUpload","onAfterAddingFile","item","_a","fileInput","nativeElement","value","reader","FileReader","onload","event","fileExt","_file","name","split","pop","fileStr","target","srcElement","result","errorMsg","isValidFile","setIntervalX","setProgress","emit","JSON","stringify","title","instant","data","DialogData","content","contentType","DialogDataType","Html","openDefaultDialog","readAsDataURL","prototype","ngOnInit","calculateFieldHeight","fileExtension","file","fileSize","sizeOK","indexOf","getBase64FileSize","size","toLowerCase","toString","base64String","substr","atob","e","delay","repetitions","x","window","setInterval","clearInterval","errorHandler","getNoImagePath","deleteFile","clearQueue","onElementClicked","apiName","onClick_ChooseFile","click","which","preventDefault","ɵɵdirectiveInject","i1$1","TranslateService","i2","DialogService","i3","CustomizationService","FileService","selectors","viewQuery","rf","ctx","factory","ɵfac","pepperiIconRegistry","registerIcons","pepperiIconSystemBin","pepperiIconSystemAttach","pepperiIconSystemFileUploadCloud","pepperiIconSystemProcessing","PepperiFilesUploaderModule","ɵɵinject","i1","PepperiIconRegistry","imports","CommonModule","ReactiveFormsModule","FormsModule","MatCommonModule","MatButtonModule","MatFormFieldModule","MatInputModule","MatIconModule","FileUploadModule","PepperiModule","PepperiIconModule","PepperiDialogModule","declarations","exports"],"mappings":"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","sourcesContent":["<!-- New code -->\r\n<ng-template #pepperiTemplate>\r\n    <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\r\n        <div class=\"pepperi-file-wrapper\">\r\n            <div class=\"pepperi-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{\r\n                    'one-row': rowSpan == 1,\r\n                    disable: disabled\r\n                }\">\r\n                <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\r\n                <ng-template #withImg>\r\n                    <button *ngIf=\"!disabled\" mat-button (click)=\"deleteFile()\"\r\n                        class=\"pepperi-button icon-button weak md delete\" tabindex=\"-1\"\r\n                        [ngClass]=\"{ 'right-alignment': xAlignment == '2' }\">\r\n                        <mat-icon>\r\n                            <pep-icon name=\"system_bin\">\r\n                            </pep-icon>\r\n                        </mat-icon>\r\n                    </button>\r\n                    <div class=\"pepperi-file-preview\" (click)=\"onElementClicked($event)\">\r\n                        <img *ngIf=\"controlType === 'image'\" #imagePreview [src]=\"src\" class=\"pepperi-file-preview-img\"\r\n                            [style.max-height]=\"fieldHeight\" (error)=\"errorHandler($event)\" [alt]=\"label\"\r\n                            [ngClass]=\"['text-align-' + xAlignment]\" />\r\n                        <div *ngIf=\"controlType === 'attachment'\" class=\"ellipsis pepperi-file-message\">\r\n                            <a *ngIf=\"src != ''\" href=\"javascript:void(0)\">\r\n                                <pep-icon name=\"system_attach\">\r\n                                </pep-icon>\r\n                                <span class=\"body-sm ellipsis\">{{ 'FILE.SEE_ORIGINAL' | translate }}</span>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </ng-template>\r\n                <ng-template #noImg>\r\n                    <div class=\"ellipsis pepperi-file-message\">\r\n                        <pep-icon *ngIf=\"controlType === 'attachment'\" name=\"system_attach\">\r\n                        </pep-icon>\r\n                        <pep-icon *ngIf=\"controlType === 'image'\" name=\"system_file_upload_cloud\">\r\n                        </pep-icon>\r\n                        <span class=\"body-sm ellipsis\" *ngIf=\"progress == 0\">\r\n                            {{ (disabled ? (controlType === 'image' ? 'MESSAGES.INFO_MISSING_IMAGE' : 'MESSAGES.INFO_MISSING_FILE') : 'FILE.HINT') | translate }}\r\n                        </span>\r\n                        <!-- <p *ngIf=\"progress != 0\" class=\"pull-left flip\"\r\n                            [ngClass]=\"{ 'pull-left flip': rowSpan == 1, image: controlType == 'image', attachment: controlType == 'attachment' }\">\r\n                            {{ 'FILE.UPLOADING_FILE' | translate }}\r\n                        </p> -->\r\n                    </div>\r\n                    <ng-container *ngIf=\"!disabled\">\r\n                        <input #fileInput id=\"pepperi-file-{{ key }}\" tabindex=\"-1\" type=\"file\"\r\n                            accept=\"acceptedExtensions\" ng2FileSelect [uploader]=\"uploader\" autocomplete=\"off\" />\r\n                        <button *ngIf=\"progress != 0\" mat-button class=\"pepperi-button icon-button weak md delete\"\r\n                            [ngClass]=\"{ 'right-alignment': xAlignment == '2' }\">\r\n                            <mat-icon>\r\n                                <pep-icon name=\"system_processing\" class=\"spin-icon\">\r\n                                </pep-icon>\r\n                            </mat-icon>\r\n                        </button>\r\n                    </ng-container>\r\n                </ng-template>\r\n            </div>\r\n            <input [id]=\"key\" matInput [name]=\"key\" [formControlName]=\"key\" class=\"hidden-input\" type=\"text\"\r\n                [value]=\"src\" [disabled]=\"disabled\" (click)=\"onClick_ChooseFile($event)\"\r\n                (keypress)=\"onKeyPress_ChooseFile($event)\" autocomplete=\"off\" />\r\n        </div>\r\n\r\n        <mat-error><span class=\"body-xs\"\r\n                [title]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\r\n                [innerText]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</ng-template>\r\n\r\n<ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiForm\">\r\n    <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiCard\">\r\n    <!-- <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container> -->\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"layoutType === LAYOUT_TYPE.PepperiTable\">\r\n    <!-- <ng-container *ngTemplateOutlet=\"pepperiTemplate\"></ng-container> -->\r\n</ng-container>","import { Observable } from 'rxjs';\r\nimport { Component, OnInit, Injectable, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { FileUploader } from 'ng2-file-upload';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FileService, LAYOUT_TYPE, CustomizationService } from '@pepperi-addons/ngx-lib';\r\nimport { DialogService, DialogData, DialogDataType } from '@pepperi-addons/ngx-lib/dialog';\r\n\r\n@Component({\r\n    selector: 'files-uploader',\r\n    templateUrl: './files-uploader.component.html',\r\n    styleUrls: ['./files-uploader.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n@Injectable()\r\nexport class FilesUploaderComponent implements OnInit {\r\n    @Input() key = '';\r\n    @Input() src = '';\r\n    @Input() label = '';\r\n    @Input() required = false;\r\n    @Input() disabled = false;\r\n    @Input() xAlignment = '0';\r\n    @Input() rowSpan = 1;\r\n    @Input() controlType = '';\r\n    @Input() sizeLimitMB = 5;\r\n\r\n    @Input() form: FormGroup;\r\n    @Input() standAlone = false;\r\n    @Input() acceptedExtensions = 'bmp,jpg,jpeg,png,gif,ico,svg,html,css';\r\n    @Input() layoutType: LAYOUT_TYPE = LAYOUT_TYPE.PepperiForm;\r\n\r\n    @Output() fileChanged: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() elementClicked: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ViewChild('fileInput') fileInput: any;\r\n    @ViewChild('imagePreview') imagePreview: any;\r\n\r\n    LAYOUT_TYPE = LAYOUT_TYPE;\r\n    fieldHeight = '';\r\n\r\n    // multiple = false;\r\n    uploader: FileUploader;\r\n    progress = 0;\r\n    // response: string;\r\n    intervalID: any = null;\r\n\r\n    constructor(\r\n        private translate: TranslateService,\r\n        private dialogService: DialogService,\r\n        private customizationService: CustomizationService,\r\n        private fileService: FileService)\r\n    {\r\n        const self = this;\r\n        this.uploader = new FileUploader({ removeAfterUpload: true });\r\n\r\n        this.uploader.onAfterAddingFile = (item) => {\r\n            if (self.fileInput?.nativeElement) {\r\n                self.fileInput.nativeElement.value = '';\r\n            }\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (event: any) => {\r\n                const fileExt = item._file.name.split('.').pop();\r\n                const target = event.target || event.srcElement;\r\n                const fileStr = target.result;\r\n                const errorMsg = self.isValidFile(fileStr, fileExt, self.acceptedExtensions, self.sizeLimitMB);\r\n                if (errorMsg === '') {\r\n                    self.src = fileStr;\r\n                    self.setIntervalX(25, 75);\r\n                    self.setProgress(5);\r\n                    self.fileChanged.emit(\r\n                        JSON.stringify({\r\n                            acceptedExtensions: self.acceptedExtensions,\r\n                            fileStr,\r\n                            fileExt,\r\n                        }));\r\n                }\r\n                else {\r\n                    const title = self.translate.instant('MESSAGES.TITLE_NOTICE');\r\n                    const data = new DialogData({\r\n                        title,\r\n                        content: errorMsg,\r\n                        contentType: DialogDataType.Html});\r\n                    self.dialogService.openDefaultDialog(data);\r\n                }\r\n\r\n            };\r\n            reader.readAsDataURL(item._file);\r\n        };\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);\r\n\r\n        /*this.uploader.onCompleteAll = () => {\r\n            this.fileInput.nativeElement.value = '';\r\n        }*/\r\n    }\r\n\r\n    isValidFile(fileStr, fileExtension, acceptedExtensions, sizeLimitMB = 5): string {\r\n        const file: any = fileStr;\r\n        let fileSize = 0;\r\n        let content = '';\r\n        // check if got file as Base64\r\n        if (typeof fileStr === 'string' && fileStr.indexOf('data:') > -1) {\r\n            fileSize = this.getBase64FileSize(fileStr);\r\n        } else {\r\n            fileSize = file.size;\r\n        }\r\n        // check the size and the extension\r\n        const sizeOK: boolean = fileSize !== -1 && file != null && fileSize < sizeLimitMB * (1048576);\r\n        const extensionOK = acceptedExtensions === '' || acceptedExtensions.indexOf(fileExtension.toLowerCase()) !== -1;\r\n        if (!extensionOK) {\r\n            content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_EXTENSION',\r\n                { fileExtension: '<label class=\\'uppercase bold\\'>' + fileExtension + '</label>' });\r\n        } else if (!sizeOK) {\r\n            content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_SIZE',\r\n                { fileSize: '<label class=\\'uppercase bold\\'>' + (sizeLimitMB).toString() + '</label>' });\r\n        }\r\n        return content;\r\n    }\r\n\r\n    getBase64FileSize(base64String: string): number {\r\n        let fileSize: number;\r\n\r\n        try {\r\n            base64String = base64String.substr(base64String.indexOf(',') + 1);\r\n            fileSize = atob(base64String).length;\r\n        } catch (e) {\r\n            fileSize = -1;\r\n        }\r\n\r\n        return fileSize; // return size in bytes;\r\n    }\r\n\r\n    setIntervalX(delay, repetitions): void {\r\n        const self = this;\r\n        let x = 0;\r\n        this.intervalID = window.setInterval(() => {\r\n            // self.setProgress(self.progress + 5);\r\n            if (++x === repetitions || self.uploader.progress >= 100) {\r\n                window.clearInterval(self.intervalID);\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    errorHandler(event): void {\r\n        event.target.src = this.fileService.getNoImagePath();\r\n        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');\r\n    }\r\n\r\n    private setProgress(progress): void {\r\n        this.progress = progress;\r\n        this.uploader.progress = progress;\r\n    }\r\n\r\n    deleteFile(): void {\r\n        this.uploader.clearQueue();\r\n        window.clearInterval(this.intervalID);\r\n        this.setProgress(0);\r\n\r\n        const value = '';\r\n        this.src = value;\r\n        this.fileChanged.emit(value);\r\n    }\r\n\r\n    onElementClicked(event): void {\r\n        this.elementClicked.emit({ apiName: this.key, event });\r\n    }\r\n\r\n    onClick_ChooseFile(event): void {\r\n        if (this.fileInput?.nativeElement) {\r\n            this.fileInput.nativeElement.click();\r\n        }\r\n    }\r\n\r\n    onKeyPress_ChooseFile(event): void {\r\n        const e = event as KeyboardEvent;\r\n\r\n        if ([13, 32].indexOf(e.which) !== -1) {\r\n            if (this.fileInput?.nativeElement) {\r\n                this.fileInput.nativeElement.click();\r\n            }\r\n        }\r\n        e.preventDefault();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { FileUploadModule } from 'ng2-file-upload';\r\n\r\nimport { PepperiModule } from '@pepperi-addons/ngx-lib';\r\nimport {\r\n    PepperiIconModule,\r\n    PepperiIconRegistry,\r\n    pepperiIconSystemBin,\r\n    pepperiIconSystemAttach,\r\n    pepperiIconSystemFileUploadCloud,\r\n    pepperiIconSystemProcessing\r\n} from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepperiDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\n\r\nimport { FilesUploaderComponent } from './files-uploader.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        // Material modules,\r\n        MatCommonModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        // External modules\r\n        FileUploadModule,\r\n        // Pepperi modules\r\n        PepperiModule,\r\n        PepperiIconModule,\r\n        PepperiDialogModule\r\n    ],\r\n    exports: [FilesUploaderComponent],\r\n    declarations: [FilesUploaderComponent],\r\n})\r\nexport class PepperiFilesUploaderModule {\r\n    constructor(private pepperiIconRegistry: PepperiIconRegistry) {\r\n        this.pepperiIconRegistry.registerIcons([\r\n            pepperiIconSystemBin,\r\n            pepperiIconSystemAttach,\r\n            pepperiIconSystemFileUploadCloud,\r\n            pepperiIconSystemProcessing\r\n        ]);\r\n    }\r\n}\r\n"]}
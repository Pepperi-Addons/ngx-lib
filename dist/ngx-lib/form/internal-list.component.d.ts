import { EventEmitter, OnInit, Renderer2, ElementRef, ChangeDetectorRef, OnDestroy, OnChanges } from '@angular/core';
import { LAYOUT_TYPE, LayoutService, ObjectSingleData, UIControl, ObjectsDataRow, SCREEN_SIZE, PepperiObjectChangedData, PepperiFieldClickedData } from '@pepperi-addons/ngx-lib';
import * as i0 from "@angular/core";
export declare enum VIEW_TYPE {
    Card = 0,
    Line = 1,
    Table = 2
}
export declare class PepperiInternalListComponent implements OnInit, OnChanges, OnDestroy {
    private element;
    private layoutService;
    private cd;
    private renderer;
    currentListTypeTranslation: string;
    noDataFoundMsg: string;
    hideAllSelectionInMulti: boolean;
    top: number;
    listType: string;
    objectId: string;
    parentId: string;
    searchCode: string;
    firstFieldAsLink: boolean;
    supportResizing: boolean;
    parentScroll: Element | Window;
    disabled: boolean;
    isPrinting: boolean;
    disableSelectionItems: boolean;
    layoutType: LAYOUT_TYPE;
    pageType: string;
    totalsRow: any[];
    isTouchDevice: boolean;
    notifyThumbnailClicked: EventEmitter<ObjectSingleData>;
    notifyFieldClicked: EventEmitter<any>;
    notifyMenuItemClicked: EventEmitter<any>;
    notifyValueChanged: EventEmitter<PepperiObjectChangedData>;
    notifySelectAllSingleActionClicked: EventEmitter<any>;
    notifySingleActionClicked: EventEmitter<any>;
    notifyListLoad: EventEmitter<any>;
    noVirtualScrollCont: ElementRef;
    tableHeader: ElementRef;
    selectAllCB: any;
    LAYOUT_TYPE: typeof LAYOUT_TYPE;
    uiControl: UIControl;
    totalRows: number;
    itemClass: string;
    isTable: boolean;
    private hasColumnWidthOfTypePercentage;
    items: Array<ObjectSingleData>;
    isCardView: boolean;
    private itemsCounter;
    showItems: boolean;
    scrollItems: Array<ObjectSingleData>;
    SEPARATOR: string;
    nativeWindow: any;
    selectedItemId: string;
    hoveredItemId: string;
    private lockEvents;
    private containerWidth;
    screenSize: SCREEN_SIZE;
    pressedColumn: string;
    startX: number;
    startWidth: number;
    tableStartWidth: number;
    isUserSelected: boolean;
    checkForChanges: any;
    useVirtualScroll: boolean;
    calculatedObjectHeight: string;
    constructor(element: ElementRef, layoutService: LayoutService, cd: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    setContainerWidth(): void;
    removeTable(): void;
    private toggleItems;
    private updateScrollItems;
    getUniqItemId(itemId: string, itemType?: string): string;
    setLayout(): void;
    private calcColumnsWidth;
    private initResizeData;
    onListResizeStart(event: any, apiName: any): void;
    onListResize(event: any): void;
    onListResizeEnd(event: any): void;
    onListHeaderMouseEnter(event: any): void;
    onListHeaderMouseLeave(event: any): void;
    onListChange(event: any): void;
    onListLoad(event: any): void;
    getParentContainer(): Element | Window;
    onValueChanged(valueChanged: any): void;
    onCustomizeFieldClick(customizeFieldClickedData: PepperiFieldClickedData): void;
    onCustomizeFieldMenuClicked(customizeFieldClickedData: PepperiFieldClickedData): void;
    getIsDisabled(pepperiObjectInput: ObjectSingleData): boolean;
    itemClicked(e: any, objectSingleData: ObjectSingleData): void;
    onTableRowMouseEnter(event: any, itemId: string, itemType: string): void;
    onTableRowMouseLeave(event: any, itemId: string, itemType: string): void;
    onCardMouseEnter(event: any, itemId: string, itemType: string): void;
    onCardMouseLeave(event: any, itemId: string, itemType: string): void;
    getThumbnailsLayout(): LAYOUT_TYPE;
    winResize(e: any): void;
    trackByFunc(index: number, item: ObjectSingleData): any;
    cleanItems(): void;
    getUIControl(): UIControl;
    initListData(uiControl: UIControl, totalRows: number, items: ObjectSingleData[], viewType?: VIEW_TYPE, itemClass?: string): void;
    updateListItems(items: ObjectSingleData[], event: any): void;
    updateListItem(data: any): void;
    getIsItemEditable(uid: string): boolean;
    getItemDataByID(uid: string): ObjectsDataRow;
    static ɵfac: i0.ɵɵFactoryDef<PepperiInternalListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<PepperiInternalListComponent, "pep-internal-list", never, { "currentListTypeTranslation": "currentListTypeTranslation"; "noDataFoundMsg": "noDataFoundMsg"; "hideAllSelectionInMulti": "hideAllSelectionInMulti"; "top": "top"; "listType": "listType"; "objectId": "objectId"; "parentId": "parentId"; "searchCode": "searchCode"; "firstFieldAsLink": "firstFieldAsLink"; "supportResizing": "supportResizing"; "parentScroll": "parentScroll"; "disabled": "disabled"; "isPrinting": "isPrinting"; "disableSelectionItems": "disableSelectionItems"; "layoutType": "layoutType"; "pageType": "pageType"; "totalsRow": "totalsRow"; "isTouchDevice": "isTouchDevice"; }, { "notifyThumbnailClicked": "notifyThumbnailClicked"; "notifyFieldClicked": "notifyFieldClicked"; "notifyMenuItemClicked": "notifyMenuItemClicked"; "notifyValueChanged": "notifyValueChanged"; "notifySelectAllSingleActionClicked": "notifySelectAllSingleActionClicked"; "notifySingleActionClicked": "notifySingleActionClicked"; "notifyListLoad": "notifyListLoad"; }, never, never>;
}

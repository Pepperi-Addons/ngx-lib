export var LAYOUT_TYPE;
(function (LAYOUT_TYPE) {
    LAYOUT_TYPE[LAYOUT_TYPE["PepperiForm"] = 0] = "PepperiForm";
    LAYOUT_TYPE[LAYOUT_TYPE["PepperiCard"] = 1] = "PepperiCard";
    LAYOUT_TYPE[LAYOUT_TYPE["PepperiTable"] = 2] = "PepperiTable";
    // PepperiCampaign,
    LAYOUT_TYPE[LAYOUT_TYPE["Editmodal"] = 3] = "Editmodal";
})(LAYOUT_TYPE || (LAYOUT_TYPE = {}));
export var STYLE_TYPE;
(function (STYLE_TYPE) {
    STYLE_TYPE["Weak"] = "weak";
    STYLE_TYPE["Regular"] = "regular";
    STYLE_TYPE["Strong"] = "strong";
})(STYLE_TYPE || (STYLE_TYPE = {}));
export class PepperiOption {
}
export class PepperiFieldBase {
    constructor(options = {}) {
        this.notificationInfo = {};
        this.value = options.value;
        this.formattedValue = options.formattedValue;
        this.additionalValue = options.additionalValue;
        this.notificationInfo = options.notificationInfo;
        this.key = options.key || '';
        this.label = options.label || '';
        this.accessory = options.accessory || '';
        this.required = !!options.required;
        this.readonly = !!options.readonly;
        this.disabled = !!options.disabled;
        this.order = options.order === undefined ? 1 : options.order;
        this.controlType = options.controlType || '';
        this.type = options.type || '';
        this.placeholder = options.placeholder || '';
        this.hidden = !!options.hidden;
        this.row = options.row === undefined ? 1 : options.row;
        this.rowSpan = options.rowSpan === undefined ? 1 : options.rowSpan;
        this.col = options.col === undefined ? 1 : options.col;
        this.colSpan = options.colSpan === undefined ? 1 : options.colSpan;
        this.xAlignment = options.xAlignment === undefined ? 1 : options.xAlignment;
        this.yAlignment = options.yAlignment === undefined ? 1 : options.yAlignment;
        this.maxFieldCharacters = options.maxFieldCharacters === undefined ? 0 : options.maxFieldCharacters;
        this.minValue = options.minValue === undefined ? 0 : options.minValue;
        this.maxValue = options.maxValue === undefined ? 0 : options.maxValue;
        this.textColor = options.textColor || '';
        this.lastFocusField = options.lastFocusField || null;
        this.updatedDataCount = 0;
    }
    updateField(updatedField, canEditObject, lastFocusField = null) {
        this.disabled = !updatedField.Enabled || !canEditObject;
        this.readonly = !updatedField.Enabled || !canEditObject;
        this.value = updatedField.Value;
        this.additionalValue = updatedField.AdditionalValue;
        this.formattedValue = updatedField.FormattedValue;
        this.notificationInfo = updatedField.NotificationInfo;
        this.textColor = updatedField.TextColor;
        this.lastFocusField = lastFocusField;
        if (this.controlType === 'qs') {
            this.updatedDataCount += 1;
        }
        if (this.type === 'link') {
            // DI-11292 - add changes for link field for the "Read Only display value" prop
            this.formattedValue =
                this.disabled && this.formattedValue !== null && this.value !== null ? this.formattedValue : this.value;
        }
    }
}
export class PepperiPlaceholderField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'placeholder';
    }
}
export class PepperiSeparatorField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'separator';
    }
}
export class PepperiButtonField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'button';
        this.referenceObjectSubType = '';
        this.referenceObjectInternalType = '';
        this.referenceObjectType = options.referenceObjectType || null;
        this.referenceObjectSubType = options.referenceObjectSubType || null;
        this.referenceObjectInternalType = options.referenceObjectInternalType || null;
    }
}
export class PepperiAttachmentField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'attachment';
    }
}
export class PepperiIndicatorsField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'indicators';
    }
}
export class PepperiTextboxField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'textbox';
    }
}
export class PepperiTextareaField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'textarea';
        this.type = 'textarea';
    }
}
export class PepperiRichHtmlTextareaField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'richhtmltextarea';
        this.type = 'richhtmltextarea';
    }
}
export class PepperiSignatureField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'signature';
        this.options = [];
        this.options = options.options || [];
    }
}
export class PepperiImageField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'image';
        this.hasCampaignField = null;
        this.indicatorsField = null;
        this.menuField = null;
        this.options = [];
        this.sizeLimitMB = 5;
        this.hasCampaignField = options.hasCampaignField || null;
        this.indicatorsField = options.indicatorsField || null;
        this.menuField = options.menuField || null;
        this.options = options.options || [];
        this.sizeLimitMB = options.sizeLimitMB || 5;
    }
}
export class PepperiImagesField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'images';
        this.options = [];
        this.options = options.options || [];
    }
}
export class PepperiQuantitySelectorField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'qs';
        this.alowDecimal = options.alowDecimal || false;
    }
}
export class PepperiDateField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'date';
    }
}
export class PepperiCheckboxField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'checkbox';
    }
}
export class PepperiSelectField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'select';
        this.options = [];
        this.options = options.options || [];
    }
    updateField(updatedField, canEditObject) {
        super.updateField(updatedField, canEditObject);
        this.options = updatedField.OptionalValues;
    }
}
export class PepperiAddressField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'address';
        this.groupFields = null;
        this.groupFields = options.groupFields || null;
    }
}
export class PepperiInternalPageField extends PepperiFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'internalPage';
        this.objectId = '';
        this.parentId = '';
        this.searchCode = '';
        this.objectId = options.objectId || '';
        this.parentId = options.parentId || '';
        this.searchCode = options.searchCode || '';
    }
}
export class PepperiMenuField extends PepperiFieldBase {
    // hasSubMenu: boolean = false;
    constructor(options = {}) {
        super(options);
        this.controlType = 'menu';
        this.options = [];
        this.options = options.options || [];
        // this.hasSubMenu = options['hasSubMenu'];
    }
}
export class PepperiObjectChangedData {
    constructor(id, apiName, value, controlType = '') {
        this.Id = id;
        this.ApiName = apiName;
        this.Value = value;
        this.ControlType = controlType || '';
    }
}
export class PepperiFieldClickedData {
    constructor(id, apiName, idType, which, value, fieldType, otherData = null) {
        this.Id = id;
        this.ApiName = apiName;
        this.IdType = idType;
        this.FieldType = fieldType;
        this.Which = which;
        this.Value = value;
        this.OtherData = otherData;
    }
}
//# sourceMappingURL=data:application/json;base64,
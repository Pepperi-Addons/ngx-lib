import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
export class SessionService {
    constructor(jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.IDP_TOKEN_KEY = 'idp_token';
        this.PAPI_BASE_URL_KEY = 'pepperi.baseurl';
        this.WAPI_TOKEN_KEY = 'auth_token';
        this.WAPI_BASE_URL_KEY = 'serverHostURL';
    }
    // TODO: Maybe need to move this parse into the c'tor.
    getParseToken() {
        debugger;
        const tokenTest = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjRiYTFjNzJmMTI3NThjYzEzMzg3ZWQ3YTBiZjNlODg3IiwidHlwIjoiSldUIn0.eyJuYmYiOjE1OTY3MjU5NjksImV4cCI6MTU5NjcyNjI2OSwiaXNzIjoiaHR0cHM6Ly9pZHAuc2FuZGJveC5wZXBwZXJpLmNvbSIsImF1ZCI6InBlcHBlcmkud2ViYXBwLmFwcC5zYW5kYm94LnBlcHBlcmkuY29tIiwiaWF0IjoxNTk2NzI1OTY5LCJhdF9oYXNoIjoiSGtmRXJ0Q2JzQ3NzOTVKUm05VmJTdyIsInNpZCI6IjJkNzFiM2JiNWUyNjRiNDk2Y2JmZDkzNmYyNTNhNWIzIiwic3ViIjoiZTJkZmQ0MDYtZDM4Yy00ZmYwLThhZGItMWRlMjI3ODIzYWEyIiwiYXV0aF90aW1lIjoxNTk2NzE4ODA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJkYW5pZWwgZGF2aWRvZmYiLCJlbWFpbCI6ImRhbmllbC5kQHBlcHBlcml0ZXN0LmNvbSIsInBlcHBlcmkuaWQiOjg2OTAzMDQsInBlcHBlcmkudXNlcnV1aWQiOiJlMmRmZDQwNi1kMzhjLTRmZjAtOGFkYi0xZGUyMjc4MjNhYTIiLCJwZXBwZXJpLmRpc3RyaWJ1dG9yaWQiOjMwMDEyMzUxLCJwZXBwZXJpLmRpc3RyaWJ1dG9ydXVpZCI6IjBiZDBlZDc5LThlOWUtNDRmYi05NmY0LThlNTNlZDljZTgyYiIsInBlcHBlcmkuZGF0YWNlbnRlciI6InNhbmRib3giLCJwZXBwZXJpLmtlZXBsb2dpbiI6ZmFsc2UsInBlcHBlcmkuaWRsZXRpbWV3ZWIiOjEyMCwidXBkYXRlZF9hdCI6MTU5NjcwMjgwMCwiZ2l2ZW5fbmFtZSI6ImRhbmllbCIsImZhbWlseV9uYW1lIjoiZGF2aWRvZmYiLCJwZXBwZXJpLmFwaW50YmFzZXVybCI6Imh0dHBzOi8vcmVzdGFwaS5zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS53ZWJhcGliYXNldXJsIjoiaHR0cHM6Ly93ZWJhcGkuc2FuZGJveC5wZXBwZXJpLmNvbS9WMTZfNTAvV2ViQXBwXzYiLCJwZXBwZXJpLnB1YmxpY2FwaWJhc2V1cmwiOiJodHRwczovL2FwaS1zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS5iYXNldXJsIjoiaHR0cHM6Ly9wYXBpLnNhbmRib3gucGVwcGVyaS5jb20vVjEuMCIsInBlcHBlcmkuZW1wbG95ZWV0eXBlIjoxLCJhbXIiOlsicHdkIl19.tNtZT3Cl4dMmTQftoaO2KP5BvHOlWGIP-5GpHrAhZoymBkxBSxpKprQGqr0ATtQlNHjX3gDV1W6k_avaSkyJgDiB2hcwr1tNRilasNuMzNV93gxLC9Oh_HdkIN4cZ0hahIcJvf_17PHpS8zD_MRwvGG_i45wRYJAtiGXChxCMzooethRsLOq5TEwuNbE3MxdjZOpImGYyytmsfdsdJRWQn1LQwQBt95ssuypcUzBsVB34P5XuFttjAe9dhTwHIfgsPG-VdfAWH_r-hVe834wKpKrplSWlC_MucgS0X4XP_tN4CtLnHO2wXKPsojqSTH2NQycfqh6YvT6rzRDBEdQIQ";
        const token = this.getIdpToken();
        // token = token || tokenTest;
        const decodedToken = this.jwtHelper.decodeToken(token);
        // const expirationDate = this.jwtHelper.getTokenExpirationDate(token);
        // const isExpired = this.jwtHelper.isTokenExpired(token);
        return decodedToken;
    }
    setObject(key, object) {
        const stringifiedObject = (typeof object === 'string' || object instanceof String) ? object : JSON.stringify(object);
        sessionStorage.setItem(key, stringifiedObject.toString());
    }
    getObject(key) {
        let result = null;
        const item = sessionStorage.getItem(key);
        try {
            result = item ? JSON.parse(item) : item;
        }
        catch (_a) {
            result = item;
        }
        return result;
    }
    getPepperiConsumerToken() {
        return this.PEPPERI_CONSUMER_TOKEN;
    }
    gettWapiToken() {
        return this.getObject(this.WAPI_TOKEN_KEY);
    }
    getWapiBaseUrl() {
        return this.getObject(this.WAPI_BASE_URL_KEY);
    }
    getIdpToken() {
        return this.getObject(this.IDP_TOKEN_KEY);
    }
    getPapiBaseUrl() {
        const tokenObj = this.getParseToken();
        return tokenObj ? tokenObj[this.PAPI_BASE_URL_KEY] : null;
    }
}
SessionService.ɵfac = function SessionService_Factory(t) { return new (t || SessionService)(i0.ɵɵinject(i1.JwtHelperService)); };
SessionService.ɵprov = i0.ɵɵdefineInjectable({ token: SessionService, factory: SessionService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SessionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.JwtHelperService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYi9zcmMvY29yZS9jb21tb24vc2VydmljZXMvc2Vzc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7OztBQU16QyxNQUFNLE9BQU8sY0FBYztJQU92QixZQUFvQixTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQU45QixrQkFBYSxHQUFHLFdBQVcsQ0FBQztRQUM1QixzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUN0QyxtQkFBYyxHQUFHLFlBQVksQ0FBQztRQUM5QixzQkFBaUIsR0FBRyxlQUFlLENBQUM7SUFHRixDQUFDO0lBRXBELHNEQUFzRDtJQUM5QyxhQUFhO1FBQ2pCLFFBQVEsQ0FBQztRQUNULE1BQU0sU0FBUyxHQUFHLHF0REFBcXRELENBQUM7UUFDeHVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyw4QkFBOEI7UUFFOUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsdUVBQXVFO1FBQ3ZFLDBEQUEwRDtRQUUxRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsU0FBUyxDQUFJLEdBQVcsRUFBRSxNQUFTO1FBQy9CLE1BQU0saUJBQWlCLEdBQ25CLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9GLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELFNBQVMsQ0FBVSxHQUFXO1FBQzFCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpDLElBQUk7WUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDaEQ7UUFDRCxXQUFNO1lBQ0YsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCx1QkFBdUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUM7SUFDdkMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYztRQUNWLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUQsQ0FBQzs7NEVBL0RRLGNBQWM7c0RBQWQsY0FBYyxXQUFkLGNBQWMsbUJBRlgsTUFBTTtrREFFVCxjQUFjO2NBSDFCLFVBQVU7ZUFBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEp3dEhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2p3dC1oZWxwZXIuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZXNzaW9uU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IElEUF9UT0tFTl9LRVkgPSAnaWRwX3Rva2VuJztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgUEFQSV9CQVNFX1VSTF9LRVkgPSAncGVwcGVyaS5iYXNldXJsJztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgV0FQSV9UT0tFTl9LRVkgPSAnYXV0aF90b2tlbic7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IFdBUElfQkFTRV9VUkxfS0VZID0gJ3NlcnZlckhvc3RVUkwnO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBQRVBQRVJJX0NPTlNVTUVSX1RPS0VOOiAnWVkycEF3eDZFeG8yTFdYclVsbEY5eHpTZldGNTN3cWMnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgand0SGVscGVyOiBKd3RIZWxwZXJTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICAvLyBUT0RPOiBNYXliZSBuZWVkIHRvIG1vdmUgdGhpcyBwYXJzZSBpbnRvIHRoZSBjJ3Rvci5cclxuICAgIHByaXZhdGUgZ2V0UGFyc2VUb2tlbigpOiBhbnkge1xyXG4gICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgIGNvbnN0IHRva2VuVGVzdCA9IFwiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUmlZVEZqTnpKbU1USTNOVGhqWXpFek16ZzNaV1EzWVRCaVpqTmxPRGczSWl3aWRIbHdJam9pU2xkVUluMC5leUp1WW1ZaU9qRTFPVFkzTWpVNU5qa3NJbVY0Y0NJNk1UVTVOamN5TmpJMk9Td2lhWE56SWpvaWFIUjBjSE02THk5cFpIQXVjMkZ1WkdKdmVDNXdaWEJ3WlhKcExtTnZiU0lzSW1GMVpDSTZJbkJsY0hCbGNta3VkMlZpWVhCd0xtRndjQzV6WVc1a1ltOTRMbkJsY0hCbGNta3VZMjl0SWl3aWFXRjBJam94TlRrMk56STFPVFk1TENKaGRGOW9ZWE5vSWpvaVNHdG1SWEowUTJKelEzTnpPVFZLVW0wNVZtSlRkeUlzSW5OcFpDSTZJakprTnpGaU0ySmlOV1V5TmpSaU5EazJZMkptWkRrek5tWXlOVE5oTldJeklpd2ljM1ZpSWpvaVpUSmtabVEwTURZdFpETTRZeTAwWm1Zd0xUaGhaR0l0TVdSbE1qSTNPREl6WVdFeUlpd2lZWFYwYUY5MGFXMWxJam94TlRrMk56RTRPREE1TENKcFpIQWlPaUpzYjJOaGJDSXNJbTVoYldVaU9pSmtZVzVwWld3Z1pHRjJhV1J2Wm1ZaUxDSmxiV0ZwYkNJNkltUmhibWxsYkM1a1FIQmxjSEJsY21sMFpYTjBMbU52YlNJc0luQmxjSEJsY21rdWFXUWlPamcyT1RBek1EUXNJbkJsY0hCbGNta3VkWE5sY25WMWFXUWlPaUpsTW1SbVpEUXdOaTFrTXpoakxUUm1aakF0T0dGa1lpMHhaR1V5TWpjNE1qTmhZVElpTENKd1pYQndaWEpwTG1ScGMzUnlhV0oxZEc5eWFXUWlPak13TURFeU16VXhMQ0p3WlhCd1pYSnBMbVJwYzNSeWFXSjFkRzl5ZFhWcFpDSTZJakJpWkRCbFpEYzVMVGhsT1dVdE5EUm1ZaTA1Tm1ZMExUaGxOVE5sWkRsalpUZ3lZaUlzSW5CbGNIQmxjbWt1WkdGMFlXTmxiblJsY2lJNkluTmhibVJpYjNnaUxDSndaWEJ3WlhKcExtdGxaWEJzYjJkcGJpSTZabUZzYzJVc0luQmxjSEJsY21rdWFXUnNaWFJwYldWM1pXSWlPakV5TUN3aWRYQmtZWFJsWkY5aGRDSTZNVFU1Tmpjd01qZ3dNQ3dpWjJsMlpXNWZibUZ0WlNJNkltUmhibWxsYkNJc0ltWmhiV2xzZVY5dVlXMWxJam9pWkdGMmFXUnZabVlpTENKd1pYQndaWEpwTG1Gd2FXNTBZbUZ6WlhWeWJDSTZJbWgwZEhCek9pOHZjbVZ6ZEdGd2FTNXpZVzVrWW05NExuQmxjSEJsY21rdVkyOXRJaXdpY0dWd2NHVnlhUzUzWldKaGNHbGlZWE5sZFhKc0lqb2lhSFIwY0hNNkx5OTNaV0poY0drdWMyRnVaR0p2ZUM1d1pYQndaWEpwTG1OdmJTOVdNVFpmTlRBdlYyVmlRWEJ3WHpZaUxDSndaWEJ3WlhKcExuQjFZbXhwWTJGd2FXSmhjMlYxY213aU9pSm9kSFJ3Y3pvdkwyRndhUzF6WVc1a1ltOTRMbkJsY0hCbGNta3VZMjl0SWl3aWNHVndjR1Z5YVM1aVlYTmxkWEpzSWpvaWFIUjBjSE02THk5d1lYQnBMbk5oYm1SaWIzZ3VjR1Z3Y0dWeWFTNWpiMjB2VmpFdU1DSXNJbkJsY0hCbGNta3VaVzF3Ykc5NVpXVjBlWEJsSWpveExDSmhiWElpT2xzaWNIZGtJbDE5LnROdFpUM0NsNGRNbVRRZnRvYU8yS1A1QnZIT2xXR0lQLTVHcEhyQWhab3ltQmt4QlN4cEtwclFHcXIwQVR0UWxOSGpYM2dEVjFXNmtfYXZhU2t5SmdEaUIyaGN3cjF0TlJpbGFzTnVNek5WOTNneExDOU9oX0hka0lONGNaMGhhaEljSnZmXzE3UEhwUzh6RF9NUnd2R0dfaTQ1d1JZSkF0aUdYQ2h4Q016b29ldGhSc0xPcTVURXd1TmJFM014ZGpaT3BJbUdZeXl0bXNmZHNkSlJXUW4xTFF3UUJ0OTVzc3V5cGNVekJzVkIzNFA1WHVGdHRqQWU5ZGhUd0hJZmdzUEctVmRmQVdIX3ItaFZlODM0d0twS3JwbFNXbENfTXVjZ1MwWDRYUF90TjRDdExuSE8yd1hLUHNvanFTVEgyTlF5Y2ZxaDZZdlQ2cnpSREJFZFFJUVwiO1xyXG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5nZXRJZHBUb2tlbigpO1xyXG4gICAgICAgIC8vIHRva2VuID0gdG9rZW4gfHwgdG9rZW5UZXN0O1xyXG5cclxuICAgICAgICBjb25zdCBkZWNvZGVkVG9rZW4gPSB0aGlzLmp3dEhlbHBlci5kZWNvZGVUb2tlbih0b2tlbik7XHJcbiAgICAgICAgLy8gY29uc3QgZXhwaXJhdGlvbkRhdGUgPSB0aGlzLmp3dEhlbHBlci5nZXRUb2tlbkV4cGlyYXRpb25EYXRlKHRva2VuKTtcclxuICAgICAgICAvLyBjb25zdCBpc0V4cGlyZWQgPSB0aGlzLmp3dEhlbHBlci5pc1Rva2VuRXhwaXJlZCh0b2tlbik7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWNvZGVkVG9rZW47XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T2JqZWN0PFQ+KGtleTogc3RyaW5nLCBvYmplY3Q6IFQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzdHJpbmdpZmllZE9iamVjdCA9XHJcbiAgICAgICAgICAgICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJyB8fCBvYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcpID8gb2JqZWN0IDogSlNPTi5zdHJpbmdpZnkob2JqZWN0KTtcclxuXHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShrZXksIHN0cmluZ2lmaWVkT2JqZWN0LnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9iamVjdDxUID0gYW55PihrZXk6IHN0cmluZyk6IFQge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW0gPyBKU09OLnBhcnNlKGl0ZW0pIGFzIFQgOiBpdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBlcHBlcmlDb25zdW1lclRva2VuKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuUEVQUEVSSV9DT05TVU1FUl9UT0tFTjtcclxuICAgIH1cclxuXHJcbiAgICBnZXR0V2FwaVRva2VuKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KHRoaXMuV0FQSV9UT0tFTl9LRVkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdhcGlCYXNlVXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KHRoaXMuV0FQSV9CQVNFX1VSTF9LRVkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldElkcFRva2VuKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KHRoaXMuSURQX1RPS0VOX0tFWSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFwaUJhc2VVcmwoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0b2tlbk9iaiA9IHRoaXMuZ2V0UGFyc2VUb2tlbigpO1xyXG4gICAgICAgIHJldHVybiB0b2tlbk9iaiA/IHRva2VuT2JqW3RoaXMuUEFQSV9CQVNFX1VSTF9LRVldIDogbnVsbDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19
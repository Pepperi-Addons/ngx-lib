import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
// Const BIDI_RTL_LANGS Array
// BIDI_RTL_LANGS ref: http://en.wikipedia.org/wiki/Right-to-left
// Table of scripts in Unicode: https://en.wikipedia.org/wiki/Script_(Unicode)
const _BIDI_RTL_LANGS = [
    'ae',
    'ar',
    'arc',
    'bcc',
    'bqi',
    'ckb',
    'dv',
    'fa',
    'glk',
    'he',
    'ku',
    'mzn',
    'nqo',
    'pnb',
    'ps',
    'sd',
    'ug',
    'ur',
    'yi' /* 'ייִדיש', Yiddish */
];
export var ORIENTATION;
(function (ORIENTATION) {
    ORIENTATION[ORIENTATION["Landscape"] = 0] = "Landscape";
    ORIENTATION[ORIENTATION["Portrait"] = 1] = "Portrait";
})(ORIENTATION || (ORIENTATION = {}));
export var SCREEN_SIZE;
(function (SCREEN_SIZE) {
    SCREEN_SIZE[SCREEN_SIZE["XL"] = 0] = "XL";
    SCREEN_SIZE[SCREEN_SIZE["LG"] = 1] = "LG";
    SCREEN_SIZE[SCREEN_SIZE["MD"] = 2] = "MD";
    SCREEN_SIZE[SCREEN_SIZE["SM"] = 3] = "SM";
    SCREEN_SIZE[SCREEN_SIZE["XS"] = 4] = "XS";
})(SCREEN_SIZE || (SCREEN_SIZE = {}));
export class LayoutService {
    constructor(translate) {
        this.translate = translate;
        this.resizeSubject = new BehaviorSubject(SCREEN_SIZE.LG);
    }
    get onResize$() {
        return this.resizeSubject.asObservable().pipe(distinctUntilChanged());
    }
    /**
     * Set the current screen size.
     * @param size The size to change to.
     */
    onResize(size) {
        this.resizeSubject.next(size);
    }
    getOrintation() {
        if (window.innerHeight > window.innerWidth) {
            return ORIENTATION.Portrait;
        }
        else {
            return ORIENTATION.Landscape;
        }
    }
    getScreenWidth() {
        let retVal = 250.0;
        switch (this.resizeSubject.getValue()) {
            case SCREEN_SIZE.XS: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 130.0 : 65.0;
                break;
            }
            case SCREEN_SIZE.SM:
            case SCREEN_SIZE.MD: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 220.0 : 140.0;
                break;
            }
            case SCREEN_SIZE.LG: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 400.0 : 250.0;
                break;
            }
        }
        return retVal;
    }
    getScreenHeight() {
        let retVal = 250.0;
        switch (this.resizeSubject.getValue()) {
            case SCREEN_SIZE.XS: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 65.0 : 130.0;
                break;
            }
            case SCREEN_SIZE.SM:
            case SCREEN_SIZE.MD: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 140.0 : 220.0;
                break;
            }
            case SCREEN_SIZE.LG: {
                retVal = this.getOrintation() === ORIENTATION.Landscape ? 250.0 : 400.0;
                break;
            }
        }
        return retVal;
    }
    getScreenHeightPx() {
        return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    }
    getScreenWidthPx() {
        return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    }
    getCurrentLanguage() {
        return this.translate && this.translate.currentLang || navigator.language;
    }
    isRtl() {
        const userLang = this.getCurrentLanguage();
        const isRtl = _BIDI_RTL_LANGS.indexOf(userLang) >= 0;
        return isRtl;
    }
}
LayoutService.ɵfac = function LayoutService_Factory(t) { return new (t || LayoutService)(i0.ɵɵinject(i1.TranslateService)); };
LayoutService.ɵprov = i0.ɵɵdefineInjectable({ token: LayoutService, factory: LayoutService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(LayoutService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.TranslateService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,
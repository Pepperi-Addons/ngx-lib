import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@pepperi-addons/ngx-lib";
export class PepperiInternalPageService {
    constructor(httpService) {
        this.httpService = httpService;
        this.parentId = '0';
        this.additionalApiName = '';
        this.transactionUrl = 'Service1.svc/v1/OrderCenter/Transaction/';
    }
    getBaseParentUrl() {
        const url = `${this.transactionUrl}${this.objectId}/ParentLine/${this.parentId}/`;
        return url;
    }
    getChildren(callbackFunc) {
        const body = JSON.stringify({
            TransactionUID: this.objectId,
            SearchCode: this.searchCode,
            AdditionalApiName: this.additionalApiName,
            ParentTransactionLineID: this.parentId,
            ViewType: this.viewType
        });
        // Set the additional api name with view type string.
        const moreParams = this.additionalApiName.length > 0 ?
            `${this.additionalApiName}/${this.viewType}` :
            `''/${this.viewType}`;
        const url = `${this.getBaseParentUrl()}Items/${moreParams}`;
        this.httpService.postWapiApiCall(url, body).subscribe((res) => { callbackFunc(res); }, (error) => { }, () => { });
    }
    initDetails(objectId, parentId, searchCode, callbackFunc) {
        if (!objectId || !parentId) {
            return;
        }
        this.objectId = objectId;
        this.parentId = parentId;
        this.searchCode = searchCode;
        this.httpService.getWapiApiCall(`${this.getBaseParentUrl()}ViewTypes`).subscribe((res) => { callbackFunc(res); }, (error) => { }, () => { });
    }
    changeChildrenViewType(viewType, callbackFunc) {
        this.viewType = viewType;
        this.getChildren(callbackFunc);
    }
    changeAdditionalApiName(additionalApiName, callbackFunc) {
        this.additionalApiName = additionalApiName;
        this.getChildren(callbackFunc);
    }
    childPlusClick(itemId, fieldApiName, callbackFunc) {
        const body = JSON.stringify({
            TransactionUID: this.objectId,
            SearchCode: this.searchCode,
            ParentTransactionLineID: this.parentId,
            TransactionLineUID: itemId,
            FieldApiName: fieldApiName,
            ViewType: this.viewType
        });
        this.httpService.postWapiApiCall(`${this.getBaseParentUrl()}IncrementValue`, body).subscribe((res) => { callbackFunc(res); }, (error) => { }, () => { });
    }
    childMinusClick(itemId, fieldApiName, callbackFunc) {
        const body = JSON.stringify({
            TransactionUID: this.objectId,
            SearchCode: this.searchCode,
            ParentTransactionLineID: this.parentId,
            TransactionLineUID: itemId,
            FieldApiName: fieldApiName,
            ViewType: this.viewType
        });
        this.httpService.postWapiApiCall(`${this.getBaseParentUrl()}DecrementValue`, body).subscribe((res) => { callbackFunc(res); }, (error) => { }, () => { });
    }
    childValueChanged(itemId, fieldApiName, value, callbackFunc) {
        const body = JSON.stringify({
            TransactionUID: this.objectId,
            SearchCode: this.searchCode,
            ParentTransactionLineID: this.parentId,
            TransactionLineUID: itemId,
            FieldApiName: fieldApiName,
            FieldValue: value,
            ViewType: this.viewType
        });
        this.httpService.postWapiApiCall(`${this.getBaseParentUrl()}SetFieldValue`, body).subscribe((res) => { callbackFunc(res); }, (error) => { }, () => { });
    }
}
PepperiInternalPageService.ɵfac = function PepperiInternalPageService_Factory(t) { return new (t || PepperiInternalPageService)(i0.ɵɵinject(i1.HttpService)); };
PepperiInternalPageService.ɵprov = i0.ɵɵdefineInjectable({ token: PepperiInternalPageService, factory: PepperiInternalPageService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PepperiInternalPageService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,
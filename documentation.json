{
    "pipes": [
        {
            "name": "PepCapitalizePipe",
            "id": "pipe-PepCapitalizePipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepCapitalize",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepDateFormatterPipe",
            "id": "pipe-PepDateFormatterPipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Date"
                        },
                        {
                            "name": "culture",
                            "type": "any"
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "culture",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepDateFormatter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepDateStringFormatterPipe",
            "id": "pipe-PepDateStringFormatterPipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "culture",
                            "type": "any"
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "culture",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepDateStringFormatter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepEncodePipe",
            "id": "pipe-PepEncodePipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepEncode",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepEscapePipe",
            "id": "pipe-PepEscapePipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepEscape",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepQuantitySelectorNumberPipe",
            "id": "pipe-PepQuantitySelectorNumberPipe-e5ac1b988fcd8dd30db8736f117de737",
            "file": "projects/ngx-lib/quantity-selector/quantity-selector.pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "allowDecimal",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allowDecimal",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepQuantitySelectorNumber",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'pepQuantitySelectorNumber' })\nexport class PepQuantitySelectorNumberPipe implements PipeTransform {\n    transform(value: string, allowDecimal: boolean): string {\n        const tmpValue = parseFloat(value);\n\n        if (tmpValue === 0) {\n            return '0';\n        } else if (allowDecimal) {\n            return tmpValue.toString();\n        } else {\n            return parseInt(value).toString();\n        }\n    }\n}\n"
        },
        {
            "name": "PepReplaceLineBreaksPipe",
            "id": "pipe-PepReplaceLineBreaksPipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepReplaceLineBreaks",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepSafeHtmlPipe",
            "id": "pipe-PepSafeHtmlPipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepSafeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepSafePipe",
            "id": "pipe-PepSafePipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepSafe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepSplitUppercasePipe",
            "id": "pipe-PepSplitUppercasePipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepSplitUppercase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        },
        {
            "name": "PepToNumberPipe",
            "id": "pipe-PepToNumberPipe-db03821cb491a004dfad7e1a5d54c045",
            "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pepToNumber",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {\n    DomSanitizer,\n    SafeHtml,\n    SafeStyle,\n    SafeScript,\n    SafeUrl,\n    SafeResourceUrl,\n} from '@angular/platform-browser';\n\n@Pipe({ name: 'pepCapitalize' })\nexport class PepCapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepEncode' })\nexport class PepEncodePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = btoa(value);\n            return v;\n        }\n        return value;\n    }\n}\n\ndeclare function escape(s: string): string;\n\n@Pipe({ name: 'pepEscape' })\nexport class PepEscapePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            const v = escape(value);\n            return v;\n        }\n        return value;\n    }\n}\n\n@Pipe({ name: 'pepReplaceLineBreaks' })\nexport class PepReplaceLineBreaksPipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/(<br\\ ?\\/?>)/g, ' ');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepDateFormatter' })\nexport class PepDateFormatterPipe implements PipeTransform {\n    transform(value: Date, culture: any, showTime = false): string {\n        let res = '';\n        value = new Date(value);\n        if (value) {\n            res = value.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res +=\n                    ' ' +\n                    value.toLocaleTimeString(culture || 'en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                    });\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepDateStringFormatter' })\nexport class PepDateStringFormatterPipe implements PipeTransform {\n    transform(value: string, culture: any, showTime = false): string {\n        let res = '';\n        const tmpDate = new Date(value);\n        if (value) {\n            res = tmpDate.toLocaleDateString(culture || 'en-US');\n            if (showTime) {\n                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');\n            }\n        }\n        return res;\n    }\n}\n\n@Pipe({ name: 'pepSafeHtml' })\nexport class PepSafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(html) {\n        return this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n}\n\n@Pipe({ name: 'pepSafe' })\nexport class PepSafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(\n        value: any,\n        type: string\n    ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@Pipe({ name: 'pepSplitUppercase' })\nexport class PepSplitUppercasePipe implements PipeTransform {\n    transform(value: string): string {\n        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');\n        return newValue;\n    }\n}\n\n@Pipe({ name: 'pepToNumber' })\nexport class PepToNumberPipe implements PipeTransform {\n    transform(value: string): number {\n        return parseInt(value);\n    }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "IListViewChangeEvent",
            "id": "interface-IListViewChangeEvent-707ba6227b2d128e0720b514366c8691",
            "file": "projects/ngx-lib/list/list-views.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n} from '@angular/core';\nimport { PepSizeType, PepStyleType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\nexport type PepListViewDisplayType = 'menu' | 'buttons';\n\nexport class IPepListView {\n    key: string;\n    iconName: string;\n    title?: string;\n}\n\nexport interface IListViewChangeEvent {\n    source: IPepListView;\n}\n\n@Component({\n    selector: 'pep-list-views',\n    templateUrl: './list-views.component.html',\n    styleUrls: ['./list-views.component.scss'],\n})\n@Injectable()\nexport class PepListViewsComponent implements OnInit {\n    private _views: Array<IPepListView> = null;\n    @Input()\n    set views(value: Array<IPepListView>) {\n        this._views = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get views(): Array<IPepListView> {\n        return this._views;\n    }\n\n    private _currentView: IPepListView = null;\n    @Input()\n    set currentView(value: IPepListView) {\n        this._currentView = value;\n        this.currentItem = {\n            key: value.key,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentView(): IPepListView {\n        return this._currentView;\n    }\n\n    @Input() displayType: PepListViewDisplayType = 'buttons';\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n\n    @Output()\n    change: EventEmitter<IListViewChangeEvent> = new EventEmitter<IListViewChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (this.currentView === null && this.views && this.views.length > 0) {\n            this.currentView = this.views[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentView = this.views.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.raiseChangeEvent();\n    }\n\n    onViewChanged(view: IPepListView): void {\n        this.currentView = view;\n        this.raiseChangeEvent();\n    }\n\n    private raiseChangeEvent(): void {\n        this.change.emit({ source: this.currentView });\n    }\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "IPepListView",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepAddressFieldOptions",
            "id": "interface-IPepAddressFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": true,
                    "description": "",
                    "line": 407
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepBreadCrumbItemClickEvent",
            "id": "interface-IPepBreadCrumbItemClickEvent-ff55ebc69ace21c2be7599922710a91d",
            "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
            "type": "interface",
            "sourceCode": "export type PepBreadCrumbsDisplayType = 'label' | 'items';\n\nexport class PepBreadCrumbItem {\n    key: string;\n    text: string;\n    title?: string;\n    disabled?: boolean = false;\n\n    constructor(data: Partial<PepBreadCrumbItem>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepBreadCrumbItemClickEvent {\n    source: PepBreadCrumbItem;\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "PepBreadCrumbItem",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepButtonClickEvent",
            "id": "interface-IPepButtonClickEvent-a5e509206df878951ebfd5b907e3772b",
            "file": "projects/ngx-lib/button/button.model.ts",
            "type": "interface",
            "sourceCode": "export class PepButton {\n    key: string;\n    value?: string;\n    class?: string;\n    icon?: string;\n    callback?: (action: IPepButtonClickEvent) => void;\n\n    constructor(data: Partial<PepButton>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepButtonClickEvent {\n    source: PepButton;\n    event?: Event;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "Event",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "source",
                    "type": "PepButton",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepCheckboxFieldOptions",
            "id": "interface-IPepCheckboxFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "PepCheckboxFieldType",
                    "optional": true,
                    "description": "",
                    "line": 364
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepClosestColor",
            "id": "interface-IPepClosestColor-a18bd558e8a99b161c0717147f9348b8",
            "file": "projects/ngx-lib/color/color-utils.ts",
            "type": "interface",
            "sourceCode": "const FLOAT_REGEX = /^\\d+(\\.\\d+)?$/;\nconst THREE_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{3}$/;\nconst THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{3}$/;\nconst SIX_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{6}$/;\nconst SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{6}$/;\n\nexport interface IPepRgbColor {\n    r?: any;\n    g?: any;\n    b?: any;\n}\n\nexport interface IPepHslColor {\n    h?: any;\n    s?: any;\n    l?: any;\n}\n\nexport interface IPepClosestColor {\n    color: string;\n    lightness: number;\n}\n\n/**\n * Convert hex string to 6 digits hex string.\n * @param str The string to convert.\n */\nexport function hex2sixDigitHex(str: string): string {\n    if (!str) {\n        return null;\n    }\n\n    str = str.trim();\n\n    if (SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return str;\n    }\n\n    if (SIX_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str;\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return '#' + str[1] + str[1] + str[2] + str[2] + str[3] + str[3];\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str[0] + str[0] + str[1] + str[1] + str[2] + str[2];\n    }\n\n    return null;\n}\n\n/**\n * Convert rgb color to 6 digits hex string.\n * @param color The rgb color to convert.\n */\nexport function rgb2sixDigitHex(color: IPepRgbColor): string {\n    color.r = color.r.toString(16);\n    color.g = color.g.toString(16);\n    color.b = color.b.toString(16);\n\n    if (color.r.length === 1) {\n        color.r = '0' + color.r;\n    }\n\n    if (color.g.length === 1) {\n        color.g = '0' + color.g;\n    }\n\n    if (color.b.length === 1) {\n        color.b = '0' + color.b;\n    }\n\n    return '#' + color.r + color.g + color.b;\n}\n\n/**\n * Convert hex string to rgb color.\n * @param str The hex string to convert.\n */\nexport function hex2rgb(str: string): IPepRgbColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    return {\n        r: parseInt(sixDigitHex.slice(1, 3), 16),\n        g: parseInt(sixDigitHex.slice(3, 5), 16),\n        b: parseInt(sixDigitHex.slice(5, 7), 16),\n    };\n}\n\nexport function rgbString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const rgbArr = str.substr(4).split(')')[0].split(sep);\n\n    const r = rgbArr[0];\n    const g = rgbArr[1].substr(0, rgbArr[1].length).trim();\n    const b = rgbArr[2].substr(0, rgbArr[2].length).trim();\n\n    return rgb2hsl({ r, g, b });\n}\n\nexport function rgb2hsl({ r, g, b }: IPepRgbColor): IPepHslColor {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    const cmin = Math.min(r, g, b);\n    const cmax = Math.max(r, g, b);\n    const delta = cmax - cmin;\n\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    if (delta === 0) {\n        h = 0;\n    } else if (cmax === r) {\n        h = ((g - b) / delta) % 6;\n    } else if (cmax === g) {\n        h = (b - r) / delta + 2;\n    } else {\n        h = (r - g) / delta + 4;\n    }\n\n    h = Math.round(h * 60);\n\n    if (h < 0) {\n        h += 360;\n    }\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return { h, s, l };\n}\n\nexport function hslString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const hslArr = str.substr(4).split(')')[0].split(sep);\n\n    let h: any = hslArr[0];\n    let s = hslArr[1].substr(0, hslArr[1].length).trim();\n    let l = hslArr[2].substr(0, hslArr[2].length).trim();\n\n    // Strip label and convert to degrees (if necessary)\n    if (h.indexOf('deg') > -1) {\n        h = h.substr(0, h.length - 3);\n    } else if (h.indexOf('rad') > -1) {\n        h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));\n    } else if (h.indexOf('turn') > -1) {\n        h = Math.round(h.substr(0, h.length - 4) * 360);\n    }\n\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) {\n        h %= 360;\n    }\n\n    // Remove the %\n    if (s.indexOf('%') > -1) {\n        s = s.replace(/%/g, '');\n    }\n\n    // Remove the %\n    if (l.indexOf('%') > -1) {\n        l = l.replace(/%/g, '');\n    }\n\n    return { h, s, l };\n}\n\nexport function hsl2rgb({ h, s, l }: IPepHslColor): IPepRgbColor {\n    let r;\n    let g;\n    let b;\n\n    if (!isFinite(h)) {\n        h = 0;\n    }\n\n    if (!isFinite(s)) {\n        s = 0;\n    }\n\n    if (!isFinite(l)) {\n        l = 0;\n    }\n\n    h /= 60;\n\n    if (h < 0) {\n        h = 6 - (-h % 6);\n    }\n\n    h %= 6;\n\n    s = Math.max(0, Math.min(1, s / 100));\n    l = Math.max(0, Math.min(1, l / 100));\n\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs((h % 2) - 1));\n\n    if (h < 1) {\n        r = c;\n        g = x;\n        b = 0;\n    } else if (h < 2) {\n        r = x;\n        g = c;\n        b = 0;\n    } else if (h < 3) {\n        r = 0;\n        g = c;\n        b = x;\n    } else if (h < 4) {\n        r = 0;\n        g = x;\n        b = c;\n    } else if (h < 5) {\n        r = x;\n        g = 0;\n        b = c;\n    } else {\n        r = c;\n        g = 0;\n        b = x;\n    }\n\n    const m = l - c / 2;\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return { r, g, b };\n}\n\nexport function hex2hsl(str: string): IPepHslColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    const rgb = hex2rgb(sixDigitHex);\n\n    if (rgb === null) {\n        return null;\n    }\n\n    return rgb2hsl(rgb);\n}\n\nexport function hsl2hex(hsl: IPepHslColor): string {\n    const rgb = hsl2rgb(hsl);\n\n    return rgb2sixDigitHex(rgb);\n}\n\nexport function relativeLuminance({ r, g, b }: IPepRgbColor): number {\n    [r, g, b] = [r, g, b].map((c) => {\n        c = c / 255;\n\n        if (c <= 0.03928) {\n            return c / 12.92;\n        }\n\n        return Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nexport function contrast(str1: string, str2: string): number {\n    const L1 = relativeLuminance(hex2rgb(str1));\n    const L2 = relativeLuminance(hex2rgb(str2));\n\n    if (L1 < L2) {\n        return (L2 + 0.05) / (L1 + 0.05);\n    }\n\n    return (L1 + 0.05) / (L2 + 0.05);\n}\n\nexport function findClosestAccessibleDarkerColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let minColor = hsl2hex({ h, s, l: 0 });\n\n    if (contrast(minColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = 0;\n    let max = l;\n    let maxColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: minColor,\n        lightness: min,\n    };\n}\n\nexport function findClosestAccessibleLighterColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let maxColor = hsl2hex({ h, s, l: 100 });\n\n    if (contrast(maxColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = l;\n    let max = 100;\n    let minColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: maxColor,\n        lightness: max,\n    };\n}\n\nexport function findClosestAccessibleColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): string {\n    const closestDarkerColor: IPepClosestColor = findClosestAccessibleDarkerColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n    const closestLighterColor: IPepClosestColor = findClosestAccessibleLighterColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n\n    if (closestDarkerColor === null) {\n        if (closestLighterColor === null) {\n            return null;\n        }\n\n        return closestLighterColor.color;\n    }\n\n    if (closestLighterColor === null) {\n        return closestDarkerColor.color;\n    }\n\n    const { l } = hex2hsl(adjustableColor);\n\n    if (closestLighterColor.lightness - l < l - closestDarkerColor.lightness) {\n        return closestLighterColor.color;\n    }\n\n    return closestDarkerColor.color;\n}\n\nexport function convertHslToStringHsl(hsl: IPepHslColor): string {\n    return (\n        'hsl(' +\n        (hsl.h < 0 ? hsl.h + 360 : hsl.h) +\n        ', ' +\n        hsl.s +\n        '%, ' +\n        hsl.l +\n        '%)'\n    );\n}\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lightness",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepColorPickerDialogData",
            "id": "interface-IPepColorPickerDialogData-d621f34d160302890bf554169573fe38",
            "file": "projects/ngx-lib/color/color-picker.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    hex2hsl,\n    hslString2hsl,\n    rgbString2hsl,\n    IPepHslColor,\n    findClosestAccessibleColor,\n    hsl2hex,\n    convertHslToStringHsl,\n} from './color-utils';\nimport { PepColorType } from './color.model';\n\nenum PepContrastRatioType {\n    AA = 4.5,\n    AAA = 7,\n}\n\ninterface IPepColorPickerDialogData {\n    value: string;\n    type: PepColorType;\n    showAAComplient: boolean;\n    textColor: string;\n    contrastRatio: PepContrastRatioType;\n}\n\n@Component({\n    templateUrl: './color-picker.component.html',\n    styleUrls: ['./color-picker.component.scss'],\n})\nexport class PepColorPickerComponent implements OnInit {\n    static CURRENT_HUE = '--pep-color-picker-current-hue';\n\n    checkAAComplient = true;\n\n    constructor(\n        private dialogRef: MatDialogRef<PepColorPickerComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: IPepColorPickerDialogData\n    ) {\n        this.data.type = data ? data.type : 'any';\n        this.data.showAAComplient = !data\n            ? false\n            : data.showAAComplient ?? true;\n        this.data.textColor = data && data.textColor ? data.textColor : '#fff';\n        this.data.contrastRatio =\n            data && data.contrastRatio\n                ? data.contrastRatio\n                : PepContrastRatioType.AA;\n    }\n\n    currentHue = 100;\n    currentHueMin = 0;\n    currentHueMax = 360;\n\n    currentSaturation = 50;\n    currentSaturationMin = 0;\n    currentSaturationMax = 100;\n\n    currentLightness = 50;\n    currentLightnessMin = 0;\n    currentLightnessMax = 100;\n\n    complientColor: string;\n    isUserChooseAAComplientColor: boolean;\n\n    ngOnInit(): void {\n        this.initVars();\n        this.checkAAComplient = this.data.showAAComplient;\n        this.convertValueStringToColor(this.data.value);\n    }\n\n    initVars(): void {\n        if (this.data.type === 'main') {\n            this.currentLightnessMax = 10;\n            this.currentLightness = 5;\n        } else if (this.data.type === 'success') {\n            this.currentHueMin = 70;\n            this.currentHueMax = 150;\n            this.currentHue = 100;\n\n            this.currentSaturationMin = 50;\n            this.currentSaturationMax = 100;\n            this.currentSaturation = 50;\n\n            this.currentLightnessMin = 10;\n            this.currentLightnessMax = 65;\n            this.currentLightness = 50;\n        } else if (this.data.type === 'caution') {\n            this.currentHueMin = -20;\n            this.currentHueMax = 20;\n            this.currentHue = 10;\n\n            this.currentSaturationMin = 75;\n            this.currentSaturationMax = 100;\n            this.currentSaturation = 75;\n\n            this.currentLightnessMin = 25;\n            this.currentLightnessMax = 75;\n            this.currentLightness = 50;\n        }\n    }\n\n    setCurrentHueInCss(): void {\n        document.documentElement.style.setProperty(\n            PepColorPickerComponent.CURRENT_HUE,\n            this.currentHue.toString()\n        );\n    }\n\n    convertValueStringToColor(color): void {\n        if (color.indexOf('hsl') === 0) {\n            const hsl = hslString2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else if (color.indexOf('rgb') === 0) {\n            const hsl = rgbString2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else if (color.indexOf('#') === 0) {\n            const hsl = hex2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else {\n            // Handle other colors.\n        }\n\n        this.setCurrentHueInCss();\n    }\n\n    convertColorToValueString(hslColor: IPepHslColor): void {\n        // Regular hue\n        if (\n            hslColor.h >= this.currentHueMin &&\n            hslColor.h <= this.currentHueMax\n        ) {\n            this.currentHue = hslColor.h;\n        } else if (\n            this.currentHueMin < 0 &&\n            hslColor.h >= 0 &&\n            hslColor.h <= 360\n        ) {\n            // For min with - (change to the other side of the circle)\n            hslColor.h = hslColor.h - 360;\n\n            if (\n                hslColor.h >= this.currentHueMin &&\n                hslColor.h <= this.currentHueMax\n            ) {\n                this.currentHue = hslColor.h;\n            }\n        }\n\n        this.currentSaturation =\n            hslColor.s >= this.currentSaturationMin &&\n            hslColor.s <= this.currentSaturationMax\n                ? hslColor.s\n                : this.currentSaturation;\n\n        this.currentLightness =\n            hslColor.l >= this.currentLightnessMin &&\n            hslColor.l <= this.currentLightnessMax\n                ? hslColor.l\n                : this.currentLightness;\n\n        // Write the value (if hue is changed to the other side of the circle return it back).\n        const hsl = {\n            h: this.currentHue,\n            s: this.currentSaturation,\n            l: this.currentLightness,\n        };\n        this.data.value = convertHslToStringHsl(hsl);\n\n        // Check the contrast ratio - set the closest accessible color to complientColor\n        // and update isUserChooseAAComplientColor.\n        const adjustableColor = hsl2hex(hsl);\n        const closestHex = findClosestAccessibleColor(\n            adjustableColor,\n            this.data.textColor,\n            this.data.contrastRatio\n        );\n\n        this.isUserChooseAAComplientColor = adjustableColor === closestHex;\n        this.complientColor = convertHslToStringHsl(hex2hsl(closestHex));\n    }\n\n    onHueChange(event): void {\n        this.convertColorToValueString({ h: event.value });\n        this.setCurrentHueInCss();\n    }\n\n    onSaturationChange(event): void {\n        // this.currentSaturation = event.value;\n        this.convertColorToValueString({ s: event.value });\n    }\n\n    onLightnessChange(event): void {\n        // this.currentLightness = event.value;\n        this.convertColorToValueString({\n            l:\n                this.currentLightnessMax -\n                event.value +\n                this.currentLightnessMin,\n        });\n    }\n\n    onColorValueChange(event): void {\n        this.convertValueStringToColor(event.value);\n    }\n\n    onSave(event): void {\n        const color = this.checkAAComplient\n            ? this.complientColor\n            : this.data.value;\n\n        // this.notify.emit({ key: this.key, value: color });\n        this.dialogRef.close(color);\n    }\n}\n",
            "properties": [
                {
                    "name": "contrastRatio",
                    "type": "PepContrastRatioType",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showAAComplient",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "type": "PepColorType",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepDateFieldOptions",
            "id": "interface-IPepDateFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "PepDateFieldType",
                    "optional": true,
                    "description": "",
                    "line": 349
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepExternalFileModel",
            "id": "interface-IPepExternalFileModel-55c7b4cbc235030b372d733c77989fd1",
            "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport type PepFileType = 'script' | 'style';\n\nexport interface IPepExternalFileModel {\n    path: string;\n    type: PepFileType;\n}\n\ndeclare let document: any;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepFileService {\n    private scripts: Map<string, { loaded: boolean; src: string }>;\n    private styles: Map<string, { loaded: boolean; src: string }>;\n\n    constructor() {\n        this.scripts = new Map<string, { loaded: boolean; src: string }>();\n        this.styles = new Map<string, { loaded: boolean; src: string }>();\n    }\n\n    loadFiles(files: IPepExternalFileModel[]): Promise<any[]> {\n        const promises: any[] = [];\n        files.forEach((file) => {\n            if (file.type === 'style') {\n                promises.push(this.loadStyle(file.path));\n            } else if (file.type === 'script') {\n                promises.push(this.loadScript(file.path));\n            }\n        });\n        return Promise.all(promises);\n    }\n\n    removeFiles(files: IPepExternalFileModel[]): void {\n        for (\n            let index = 0;\n            index < files.length &&\n            files[index].path &&\n            files[index].path.trim() !== '';\n            index++\n        ) {\n            const name = this.getFileName(files[index].path, true);\n            const element = document.getElementById(name);\n            element.parentNode.removeChild(element);\n\n            if (files[index].type === 'script' && this.scripts.has(name)) {\n                this.scripts.delete(name);\n            } else if (files[index].type === 'style' && this.styles.has(name)) {\n                this.styles.delete(name);\n            }\n        }\n    }\n\n    loadScript(path: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const name = this.getFileName(path, true);\n\n            // If the script isn't exist add it.\n            if (!this.scripts.has(name)) {\n                this.scripts.set(name, { loaded: false, src: path });\n            }\n\n            const scriptItem = this.scripts.get(name);\n\n            // Resolve if already loaded\n            if (scriptItem.loaded) {\n                resolve({\n                    script: name,\n                    loaded: true,\n                    status: 'Already Loaded',\n                });\n            } else {\n                // Load script\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = scriptItem.src;\n                script.setAttribute('id', name);\n                script.async = false;\n\n                if (script.readyState) {\n                    // IE\n                    script.onreadystatechange = () => {\n                        if (\n                            script.readyState === 'loaded' ||\n                            script.readyState === 'complete'\n                        ) {\n                            script.onreadystatechange = null;\n                            scriptItem.loaded = true;\n                            resolve({\n                                path,\n                                type: 'script',\n                                loaded: true,\n                                status: 'Loaded',\n                            });\n                        }\n                    };\n                } else {\n                    // Others\n                    script.onload = () => {\n                        scriptItem.loaded = true;\n                        resolve({\n                            path,\n                            type: 'script',\n                            loaded: true,\n                            status: 'Loaded',\n                        });\n                    };\n                }\n                script.onerror = (error: any) =>\n                    resolve({\n                        path,\n                        type: 'script',\n                        loaded: false,\n                        status: 'Loaded',\n                    });\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n        });\n    }\n\n    loadStyle(path: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const name = this.getFileName(path, true);\n\n            // If the style isn't exist add it.\n            if (!this.styles.has(name)) {\n                this.styles.set(name, { loaded: false, src: path });\n            }\n\n            const styleItem = this.styles.get(name);\n\n            // Resolve if already loaded\n            if (styleItem.loaded) {\n                resolve({\n                    path,\n                    type: 'style',\n                    loaded: true,\n                    status: 'Already Loaded',\n                });\n            } else {\n                // Load style\n                const style = document.createElement('link');\n                style.type = 'text/css';\n                style.rel = 'stylesheet';\n                style.href = styleItem.src;\n                style.media = 'all';\n                style.setAttribute('id', name);\n\n                styleItem.loaded = true;\n                resolve({\n                    path,\n                    type: 'style',\n                    loaded: true,\n                    status: 'Loaded',\n                });\n\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        });\n    }\n\n    loadFontStyle(styleId: string, href: string): void {\n        const head = document.getElementsByTagName('head')[0];\n\n        const styleElement = document.getElementById(\n            styleId\n        ) as HTMLLinkElement;\n\n        if (styleElement) {\n            styleElement.href = href;\n        } else {\n            const style = document.createElement('link');\n            style.id = styleId;\n            style.rel = 'stylesheet';\n            style.href = `${href}`;\n\n            head.appendChild(style);\n        }\n    }\n\n    getFileName(filePath: string, withExtenstion = false): string {\n        const lastIndex = withExtenstion\n            ? filePath.length - 1\n            : filePath.lastIndexOf('.');\n\n        return filePath.substr(filePath.lastIndexOf('/') + 1, lastIndex);\n    }\n\n    getFileExtension(filePath: string): string {\n        const fileSplit = filePath.split('.');\n        let fileExt = '';\n        if (fileSplit.length > 1) {\n            fileExt = fileSplit[fileSplit.length - 2];\n        }\n        return fileExt;\n    }\n\n    /* Returns true if url is valid */\n    isValidUrl(url: string): boolean {\n        /* Try creating a valid URL */\n        try {\n            const tmp = new URL(url);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    convertFromb64toBlob(\n        b64Data: any,\n        contentType = '',\n        sliceSize = 512\n    ): Blob {\n        const byteCharacters = atob(b64Data);\n        const byteArrays = [];\n\n        for (\n            let offset = 0;\n            offset < byteCharacters.length;\n            offset += sliceSize\n        ) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n\n        const blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    }\n\n    getAssetsPath(assetsDomain = ''): string {\n        const concatChar =\n            assetsDomain === '' || assetsDomain.endsWith('/') ? '' : '/';\n        return `${assetsDomain}${concatChar}assets/ngx-lib/`;\n    }\n\n    getAssetsTranslationsSuffix(): string {\n        return '.ngx-lib.json';\n    }\n\n    getAssetsTranslationsPath(assetsDomain = ''): string {\n        return `${this.getAssetsPath(assetsDomain)}i18n/`;\n    }\n\n    getAssetsImagesPath(assetsDomain = '', image = ''): string {\n        return `${this.getAssetsPath(assetsDomain)}images/${image}`;\n    }\n\n    getSvgAsImageSrc(svg: string): string {\n        const blob = new Blob([svg], { type: 'image/svg+xml' });\n        const url = URL.createObjectURL(blob);\n        return url;\n    }\n}\n",
            "properties": [
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "PepFileType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFieldBaseOptions",
            "id": "interface-IPepFieldBaseOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": true,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFieldClickEvent",
            "id": "interface-IPepFieldClickEvent-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 492
                },
                {
                    "name": "eventWhich",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 493
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 490
                },
                {
                    "name": "otherData",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 494
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 491
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFieldValueChangeEvent",
            "id": "interface-IPepFieldValueChangeEvent-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 485
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 483
                },
                {
                    "name": "lastFocusedField",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 486
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 484
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFooterStateChangeEvent",
            "id": "interface-IPepFooterStateChangeEvent-b42178fbbf3dff1c0ce2aba9efd0f698",
            "file": "projects/ngx-lib/top-bar/top-bar.model.ts",
            "type": "interface",
            "sourceCode": "export type PepFooterStateType = 'visible' | 'hidden';\n\nexport interface IPepFooterStateChangeEvent {\n    state: PepFooterStateType;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "type": "PepFooterStateType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFormFieldClickEvent",
            "id": "interface-IPepFormFieldClickEvent-6422191efd62d3a6e27dee104ecfe385",
            "file": "projects/ngx-lib/form/form.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    Input,\n    KeyValueDiffers,\n    Output,\n    EventEmitter,\n    OnChanges,\n    DoCheck,\n    Optional,\n} from '@angular/core';\nimport {\n    FormGroup,\n    FormBuilder,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { Subscription } from 'rxjs';\nimport {\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepLayoutType,\n    FIELD_TYPE,\n    PepCustomizationService,\n    UIControl,\n    UIControlField,\n    ObjectsDataRow,\n    ObjectsDataRowCell,\n    PepFieldBase,\n    PepTextboxField,\n    PepSelectField,\n    PepInternalMenuField,\n    PepQuantitySelectorField,\n    PepAddressField,\n    PepIndicatorsField,\n    PepInternalPageField,\n    PepInternalButtonField,\n    PepAttachmentField,\n    PepSignatureField,\n    PepImageField,\n    PepImagesField,\n    PepTextareaField,\n    PepRichHtmlTextareaField,\n    PepDateField,\n    PepCheckboxField,\n    PepSeparatorField,\n    PepPlaceholderField,\n    PepHorizontalAlignment,\n    PepVerticalAlignment,\n    X_ALIGNMENT_TYPE,\n    Y_ALIGNMENT_TYPE,\n    DEFAULT_VERTICAL_ALIGNMENT,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    KeyValuePair,\n    IPepOption,\n} from '@pepperi-addons/ngx-lib';\n\nexport interface IPepFormFieldValueChangeEvent {\n    id: string;\n    key: string;\n    value: string;\n    controlType?: string;\n}\nexport interface IPepFormFieldClickEvent {\n    id: string;\n    key: string;\n    value: any;\n    controlType: string;\n    fieldType?: FIELD_TYPE;\n    idType?: string;\n    which?: any;\n    editable?: boolean;\n    otherData?: any;\n}\n\n// tslint:disable-next-line: no-conflicting-lifecycle\n@Component({\n    selector: 'pep-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepFormComponent implements OnInit, DoCheck, OnChanges, OnDestroy {\n    @Input() isReport = false;\n    @Input() layout: UIControl;\n    @Input() lockEvents = false;\n    @Input() canEditObject = true;\n\n    private _data: ObjectsDataRow = null;\n    @Input()\n    set data(value: ObjectsDataRow) {\n        const shouldReload = this.shouldReloadForm || !this._data;\n        this._data = value;\n\n        if (shouldReload) {\n            this._shouldReloadForm = false;\n            this.initForm();\n        } else {\n            this.updateForm();\n        }\n    }\n\n    get data(): ObjectsDataRow {\n        return this._data;\n    }\n\n    @Input() isActive = false;\n    @Input() layoutType: PepLayoutType = 'card';\n    @Input() listType = '';\n    @Input() objectId = '0';\n    @Input() parentId = '0';\n    @Input() searchCode = '0';\n    @Input() showTitle = true;\n    @Input() firstFieldAsLink = false;\n    @Input() checkForChanges: any = null;\n    @Input() pageType = '';\n\n    @Output()\n    valueChange: EventEmitter<IPepFormFieldValueChangeEvent> = new EventEmitter<IPepFormFieldValueChangeEvent>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Output() childClick: EventEmitter<any> = new EventEmitter<any>();\n    @Output() childChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output()\n    fieldClick: EventEmitter<IPepFormFieldClickEvent> = new EventEmitter<IPepFormFieldClickEvent>();\n\n    isLocked = false;\n    formGutterSize;\n    cardGutterSize;\n    rowHeight;\n    // private lastFocusedField: any = null;\n    // private matrixIsLast = false;\n    // lastUpdatedFieldApiName: string = '';\n    form: FormGroup;\n    differ: any;\n\n    // payLoad = '';\n    private rows: Array<PepFieldBase[]> = [];\n    fields: PepFieldBase[] = [];\n    columns = 1;\n\n    private hasMenuFloatingOnOtherField = false;\n    private menuField: any;\n    private menuDataField: any;\n    private hasCampaignField: any;\n    private hasCampaignDataField: any;\n    private indicatorsField: any;\n    private indicatorsDataField: any = null;\n\n    private _shouldReloadForm = false;\n    get shouldReloadForm(): boolean {\n        return this._shouldReloadForm;\n    }\n\n    // eventServiceSub: Subscription;\n    // public jsonLib = JSON;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fb: FormBuilder,\n        differs: KeyValueDiffers,\n        private translate: TranslateService\n    ) {\n        // store the initial value to compare with\n        this.differ = differs.find({}).create();\n    }\n\n    convertXAlignToHorizontalAlign(\n        xAlign: X_ALIGNMENT_TYPE\n    ): PepHorizontalAlignment {\n        let res = DEFAULT_HORIZONTAL_ALIGNMENT;\n\n        if (\n            xAlign === X_ALIGNMENT_TYPE.None ||\n            xAlign === X_ALIGNMENT_TYPE.Left\n        ) {\n            res = 'left';\n        } else if (xAlign === X_ALIGNMENT_TYPE.Right) {\n            res = 'right';\n        } else {\n            res = 'center';\n        }\n\n        return res;\n    }\n\n    convertYAlignToVerticalAlign(\n        yAlign: Y_ALIGNMENT_TYPE\n    ): PepVerticalAlignment {\n        let res = DEFAULT_VERTICAL_ALIGNMENT;\n\n        if (\n            yAlign === Y_ALIGNMENT_TYPE.None ||\n            yAlign === Y_ALIGNMENT_TYPE.Top\n        ) {\n            res = 'top';\n        } else if (yAlign === Y_ALIGNMENT_TYPE.Bottom) {\n            res = 'bottom';\n        } else {\n            res = 'middle';\n        }\n\n        return res;\n    }\n\n    convertOptionalValues(\n        optionalValues: Array<KeyValuePair<string>>\n    ): IPepOption[] {\n        if (optionalValues && optionalValues.length > 0) {\n            return optionalValues.map((ov) => {\n                return { key: ov.Key, value: ov.Value };\n            });\n        } else {\n            return [];\n        }\n    }\n\n    convertAddressFields(\n        controlField: UIControlField,\n        addressFields: Array<ObjectsDataRowCell>,\n        canEditObject: boolean\n    ): PepFieldBase[] {\n        const fields: PepFieldBase[] = [];\n\n        addressFields.forEach((field) => {\n            let customField: PepFieldBase;\n            const placeholder = field.ApiName;\n\n            if (field.ApiName.toLowerCase().indexOf('street') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 2,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 0,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 1,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 2,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 1,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 3,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 2,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 4,\n                });\n            }\n\n            fields.push(customField);\n        });\n\n        return fields.sort((n1, n2) =>\n            n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0\n        );\n    }\n\n    isMatrixField(apiNameToCheck: string): boolean {\n        return apiNameToCheck.indexOf('Matrix') >= 0;\n    }\n\n    doesFieldHavaFloatingField(\n        controlField: UIControlField,\n        floatingField: any\n    ): boolean {\n        let hasFloatingField = false;\n        if (\n            floatingField.Layout.Y >= controlField.Layout.Y &&\n            floatingField.Layout.Y <\n                controlField.Layout.Y + controlField.Layout.Height &&\n            floatingField.Layout.X >= controlField.Layout.X &&\n            floatingField.Layout.X <\n                controlField.Layout.X + controlField.Layout.Width\n        ) {\n            hasFloatingField = true;\n        }\n\n        return hasFloatingField;\n    }\n\n    getOptionsForCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean\n    ): any {\n        if (!controlField || !dataField) {\n            return;\n        }\n\n        const placeholder =\n            controlField.ReadOnly || !canEditObject ? '' : controlField.Title;\n\n        return {\n            key: controlField.ApiName,\n            label: controlField.Title,\n            accessory: dataField.Accessory,\n            placeholder,\n            readonly: controlField.ReadOnly || !canEditObject,\n            disabled: !dataField.Enabled || !canEditObject,\n            hidden: controlField.Hidden,\n            required: controlField.Mandatory,\n            value: dataField.Value,\n            formattedValue: dataField.FormattedValue,\n            additionalValue: dataField.AdditionalValue,\n            row: controlField.Layout.Y,\n            rowSpan: controlField.Layout.Height,\n            col: controlField.Layout.X,\n            colSpan: controlField.Layout.Width,\n            xAlignment: this.convertXAlignToHorizontalAlign(\n                controlField.Layout.XAlignment\n            ),\n            yAlignment: this.convertYAlignToVerticalAlign(\n                controlField.Layout.YAlignment\n            ),\n            options: this.convertOptionalValues(dataField.OptionalValues),\n            groupFields: undefined,\n            maxFieldCharacters: controlField.MaxFieldCharacters,\n            minValue: controlField.MinValue,\n            maxValue: controlField.MaxValue,\n            // hasMenu: hasMenu,\n            // hasCampaign: hasCampaign,\n            // hasIndicators: hasIndicators,\n            textColor: dataField.TextColor,\n        };\n    }\n\n    convertToCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean,\n        menuField: any,\n        hasCampaignField: any,\n        indicatorsField: any,\n        objectId: any,\n        parentId: any,\n        searchCode: any\n    ): PepFieldBase {\n        let customField: PepFieldBase;\n        const options = this.getOptionsForCustomField(\n            controlField,\n            dataField,\n            canEditObject\n        );\n\n        if (controlField.ApiName === 'ObjectMenu') {\n            options.type = 'menu';\n            customField = new PepInternalMenuField(options);\n        } else if (\n            controlField.ApiName === 'QuantitySelector' ||\n            controlField.ApiName === 'UnitsQuantity' ||\n            controlField.ApiName.indexOf('size_') === 0\n        ) {\n            if (dataField.FieldType === FIELD_TYPE.InternalLink) {\n                options.type = 'button';\n            } else if (dataField.FieldType === FIELD_TYPE.Package) {\n                options.type = 'packageButton';\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberReal\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = true;\n            } else if (\n                dataField.FieldType ===\n                    FIELD_TYPE.NumberIntegerQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberInteger\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = false;\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberIntegerForMatrix\n            ) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = false;\n            } else if (dataField.FieldType === FIELD_TYPE.NumberRealForMatrix) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = true;\n            }\n\n            options.notificationInfo = dataField.NotificationInfo;\n            customField = new PepQuantitySelectorField(options);\n        } else {\n            // Hack need to remove this..\n            if (\n                dataField.FieldType === FIELD_TYPE.Indicators &&\n                this.isMatrixField(dataField.ApiName)\n            ) {\n                dataField.FieldType = FIELD_TYPE.InternalPage;\n            }\n\n            switch (dataField.FieldType) {\n                case FIELD_TYPE.Address: {\n                    const canEditGroupObject = controlField.ReadOnly\n                        ? false\n                        : canEditObject;\n                    options.groupFields = this.convertAddressFields(\n                        controlField,\n                        dataField.GroupFields,\n                        canEditGroupObject\n                    );\n                    customField = new PepAddressField(options);\n                    break;\n                }\n                case FIELD_TYPE.Indicators: {\n                    // options['type'] = 'indicators'; // Not needed this is PepIndicatorsField.\n                    customField = new PepIndicatorsField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalPage: {\n                    if (this.isMatrixField(controlField.ApiName)) {\n                        options.rowSpan = controlField.Layout.Height;\n                        options.objectId = objectId;\n                        options.parentId = parentId;\n                        options.searchCode = searchCode;\n\n                        customField = new PepInternalPageField(options);\n                    } else {\n                        // Not supported\n                    }\n                    break;\n                }\n                case FIELD_TYPE.Link: {\n                    options.type = 'link';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalLink:\n                case FIELD_TYPE.Button: {\n                    options.type = 'button';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Attachment: {\n                    // options.type = 'attachment';\n                    customField = new PepAttachmentField(options);\n                    break;\n                }\n                case FIELD_TYPE.Signature: {\n                    // options.type = 'signature';\n                    customField = new PepSignatureField(options);\n                    break;\n                }\n                case FIELD_TYPE.Image:\n                case FIELD_TYPE.ImageURL: {\n                    // options.type = 'image';\n                    options.menuField =\n                        menuField &&\n                        this.doesFieldHavaFloatingField(controlField, menuField)\n                            ? menuField\n                            : null;\n                    options.hasCampaignField =\n                        hasCampaignField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            hasCampaignField\n                        )\n                            ? hasCampaignField\n                            : null;\n                    options.indicatorsField =\n                        indicatorsField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            indicatorsField\n                        )\n                            ? indicatorsField\n                            : null;\n\n                    customField = new PepImageField(options);\n                    break;\n                }\n                case FIELD_TYPE.Images: {\n                    // options.type = 'images';\n                    customField = new PepImagesField(options);\n                    break;\n                }\n                case FIELD_TYPE.Email: {\n                    options.type = 'email';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Phone: {\n                    options.type = 'phone';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Duration: {\n                    options.type = 'duration';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Default:\n                case FIELD_TYPE.TextBox:\n                case FIELD_TYPE.LimitedLengthTextBox:\n                case FIELD_TYPE.TextHeader:\n                case FIELD_TYPE.CalculatedString:\n                case FIELD_TYPE.MapDataString: {\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.TextArea: {\n                    customField = new PepTextareaField(options);\n                    break;\n                }\n\n                case FIELD_TYPE.RichTextHTML: {\n                    customField = new PepRichHtmlTextareaField(options);\n                    break;\n                }\n                case FIELD_TYPE.Date:\n                case FIELD_TYPE.LimitedDate:\n                case FIELD_TYPE.CalculatedDate:\n                case FIELD_TYPE.DateAndTime: {\n                    options.type =\n                        dataField.FieldType === FIELD_TYPE.DateAndTime\n                            ? 'datetime'\n                            : 'date';\n                    customField = new PepDateField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberInteger:\n                case FIELD_TYPE.CalculatedInt:\n                case FIELD_TYPE.MapDataInt: {\n                    options.type = 'int';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Percentage: {\n                    options.type = 'percentage';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Currency: {\n                    options.type = 'currency';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberReal:\n                case FIELD_TYPE.CalculatedReal:\n                case FIELD_TYPE.MapDataReal:\n                case FIELD_TYPE.Sum:\n                case FIELD_TYPE.Totals: {\n                    options.type = 'real';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Boolean:\n                case FIELD_TYPE.CalculatedBool: {\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.BooleanText: {\n                    options.type = 'booleanText';\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.ComboBox:\n                case FIELD_TYPE.EmptyComboBox:\n                case FIELD_TYPE.MapDataDropDown: {\n                    // options.type = 'select';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.MultiTickBox:\n                case FIELD_TYPE.MultiTickBoxToComboBox:\n                case FIELD_TYPE.EmptyMultiTickBox: {\n                    options.type = 'multi';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.GuidReferenceType: {\n                    options.type = 'reference';\n                    options.referenceObjectType = dataField.ReferenceObjectType;\n                    options.referenceObjectSubType =\n                        dataField.ReferenceObjectSubType;\n                    options.referenceObjectInternalType =\n                        dataField.ReferenceObjectInternalType;\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.ListOfObjects: {\n                    options.type = 'listofobjects';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Separator: {\n                    customField = new PepSeparatorField(options);\n                    break;\n                }\n                /*\n                    case FIELD_TYPE.Images: return that.field(value);\n                */\n                case FIELD_TYPE.NumberRealQuantitySelector:\n                case FIELD_TYPE.NumberIntegerQuantitySelector: {\n                    options.type = 'qs';\n                    options.alowDecimal =\n                        dataField.FieldType ===\n                        FIELD_TYPE.NumberRealQuantitySelector;\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n                case FIELD_TYPE.Package: {\n                    options.type = 'packageButton';\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n            }\n        }\n\n        if (!customField) {\n            options.label = controlField.ApiName + ' is not supported!!!';\n            customField = new PepSeparatorField(options);\n        }\n\n        return customField;\n    }\n\n    getFieldFormattedValue(field: PepFieldBase): string {\n        let fieldFormattedValue = field.formattedValue;\n\n        // Fix for the custom check box component.\n        if (field.controlType === 'checkbox') {\n            fieldFormattedValue = fieldFormattedValue === 'true';\n        }\n\n        // Fix for the custom button component.\n        if (field.controlType === 'button') {\n            fieldFormattedValue =\n                fieldFormattedValue === '0' ? '' : fieldFormattedValue;\n        }\n\n        return fieldFormattedValue;\n    }\n\n    private toControlGroup(fields: PepFieldBase[]): FormGroup {\n        const group = {};\n        if (fields && fields.length > 0) {\n            fields.forEach((field) => {\n                if (field.groupFields && field.groupFields.length > 0) {\n                    const subGroup = {};\n\n                    field.groupFields.forEach((groupField) => {\n                        if (\n                            groupField.required &&\n                            !field.readonly &&\n                            !field.disabled\n                        ) {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.required],\n                            ];\n                        } else {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.nullValidator],\n                            ];\n                        }\n                    });\n\n                    group[field.key] = this.fb.group(subGroup);\n                } else {\n                    const validators = field.getValidators();\n                    const fieldFormattedValue = this.getFieldFormattedValue(\n                        field\n                    );\n\n                    group[field.key] = [\n                        {\n                            value: fieldFormattedValue || '',\n                            disabled: field.disabled,\n                        },\n                        validators,\n                    ];\n                }\n            });\n        }\n\n        return this.fb.group(group);\n    }\n\n    public showFormValidationMessage(): void {\n        const fields: PepFieldBase[] = this.fields;\n        let emptyMandatoryFieldsMsg = '';\n        let notValidFieldsMsg = '';\n\n        // for (let i: number = 0; i < fields.length; i++) {\n        //     let field = fields[i];\n        for (const field of fields) {\n            const formControl = this.form && this.form.get(field.key);\n\n            if (formControl) {\n                // Mandatory is empty.\n                if (\n                    field.required &&\n                    formControl.value.toString().trim().length === 0\n                ) {\n                    emptyMandatoryFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                } else if (!field.disabled && !formControl.valid) {\n                    notValidFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                }\n            }\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (emptyMandatoryFieldsMsg.length > 0) {\n            emptyMandatoryFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                emptyMandatoryFieldsMsg +\n                '</ul><br/>';\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (notValidFieldsMsg.length > 0) {\n            notValidFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                notValidFieldsMsg +\n                '</ul>';\n        }\n\n        const title = this.translate.instant('MESSAGES.TITLE_NOTICE');\n        const data = new PepDialogData({\n            title,\n            content: emptyMandatoryFieldsMsg + notValidFieldsMsg,\n        });\n        this.dialogService.openDefaultDialog(data);\n    }\n\n    ngOnInit(): void {\n        const themeVars = this.customizationService.getThemeVariables();\n        // convert rem to pixel\n        const RemToPixel = 16;\n        this.formGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_SPACEING_KEY\n            ) * RemToPixel;\n        this.cardGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_SPACEING_KEY\n            ) * RemToPixel;\n    }\n\n    ngDoCheck(): void {\n        const changes = this.differ.diff(this.data); // check for changes\n        if (changes) {\n            this.updateForm(true);\n            this.checkForChanges = new Date();\n        }\n    }\n\n    ngOnChanges(changes): void {\n        // if (changes.data && changes.data.currentValue) {\n        //     // Load changes\n        //     if (!this.shouldReloadForm && changes.data.previousValue) {\n        //         this.data = changes.data.currentValue;\n        //         this.updateForm();\n        //     } else {\n        //         this._shouldReloadForm = false;\n        //         this.initForm();\n        //     }\n        // }\n        // if (this.shouldReloadForm || !changes?.data?.previousValue) {\n        //     this._shouldReloadForm = false;\n        //     this.initForm();\n        //     this.checkForChanges = new Date();\n        // }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n        // if (this.childClick) {\n        //     this.childClick.unsubscribe();\n        // }\n        // if (this.childChange) {\n        //     this.childChange.unsubscribe();\n        // }\n        // if (this.fieldClick) {\n        //     this.fieldClick.unsubscribe();\n        // }\n    }\n\n    getUiControlFields(): Array<UIControlField> {\n        return this.layout ? this.layout.ControlFields : [];\n    }\n\n    initFieldsStructure(fields: PepFieldBase[], maxRow: number): void {\n        const themeVars = this.customizationService.getThemeVariables();\n\n        // Set form row height.\n        if (this.layoutType === 'card') {\n            const cardFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_FIELD_HEIGHT_KEY\n            );\n            this.rowHeight = cardFieldHeight;\n        } else {\n            const rowFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_HEIGHT_KEY\n            );\n            const rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY\n            );\n            this.rowHeight = rowFieldHeight + rowFieldTitleHeight;\n        }\n\n        // Create the fields structure (the fields must be sorted!!!).\n        if (fields.length > 0) {\n            // Init the layout.\n            if (\n                // this.layoutType === 'form' ||\n                this.layoutType === 'table'\n            ) {\n                this.fields = fields;\n                this.rows = [];\n\n                for (let i = 0; i <= maxRow; i++) {\n                    this.rows[i] = [];\n                }\n\n                // for (let i = 0; i < fields.length; i++) {\n                // const field = fields[i]\n                for (const field of fields) {\n                    this.rows[field.row].push(field);\n                }\n            } else {\n                const doesfieldExistIn: boolean[][] = new Array(maxRow);\n\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    doesfieldExistIn[i] = new Array(this.columns);\n\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        doesfieldExistIn[i][j] = false;\n                    }\n                }\n\n                // Run in squere (row - colspan, col - rowspan) and put true where it should.\n                // for (let index = 0; index < fields.length; index++) {\n                //     const currentField = fields[index];\n                for (const currentField of fields) {\n                    if (currentField.rowSpan > 1) {\n                        for (\n                            let row: number = currentField.row;\n                            row < currentField.row + currentField.rowSpan;\n                            row++\n                        ) {\n                            if (currentField.colSpan > 1) {\n                                for (\n                                    let col: number = currentField.col;\n                                    col <\n                                    currentField.col + currentField.colSpan;\n                                    col++\n                                ) {\n                                    if (\n                                        doesfieldExistIn.length > row &&\n                                        doesfieldExistIn[0].length > col\n                                    ) {\n                                        doesfieldExistIn[row][col] = true;\n                                    }\n                                }\n                            } else {\n                                if (\n                                    doesfieldExistIn.length > row &&\n                                    doesfieldExistIn[0].length >\n                                        currentField.col\n                                ) {\n                                    doesfieldExistIn[row][\n                                        currentField.col\n                                    ] = true;\n                                }\n                            }\n                        }\n                    } else if (currentField.colSpan > 1) {\n                        for (\n                            let col: number = currentField.col;\n                            col < currentField.col + currentField.colSpan;\n                            col++\n                        ) {\n                            if (\n                                doesfieldExistIn.length > currentField.row &&\n                                doesfieldExistIn[0].length > col\n                            ) {\n                                doesfieldExistIn[currentField.row][col] = true;\n                            }\n                        }\n                    } else {\n                        if (\n                            doesfieldExistIn.length > currentField.row &&\n                            doesfieldExistIn[0].length > currentField.col\n                        ) {\n                            doesfieldExistIn[currentField.row][\n                                currentField.col\n                            ] = true;\n                        }\n                    }\n                }\n\n                // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        if (!doesfieldExistIn[i][j]) {\n                            // Create empty field and add it to the fields list.\n                            fields.push(\n                                new PepPlaceholderField({\n                                    key: i + '_' + j,\n                                    label: '',\n                                    placeholder: '',\n                                    readonly: false,\n                                    disabled: false,\n                                    hidden: false,\n                                    required: false,\n                                    value: '',\n                                    formattedValue: '',\n                                    row: i,\n                                    rowSpan: 1,\n                                    col: j,\n                                    colSpan: 1,\n                                    order: 1,\n                                })\n                            );\n                        }\n                    }\n                }\n\n                // Sort the fields again.\n                this.fields = fields.sort((f1, f2) =>\n                    f1.row > f2.row\n                        ? 1\n                        : f1.row < f2.row\n                        ? -1\n                        : f1.col > f2.col\n                        ? 1\n                        : f1.col < f2.col\n                        ? -1\n                        : 0\n                );\n            }\n        }\n    }\n\n    setForm(isForUpdate = false): void {\n        let allFieldsAreReadOnly = true;\n\n        if (!isForUpdate) {\n            const fields = [];\n            for (const currentField of this.fields) {\n                // Add all fields except 'internalPage' type (for children).\n                if (currentField.controlType !== 'internalPage') {\n                    fields.push(currentField);\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n\n            this.form = this.toControlGroup(fields);\n        } else {\n            // Update form values if changed by calculated fields.\n            for (const currentField of this.fields) {\n                if (currentField.controlType !== 'internalPage') {\n                    if (\n                        currentField.groupFields &&\n                        currentField.groupFields.length > 0\n                    ) {\n                        // for (let j = 0; j < currentField.groupFields.length; j++) {\n                        //     let currentGroupField = currentField.groupFields[j];\n                        for (const currentGroupField of currentField.groupFields) {\n                            const fieldFormattedValue = this.getFieldFormattedValue(\n                                currentGroupField\n                            );\n                            this.customizationService.updateFormField(\n                                this.form,\n                                currentGroupField,\n                                fieldFormattedValue,\n                                currentField\n                            );\n                        }\n                    } else {\n                        const fieldFormattedValue = this.getFieldFormattedValue(\n                            currentField\n                        );\n                        // this.form.controls[currentField.key].setValue(fieldFormattedValue);\n                        this.customizationService.updateFormField(\n                            this.form,\n                            currentField,\n                            fieldFormattedValue\n                        );\n                    }\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n        }\n\n        let isFormValid = this.form?.valid;\n\n        // Change validation to true if all fields are read only.\n        if (!isFormValid && allFieldsAreReadOnly) {\n            isFormValid = true;\n        }\n\n        this.onFormValidationChanged(isFormValid);\n\n        // Set it to false to enable all fields.\n        this.isLocked = false;\n    }\n\n    initForm(): void {\n        if (this.data && this.data.Fields) {\n            const fields: PepFieldBase[] = this.convertCustomFields(\n                this.getUiControlFields(),\n                this.data.Fields\n            );\n\n            const maxRow = Math.max(\n                ...fields.map((f) => {\n                    return f.row + f.rowSpan;\n                })\n            );\n            this.columns = Math.max(\n                ...fields.map((f) => {\n                    return f.col + f.colSpan;\n                })\n            );\n\n            this.initFieldsStructure(fields, maxRow);\n            this.setForm();\n        }\n    }\n\n    private updateField(\n        customField: PepFieldBase,\n        updatedField: ObjectsDataRowCell\n    ): void {\n        const options: any = {\n            disabled: !updatedField.Enabled || !this.canEditObject,\n            readonly: !updatedField.Enabled || !this.canEditObject,\n            value: updatedField.Value,\n            additionalValue: updatedField.AdditionalValue,\n            formattedValue: updatedField.FormattedValue,\n            textColor: updatedField.TextColor,\n        };\n\n        if (customField instanceof PepQuantitySelectorField) {\n            const notificationInfo = updatedField.NotificationInfo;\n            options.notificationInfo = notificationInfo;\n        } else if (customField instanceof PepSelectField) {\n            options.options = this.convertOptionalValues(\n                updatedField.OptionalValues\n            );\n\n            if (!options.options || options.options.length === 0) {\n                options.options.push({\n                    key: options.value,\n                    value: options.formattedValue,\n                });\n            }\n        }\n\n        customField.update(options);\n\n        // if (this.lastFocusedField && this.lastFocusedField.id === customField.key) {\n        //     setTimeout(() => {\n        //         this.lastFocusedField.focus();\n        //         this.lastFocusedField = null;\n        //     }, 100);\n        // }\n    }\n\n    updateForm(cleanLastFocusedField = false): void {\n        if (this.data && this.data.Fields) {\n            for (const currentField of this.data.Fields) {\n                const customField = this.fields.filter(\n                    (f) => f.key === currentField.ApiName\n                )[0];\n                // Update all fields except 'internalPage' type (for children).\n                if (customField && customField.controlType !== 'internalPage') {\n                    // const hasFocus = this.lastFocusedField && this.lastFocusedField.id === customField.key;\n                    // customField.updateField(currentField, this.canEditObject, hasFocus ? this.lastFocusedField : null);\n                    this.updateField(customField, currentField);\n\n                    // Update the group fields.\n                    if (\n                        customField.controlType === 'address' &&\n                        currentField.GroupFields\n                    ) {\n                        // for (let j = 0; j < currentField.GroupFields.length; j++) {\n                        // let currentGroupField = currentField.GroupFields[j];\n                        for (const currentGroupField of currentField.GroupFields) {\n                            currentGroupField.Enabled = !currentField.Enabled\n                                ? false\n                                : currentGroupField.Enabled;\n\n                            const customGroupField = customField.groupFields.filter(\n                                (f) => f.key === currentGroupField.ApiName\n                            )[0];\n                            // const hasGroupFocus = this.lastFocusedField && this.lastFocusedField.id === customGroupField.key;\n                            // customGroupField.updateField(currentGroupField, this.canEditObject, hasGroupFocus ? this.lastFocusedField : null);\n                            this.updateField(\n                                customGroupField,\n                                currentGroupField\n                            );\n                        }\n                    }\n                }\n            }\n\n            this.setForm(true);\n\n            // if (cleanLastFocusedField) {\n            //     // Clean the last focused field.\n            //     this.lastFocusedField = null;\n            //     console.log(this.lastFocusedField);\n            // }\n        }\n    }\n\n    public ReloadForm(): void {\n        this._shouldReloadForm = true;\n    }\n\n    // onSubmit() {\n    //     if (this.form.valid) {\n    //         this.payLoad = JSON.stringify(this.form.value);\n    //         //this.submitted.emit(this.form.value);\n    //     }\n    // }\n\n    private getFormControlById(key: string): AbstractControl | null {\n        let formControl = null;\n\n        this.fields.forEach((field) => {\n            if (field.key === key) {\n                formControl = this.form.get(field.key);\n                return;\n            } else if (field.groupFields && field.groupFields.length > 0) {\n                field.groupFields.forEach((groupField) => {\n                    if (groupField.key === key) {\n                        formControl = this.form.get(\n                            field.key + '.' + groupField.key\n                        );\n                        return;\n                    }\n                });\n            }\n        });\n\n        return formControl;\n    }\n\n    private setSpecialFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): void {\n        // let cf;\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (cf.ApiName === 'ObjectMenu') {\n                this.menuField = cf;\n            } else if (cf.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignField = cf;\n            } else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsField = cf;\n            }\n        }\n\n        // let df;\n        // for (let index = 0; index < dataFields.length; index++) {\n        //     df = dataFields[index];\n        for (const df of dataFields) {\n            if (df.ApiName === 'ObjectMenu') {\n                this.menuDataField = df;\n            } else if (df.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignDataField = df;\n            } else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsDataField = df;\n            }\n        }\n\n        if (this.menuField && this.menuDataField) {\n            this.menuDataField.Layout = this.menuField.Layout;\n        }\n\n        if (this.hasCampaignField && this.hasCampaignDataField) {\n            this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;\n        }\n\n        if (this.indicatorsField && this.indicatorsDataField) {\n            this.indicatorsDataField.Layout = this.indicatorsField.Layout;\n        }\n\n        // Check if menu is floating on other field.\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (this.menuField && cf.ApiName !== 'ObjectMenu') {\n                this.hasMenuFloatingOnOtherField = this.doesFieldHavaFloatingField(\n                    cf,\n                    this.menuField\n                );\n\n                if (this.hasMenuFloatingOnOtherField) {\n                    break;\n                }\n            }\n        }\n    }\n\n    convertCustomFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): PepFieldBase[] {\n        if (this.layoutType !== 'table') {\n            this.setSpecialFields(controlFields, dataFields);\n        } else {\n            // Hack: convert to center alignment if table view & special fields)\n            controlFields.forEach((field, index) => {\n                if (\n                    field.ApiName === 'UnitsQuantity' ||\n                    field.ApiName === 'QuantitySelector' ||\n                    field.ApiName === 'ObjectMenu' ||\n                    field.FieldType === FIELD_TYPE.Image ||\n                    field.FieldType === FIELD_TYPE.ImageURL ||\n                    field.FieldType === FIELD_TYPE.Indicators ||\n                    field.FieldType === FIELD_TYPE.Boolean ||\n                    field.FieldType === FIELD_TYPE.CalculatedBool ||\n                    field.FieldType === FIELD_TYPE.Signature ||\n                    field.FieldType ===\n                        FIELD_TYPE.NumberIntegerQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.Package ||\n                    field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                    field.FieldType === FIELD_TYPE.NumberRealForMatrix\n                ) {\n                    field.Layout.XAlignment = X_ALIGNMENT_TYPE.Center;\n                }\n            });\n        }\n\n        const fields: PepFieldBase[] = [];\n\n        // const matrixFields = controlFields.filter((cf) =>\n        //     this.isMatrixField(cf.ApiName)\n        // ).length;\n        // let matrixAlreadyPlaced = false;\n\n        controlFields.forEach((field, index) => {\n            const dataField = dataFields.filter(\n                (df) => df.ApiName === field.ApiName\n            )[0];\n\n            if (!dataField) {\n                return;\n            }\n\n            // If current view is not table view and those fields are special.\n            if (\n                this.layoutType !== 'table' &&\n                ((this.hasMenuFloatingOnOtherField &&\n                    this.menuField &&\n                    this.menuField.ApiName === field.ApiName) ||\n                    (this.indicatorsField &&\n                        this.indicatorsField.ApiName === field.ApiName) ||\n                    (this.hasCampaignField &&\n                        this.hasCampaignField.ApiName === field.ApiName))\n            ) {\n                return;\n            }\n\n            // Remove this. (fix two matrix into one)\n            // if (matrixFields > 0 && this.isMatrixField(field.ApiName)) {\n            //     if (matrixFields > 1 && matrixAlreadyPlaced) {\n            //         return;\n            //     }\n\n            //     matrixAlreadyPlaced = true;\n\n            //     if (matrixFields > 1) {\n            //         this.matrixIsLast =\n            //             controlFields.length >= 2\n            //                 ? controlFields[controlFields.length - 2]\n            //                     .ApiName === field.ApiName\n            //                 : false;\n            //     } else {\n            //         this.matrixIsLast =\n            //             controlFields[controlFields.length - 1].ApiName ===\n            //             field.ApiName;\n            //     }\n            // }\n\n            // Set type to link\n            if (this.firstFieldAsLink && index === 0) {\n                dataField.FieldType = FIELD_TYPE.InternalLink;\n                dataField.Value = this.getInternalLinkHref();\n            } else if (\n                dataField.Value.length > 0 &&\n                (field.FieldType === FIELD_TYPE.ReferenceType ||\n                    field.FieldType === FIELD_TYPE.GuidReferenceType)\n            ) {\n                const transactionUrl =\n                    this.data.MainAction === '2'\n                        ? 'transactions/scope_items/'\n                        : 'transactions/cart/';\n                dataField.Value = transactionUrl + dataField.Value;\n            }\n\n            if (field.ApiName === 'ObjectMenu') {\n                dataField.Enabled = true;\n                // HACK : Until \"Enabled\" returns from the server, we set PepMenu to be\n                //        Disabled in cart on regular items and not campign items.\n            }\n            const customField: PepFieldBase = this.convertToCustomField(\n                field,\n                dataField,\n                this.canEditObject,\n                this.menuDataField,\n                this.hasCampaignDataField,\n                this.indicatorsDataField,\n                this.objectId,\n                this.parentId,\n                this.searchCode\n            );\n\n            fields.push(customField);\n        });\n\n        return fields.sort((f1, f2) =>\n            f1.row > f2.row\n                ? 1\n                : f1.row < f2.row\n                ? -1\n                : f1.col > f2.col\n                ? 1\n                : f1.col < f2.col\n                ? -1\n                : 0\n        );\n    }\n\n    onValueChanged(event: IPepFieldValueChangeEvent): void {\n        this.onFormValidationChanged(this.form.valid);\n\n        const formControl = this.getFormControlById(event.key);\n\n        const isValid = formControl ? formControl.valid : true;\n        // const isValid = true;\n\n        if (isValid) {\n            // Set it to false to disable all fields.\n            if (this.layoutType === 'form') {\n                this.isLocked = true;\n            }\n\n            // Update the current field value.\n            const currentField = this.fields.find((f) => f.key === event.key);\n            if (currentField) {\n                currentField.formattedValue = currentField.value = event.value;\n            }\n\n            // this.lastFocusedField = event.lastFocusedField;\n\n            this.valueChange.emit({\n                id: this.data.UID.toString(),\n                key: event.key,\n                value: event.value,\n                controlType: event.controlType,\n            });\n        }\n    }\n\n    onChildClicked(childClick: any): void {\n        this.childClick.emit(childClick);\n    }\n\n    onChildChanged(childChange: any): void {\n        this.childChange.emit(childChange);\n    }\n\n    onFormValidationChanged(formValidationChange: any): void {\n        // if (this.layoutType === 'form' || this.layoutType === 'card') {\n        this.formValidationChange.emit(formValidationChange);\n        // }\n    }\n\n    onClick(fieldClickEvent: IPepFieldClickEvent): void {\n        const clickedUiControlField = this.data.Fields.filter(\n            (f) => f.ApiName === fieldClickEvent.key\n        )[0];\n        const idType = this.data.Type ? this.data.Type.toString() : '';\n\n        if (clickedUiControlField) {\n            if (\n                clickedUiControlField.FieldType === FIELD_TYPE.GuidReferenceType\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else if (\n                clickedUiControlField.FieldType === FIELD_TYPE.ListOfObjects\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            }\n        } else {\n            // For other api names (like enter children etc).\n            this.fieldClick.emit({\n                id: this.data.UID.toString(),\n                key: fieldClickEvent.key,\n                idType,\n                which: fieldClickEvent.eventWhich,\n                value: fieldClickEvent.value,\n                controlType: fieldClickEvent.controlType,\n                otherData: fieldClickEvent.otherData,\n            });\n        }\n    }\n\n    getInternalLinkHref(): string {\n        let hrefStr = '';\n        const uid = this.data.UID;\n        const transactionUrl =\n            this.data.MainAction === '2'\n                ? 'transactions/scope_items/'\n                : 'transactions/cart/';\n        // let isBuyer = sessionStorage.getItem('userRole') == 'Buyer' ? true : false;\n\n        if (this.listType === 'all_activities') {\n            hrefStr =\n                this.data.Type === 0\n                    ? transactionUrl + uid\n                    : 'activities/details/' + uid;\n        } else if (this.listType === 'accounts') {\n            hrefStr = 'accounts/home_page/' + uid;\n        }\n\n        return hrefStr;\n    }\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "editable",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "fieldType",
                    "type": "FIELD_TYPE",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "idType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "otherData",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "which",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepFormFieldValueChangeEvent",
            "id": "interface-IPepFormFieldValueChangeEvent-6422191efd62d3a6e27dee104ecfe385",
            "file": "projects/ngx-lib/form/form.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    Input,\n    KeyValueDiffers,\n    Output,\n    EventEmitter,\n    OnChanges,\n    DoCheck,\n    Optional,\n} from '@angular/core';\nimport {\n    FormGroup,\n    FormBuilder,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { Subscription } from 'rxjs';\nimport {\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepLayoutType,\n    FIELD_TYPE,\n    PepCustomizationService,\n    UIControl,\n    UIControlField,\n    ObjectsDataRow,\n    ObjectsDataRowCell,\n    PepFieldBase,\n    PepTextboxField,\n    PepSelectField,\n    PepInternalMenuField,\n    PepQuantitySelectorField,\n    PepAddressField,\n    PepIndicatorsField,\n    PepInternalPageField,\n    PepInternalButtonField,\n    PepAttachmentField,\n    PepSignatureField,\n    PepImageField,\n    PepImagesField,\n    PepTextareaField,\n    PepRichHtmlTextareaField,\n    PepDateField,\n    PepCheckboxField,\n    PepSeparatorField,\n    PepPlaceholderField,\n    PepHorizontalAlignment,\n    PepVerticalAlignment,\n    X_ALIGNMENT_TYPE,\n    Y_ALIGNMENT_TYPE,\n    DEFAULT_VERTICAL_ALIGNMENT,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    KeyValuePair,\n    IPepOption,\n} from '@pepperi-addons/ngx-lib';\n\nexport interface IPepFormFieldValueChangeEvent {\n    id: string;\n    key: string;\n    value: string;\n    controlType?: string;\n}\nexport interface IPepFormFieldClickEvent {\n    id: string;\n    key: string;\n    value: any;\n    controlType: string;\n    fieldType?: FIELD_TYPE;\n    idType?: string;\n    which?: any;\n    editable?: boolean;\n    otherData?: any;\n}\n\n// tslint:disable-next-line: no-conflicting-lifecycle\n@Component({\n    selector: 'pep-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepFormComponent implements OnInit, DoCheck, OnChanges, OnDestroy {\n    @Input() isReport = false;\n    @Input() layout: UIControl;\n    @Input() lockEvents = false;\n    @Input() canEditObject = true;\n\n    private _data: ObjectsDataRow = null;\n    @Input()\n    set data(value: ObjectsDataRow) {\n        const shouldReload = this.shouldReloadForm || !this._data;\n        this._data = value;\n\n        if (shouldReload) {\n            this._shouldReloadForm = false;\n            this.initForm();\n        } else {\n            this.updateForm();\n        }\n    }\n\n    get data(): ObjectsDataRow {\n        return this._data;\n    }\n\n    @Input() isActive = false;\n    @Input() layoutType: PepLayoutType = 'card';\n    @Input() listType = '';\n    @Input() objectId = '0';\n    @Input() parentId = '0';\n    @Input() searchCode = '0';\n    @Input() showTitle = true;\n    @Input() firstFieldAsLink = false;\n    @Input() checkForChanges: any = null;\n    @Input() pageType = '';\n\n    @Output()\n    valueChange: EventEmitter<IPepFormFieldValueChangeEvent> = new EventEmitter<IPepFormFieldValueChangeEvent>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Output() childClick: EventEmitter<any> = new EventEmitter<any>();\n    @Output() childChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output()\n    fieldClick: EventEmitter<IPepFormFieldClickEvent> = new EventEmitter<IPepFormFieldClickEvent>();\n\n    isLocked = false;\n    formGutterSize;\n    cardGutterSize;\n    rowHeight;\n    // private lastFocusedField: any = null;\n    // private matrixIsLast = false;\n    // lastUpdatedFieldApiName: string = '';\n    form: FormGroup;\n    differ: any;\n\n    // payLoad = '';\n    private rows: Array<PepFieldBase[]> = [];\n    fields: PepFieldBase[] = [];\n    columns = 1;\n\n    private hasMenuFloatingOnOtherField = false;\n    private menuField: any;\n    private menuDataField: any;\n    private hasCampaignField: any;\n    private hasCampaignDataField: any;\n    private indicatorsField: any;\n    private indicatorsDataField: any = null;\n\n    private _shouldReloadForm = false;\n    get shouldReloadForm(): boolean {\n        return this._shouldReloadForm;\n    }\n\n    // eventServiceSub: Subscription;\n    // public jsonLib = JSON;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fb: FormBuilder,\n        differs: KeyValueDiffers,\n        private translate: TranslateService\n    ) {\n        // store the initial value to compare with\n        this.differ = differs.find({}).create();\n    }\n\n    convertXAlignToHorizontalAlign(\n        xAlign: X_ALIGNMENT_TYPE\n    ): PepHorizontalAlignment {\n        let res = DEFAULT_HORIZONTAL_ALIGNMENT;\n\n        if (\n            xAlign === X_ALIGNMENT_TYPE.None ||\n            xAlign === X_ALIGNMENT_TYPE.Left\n        ) {\n            res = 'left';\n        } else if (xAlign === X_ALIGNMENT_TYPE.Right) {\n            res = 'right';\n        } else {\n            res = 'center';\n        }\n\n        return res;\n    }\n\n    convertYAlignToVerticalAlign(\n        yAlign: Y_ALIGNMENT_TYPE\n    ): PepVerticalAlignment {\n        let res = DEFAULT_VERTICAL_ALIGNMENT;\n\n        if (\n            yAlign === Y_ALIGNMENT_TYPE.None ||\n            yAlign === Y_ALIGNMENT_TYPE.Top\n        ) {\n            res = 'top';\n        } else if (yAlign === Y_ALIGNMENT_TYPE.Bottom) {\n            res = 'bottom';\n        } else {\n            res = 'middle';\n        }\n\n        return res;\n    }\n\n    convertOptionalValues(\n        optionalValues: Array<KeyValuePair<string>>\n    ): IPepOption[] {\n        if (optionalValues && optionalValues.length > 0) {\n            return optionalValues.map((ov) => {\n                return { key: ov.Key, value: ov.Value };\n            });\n        } else {\n            return [];\n        }\n    }\n\n    convertAddressFields(\n        controlField: UIControlField,\n        addressFields: Array<ObjectsDataRowCell>,\n        canEditObject: boolean\n    ): PepFieldBase[] {\n        const fields: PepFieldBase[] = [];\n\n        addressFields.forEach((field) => {\n            let customField: PepFieldBase;\n            const placeholder = field.ApiName;\n\n            if (field.ApiName.toLowerCase().indexOf('street') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 2,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 0,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 1,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 2,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 1,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 3,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 2,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 4,\n                });\n            }\n\n            fields.push(customField);\n        });\n\n        return fields.sort((n1, n2) =>\n            n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0\n        );\n    }\n\n    isMatrixField(apiNameToCheck: string): boolean {\n        return apiNameToCheck.indexOf('Matrix') >= 0;\n    }\n\n    doesFieldHavaFloatingField(\n        controlField: UIControlField,\n        floatingField: any\n    ): boolean {\n        let hasFloatingField = false;\n        if (\n            floatingField.Layout.Y >= controlField.Layout.Y &&\n            floatingField.Layout.Y <\n                controlField.Layout.Y + controlField.Layout.Height &&\n            floatingField.Layout.X >= controlField.Layout.X &&\n            floatingField.Layout.X <\n                controlField.Layout.X + controlField.Layout.Width\n        ) {\n            hasFloatingField = true;\n        }\n\n        return hasFloatingField;\n    }\n\n    getOptionsForCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean\n    ): any {\n        if (!controlField || !dataField) {\n            return;\n        }\n\n        const placeholder =\n            controlField.ReadOnly || !canEditObject ? '' : controlField.Title;\n\n        return {\n            key: controlField.ApiName,\n            label: controlField.Title,\n            accessory: dataField.Accessory,\n            placeholder,\n            readonly: controlField.ReadOnly || !canEditObject,\n            disabled: !dataField.Enabled || !canEditObject,\n            hidden: controlField.Hidden,\n            required: controlField.Mandatory,\n            value: dataField.Value,\n            formattedValue: dataField.FormattedValue,\n            additionalValue: dataField.AdditionalValue,\n            row: controlField.Layout.Y,\n            rowSpan: controlField.Layout.Height,\n            col: controlField.Layout.X,\n            colSpan: controlField.Layout.Width,\n            xAlignment: this.convertXAlignToHorizontalAlign(\n                controlField.Layout.XAlignment\n            ),\n            yAlignment: this.convertYAlignToVerticalAlign(\n                controlField.Layout.YAlignment\n            ),\n            options: this.convertOptionalValues(dataField.OptionalValues),\n            groupFields: undefined,\n            maxFieldCharacters: controlField.MaxFieldCharacters,\n            minValue: controlField.MinValue,\n            maxValue: controlField.MaxValue,\n            // hasMenu: hasMenu,\n            // hasCampaign: hasCampaign,\n            // hasIndicators: hasIndicators,\n            textColor: dataField.TextColor,\n        };\n    }\n\n    convertToCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean,\n        menuField: any,\n        hasCampaignField: any,\n        indicatorsField: any,\n        objectId: any,\n        parentId: any,\n        searchCode: any\n    ): PepFieldBase {\n        let customField: PepFieldBase;\n        const options = this.getOptionsForCustomField(\n            controlField,\n            dataField,\n            canEditObject\n        );\n\n        if (controlField.ApiName === 'ObjectMenu') {\n            options.type = 'menu';\n            customField = new PepInternalMenuField(options);\n        } else if (\n            controlField.ApiName === 'QuantitySelector' ||\n            controlField.ApiName === 'UnitsQuantity' ||\n            controlField.ApiName.indexOf('size_') === 0\n        ) {\n            if (dataField.FieldType === FIELD_TYPE.InternalLink) {\n                options.type = 'button';\n            } else if (dataField.FieldType === FIELD_TYPE.Package) {\n                options.type = 'packageButton';\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberReal\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = true;\n            } else if (\n                dataField.FieldType ===\n                    FIELD_TYPE.NumberIntegerQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberInteger\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = false;\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberIntegerForMatrix\n            ) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = false;\n            } else if (dataField.FieldType === FIELD_TYPE.NumberRealForMatrix) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = true;\n            }\n\n            options.notificationInfo = dataField.NotificationInfo;\n            customField = new PepQuantitySelectorField(options);\n        } else {\n            // Hack need to remove this..\n            if (\n                dataField.FieldType === FIELD_TYPE.Indicators &&\n                this.isMatrixField(dataField.ApiName)\n            ) {\n                dataField.FieldType = FIELD_TYPE.InternalPage;\n            }\n\n            switch (dataField.FieldType) {\n                case FIELD_TYPE.Address: {\n                    const canEditGroupObject = controlField.ReadOnly\n                        ? false\n                        : canEditObject;\n                    options.groupFields = this.convertAddressFields(\n                        controlField,\n                        dataField.GroupFields,\n                        canEditGroupObject\n                    );\n                    customField = new PepAddressField(options);\n                    break;\n                }\n                case FIELD_TYPE.Indicators: {\n                    // options['type'] = 'indicators'; // Not needed this is PepIndicatorsField.\n                    customField = new PepIndicatorsField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalPage: {\n                    if (this.isMatrixField(controlField.ApiName)) {\n                        options.rowSpan = controlField.Layout.Height;\n                        options.objectId = objectId;\n                        options.parentId = parentId;\n                        options.searchCode = searchCode;\n\n                        customField = new PepInternalPageField(options);\n                    } else {\n                        // Not supported\n                    }\n                    break;\n                }\n                case FIELD_TYPE.Link: {\n                    options.type = 'link';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalLink:\n                case FIELD_TYPE.Button: {\n                    options.type = 'button';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Attachment: {\n                    // options.type = 'attachment';\n                    customField = new PepAttachmentField(options);\n                    break;\n                }\n                case FIELD_TYPE.Signature: {\n                    // options.type = 'signature';\n                    customField = new PepSignatureField(options);\n                    break;\n                }\n                case FIELD_TYPE.Image:\n                case FIELD_TYPE.ImageURL: {\n                    // options.type = 'image';\n                    options.menuField =\n                        menuField &&\n                        this.doesFieldHavaFloatingField(controlField, menuField)\n                            ? menuField\n                            : null;\n                    options.hasCampaignField =\n                        hasCampaignField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            hasCampaignField\n                        )\n                            ? hasCampaignField\n                            : null;\n                    options.indicatorsField =\n                        indicatorsField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            indicatorsField\n                        )\n                            ? indicatorsField\n                            : null;\n\n                    customField = new PepImageField(options);\n                    break;\n                }\n                case FIELD_TYPE.Images: {\n                    // options.type = 'images';\n                    customField = new PepImagesField(options);\n                    break;\n                }\n                case FIELD_TYPE.Email: {\n                    options.type = 'email';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Phone: {\n                    options.type = 'phone';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Duration: {\n                    options.type = 'duration';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Default:\n                case FIELD_TYPE.TextBox:\n                case FIELD_TYPE.LimitedLengthTextBox:\n                case FIELD_TYPE.TextHeader:\n                case FIELD_TYPE.CalculatedString:\n                case FIELD_TYPE.MapDataString: {\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.TextArea: {\n                    customField = new PepTextareaField(options);\n                    break;\n                }\n\n                case FIELD_TYPE.RichTextHTML: {\n                    customField = new PepRichHtmlTextareaField(options);\n                    break;\n                }\n                case FIELD_TYPE.Date:\n                case FIELD_TYPE.LimitedDate:\n                case FIELD_TYPE.CalculatedDate:\n                case FIELD_TYPE.DateAndTime: {\n                    options.type =\n                        dataField.FieldType === FIELD_TYPE.DateAndTime\n                            ? 'datetime'\n                            : 'date';\n                    customField = new PepDateField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberInteger:\n                case FIELD_TYPE.CalculatedInt:\n                case FIELD_TYPE.MapDataInt: {\n                    options.type = 'int';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Percentage: {\n                    options.type = 'percentage';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Currency: {\n                    options.type = 'currency';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberReal:\n                case FIELD_TYPE.CalculatedReal:\n                case FIELD_TYPE.MapDataReal:\n                case FIELD_TYPE.Sum:\n                case FIELD_TYPE.Totals: {\n                    options.type = 'real';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Boolean:\n                case FIELD_TYPE.CalculatedBool: {\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.BooleanText: {\n                    options.type = 'booleanText';\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.ComboBox:\n                case FIELD_TYPE.EmptyComboBox:\n                case FIELD_TYPE.MapDataDropDown: {\n                    // options.type = 'select';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.MultiTickBox:\n                case FIELD_TYPE.MultiTickBoxToComboBox:\n                case FIELD_TYPE.EmptyMultiTickBox: {\n                    options.type = 'multi';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.GuidReferenceType: {\n                    options.type = 'reference';\n                    options.referenceObjectType = dataField.ReferenceObjectType;\n                    options.referenceObjectSubType =\n                        dataField.ReferenceObjectSubType;\n                    options.referenceObjectInternalType =\n                        dataField.ReferenceObjectInternalType;\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.ListOfObjects: {\n                    options.type = 'listofobjects';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Separator: {\n                    customField = new PepSeparatorField(options);\n                    break;\n                }\n                /*\n                    case FIELD_TYPE.Images: return that.field(value);\n                */\n                case FIELD_TYPE.NumberRealQuantitySelector:\n                case FIELD_TYPE.NumberIntegerQuantitySelector: {\n                    options.type = 'qs';\n                    options.alowDecimal =\n                        dataField.FieldType ===\n                        FIELD_TYPE.NumberRealQuantitySelector;\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n                case FIELD_TYPE.Package: {\n                    options.type = 'packageButton';\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n            }\n        }\n\n        if (!customField) {\n            options.label = controlField.ApiName + ' is not supported!!!';\n            customField = new PepSeparatorField(options);\n        }\n\n        return customField;\n    }\n\n    getFieldFormattedValue(field: PepFieldBase): string {\n        let fieldFormattedValue = field.formattedValue;\n\n        // Fix for the custom check box component.\n        if (field.controlType === 'checkbox') {\n            fieldFormattedValue = fieldFormattedValue === 'true';\n        }\n\n        // Fix for the custom button component.\n        if (field.controlType === 'button') {\n            fieldFormattedValue =\n                fieldFormattedValue === '0' ? '' : fieldFormattedValue;\n        }\n\n        return fieldFormattedValue;\n    }\n\n    private toControlGroup(fields: PepFieldBase[]): FormGroup {\n        const group = {};\n        if (fields && fields.length > 0) {\n            fields.forEach((field) => {\n                if (field.groupFields && field.groupFields.length > 0) {\n                    const subGroup = {};\n\n                    field.groupFields.forEach((groupField) => {\n                        if (\n                            groupField.required &&\n                            !field.readonly &&\n                            !field.disabled\n                        ) {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.required],\n                            ];\n                        } else {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.nullValidator],\n                            ];\n                        }\n                    });\n\n                    group[field.key] = this.fb.group(subGroup);\n                } else {\n                    const validators = field.getValidators();\n                    const fieldFormattedValue = this.getFieldFormattedValue(\n                        field\n                    );\n\n                    group[field.key] = [\n                        {\n                            value: fieldFormattedValue || '',\n                            disabled: field.disabled,\n                        },\n                        validators,\n                    ];\n                }\n            });\n        }\n\n        return this.fb.group(group);\n    }\n\n    public showFormValidationMessage(): void {\n        const fields: PepFieldBase[] = this.fields;\n        let emptyMandatoryFieldsMsg = '';\n        let notValidFieldsMsg = '';\n\n        // for (let i: number = 0; i < fields.length; i++) {\n        //     let field = fields[i];\n        for (const field of fields) {\n            const formControl = this.form && this.form.get(field.key);\n\n            if (formControl) {\n                // Mandatory is empty.\n                if (\n                    field.required &&\n                    formControl.value.toString().trim().length === 0\n                ) {\n                    emptyMandatoryFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                } else if (!field.disabled && !formControl.valid) {\n                    notValidFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                }\n            }\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (emptyMandatoryFieldsMsg.length > 0) {\n            emptyMandatoryFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                emptyMandatoryFieldsMsg +\n                '</ul><br/>';\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (notValidFieldsMsg.length > 0) {\n            notValidFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                notValidFieldsMsg +\n                '</ul>';\n        }\n\n        const title = this.translate.instant('MESSAGES.TITLE_NOTICE');\n        const data = new PepDialogData({\n            title,\n            content: emptyMandatoryFieldsMsg + notValidFieldsMsg,\n        });\n        this.dialogService.openDefaultDialog(data);\n    }\n\n    ngOnInit(): void {\n        const themeVars = this.customizationService.getThemeVariables();\n        // convert rem to pixel\n        const RemToPixel = 16;\n        this.formGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_SPACEING_KEY\n            ) * RemToPixel;\n        this.cardGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_SPACEING_KEY\n            ) * RemToPixel;\n    }\n\n    ngDoCheck(): void {\n        const changes = this.differ.diff(this.data); // check for changes\n        if (changes) {\n            this.updateForm(true);\n            this.checkForChanges = new Date();\n        }\n    }\n\n    ngOnChanges(changes): void {\n        // if (changes.data && changes.data.currentValue) {\n        //     // Load changes\n        //     if (!this.shouldReloadForm && changes.data.previousValue) {\n        //         this.data = changes.data.currentValue;\n        //         this.updateForm();\n        //     } else {\n        //         this._shouldReloadForm = false;\n        //         this.initForm();\n        //     }\n        // }\n        // if (this.shouldReloadForm || !changes?.data?.previousValue) {\n        //     this._shouldReloadForm = false;\n        //     this.initForm();\n        //     this.checkForChanges = new Date();\n        // }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n        // if (this.childClick) {\n        //     this.childClick.unsubscribe();\n        // }\n        // if (this.childChange) {\n        //     this.childChange.unsubscribe();\n        // }\n        // if (this.fieldClick) {\n        //     this.fieldClick.unsubscribe();\n        // }\n    }\n\n    getUiControlFields(): Array<UIControlField> {\n        return this.layout ? this.layout.ControlFields : [];\n    }\n\n    initFieldsStructure(fields: PepFieldBase[], maxRow: number): void {\n        const themeVars = this.customizationService.getThemeVariables();\n\n        // Set form row height.\n        if (this.layoutType === 'card') {\n            const cardFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_FIELD_HEIGHT_KEY\n            );\n            this.rowHeight = cardFieldHeight;\n        } else {\n            const rowFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_HEIGHT_KEY\n            );\n            const rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY\n            );\n            this.rowHeight = rowFieldHeight + rowFieldTitleHeight;\n        }\n\n        // Create the fields structure (the fields must be sorted!!!).\n        if (fields.length > 0) {\n            // Init the layout.\n            if (\n                // this.layoutType === 'form' ||\n                this.layoutType === 'table'\n            ) {\n                this.fields = fields;\n                this.rows = [];\n\n                for (let i = 0; i <= maxRow; i++) {\n                    this.rows[i] = [];\n                }\n\n                // for (let i = 0; i < fields.length; i++) {\n                // const field = fields[i]\n                for (const field of fields) {\n                    this.rows[field.row].push(field);\n                }\n            } else {\n                const doesfieldExistIn: boolean[][] = new Array(maxRow);\n\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    doesfieldExistIn[i] = new Array(this.columns);\n\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        doesfieldExistIn[i][j] = false;\n                    }\n                }\n\n                // Run in squere (row - colspan, col - rowspan) and put true where it should.\n                // for (let index = 0; index < fields.length; index++) {\n                //     const currentField = fields[index];\n                for (const currentField of fields) {\n                    if (currentField.rowSpan > 1) {\n                        for (\n                            let row: number = currentField.row;\n                            row < currentField.row + currentField.rowSpan;\n                            row++\n                        ) {\n                            if (currentField.colSpan > 1) {\n                                for (\n                                    let col: number = currentField.col;\n                                    col <\n                                    currentField.col + currentField.colSpan;\n                                    col++\n                                ) {\n                                    if (\n                                        doesfieldExistIn.length > row &&\n                                        doesfieldExistIn[0].length > col\n                                    ) {\n                                        doesfieldExistIn[row][col] = true;\n                                    }\n                                }\n                            } else {\n                                if (\n                                    doesfieldExistIn.length > row &&\n                                    doesfieldExistIn[0].length >\n                                        currentField.col\n                                ) {\n                                    doesfieldExistIn[row][\n                                        currentField.col\n                                    ] = true;\n                                }\n                            }\n                        }\n                    } else if (currentField.colSpan > 1) {\n                        for (\n                            let col: number = currentField.col;\n                            col < currentField.col + currentField.colSpan;\n                            col++\n                        ) {\n                            if (\n                                doesfieldExistIn.length > currentField.row &&\n                                doesfieldExistIn[0].length > col\n                            ) {\n                                doesfieldExistIn[currentField.row][col] = true;\n                            }\n                        }\n                    } else {\n                        if (\n                            doesfieldExistIn.length > currentField.row &&\n                            doesfieldExistIn[0].length > currentField.col\n                        ) {\n                            doesfieldExistIn[currentField.row][\n                                currentField.col\n                            ] = true;\n                        }\n                    }\n                }\n\n                // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        if (!doesfieldExistIn[i][j]) {\n                            // Create empty field and add it to the fields list.\n                            fields.push(\n                                new PepPlaceholderField({\n                                    key: i + '_' + j,\n                                    label: '',\n                                    placeholder: '',\n                                    readonly: false,\n                                    disabled: false,\n                                    hidden: false,\n                                    required: false,\n                                    value: '',\n                                    formattedValue: '',\n                                    row: i,\n                                    rowSpan: 1,\n                                    col: j,\n                                    colSpan: 1,\n                                    order: 1,\n                                })\n                            );\n                        }\n                    }\n                }\n\n                // Sort the fields again.\n                this.fields = fields.sort((f1, f2) =>\n                    f1.row > f2.row\n                        ? 1\n                        : f1.row < f2.row\n                        ? -1\n                        : f1.col > f2.col\n                        ? 1\n                        : f1.col < f2.col\n                        ? -1\n                        : 0\n                );\n            }\n        }\n    }\n\n    setForm(isForUpdate = false): void {\n        let allFieldsAreReadOnly = true;\n\n        if (!isForUpdate) {\n            const fields = [];\n            for (const currentField of this.fields) {\n                // Add all fields except 'internalPage' type (for children).\n                if (currentField.controlType !== 'internalPage') {\n                    fields.push(currentField);\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n\n            this.form = this.toControlGroup(fields);\n        } else {\n            // Update form values if changed by calculated fields.\n            for (const currentField of this.fields) {\n                if (currentField.controlType !== 'internalPage') {\n                    if (\n                        currentField.groupFields &&\n                        currentField.groupFields.length > 0\n                    ) {\n                        // for (let j = 0; j < currentField.groupFields.length; j++) {\n                        //     let currentGroupField = currentField.groupFields[j];\n                        for (const currentGroupField of currentField.groupFields) {\n                            const fieldFormattedValue = this.getFieldFormattedValue(\n                                currentGroupField\n                            );\n                            this.customizationService.updateFormField(\n                                this.form,\n                                currentGroupField,\n                                fieldFormattedValue,\n                                currentField\n                            );\n                        }\n                    } else {\n                        const fieldFormattedValue = this.getFieldFormattedValue(\n                            currentField\n                        );\n                        // this.form.controls[currentField.key].setValue(fieldFormattedValue);\n                        this.customizationService.updateFormField(\n                            this.form,\n                            currentField,\n                            fieldFormattedValue\n                        );\n                    }\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n        }\n\n        let isFormValid = this.form?.valid;\n\n        // Change validation to true if all fields are read only.\n        if (!isFormValid && allFieldsAreReadOnly) {\n            isFormValid = true;\n        }\n\n        this.onFormValidationChanged(isFormValid);\n\n        // Set it to false to enable all fields.\n        this.isLocked = false;\n    }\n\n    initForm(): void {\n        if (this.data && this.data.Fields) {\n            const fields: PepFieldBase[] = this.convertCustomFields(\n                this.getUiControlFields(),\n                this.data.Fields\n            );\n\n            const maxRow = Math.max(\n                ...fields.map((f) => {\n                    return f.row + f.rowSpan;\n                })\n            );\n            this.columns = Math.max(\n                ...fields.map((f) => {\n                    return f.col + f.colSpan;\n                })\n            );\n\n            this.initFieldsStructure(fields, maxRow);\n            this.setForm();\n        }\n    }\n\n    private updateField(\n        customField: PepFieldBase,\n        updatedField: ObjectsDataRowCell\n    ): void {\n        const options: any = {\n            disabled: !updatedField.Enabled || !this.canEditObject,\n            readonly: !updatedField.Enabled || !this.canEditObject,\n            value: updatedField.Value,\n            additionalValue: updatedField.AdditionalValue,\n            formattedValue: updatedField.FormattedValue,\n            textColor: updatedField.TextColor,\n        };\n\n        if (customField instanceof PepQuantitySelectorField) {\n            const notificationInfo = updatedField.NotificationInfo;\n            options.notificationInfo = notificationInfo;\n        } else if (customField instanceof PepSelectField) {\n            options.options = this.convertOptionalValues(\n                updatedField.OptionalValues\n            );\n\n            if (!options.options || options.options.length === 0) {\n                options.options.push({\n                    key: options.value,\n                    value: options.formattedValue,\n                });\n            }\n        }\n\n        customField.update(options);\n\n        // if (this.lastFocusedField && this.lastFocusedField.id === customField.key) {\n        //     setTimeout(() => {\n        //         this.lastFocusedField.focus();\n        //         this.lastFocusedField = null;\n        //     }, 100);\n        // }\n    }\n\n    updateForm(cleanLastFocusedField = false): void {\n        if (this.data && this.data.Fields) {\n            for (const currentField of this.data.Fields) {\n                const customField = this.fields.filter(\n                    (f) => f.key === currentField.ApiName\n                )[0];\n                // Update all fields except 'internalPage' type (for children).\n                if (customField && customField.controlType !== 'internalPage') {\n                    // const hasFocus = this.lastFocusedField && this.lastFocusedField.id === customField.key;\n                    // customField.updateField(currentField, this.canEditObject, hasFocus ? this.lastFocusedField : null);\n                    this.updateField(customField, currentField);\n\n                    // Update the group fields.\n                    if (\n                        customField.controlType === 'address' &&\n                        currentField.GroupFields\n                    ) {\n                        // for (let j = 0; j < currentField.GroupFields.length; j++) {\n                        // let currentGroupField = currentField.GroupFields[j];\n                        for (const currentGroupField of currentField.GroupFields) {\n                            currentGroupField.Enabled = !currentField.Enabled\n                                ? false\n                                : currentGroupField.Enabled;\n\n                            const customGroupField = customField.groupFields.filter(\n                                (f) => f.key === currentGroupField.ApiName\n                            )[0];\n                            // const hasGroupFocus = this.lastFocusedField && this.lastFocusedField.id === customGroupField.key;\n                            // customGroupField.updateField(currentGroupField, this.canEditObject, hasGroupFocus ? this.lastFocusedField : null);\n                            this.updateField(\n                                customGroupField,\n                                currentGroupField\n                            );\n                        }\n                    }\n                }\n            }\n\n            this.setForm(true);\n\n            // if (cleanLastFocusedField) {\n            //     // Clean the last focused field.\n            //     this.lastFocusedField = null;\n            //     console.log(this.lastFocusedField);\n            // }\n        }\n    }\n\n    public ReloadForm(): void {\n        this._shouldReloadForm = true;\n    }\n\n    // onSubmit() {\n    //     if (this.form.valid) {\n    //         this.payLoad = JSON.stringify(this.form.value);\n    //         //this.submitted.emit(this.form.value);\n    //     }\n    // }\n\n    private getFormControlById(key: string): AbstractControl | null {\n        let formControl = null;\n\n        this.fields.forEach((field) => {\n            if (field.key === key) {\n                formControl = this.form.get(field.key);\n                return;\n            } else if (field.groupFields && field.groupFields.length > 0) {\n                field.groupFields.forEach((groupField) => {\n                    if (groupField.key === key) {\n                        formControl = this.form.get(\n                            field.key + '.' + groupField.key\n                        );\n                        return;\n                    }\n                });\n            }\n        });\n\n        return formControl;\n    }\n\n    private setSpecialFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): void {\n        // let cf;\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (cf.ApiName === 'ObjectMenu') {\n                this.menuField = cf;\n            } else if (cf.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignField = cf;\n            } else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsField = cf;\n            }\n        }\n\n        // let df;\n        // for (let index = 0; index < dataFields.length; index++) {\n        //     df = dataFields[index];\n        for (const df of dataFields) {\n            if (df.ApiName === 'ObjectMenu') {\n                this.menuDataField = df;\n            } else if (df.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignDataField = df;\n            } else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsDataField = df;\n            }\n        }\n\n        if (this.menuField && this.menuDataField) {\n            this.menuDataField.Layout = this.menuField.Layout;\n        }\n\n        if (this.hasCampaignField && this.hasCampaignDataField) {\n            this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;\n        }\n\n        if (this.indicatorsField && this.indicatorsDataField) {\n            this.indicatorsDataField.Layout = this.indicatorsField.Layout;\n        }\n\n        // Check if menu is floating on other field.\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (this.menuField && cf.ApiName !== 'ObjectMenu') {\n                this.hasMenuFloatingOnOtherField = this.doesFieldHavaFloatingField(\n                    cf,\n                    this.menuField\n                );\n\n                if (this.hasMenuFloatingOnOtherField) {\n                    break;\n                }\n            }\n        }\n    }\n\n    convertCustomFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): PepFieldBase[] {\n        if (this.layoutType !== 'table') {\n            this.setSpecialFields(controlFields, dataFields);\n        } else {\n            // Hack: convert to center alignment if table view & special fields)\n            controlFields.forEach((field, index) => {\n                if (\n                    field.ApiName === 'UnitsQuantity' ||\n                    field.ApiName === 'QuantitySelector' ||\n                    field.ApiName === 'ObjectMenu' ||\n                    field.FieldType === FIELD_TYPE.Image ||\n                    field.FieldType === FIELD_TYPE.ImageURL ||\n                    field.FieldType === FIELD_TYPE.Indicators ||\n                    field.FieldType === FIELD_TYPE.Boolean ||\n                    field.FieldType === FIELD_TYPE.CalculatedBool ||\n                    field.FieldType === FIELD_TYPE.Signature ||\n                    field.FieldType ===\n                        FIELD_TYPE.NumberIntegerQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.Package ||\n                    field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                    field.FieldType === FIELD_TYPE.NumberRealForMatrix\n                ) {\n                    field.Layout.XAlignment = X_ALIGNMENT_TYPE.Center;\n                }\n            });\n        }\n\n        const fields: PepFieldBase[] = [];\n\n        // const matrixFields = controlFields.filter((cf) =>\n        //     this.isMatrixField(cf.ApiName)\n        // ).length;\n        // let matrixAlreadyPlaced = false;\n\n        controlFields.forEach((field, index) => {\n            const dataField = dataFields.filter(\n                (df) => df.ApiName === field.ApiName\n            )[0];\n\n            if (!dataField) {\n                return;\n            }\n\n            // If current view is not table view and those fields are special.\n            if (\n                this.layoutType !== 'table' &&\n                ((this.hasMenuFloatingOnOtherField &&\n                    this.menuField &&\n                    this.menuField.ApiName === field.ApiName) ||\n                    (this.indicatorsField &&\n                        this.indicatorsField.ApiName === field.ApiName) ||\n                    (this.hasCampaignField &&\n                        this.hasCampaignField.ApiName === field.ApiName))\n            ) {\n                return;\n            }\n\n            // Remove this. (fix two matrix into one)\n            // if (matrixFields > 0 && this.isMatrixField(field.ApiName)) {\n            //     if (matrixFields > 1 && matrixAlreadyPlaced) {\n            //         return;\n            //     }\n\n            //     matrixAlreadyPlaced = true;\n\n            //     if (matrixFields > 1) {\n            //         this.matrixIsLast =\n            //             controlFields.length >= 2\n            //                 ? controlFields[controlFields.length - 2]\n            //                     .ApiName === field.ApiName\n            //                 : false;\n            //     } else {\n            //         this.matrixIsLast =\n            //             controlFields[controlFields.length - 1].ApiName ===\n            //             field.ApiName;\n            //     }\n            // }\n\n            // Set type to link\n            if (this.firstFieldAsLink && index === 0) {\n                dataField.FieldType = FIELD_TYPE.InternalLink;\n                dataField.Value = this.getInternalLinkHref();\n            } else if (\n                dataField.Value.length > 0 &&\n                (field.FieldType === FIELD_TYPE.ReferenceType ||\n                    field.FieldType === FIELD_TYPE.GuidReferenceType)\n            ) {\n                const transactionUrl =\n                    this.data.MainAction === '2'\n                        ? 'transactions/scope_items/'\n                        : 'transactions/cart/';\n                dataField.Value = transactionUrl + dataField.Value;\n            }\n\n            if (field.ApiName === 'ObjectMenu') {\n                dataField.Enabled = true;\n                // HACK : Until \"Enabled\" returns from the server, we set PepMenu to be\n                //        Disabled in cart on regular items and not campign items.\n            }\n            const customField: PepFieldBase = this.convertToCustomField(\n                field,\n                dataField,\n                this.canEditObject,\n                this.menuDataField,\n                this.hasCampaignDataField,\n                this.indicatorsDataField,\n                this.objectId,\n                this.parentId,\n                this.searchCode\n            );\n\n            fields.push(customField);\n        });\n\n        return fields.sort((f1, f2) =>\n            f1.row > f2.row\n                ? 1\n                : f1.row < f2.row\n                ? -1\n                : f1.col > f2.col\n                ? 1\n                : f1.col < f2.col\n                ? -1\n                : 0\n        );\n    }\n\n    onValueChanged(event: IPepFieldValueChangeEvent): void {\n        this.onFormValidationChanged(this.form.valid);\n\n        const formControl = this.getFormControlById(event.key);\n\n        const isValid = formControl ? formControl.valid : true;\n        // const isValid = true;\n\n        if (isValid) {\n            // Set it to false to disable all fields.\n            if (this.layoutType === 'form') {\n                this.isLocked = true;\n            }\n\n            // Update the current field value.\n            const currentField = this.fields.find((f) => f.key === event.key);\n            if (currentField) {\n                currentField.formattedValue = currentField.value = event.value;\n            }\n\n            // this.lastFocusedField = event.lastFocusedField;\n\n            this.valueChange.emit({\n                id: this.data.UID.toString(),\n                key: event.key,\n                value: event.value,\n                controlType: event.controlType,\n            });\n        }\n    }\n\n    onChildClicked(childClick: any): void {\n        this.childClick.emit(childClick);\n    }\n\n    onChildChanged(childChange: any): void {\n        this.childChange.emit(childChange);\n    }\n\n    onFormValidationChanged(formValidationChange: any): void {\n        // if (this.layoutType === 'form' || this.layoutType === 'card') {\n        this.formValidationChange.emit(formValidationChange);\n        // }\n    }\n\n    onClick(fieldClickEvent: IPepFieldClickEvent): void {\n        const clickedUiControlField = this.data.Fields.filter(\n            (f) => f.ApiName === fieldClickEvent.key\n        )[0];\n        const idType = this.data.Type ? this.data.Type.toString() : '';\n\n        if (clickedUiControlField) {\n            if (\n                clickedUiControlField.FieldType === FIELD_TYPE.GuidReferenceType\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else if (\n                clickedUiControlField.FieldType === FIELD_TYPE.ListOfObjects\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            }\n        } else {\n            // For other api names (like enter children etc).\n            this.fieldClick.emit({\n                id: this.data.UID.toString(),\n                key: fieldClickEvent.key,\n                idType,\n                which: fieldClickEvent.eventWhich,\n                value: fieldClickEvent.value,\n                controlType: fieldClickEvent.controlType,\n                otherData: fieldClickEvent.otherData,\n            });\n        }\n    }\n\n    getInternalLinkHref(): string {\n        let hrefStr = '';\n        const uid = this.data.UID;\n        const transactionUrl =\n            this.data.MainAction === '2'\n                ? 'transactions/scope_items/'\n                : 'transactions/cart/';\n        // let isBuyer = sessionStorage.getItem('userRole') == 'Buyer' ? true : false;\n\n        if (this.listType === 'all_activities') {\n            hrefStr =\n                this.data.Type === 0\n                    ? transactionUrl + uid\n                    : 'activities/details/' + uid;\n        } else if (this.listType === 'accounts') {\n            hrefStr = 'accounts/home_page/' + uid;\n        }\n\n        return hrefStr;\n    }\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepHslColor",
            "id": "interface-IPepHslColor-a18bd558e8a99b161c0717147f9348b8",
            "file": "projects/ngx-lib/color/color-utils.ts",
            "type": "interface",
            "sourceCode": "const FLOAT_REGEX = /^\\d+(\\.\\d+)?$/;\nconst THREE_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{3}$/;\nconst THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{3}$/;\nconst SIX_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{6}$/;\nconst SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{6}$/;\n\nexport interface IPepRgbColor {\n    r?: any;\n    g?: any;\n    b?: any;\n}\n\nexport interface IPepHslColor {\n    h?: any;\n    s?: any;\n    l?: any;\n}\n\nexport interface IPepClosestColor {\n    color: string;\n    lightness: number;\n}\n\n/**\n * Convert hex string to 6 digits hex string.\n * @param str The string to convert.\n */\nexport function hex2sixDigitHex(str: string): string {\n    if (!str) {\n        return null;\n    }\n\n    str = str.trim();\n\n    if (SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return str;\n    }\n\n    if (SIX_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str;\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return '#' + str[1] + str[1] + str[2] + str[2] + str[3] + str[3];\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str[0] + str[0] + str[1] + str[1] + str[2] + str[2];\n    }\n\n    return null;\n}\n\n/**\n * Convert rgb color to 6 digits hex string.\n * @param color The rgb color to convert.\n */\nexport function rgb2sixDigitHex(color: IPepRgbColor): string {\n    color.r = color.r.toString(16);\n    color.g = color.g.toString(16);\n    color.b = color.b.toString(16);\n\n    if (color.r.length === 1) {\n        color.r = '0' + color.r;\n    }\n\n    if (color.g.length === 1) {\n        color.g = '0' + color.g;\n    }\n\n    if (color.b.length === 1) {\n        color.b = '0' + color.b;\n    }\n\n    return '#' + color.r + color.g + color.b;\n}\n\n/**\n * Convert hex string to rgb color.\n * @param str The hex string to convert.\n */\nexport function hex2rgb(str: string): IPepRgbColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    return {\n        r: parseInt(sixDigitHex.slice(1, 3), 16),\n        g: parseInt(sixDigitHex.slice(3, 5), 16),\n        b: parseInt(sixDigitHex.slice(5, 7), 16),\n    };\n}\n\nexport function rgbString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const rgbArr = str.substr(4).split(')')[0].split(sep);\n\n    const r = rgbArr[0];\n    const g = rgbArr[1].substr(0, rgbArr[1].length).trim();\n    const b = rgbArr[2].substr(0, rgbArr[2].length).trim();\n\n    return rgb2hsl({ r, g, b });\n}\n\nexport function rgb2hsl({ r, g, b }: IPepRgbColor): IPepHslColor {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    const cmin = Math.min(r, g, b);\n    const cmax = Math.max(r, g, b);\n    const delta = cmax - cmin;\n\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    if (delta === 0) {\n        h = 0;\n    } else if (cmax === r) {\n        h = ((g - b) / delta) % 6;\n    } else if (cmax === g) {\n        h = (b - r) / delta + 2;\n    } else {\n        h = (r - g) / delta + 4;\n    }\n\n    h = Math.round(h * 60);\n\n    if (h < 0) {\n        h += 360;\n    }\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return { h, s, l };\n}\n\nexport function hslString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const hslArr = str.substr(4).split(')')[0].split(sep);\n\n    let h: any = hslArr[0];\n    let s = hslArr[1].substr(0, hslArr[1].length).trim();\n    let l = hslArr[2].substr(0, hslArr[2].length).trim();\n\n    // Strip label and convert to degrees (if necessary)\n    if (h.indexOf('deg') > -1) {\n        h = h.substr(0, h.length - 3);\n    } else if (h.indexOf('rad') > -1) {\n        h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));\n    } else if (h.indexOf('turn') > -1) {\n        h = Math.round(h.substr(0, h.length - 4) * 360);\n    }\n\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) {\n        h %= 360;\n    }\n\n    // Remove the %\n    if (s.indexOf('%') > -1) {\n        s = s.replace(/%/g, '');\n    }\n\n    // Remove the %\n    if (l.indexOf('%') > -1) {\n        l = l.replace(/%/g, '');\n    }\n\n    return { h, s, l };\n}\n\nexport function hsl2rgb({ h, s, l }: IPepHslColor): IPepRgbColor {\n    let r;\n    let g;\n    let b;\n\n    if (!isFinite(h)) {\n        h = 0;\n    }\n\n    if (!isFinite(s)) {\n        s = 0;\n    }\n\n    if (!isFinite(l)) {\n        l = 0;\n    }\n\n    h /= 60;\n\n    if (h < 0) {\n        h = 6 - (-h % 6);\n    }\n\n    h %= 6;\n\n    s = Math.max(0, Math.min(1, s / 100));\n    l = Math.max(0, Math.min(1, l / 100));\n\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs((h % 2) - 1));\n\n    if (h < 1) {\n        r = c;\n        g = x;\n        b = 0;\n    } else if (h < 2) {\n        r = x;\n        g = c;\n        b = 0;\n    } else if (h < 3) {\n        r = 0;\n        g = c;\n        b = x;\n    } else if (h < 4) {\n        r = 0;\n        g = x;\n        b = c;\n    } else if (h < 5) {\n        r = x;\n        g = 0;\n        b = c;\n    } else {\n        r = c;\n        g = 0;\n        b = x;\n    }\n\n    const m = l - c / 2;\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return { r, g, b };\n}\n\nexport function hex2hsl(str: string): IPepHslColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    const rgb = hex2rgb(sixDigitHex);\n\n    if (rgb === null) {\n        return null;\n    }\n\n    return rgb2hsl(rgb);\n}\n\nexport function hsl2hex(hsl: IPepHslColor): string {\n    const rgb = hsl2rgb(hsl);\n\n    return rgb2sixDigitHex(rgb);\n}\n\nexport function relativeLuminance({ r, g, b }: IPepRgbColor): number {\n    [r, g, b] = [r, g, b].map((c) => {\n        c = c / 255;\n\n        if (c <= 0.03928) {\n            return c / 12.92;\n        }\n\n        return Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nexport function contrast(str1: string, str2: string): number {\n    const L1 = relativeLuminance(hex2rgb(str1));\n    const L2 = relativeLuminance(hex2rgb(str2));\n\n    if (L1 < L2) {\n        return (L2 + 0.05) / (L1 + 0.05);\n    }\n\n    return (L1 + 0.05) / (L2 + 0.05);\n}\n\nexport function findClosestAccessibleDarkerColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let minColor = hsl2hex({ h, s, l: 0 });\n\n    if (contrast(minColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = 0;\n    let max = l;\n    let maxColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: minColor,\n        lightness: min,\n    };\n}\n\nexport function findClosestAccessibleLighterColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let maxColor = hsl2hex({ h, s, l: 100 });\n\n    if (contrast(maxColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = l;\n    let max = 100;\n    let minColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: maxColor,\n        lightness: max,\n    };\n}\n\nexport function findClosestAccessibleColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): string {\n    const closestDarkerColor: IPepClosestColor = findClosestAccessibleDarkerColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n    const closestLighterColor: IPepClosestColor = findClosestAccessibleLighterColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n\n    if (closestDarkerColor === null) {\n        if (closestLighterColor === null) {\n            return null;\n        }\n\n        return closestLighterColor.color;\n    }\n\n    if (closestLighterColor === null) {\n        return closestDarkerColor.color;\n    }\n\n    const { l } = hex2hsl(adjustableColor);\n\n    if (closestLighterColor.lightness - l < l - closestDarkerColor.lightness) {\n        return closestLighterColor.color;\n    }\n\n    return closestDarkerColor.color;\n}\n\nexport function convertHslToStringHsl(hsl: IPepHslColor): string {\n    return (\n        'hsl(' +\n        (hsl.h < 0 ? hsl.h + 360 : hsl.h) +\n        ', ' +\n        hsl.s +\n        '%, ' +\n        hsl.l +\n        '%)'\n    );\n}\n",
            "properties": [
                {
                    "name": "h",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "l",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "s",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepIconData",
            "id": "interface-IPepIconData-a9194226997db983e471578ebb31e353",
            "file": "projects/ngx-lib/icon/icon-generated.model.ts",
            "type": "interface",
            "sourceCode": "export const pepIconArrowBack: {\n    name: 'arrow_back';\n    data: string;\n} = {\n    name: 'arrow_back',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.713 4.309c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0zm-7 0c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0z\"/></svg>`,\n};\nexport const pepIconArrowDownAlt: {\n    name: 'arrow_down_alt';\n    data: string;\n} = {\n    name: 'arrow_down_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.933 20a2 2 0 01-.059-.004L12 20a2.026 2.026 0 01-.527-.07l-.029-.009a1.476 1.476 0 01-.121-.039l-.01-.004a2.006 2.006 0 01-.405-.202l-.017-.012-6-4a2 2 0 012.218-3.328L10 14.263 10 6a2 2 0 114 0v8.263l2.89-1.927a2 2 0 012.22 3.328l-6 4-.012.008c-.124.081-.257.15-.398.202l-.012.004-.11.037a1.984 1.984 0 01-.025.008l-.011.002a1.315 1.315 0 01-.124.031l-.026.005a1.194 1.194 0 01-.131.022c-.007 0-.014.002-.02.003l-.02.002a1.995 1.995 0 01-.053.005l-.044.003a1.789 1.789 0 01-.057.003z\"/></svg>`,\n};\nexport const pepIconArrowDown: {\n    name: 'arrow_down';\n    data: string;\n} = {\n    name: 'arrow_down',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.8 9.287l5.454 3.916c.412.382 1.08.382 1.492 0L18.2 9.287a1.113 1.113 0 011.491 0 .93.93 0 010 1.384l-6.2 5.756c-.823.764-2.159.764-2.982 0l-6.2-5.756a.93.93 0 010-1.384 1.113 1.113 0 011.491 0z\"/></svg>`,\n};\nexport const pepIconArrowEither: {\n    name: 'arrow_either';\n    data: string;\n} = {\n    name: 'arrow_either',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.35 14.215l4.09 2.937a.835.835 0 001.12 0l4.09-2.937a.835.835 0 011.118 0 .698.698 0 010 1.038l-4.65 4.317a1.67 1.67 0 01-2.237 0l-4.65-4.317a.698.698 0 010-1.038.835.835 0 011.12 0zM13.12 4.43l4.65 4.317a.698.698 0 010 1.038.835.835 0 01-1.12 0l-4.09-2.937a.835.835 0 00-1.118 0L7.35 9.785a.835.835 0 01-1.12 0 .698.698 0 010-1.038l4.65-4.317a1.67 1.67 0 012.238 0z\"/></svg>`,\n};\nexport const pepIconArrowLeftAlt: {\n    name: 'arrow_left_alt';\n    data: string;\n} = {\n    name: 'arrow_left_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 11.933a2 2 0 01.004-.059L4 12a2.026 2.026 0 01.07-.527l.009-.029a1.476 1.476 0 01.039-.121l.004-.01a2.006 2.006 0 01.202-.405l.012-.017 4-6a2 2 0 013.328 2.218L9.737 10 18 10a2 2 0 110 4H9.737l1.927 2.89a2 2 0 01-3.328 2.22l-4-6-.008-.012a1.993 1.993 0 01-.202-.398l-.004-.012-.037-.11a1.984 1.984 0 01-.008-.025l-.002-.011a1.315 1.315 0 01-.031-.124l-.005-.026a1.194 1.194 0 01-.022-.131c0-.007-.002-.014-.003-.02l-.002-.02a1.995 1.995 0 01-.005-.053l-.003-.044A1.789 1.789 0 014 12.067z\"/></svg>`,\n};\nexport const pepIconArrowLeft: {\n    name: 'arrow_left';\n    data: string;\n} = {\n    name: 'arrow_left',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.713 5.8l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0c.383.412.383 1.08 0 1.491z\"/></svg>`,\n};\nexport const pepIconArrowRightAlt: {\n    name: 'arrow_right_alt';\n    data: string;\n} = {\n    name: 'arrow_right_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20 11.933a2 2 0 00-.004-.059L20 12a2.026 2.026 0 00-.07-.527l-.009-.029a1.476 1.476 0 00-.039-.121l-.004-.01a2.006 2.006 0 00-.202-.405l-.012-.017-4-6a2 2 0 00-3.328 2.218L14.263 10 6 10a2 2 0 100 4h8.263l-1.927 2.89a2 2 0 003.328 2.22l4-6 .008-.012c.081-.124.15-.257.202-.398l.004-.012.037-.11.008-.025.002-.011a1.315 1.315 0 00.031-.124l.005-.026a1.194 1.194 0 00.022-.131c0-.007.002-.014.003-.02l.002-.02.005-.053.003-.044a1.789 1.789 0 00.003-.057z\"/></svg>`,\n};\nexport const pepIconArrowRight: {\n    name: 'arrow_right';\n    data: string;\n} = {\n    name: 'arrow_right',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.287 4.309a.93.93 0 011.384 0l5.756 6.2c.764.823.764 2.159 0 2.982l-5.756 6.2a.93.93 0 01-1.384 0 1.113 1.113 0 010-1.491l3.916-5.454a1.113 1.113 0 000-1.492L9.287 5.8a1.113 1.113 0 010-1.491z\"/></svg>`,\n};\nexport const pepIconArrowTwoWaysHorL: {\n    name: 'arrow_two_ways_hor_l';\n    data: string;\n} = {\n    name: 'arrow_two_ways_hor_l',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.232 12.303a1.036 1.036 0 111.465 1.465L7.464 15H19a1 1 0 010 2H7.464l1.233 1.232a1.036 1.036 0 11-1.465 1.465l-2.929-2.93a1.032 1.032 0 01-.301-.67L4 16.019V16l.001-.019v-.078c.013-.203.085-.404.216-.573l.086-.098zm9.536-8l2.929 2.93c.186.186.287.426.301.67v.064L20 8v.034l-.002.063a1.032 1.032 0 01-.301.67l-2.93 2.93a1.036 1.036 0 11-1.464-1.465L16.536 9H5a1 1 0 01-.993-.883L4 8a1 1 0 011-1h11.536l-1.233-1.232a1.036 1.036 0 111.465-1.465z\"/></svg>`,\n};\nexport const pepIconArrowTwoWaysHorR: {\n    name: 'arrow_two_ways_hor_r';\n    data: string;\n} = {\n    name: 'arrow_two_ways_hor_r',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.768 12.303a1.036 1.036 0 10-1.465 1.465L16.536 15H5a1 1 0 000 2h11.536l-1.233 1.232a1.036 1.036 0 101.465 1.465l2.929-2.93c.186-.186.287-.426.301-.67l.002-.078V16l-.001-.019v-.078a1.032 1.032 0 00-.216-.573l-.086-.098zm-9.536-8l-2.929 2.93a1.032 1.032 0 00-.301.67v.064L4 8v.034l.002.063c.014.244.115.484.301.67l2.93 2.93a1.036 1.036 0 101.464-1.465L7.464 9H19a1 1 0 00.993-.883L20 8a1 1 0 00-1-1H7.464l1.233-1.232a1.036 1.036 0 10-1.465-1.465z\"/></svg>`,\n};\nexport const pepIconArrowTwoWaysVerB: {\n    name: 'arrow_two_ways_ver_b';\n    data: string;\n} = {\n    name: 'arrow_two_ways_ver_b',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 16.768a1.036 1.036 0 10-1.465-1.465L9 16.536V5a1 1 0 00-2 0v11.536l-1.232-1.233a1.036 1.036 0 10-1.465 1.465l2.93 2.929c.186.186.426.287.67.301l.078.002H8l.019-.001h.078c.203-.013.404-.085.573-.216l.098-.086zm8-9.536l-2.93-2.929a1.032 1.032 0 00-.67-.301h-.064L16 4h-.034l-.063.002a1.032 1.032 0 00-.67.301l-2.93 2.93a1.036 1.036 0 101.465 1.464L15 7.464V19a1 1 0 00.883.993L16 20a1 1 0 001-1V7.464l1.232 1.233a1.036 1.036 0 101.465-1.465z\"/></svg>`,\n};\nexport const pepIconArrowTwoWaysVerT: {\n    name: 'arrow_two_ways_ver_t';\n    data: string;\n} = {\n    name: 'arrow_two_ways_ver_t',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 7.232a1.036 1.036 0 11-1.465 1.465L9 7.464V19a1 1 0 01-2 0V7.464L5.768 8.697a1.036 1.036 0 11-1.465-1.465l2.93-2.929c.186-.186.426-.287.67-.301L7.981 4H8l.019.001h.078c.203.013.404.085.573.216l.098.086zm8 9.536l-2.93 2.929a1.032 1.032 0 01-.67.301h-.064L16 20h-.034l-.063-.002a1.032 1.032 0 01-.67-.301l-2.93-2.93a1.036 1.036 0 111.465-1.464L15 16.536V5a1 1 0 01.883-.993L16 4a1 1 0 011 1v11.536l1.232-1.233a1.036 1.036 0 111.465 1.465z\"/></svg>`,\n};\nexport const pepIconArrowUpAlt: {\n    name: 'arrow_up_alt';\n    data: string;\n} = {\n    name: 'arrow_up_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.067 4a2 2 0 01.059.004L12 4a2.026 2.026 0 01.527.07l.029.009a1.476 1.476 0 01.121.039l.01.004a2.006 2.006 0 01.405.202l.017.012 6 4a2 2 0 01-2.218 3.328L14 9.737 14 18a2 2 0 11-4 0V9.737l-2.89 1.927a2 2 0 01-2.22-3.328l6-4 .012-.008c.124-.081.257-.15.398-.202l.012-.004.11-.037.025-.008.011-.002a1.315 1.315 0 01.124-.031l.026-.005a1.194 1.194 0 01.131-.022c.007 0 .014-.002.02-.003l.02-.002.053-.005.044-.003A1.789 1.789 0 0111.933 4z\"/></svg>`,\n};\nexport const pepIconArrowUp: {\n    name: 'arrow_up';\n    data: string;\n} = {\n    name: 'arrow_up',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.2 14.713l-5.454-3.916a1.113 1.113 0 00-1.492 0L5.8 14.713a1.113 1.113 0 01-1.491 0 .93.93 0 010-1.384l6.2-5.756c.823-.764 2.159-.764 2.982 0l6.2 5.756a.93.93 0 010 1.384 1.113 1.113 0 01-1.491 0z\"/></svg>`,\n};\nexport const pepIconBarndPepperi: {\n    name: 'barnd_pepperi';\n    data: string;\n} = {\n    name: 'barnd_pepperi',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.234 10.687a.17.17 0 00-.167-.171c-.446 0-.885.372-1.44.843-.887.753-1.99 1.69-3.705 1.69-1.714 0-2.818-.937-3.705-1.69-.556-.471-.994-.843-1.44-.843a.17.17 0 00-.168.171.17.17 0 00.167.172c.327 0 .744.354 1.228.765.88.747 2.084 2.563 3.918 2.563 2.19 0 2.682-1.514 3.918-2.563.483-.41.9-.765 1.227-.765a.17.17 0 00.167-.172M6.671 7.588c0 1.039.826 1.884 1.841 1.884 1.015 0 1.841-.845 1.841-1.884 0-1.038-.826-1.883-1.841-1.883-1.015 0-1.841.845-1.841 1.883m6.866 0c0 1.039.826 1.884 1.841 1.884 1.016 0 1.841-.845 1.841-1.884 0-1.038-.825-1.883-1.84-1.883-1.016 0-1.842.845-1.842 1.883m7.386 10.922a3.46 3.46 0 00-.778-.087c-1.144 0-2.125.544-2.52 1.311-.394-.767-1.375-1.31-2.519-1.31-.266 0-.526.028-.778.086.387-.651 1.12-1.154 2.01-1.405.12-.034.244-.063.37-.087V14.658a.188.188 0 00-.185-.19.188.188 0 00-.186.19v2.056c-.751.196-1.409.559-1.885 1.037-.802.11-1.655.185-2.507.185a18.55 18.55 0 01-2.507-.184c-.475-.479-1.133-.842-1.885-1.038v-2.056a.188.188 0 00-.185-.19.188.188 0 00-.186.19V17.018c.126.024.25.053.371.087.89.25 1.622.754 2.01 1.405a3.46 3.46 0 00-.779-.087c-1.144 0-2.124.544-2.52 1.311-.394-.767-1.374-1.31-2.519-1.31-.266 0-.526.028-.778.086.39-.656 1.13-1.16 2.028-1.409.088-.024.178-.046.27-.065V7.589c0-1.833 1.456-3.323 3.247-3.323 1.79 0 2.143.995 3.248 2.555.06.085.083.19.185.19.103 0 .127-.105.186-.19 1.139-1.647 1.457-2.555 3.247-2.555 1.791 0 3.248 1.49 3.248 3.322V17.035c.088.019.173.04.258.064.904.247 1.648.753 2.04 1.411M8.068 7.588c0 .25.198.454.443.454a.449.449 0 00.443-.454.449.449 0 00-.443-.453.449.449 0 00-.443.453m-.688 0c0-.638.507-1.157 1.131-1.157s1.13.52 1.13 1.157c0 .638-.506 1.157-1.13 1.157-.624 0-1.13-.519-1.13-1.157m7.553 0c0 .25.199.454.443.454a.449.449 0 00.444-.454.449.449 0 00-.444-.453.449.449 0 00-.443.453m-.687 0c0-.638.507-1.157 1.13-1.157.624 0 1.131.52 1.131 1.157 0 .638-.507 1.157-1.13 1.157-.624 0-1.131-.519-1.131-1.157m.48 10.416a2.626 2.626 0 00-.315.374.817.817 0 00.315-.374m4.918-1.172c-.04.045-.08.092-.12.135.695.287 1.287.708 1.71 1.222.26.015.515.044.764.088-.484-.62-1.321-1.123-2.354-1.445m-14.753-.088v-5.932c-.39-.236-.78-.368-1.135-.368-.145 0-.283.023-.41.07-1.047.385-1.14 2.298-.202 4.177.426.853 1.001 1.583 1.606 2.088l.141-.035m15.852-2.053c.938-1.879.845-3.792-.203-4.177a1.184 1.184 0 00-.41-.07c-.355 0-.744.132-1.135.368v5.932c.048.01.094.022.14.035.606-.505 1.182-1.235 1.608-2.088M2.819 18.035c-.278.015-.551.041-.819.08.5-.536 1.334-.98 2.365-1.283-.628.302-1.161.713-1.546 1.203\"/></svg>`,\n};\nexport const pepIconIndicatorDotPlaceholder: {\n    name: 'indicator_dot_placeholder';\n    data: string;\n} = {\n    name: 'indicator_dot_placeholder',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\"><circle cx=\"4\" cy=\"4\" r=\"3.5\" fill-rule=\"evenodd\"/></svg>`,\n};\nexport const pepIconMiscExcel: {\n    name: 'misc_excel';\n    data: string;\n} = {\n    name: 'misc_excel',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 4.18a1 1 0 01.993.884L16 5.18v13.64a1 1 0 01-1.048.998l-.116-.012-10-1.667a1 1 0 01-.829-.866L4 17.153V6.847a1 1 0 01.718-.96l.118-.026 10-1.667A1 1 0 0115 4.18zM19 7a1 1 0 011 1v8a1 1 0 01-1 1h-1a1 1 0 01-1-1V8a1 1 0 011-1zm-5.715.214l-2.078.224-1.243 2.976L8.769 7.7l-2.126.23 2.174 3.795L6.5 16.054l2.079.224 1.386-3.229 1.409 3.531 2.126.23-2.39-5.179 2.175-4.417z\"/></svg>`,\n};\nexport const pepIconNoImage2: {\n    name: 'no_image_2';\n    data: string;\n} = {\n    name: 'no_image_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\"><style>.placeholder{stroke:#999;stroke-width:4;stroke-linecap:round}</style><g fill=\"none\" fill-rule=\"evenodd\"><circle class=\"placeholder\" cx=\"128\" cy=\"60\" r=\"32\"/><path class=\"placeholder\" d=\"M263 6H14a8 8 0 00-8 8v74M195.05 182.887L65.443 97.913a8 8 0 00-8.851.053L9.535 129.622A8 8 0 006 136.26V186a8 8 0 008 8h272a8 8 0 008-8v-84.869a8 8 0 00-3.368-6.523l-41.31-29.33a8 8 0 00-9.713.344l-90.374 74.339M294 85V63M294 45v-7.997M294 55.003v-2M294 29V14a8 8 0 00-8-8h-5M273 6h-2M6 122v-15.997m0-8v-2\"/></g></svg>`,\n};\nexport const pepIconNoImage: {\n    name: 'no_image';\n    data: string;\n} = {\n    name: 'no_image',\n    data: `<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 988 988\" xml:space=\"preserve\"><style>.st1{fill:#c1c1c1}</style><path d=\"M-546.6 491.2h5.6v5.6h-5.6v-5.6z\" fill=\"none\"/><path class=\"st1\" d=\"M144.5-966.5c-7.8-8.6-19.4-12.9-32.3-11.6L29-969.9c-9.9.9-22.4 6.5-28.5 12.5l-137.2 137.1c-10.8 10.8-12.1 27.6-2.6 37.1l98.3 98.3c3.9 3.9 9.9 6.5 15.9 6.5 7.3 0 14.7-3 19.8-8.6L132-824.2c6.5-6.5 12.1-18.1 12.9-26.3l8.6-85.8c1.4-12.1-1.6-22.5-9-30.2zm-157 271.3c-3.5 3.5-7.8 5.2-12.1 5.2-2.2 0-5.6-.4-8.2-3l-98.3-98.4c-5.2-5.2-3.9-14.7 2.6-21.1l22.4-22.4L10.3-718.4l-22.8 23.2zm155.3-242.9l-8.6 85.8c-.4 6-5.2 15.1-9.5 19.4L18.6-726.8-97.9-843.2 8.7-949.3c4.3-4.3 14.7-8.6 21.6-9.5l83.2-8.2h3.5c7.8 0 14.7 3 19.4 8.2 5.1 5.2 7.3 12.5 6.4 20.7z\"/><path class=\"st1\" d=\"M90.6-942.8c-15.5 0-28 12.5-28 28s12.5 28 28 28 28-12.5 28-28-12.5-28-28-28zm0 44.9c-9.5 0-16.8-7.8-16.8-16.8s7.8-16.8 16.8-16.8c9.5 0 16.8 7.8 16.8 16.8s-7.7 16.8-16.8 16.8zM-357.1-1138c-15.5-17.3-38.8-25.9-64.7-23.3l-166.4 16.5c-19.9 1.7-44.9 12.9-56.9 25l-274.4 274.3c-21.5 21.5-24.1 55.2-5.2 74.2L-728-574.6c7.7 7.7 19.8 12.9 31.9 12.9 14.7 0 29.3-6.1 39.7-17.3l274.2-274.3c12.9-12.9 24.1-36.2 25.9-52.6l17.3-171.7c2.6-24.1-3.4-44.8-18.1-60.4zm-314 542.6c-6.9 6.9-15.5 10.4-24.2 10.4-4.3 0-11.2-.9-16.4-6.1l-196.7-196.6c-10.3-10.3-7.7-29.3 5.2-42.3l44.9-44.9L-625.4-642l-45.7 46.6zm310.5-485.6l-17.2 171.6c-.9 12.1-10.3 30.2-19 38.8L-609-658.3l-233-232.9 213.2-212.2c8.6-8.6 29.3-17.3 43.1-19l166.5-16.4h6.9c15.5 0 29.3 6.1 38.8 16.4 10.3 10.3 14.7 25 12.9 41.4z\"/><path class=\"st1\" d=\"M-465-1090.5c-31.1 0-56.1 25-56.1 56.1s25 56.1 56.1 56.1 56.1-25 56.1-56.1-25-56.1-56.1-56.1zm0 89.7c-19 0-33.7-15.5-33.7-33.7 0-18.2 15.5-33.7 33.7-33.7 19 0 33.7 15.5 33.7 33.7 0 18.2-15.5 33.7-33.7 33.7z\"/><g><path class=\"st1\" d=\"M915.2 79.6c-23.3-25.9-58.2-38.8-97-34.9L568.5 69.3c-29.8 2.6-67.3 19.4-85.4 37.5L71.6 518.3c-32.3 32.3-36.2 82.8-7.8 111.3l295 295c11.6 11.6 29.7 19.4 47.8 19.4 22 0 44-9.1 59.5-25.9l411.5-411.5c19.4-19.4 36.2-54.3 38.8-78.9l25.9-257.5c3.9-36.2-5.1-67.3-27.1-90.6zm-471 813.9c-10.4 10.4-23.3 15.6-36.3 15.6-6.5 0-16.8-1.3-24.6-9.1l-295-295c-15.5-15.5-11.6-44 7.8-63.4l67.3-67.3 349.3 349.4-68.5 69.8zM910 165l-25.9 257.5c-1.3 18.1-15.5 45.3-28.5 58.2L537.3 799.1 187.9 449.7l319.7-318.3c12.9-12.9 44-25.9 64.7-28.5L822 78.3h10.4c23.3 0 44 9.1 58.2 24.6 15.5 15.5 22 37.5 19.4 62.1z\"/><path class=\"st1\" d=\"M753.4 150.8c-46.6 0-84.1 37.5-84.1 84.1s37.5 84.1 84.1 84.1 84.1-37.5 84.1-84.1-37.5-84.1-84.1-84.1zm0 134.6c-28.5 0-50.5-23.3-50.5-50.5s23.3-50.5 50.5-50.5c28.5 0 50.5 23.3 50.5 50.5s-23.3 50.5-50.5 50.5z\"/></g></svg>`,\n};\nexport const pepIconNumberCoins: {\n    name: 'number_coins';\n    data: string;\n} = {\n    name: 'number_coins',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.5 14.244c.355.562.885 1.04 1.547 1.432-.659.27-1.047.576-1.047.824 0 .589 2.186 1.5 5 1.5 2.44 0 4.409-.685 4.888-1.251.754-.14 1.457-.338 2.085-.592.018.112.027.226.027.343 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.914.563-1.678 1.5-2.256zm13.64-3.523c.547.5.86 1.098.86 1.779 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.27.049-.526.142-.769.543.309 1.17.562 1.858.759v.01c0 .589 2.186 1.5 5 1.5s5-.911 5-1.5c0-.172-.187-.372-.522-.568.672-.33 1.238-.733 1.662-1.21zM12 5c3.814 0 7 1.328 7 3.5 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5C5 6.328 8.186 5 12 5zm0 2c-2.814 0-5 .911-5 1.5S9.186 10 12 10s5-.911 5-1.5S14.814 7 12 7z\"/></svg>`,\n};\nexport const pepIconNumberDecimal: {\n    name: 'number_decimal';\n    data: string;\n} = {\n    name: 'number_decimal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.55 8h2.583c.48 0 .867.448.867 1s-.387 1-.867 1h-2.891l-.308 2h2.2c.479 0 .866.447.866 1 0 .553-.387 1-.867 1h-2.506l-.637 4.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.603 14h-1.976l-.637 4.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L9.604 14H6.867C6.388 14 6 13.553 6 13c0-.553.388-1 .867-1H9.91l.308-2H7.867C7.388 10 7 9.552 7 9s.388-1 .867-1h2.66l.483-3.142a1 1 0 011.98.284L12.55 8h1.976l.483-3.142a1.002 1.002 0 011.132-.848zM5.5 16a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm8.718-6h-1.975l-.308 2h1.975l.308-2z\"/></svg>`,\n};\nexport const pepIconNumberDollar: {\n    name: 'number_dollar';\n    data: string;\n} = {\n    name: 'number_dollar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.203 20h1.48a.605.605 0 00.614-.591v-1.367l.307-.08C16.11 17.357 17 15.698 17 14.465c0-2.285-2.048-3.234-4.055-3.865-1.884-.598-2.487-.96-2.487-1.496 0-.48.578-.962 1.872-.962 1.426 0 2.319.39 2.7.56a.623.623 0 00.81-.284l.586-1.194a.584.584 0 00-.295-.784 7.681 7.681 0 00-2.335-.622l-.36-.044V4.587A.602.602 0 0012.82 4h-1.454c-.336 0-.614.264-.614.587v1.32l-.308.075c-2.023.492-3.232 1.741-3.232 3.337 0 2.104 2.167 3.042 4.293 3.684 1.962.615 2.228 1.147 2.228 1.588 0 .682-.917 1.178-2.179 1.178-1.073 0-2.228-.264-3.089-.706a.62.62 0 00-.487-.04.614.614 0 00-.36.32l-.566 1.21a.576.576 0 00.258.752c.717.399 1.782.693 2.913.816l.365.036v1.253c0 .326.274.59.614.59z\"/></svg>`,\n};\nexport const pepIconNumberEuro: {\n    name: 'number_euro';\n    data: string;\n} = {\n    name: 'number_euro',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.936 4.086l.294.008a6.185 6.185 0 013.268 1.148c.152.09.274.212.365.365l.102.243c.073.263.035.549-.102.784a1.025 1.025 0 01-.609.467c-.241.066-.573.05-.784-.102a5.58 5.58 0 00-1.107-.628l.127.058-.133-.051c-.25-.09-.507-.16-.769-.209l-.122-.02-.133-.013a5.058 5.058 0 00-.789.002l-.113.01-.138.024c-.259.05-.512.12-.76.209l-.129.049-.131.06a5.522 5.522 0 00-.73.428l-.126.09-.144.12a6.33 6.33 0 00-.675.677l-.118.145-.142.196a7.204 7.204 0 00-.547.94h4.249c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.212l-.022.208a8.369 8.369 0 00-.032.793l4.882-.001c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.46c.078.259.169.513.273.762l-.052-.131.101.225c.16.332.345.653.555.957l.139.19-.081-.098.16.206-.076-.103.118.145c.208.242.433.47.675.678l.139.114.131.095c.232.16.476.304.73.428l.139.062.121.048c.248.089.501.158.76.208l.121.02.13.015c.263.02.526.021.789.001l.143-.015.112-.018c.262-.05.519-.12.77-.209l.134-.052.161-.073c.19-.094.376-.2.554-.315l.263-.18c.21-.153.543-.169.785-.104.254.07.475.24.608.467a1.012 1.012 0 01-.16 1.233c-.067.054-.136.107-.205.16a6.275 6.275 0 01-1.66.848c-1.808.617-3.9.279-5.438-.851a7.376 7.376 0 01-1.055-.917 8.135 8.135 0 01-.88-1.132 7.267 7.267 0 01-.578-1.095 9.32 9.32 0 01-.528-1.568l-1.399-.001c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.165a8.305 8.305 0 01.053-1H5.96c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.651c.094-.267.201-.53.316-.79A7.681 7.681 0 019.41 6.094a7.302 7.302 0 011.065-.902c.31-.218.64-.408.99-.557.423-.18.846-.342 1.301-.426.48-.09.975-.143 1.464-.114z\"/></svg>`,\n};\nexport const pepIconNumberMinus: {\n    name: 'number_minus';\n    data: string;\n} = {\n    name: 'number_minus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><rect width=\"16\" height=\"4\" x=\"4\" y=\"10\" fill-rule=\"evenodd\" rx=\"2\"/></svg>`,\n};\nexport const pepIconNumberNumber: {\n    name: 'number_number';\n    data: string;\n} = {\n    name: 'number_number',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.582 8H19a1 1 0 110 2h-2.704l-.571 4H18a.999.999 0 110 2h-2.561l-.449 3.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.417 16H9.439l-.449 3.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L7.418 16H5a1 1 0 110-2h2.704l.571-4H6a1 1 0 010-2h2.561l.449-3.142a1 1 0 011.98.284L10.582 8h3.978l.45-3.142a1.002 1.002 0 011.131-.848zM14.274 10h-3.978l-.571 4h3.978l.571-4z\"/></svg>`,\n};\nexport const pepIconNumberPercent: {\n    name: 'number_percent';\n    data: string;\n} = {\n    name: 'number_percent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 13a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4zm1.364-9.364a1 1 0 010 1.414L7.05 18.364a1 1 0 01-1.414-1.414L16.95 5.636a1 1 0 011.414 0zM7 3a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4z\"/></svg>`,\n};\nexport const pepIconNumberPlus: {\n    name: 'number_plus';\n    data: string;\n} = {\n    name: 'number_plus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a2 2 0 012 2v4h4a2 2 0 110 4h-4v4a2 2 0 11-4 0v-4H6a2 2 0 110-4h4V6a2 2 0 012-2z\"/></svg>`,\n};\nexport const pepIconRipplesTransparent: {\n    name: 'ripples_transparent';\n    data: string;\n} = {\n    name: 'ripples_transparent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 128 128\" preserveAspectRatio=\"xMidYMid\" class=\"lds-ripple\" style=\"background:0 0\"><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-1.6s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-1.6s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-0.8s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-0.8s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"0s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"0s\" repeatCount=\"indefinite\"/></circle></svg>`,\n};\nexport const pepIconShoppingCart: {\n    name: 'shopping_cart';\n    data: string;\n} = {\n    name: 'shopping_cart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 4h2.153a1 1 0 01.986.836L7.333 6H18a1 1 0 011 1v4.153a1 1 0 01-.836.986l-9.542 1.59.045.271H18a1 1 0 010 2H7.847a1 1 0 01-.986-.836L5.473 6.836A1 1 0 004.486 6H4a1 1 0 110-2zm3.86 5.164l.273 1.633a1 1 0 001.15.822l6.881-1.146A1 1 0 0017 9.486V9a1 1 0 00-1-1H8.847a1 1 0 00-.986 1.164zM17.5 20a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm-11 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3z\"/></svg>`,\n};\nexport const pepIconShoppingPaper: {\n    name: 'shopping_paper';\n    data: string;\n} = {\n    name: 'shopping_paper',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 2a5 5 0 015 5v1h2a2 2 0 012 2v8a4 4 0 01-4 4H7a4 4 0 01-4-4v-8a2 2 0 012-2h2V7a5 5 0 015-5zm6 8H6a1 1 0 00-1 1v7a2 2 0 002 2h10a2 2 0 002-2v-7a1 1 0 00-1-1zm-6-6a3 3 0 00-3 3v1h6V7a3 3 0 00-3-3z\"/></svg>`,\n};\nexport const pepIconSystemAttach: {\n    name: 'system_attach';\n    data: string;\n} = {\n    name: 'system_attach',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.86 14.378l2.787-2.786a.985.985 0 00-1.393-1.393l-2.786 2.786a2.955 2.955 0 104.179 4.18l2.786-2.787a4.925 4.925 0 00-6.965-6.965L6.68 10.199a.985.985 0 01-1.393-1.393L8.075 6.02a6.896 6.896 0 019.75 9.751l-2.785 2.786a4.925 4.925 0 01-6.965-6.965l2.786-2.786a2.955 2.955 0 114.179 4.18l-2.786 2.785a.985.985 0 01-1.393-1.393z\"/></svg>`,\n};\nexport const pepIconSystemAvatar: {\n    name: 'system_avatar';\n    data: string;\n} = {\n    name: 'system_avatar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.873 20C5.317 18.835 5 17.562 5 16.333c0-2.407 1.215-4.078 3.066-4.997C7.706 10.393 7.5 9.37 7.5 8.4 7.5 5.362 9.515 4 12 4s4.5 1.362 4.5 4.4c0 .97-.205 1.993-.566 2.936 1.85.919 3.066 2.59 3.066 4.997 0 1.23-.317 2.502-.873 3.667h-1.244c-1.16 0-1.16-.629-.999-.966.392-.816.616-1.705.616-2.534 0-1.482-.716-2.44-1.821-2.974C13.93 14.42 13.004 15 12 15c-1.004 0-1.93-.58-2.679-1.474C8.216 14.06 7.5 15.018 7.5 16.5c0 .827.223 1.712.612 2.525.163.34.163.975-.966.975H5.873zM12 12.5c1.105 0 2-2.2 2-3.857S13.105 6.5 12 6.5s-2 .486-2 2.143c0 1.657.895 3.857 2 3.857z\"/></svg>`,\n};\nexport const pepIconSystemBin: {\n    name: 'system_bin';\n    data: string;\n} = {\n    name: 'system_bin',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 7V6a1 1 0 011-1h4a1 1 0 011 1v.999l.913.001H17a1 1 0 010 2h-.167l-.757 9.083a1 1 0 01-.996.917H8.92a1 1 0 01-.996-.917L7.166 9H7a1 1 0 110-2h2zm5.76 2l-5.525.005L9.79 17h4.42l.55-8z\"/></svg>`,\n};\nexport const pepIconSystemBolt: {\n    name: 'system_bolt';\n    data: string;\n} = {\n    name: 'system_bolt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.612 19.84a.33.33 0 01-.279.16.332.332 0 01-.128-.026.362.362 0 01-.199-.402l1.25-6.568H7.333c-.103 0-.2-.05-.263-.137a.374.374 0 01-.06-.305l2-8.293A.336.336 0 019.333 4h6c.122 0 .235.07.294.185a.377.377 0 01-.012.362L12.943 9h3.723c.122 0 .235.064.294.18a.387.387 0 01-.015.37l-6.333 10.29z\"/></svg>`,\n};\nexport const pepIconSystemChat: {\n    name: 'system_chat';\n    data: string;\n} = {\n    name: 'system_chat',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.5 4a7.5 7.5 0 016.755 10.764L20 20l-5.236-1.745A7.5 7.5 0 1111.5 4zm0 2a5.5 5.5 0 102.392 10.454l.732-.354 2.214.738-.738-2.214.354-.732A5.5 5.5 0 0011.5 6zm-2 4a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm4 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n};\nexport const pepIconSystemCircle: {\n    name: 'system_circle';\n    data: string;\n} = {\n    name: 'system_circle',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"8\" fill-rule=\"evenodd\"/></svg>`,\n};\nexport const pepIconSystemClose: {\n    name: 'system_close';\n    data: string;\n} = {\n    name: 'system_close',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.39 5.61a2.085 2.085 0 010 2.95L14.948 12l3.44 3.44c.774.774.813 2.004.116 2.823l-.116.126a2.085 2.085 0 01-2.949 0L12 14.95l-3.44 3.44a2.085 2.085 0 11-2.95-2.949L9.052 12l-3.44-3.44a2.085 2.085 0 01-.116-2.823l.116-.126a2.085 2.085 0 012.949 0L12 9.05l3.44-3.44a2.085 2.085 0 012.95 0z\"/></svg>`,\n};\nexport const pepIconSystemDoc: {\n    name: 'system_doc';\n    data: string;\n} = {\n    name: 'system_doc',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.172 4a1 1 0 01.707.293l3.828 3.828a1 1 0 01.293.707V19a1 1 0 01-1 1H7a1 1 0 01-1-1V5a1 1 0 011-1h6.172zM11 6H9a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1v-6a1 1 0 00-1-1h-2a1 1 0 01-1-1V7a1 1 0 00-1-1z\"/></svg>`,\n};\nexport const pepIconSystemDoor: {\n    name: 'system_door';\n    data: string;\n} = {\n    name: 'system_door',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16.7a2 2 0 01-1.188 1.828l-7.109 3.16A.5.5 0 0110 21.23V10.3a2 2 0 011.188-1.828l5.579-2.48L7 5.959V17a1 1 0 01-2 0V5a1 1 0 011-1h12a1 1 0 011 1v11.7z\"/></svg>`,\n};\nexport const pepIconSystemDotEllipsis: {\n    name: 'system_dot_ellipsis';\n    data: string;\n} = {\n    name: 'system_dot_ellipsis',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(5 17)\"><circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"7.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"13.5\" cy=\"1.5\" r=\"1.5\"/></g></svg>`,\n};\nexport const pepIconSystemEdit: {\n    name: 'system_edit';\n    data: string;\n} = {\n    name: 'system_edit',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 20a1 1 0 010 2H3a1 1 0 010-2h18zM14.207 2.793l4 4a1 1 0 010 1.414l-8.5 8.5a1 1 0 01-.39.242l-6 2a1 1 0 01-1.266-1.265l2-6a1 1 0 01.242-.391l8.5-8.5a1 1 0 011.414 0zM11 7.414L5.874 12.54 4.581 16.42l3.879-1.293L13.585 10 11 7.414zm2.501-2.5L12.414 6 15 8.585 16.086 7.5 13.5 4.914z\"/></svg>`,\n};\nexport const pepIconSystemEducation: {\n    name: 'system_education';\n    data: string;\n} = {\n    name: 'system_education',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.12 4.062l10.478 5.719a.25.25 0 010 .438l-.598.326V15a1 1 0 01-2 0v-3.363l-2 1.091V16c0 2.21-2.686 4-6 4s-6-1.79-6-4v-3.272L1.402 10.22a.25.25 0 010-.438L11.88 4.062a.25.25 0 01.24 0zm-4.121 9.757L8 16c0 .893 1.66 2 4 2s4-1.107 4-2l-.001-2.18-3.88 2.118a.25.25 0 01-.239 0L8 13.819zm3.98-7.302l-.038.013-6.237 3.36a.125.125 0 00-.031.196l.031.024 6.237 3.36a.125.125 0 00.08.013l.038-.013 6.237-3.36a.125.125 0 00.031-.196l-.031-.024-6.237-3.36a.125.125 0 00-.08-.013z\"/></svg>`,\n};\nexport const pepIconSystemEmail: {\n    name: 'system_email';\n    data: string;\n} = {\n    name: 'system_email',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4c4.411 0 8 3.589 8 8 0 .543-.055 1.086-.163 1.612-.344 1.64-1.939 2.685-3.555 2.345a2.973 2.973 0 01-1.64-.955A3.984 3.984 0 0112 16c-2.206 0-4-1.794-4-4s1.794-4 4-4a4.004 4.004 0 013.923 4.782l-.008.033a.994.994 0 00.143.752.998.998 0 00.632.432 1.008 1.008 0 001.184-.775A6.006 6.006 0 0012 6C8.691 6 6 8.69 6 12a6.006 6.006 0 008.064 5.636 1 1 0 11.685 1.88 7.983 7.983 0 01-2.75.484L12 20c-4.411 0-8-3.589-8-8s3.589-8 8-8zm0 6c-1.103 0-2 .897-2 2s.897 2 2 2 2-.897 2-2-.897-2-2-2z\"/></svg>`,\n};\nexport const pepIconSystemFileDownload: {\n    name: 'system_file_download';\n    data: string;\n} = {\n    name: 'system_file_download',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6-5v5h2.575a.5.5 0 01.312.89l-3.575 2.86a.5.5 0 01-.624 0l-3.575-2.86a.5.5 0 01.312-.89H11V6h2z\"/></svg>`,\n};\nexport const pepIconSystemFileUploadCloud: {\n    name: 'system_file_upload_cloud';\n    data: string;\n} = {\n    name: 'system_file_upload_cloud',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10 6a4 4 0 013.6 2.253 4 4 0 015.397 3.917A3 3 0 0118 18h-5.001L13 14h2.575a.5.5 0 00.312-.89l-3.575-2.86a.5.5 0 00-.624 0l-3.575 2.86a.5.5 0 00.312.89H11l-.001 4H7a4 4 0 01-.997-7.875L6 10a4 4 0 014-4z\"/></svg>`,\n};\nexport const pepIconSystemFileUpload: {\n    name: 'system_file_upload';\n    data: string;\n} = {\n    name: 'system_file_upload',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6.688-4.75l3.575 2.86a.5.5 0 01-.312.89H13v4a1 1 0 01-2 0v-4H8.425a.5.5 0 01-.312-.89l3.575-2.86a.5.5 0 01.624 0z\"/></svg>`,\n};\nexport const pepIconSystemFilter2: {\n    name: 'system_filter_2';\n    data: string;\n} = {\n    name: 'system_filter_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 15.5a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h1.708A2.5 2.5 0 018 15.5zm8-6a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-1.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h9.708A2.5 2.5 0 0116 9.5zm-8-6A2.5 2.5 0 0110.292 5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 110-2h1.708A2.5 2.5 0 018 3.5z\"/></svg>`,\n};\nexport const pepIconSystemFilter: {\n    name: 'system_filter';\n    data: string;\n} = {\n    name: 'system_filter',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.5 15a.5.5 0 01.5.5v2.86a.5.5 0 01-.621.485l-3-.75A.5.5 0 0110 17.61V15.5a.5.5 0 01.5-.5h3zm2.5-5a1 1 0 010 2H8a1 1 0 010-2h8zm3-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n};\nexport const pepIconSystemFullScreen: {\n    name: 'system_full_screen';\n    data: string;\n} = {\n    name: 'system_full_screen',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.597 13.403a.961.961 0 010 1.36L7.36 18H9a1 1 0 010 2H5a1 1 0 01-1-1v-4a1 1 0 012 0v1.64l3.238-3.237a.961.961 0 011.36 0zM19 4a1 1 0 011 1v4a1 1 0 01-2 0V7.36l-3.238 3.237a.961.961 0 11-1.36-1.36L16.642 6H15a1 1 0 010-2h4z\"/></svg>`,\n};\nexport const pepIconSystemHeart: {\n    name: 'system_heart';\n    data: string;\n} = {\n    name: 'system_heart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 6.532C11.395 5.805 10.353 5 8.7 5 5.89 5 4 7.608 4 10.043c0 3.546 6.803 8.297 7.579 8.827a.75.75 0 00.842 0c.776-.53 7.579-5.282 7.579-8.827C20 7.608 18.11 5 15.299 5c-1.651 0-2.694.805-3.299 1.532zM6 10.27C6 8.9 7.028 7 8.957 7c1.755 0 2.374 1.517 2.398 1.577a.688.688 0 001.288.005c.025-.065.645-1.582 2.4-1.582C16.973 7 18 8.9 18 10.27c0 1.82-3.53 4.72-6 6.48-2.471-1.76-6-4.657-6-6.48z\"/></svg>`,\n};\nexport const pepIconSystemHome: {\n    name: 'system_home';\n    data: string;\n} = {\n    name: 'system_home',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 5a1 1 0 011 1v3.057l1.581 1.13a1 1 0 01.3 1.288l-.067.106a1 1 0 01-1.395.233l-.42-.3L18 19a1 1 0 01-1 1H7a1 1 0 01-1-1v-7.486l-.419.3a1 1 0 11-1.162-1.628l7-5 .014-.01a.993.993 0 01.062-.04l-.076.05a1.009 1.009 0 01.7-.179.882.882 0 01.227.055.885.885 0 01.115.05c.041.022.081.046.12.074l-.076-.05a.993.993 0 01.062.04l.014.01L16 7.628V6a1 1 0 011-1zm-5.001 2.228l-4 2.857L8 18h8v-7.914l-4.001-2.858z\"/></svg>`,\n};\nexport const pepIconSystemInfo: {\n    name: 'system_info';\n    data: string;\n} = {\n    name: 'system_info',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm.32 6a1 1 0 01.986 1.164l-.667 4a1 1 0 01-.986.836h-.473a1 1 0 01-.986-1.164l.667-4a1 1 0 01.986-.836h.473zm.18-4a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n};\nexport const pepIconSystemInventory: {\n    name: 'system_inventory';\n    data: string;\n} = {\n    name: 'system_inventory',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.394 4.08l7.302 3.13a.5.5 0 01.303.46L20 16.33a.5.5 0 01-.303.46l-7.304 3.128a1 1 0 01-.787 0L4.303 16.79A.5.5 0 014 16.33V7.67c0-.2.119-.38.303-.459l7.303-3.13a1 1 0 01.788 0zM6 9.518v5.824l5 2.142V11.66L6 9.517zm12 0l-5 2.142v5.824l5-2.142V9.517zm-6-3.429L7.539 8 12 9.912 16.461 8 12 6.088z\"/></svg>`,\n};\nexport const pepIconSystemLink: {\n    name: 'system_link';\n    data: string;\n} = {\n    name: 'system_link',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.254 10.627a.97.97 0 010 1.373L6.51 14.745a1.941 1.941 0 002.744 2.745L12 14.745a.97.97 0 111.373 1.372l-2.746 2.746a3.882 3.882 0 01-5.49-5.49l2.745-2.746a.97.97 0 011.372 0zm5.491-1.373a.972.972 0 010 1.373l-4.117 4.118a.97.97 0 01-1.373-1.373l4.118-4.118a.97.97 0 011.372 0zm4.118-4.117a3.882 3.882 0 010 5.49l-2.746 2.745A.97.97 0 1114.745 12l2.745-2.746a1.942 1.942 0 00-2.745-2.744L12 9.255a.97.97 0 01-1.373-1.373l2.746-2.745a3.883 3.883 0 015.49 0z\"/></svg>`,\n};\nexport const pepIconSystemMap: {\n    name: 'system_map';\n    data: string;\n} = {\n    name: 'system_map',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.958 20l-.073-.006a.985.985 0 01-.14-.027l-.03-.008a.855.855 0 01-.08-.027l-.006-.004-5-2A1 1 0 013 17V5a1 1 0 011.371-.928l4.66 1.863 5.653-1.884.01-.003a.997.997 0 01.086-.024l-.096.027a1.024 1.024 0 01.206-.046l.03-.002a.85.85 0 01.086-.004H15.042a.984.984 0 01.213.034l.03.008a.855.855 0 01.08.027l.006.004 5 2A1 1 0 0121 7v12a1 1 0 01-1.371.928l-4.661-1.864-5.652 1.885-.01.003a.997.997 0 01-.086.024l.096-.027a1.024 1.024 0 01-.206.046l-.03.002a.85.85 0 01-.086.004H8.958zM14 6.387l-4 1.334v9.892l4-1.334V6.387zm-9 .09v9.846l3 1.2V7.677l-3-1.2zm11 0v9.846l3 1.2V7.677l-3-1.2z\"/></svg>`,\n};\nexport const pepIconSystemMenuDots: {\n    name: 'system_menu_dots';\n    data: string;\n} = {\n    name: 'system_menu_dots',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(10 4)\"><path d=\"M2 12a2 2 0 110 4 2 2 0 010-4zm0-6a2 2 0 110 4 2 2 0 010-4z\"/><rect width=\"4\" height=\"4\" rx=\"2\"/></g></svg>`,\n};\nexport const pepIconSystemMenu: {\n    name: 'system_menu';\n    data: string;\n} = {\n    name: 'system_menu',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n};\nexport const pepIconSystemMove: {\n    name: 'system_move';\n    data: string;\n} = {\n    name: 'system_move',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 14a1 1 0 011 1v3.585l1.293-1.292a1 1 0 011.32-.083l.094.083a1 1 0 010 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 011.414-1.414L11 18.585V15a1 1 0 011-1zM6.707 8.293a1 1 0 010 1.414L5.415 11 9 11a1 1 0 010 2l-3.587-.001 1.294 1.294a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm10.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414l1.292-1.294L15 13a1 1 0 010-2l3.585-.001-1.292-1.292a1 1 0 01-.083-1.32zm-6-6a1 1 0 011.414 0l3 3a1 1 0 11-1.414 1.414L13 5.414V9a1 1 0 01-2 0V5.414L9.707 6.707a1 1 0 01-1.32.083l-.094-.083a1 1 0 010-1.414z\"/></svg>`,\n};\nexport const pepIconSystemMust: {\n    name: 'system_must';\n    data: string;\n} = {\n    name: 'system_must',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><filter id=\"a\" width=\"187.5%\" height=\"187.5%\" x=\"-43.7%\" y=\"-31.2%\" filterUnits=\"objectBoundingBox\"><feOffset dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" stdDeviation=\"2\"/><feColorMatrix in=\"shadowBlurOuter1\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.12 0\"/></filter><path id=\"b\" d=\"M13.487 4l-.403 6.767 5.997-2.493.919 2.973-6.246 1.689 4.11 5.226L15.457 20 12 14.276 8.542 20l-2.405-1.838 4.109-5.226L4 11.247l.919-2.973 5.996 2.493L10.513 4h2.974z\"/></defs><g fill=\"none\" fill-rule=\"evenodd\"><use fill=\"#000\" filter=\"url(#a)\" xlink:href=\"#b\"/><use fill=\"#FE0000\" xlink:href=\"#b\"/></g></svg>`,\n};\nexport const pepIconSystemOffLine: {\n    name: 'system_off_line';\n    data: string;\n} = {\n    name: 'system_off_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20.142 5l1.414 1.414-2.93 2.93A4 4 0 0117 17h-6.03l-3.556 3.556L6 19.142 20.142 5zM14 5c1.141 0 2.17.478 2.9 1.244l-1.416 1.415a1.998 1.998 0 00-3.283.467l-.398.819a1 1 0 01-1.25.5l-.852-.32A1.991 1.991 0 009 9c-1.105 0-2 .895-2 1.98l.04 1.592-1.373.484A1.001 1.001 0 006 15h2.142l-2 2H6a3 3 0 01-.997-5.83l-.002-.085L5 11a4 4 0 015.402-3.748A3.998 3.998 0 0114 5zm3.029 5.941L12.97 15H17a2 2 0 00.5-3.937l-.471-.122z\"/></svg>`,\n};\nexport const pepIconSystemOk: {\n    name: 'system_ok';\n    data: string;\n} = {\n    name: 'system_ok',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.511 7c-.376.011-.732.168-.995.438-2.29 2.295-4.38 4.544-6.58 6.79l-2.584-2.072a1.445 1.445 0 00-2.035.226 1.448 1.448 0 00.226 2.035l3.618 2.894c.578.46 1.409.411 1.929-.113 2.602-2.608 4.934-5.17 7.476-7.718A1.449 1.449 0 0017.511 7z\"/></svg>`,\n};\nexport const pepIconSystemPause: {\n    name: 'system_pause';\n    data: string;\n} = {\n    name: 'system_pause',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.5 5A1.5 1.5 0 0110 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 018.5 5zm7 0A1.5 1.5 0 0117 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 0115.5 5z\"/></svg>`,\n};\nexport const pepIconSystemPhone: {\n    name: 'system_phone';\n    data: string;\n} = {\n    name: 'system_phone',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4.814 8.88c1.362-1.39 2.043-1.022 2.98.328.85 1.228.595 2.046 0 2.578-.384.327-1.363.9-.852 1.76.724 1.227 2.129 2.7 3.363 3.478.851.531 1.532-.369 1.915-.696.596-.573 1.447-.736 2.64.164 1.32.982 1.66 1.677.127 2.905C9.88 22.384 1.323 13.546 4.814 8.88zM11 4a9 9 0 019 9 1 1 0 01-2 0 7 7 0 00-7-7 1 1 0 010-2zm0 4a5 5 0 015 5 1 1 0 01-2 0 3 3 0 00-3-3 1 1 0 010-2z\"/></svg>`,\n};\nexport const pepIconSystemPlay: {\n    name: 'system_play';\n    data: string;\n} = {\n    name: 'system_play',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 4.869a1 1 0 01.555.167l9.821 6.548a.5.5 0 010 .832l-9.821 6.548A1 1 0 017 18.13V5.87a1 1 0 011-1zm2 4a1 1 0 00-1 1v4.262a1 1 0 001.555.833l3.821-2.548a.5.5 0 000-.832l-3.821-2.548A1 1 0 0010 8.87z\"/></svg>`,\n};\nexport const pepIconSystemPrint: {\n    name: 'system_print';\n    data: string;\n} = {\n    name: 'system_print',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 7a1 1 0 00-1-1h-4a1 1 0 00-.993.883L9 7v1H7V6a2 2 0 012-2h6a2 2 0 012 2v2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2v2a2 2 0 01-2 2H9a2 2 0 01-2-2v-2H5a2 2 0 01-2-2v-4a2 2 0 012-2h10V7zm0 7H9v3a1 1 0 00.883.993L10 18h4a1 1 0 00.993-.883L15 17v-3zm3-4H6a1 1 0 00-.993.883L5 11v2a1 1 0 00.883.993L6 14h1v-2h10v2h1a1 1 0 00.993-.883L19 13v-2a1 1 0 00-1-1z\"/></svg>`,\n};\nexport const pepIconSystemProcessing: {\n    name: 'system_processing';\n    data: string;\n} = {\n    name: 'system_processing',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18 12a1 1 0 012 0 8 8 0 01-11.955 6.955l-1.338 1.338A1 1 0 015 19.586V16a1 1 0 011-1h3.586a1 1 0 01.707 1.707l-.763.763A6 6 0 0018 12zM4 12a8 8 0 0111.955-6.955l1.338-1.338A1 1 0 0119 4.414V8a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12a1 1 0 01-2 0z\" fill-rule=\"evenodd\"/></svg>`,\n};\nexport const pepIconSystemQuestion: {\n    name: 'system_question';\n    data: string;\n} = {\n    name: 'system_question',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm-.004 9a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-.087-7c2.565 0 3.814 1.075 3.814 2.575 0 .93-.665 1.713-1.25 2.022-.774.409-1.213.678-1.268 1.27l-.006.133h-2.703c0-1.421.199-1.866 1.118-2.285.782-.358 1.38-.656 1.38-1.14 0-.432-.493-.726-1.11-.726-.62 0-1.156.305-1.225.75l-.007.097H8.21C8.235 7.795 9.511 7 11.91 7z\" fill-rule=\"evenodd\"/></svg>`,\n};\nexport const pepIconSystemRotateDevice: {\n    name: 'system_rotate_device';\n    data: string;\n} = {\n    name: 'system_rotate_device',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.707 4.293A1 1 0 0119 5v3.586a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12.561V16.5A1.5 1.5 0 007.5 18h9a1.5 1.5 0 001.5-1.5V13a1 1 0 012 0v4a3 3 0 01-3 3H7a3 3 0 01-3-3v-5h.021a8 8 0 0111.934-6.37l1.338-1.337a1 1 0 011.414 0zM12 11a2 2 0 011.001 3.732L13 16a1 1 0 01-2 0v-1.268A2 2 0 0112 11z\"/></svg>`,\n};\nexport const pepIconSystemSearch: {\n    name: 'system_search';\n    data: string;\n} = {\n    name: 'system_search',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.5 4a6.5 6.5 0 015.533 9.912l3.538 3.538a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414 0l-3.538-3.538A6.5 6.5 0 1110.5 4zm0 2.5a4 4 0 100 8 4 4 0 000-8z\"/></svg>`,\n};\nexport const pepIconSystemSelect: {\n    name: 'system_select';\n    data: string;\n} = {\n    name: 'system_select',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.153 4l-1.944 2H6a1 1 0 00-1 1v11h14v-7.039c.66-.69 1.322-1.38 2-2.073V19a1 1 0 01-1 1H4a1 1 0 01-1-1V5a1 1 0 011-1h12.153zm3.358 0a1.447 1.447 0 011.055 2.48c-2.542 2.548-4.874 5.11-7.476 7.718-.52.524-1.351.572-1.93.113l-3.617-2.894a1.449 1.449 0 011.809-2.261l2.585 2.072c2.199-2.246 4.29-4.495 6.58-6.79.262-.27.618-.427.994-.437z\"/></svg>`,\n};\nexport const pepIconSystemSettings: {\n    name: 'system_settings';\n    data: string;\n} = {\n    name: 'system_settings',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13 4l.691 2.765c.479.154.929.373 1.34.645l2.576-1.198 1.258 1.554-1.72 2.285c.175.463.29.954.334 1.466l2.543 1.299-.45 1.948-2.847.053a5.524 5.524 0 01-.926 1.16l.589 2.784-1.798.876-1.838-2.188a5.55 5.55 0 01-1.503 0l-1.84 2.188-1.797-.876.59-2.784a5.524 5.524 0 01-.927-1.16l-2.847-.053-.45-1.948 2.543-1.298a5.47 5.47 0 01.333-1.465l-1.72-2.287 1.26-1.554L8.967 7.41a5.477 5.477 0 011.342-.645L11 4h2zm-1 4.5a3.5 3.5 0 100 7 3.5 3.5 0 000-7z\"/></svg>`,\n};\nexport const pepIconSystemSignature: {\n    name: 'system_signature';\n    data: string;\n} = {\n    name: 'system_signature',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.016 4.598l.235.002c1.196.047.94 1.048.557 1.43-1.459 1.387-3.133 2.392-4.927 3.205-.286.288-.573.574-.837.861-.365.385-1.198 1.591-2.065 2.904H20a1 1 0 010 2l-14.321.001c-.72 1.126-1.285 2.036-1.366 2.19-.383.669-1.62-.169-1.238-.838.038-.069.361-.616.807-1.359A1.002 1.002 0 014 13h1.095c.724-1.173 1.44-2.291 1.758-2.67-1.172.407-1.922.676-3.117 1.01-.742.215-1.137-1.291-.395-1.506 1.937-.55 3.922-1.125 5.764-1.938.717-.67 1.393-1.499 2.158-2.072.884-.694 1.793-1.272 2.988-1.224zm-1.648 4.278c.478-.192.933.478.67.885-.12.143-.192.31-.241.479.814-.096 1.507-.359 2.224-.862.263-.191.669-.048.813.215.12.215 1.507-.358 1.698-.43.336-.12.647.12.742.406.023.095.048.167.048.24.67.023 1.482-.192 2.104-.264.765-.096.762 1.453-.003 1.549-.886.096-1.89.335-2.775.191-.191-.048-.334-.215-.406-.406-.693.239-1.458.478-2.008.12-.981.574-2.057.836-3.229.789-.43-.024-.621-.382-.573-.765 0-.048.024-.072.024-.12-.598.262-1.173.574-1.746.885-.67.382-1.265-.999-.595-1.382a23.77 23.77 0 013.253-1.53z\"/></svg>`,\n};\nexport const pepIconSystemSpinner: {\n    name: 'system_spinner';\n    data: string;\n} = {\n    name: 'system_spinner',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11 15a2 2 0 110 4 2 2 0 010-4zm5.5-1a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-9-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm10 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-5-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5z\" fill-rule=\"evenodd\"/></svg>`,\n};\nexport const pepIconSystemSupport: {\n    name: 'system_support';\n    data: string;\n} = {\n    name: 'system_support',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 16V8l-.005-.182C16.875 5.76 14.743 4 12 4 9.176 4 7 5.865 7 8v8H5a2 2 0 01-2-2v-4a2 2 0 012-2l.004-.215C5.137 4.57 8.218 2 12 2c3.866 0 7 2.686 7 6a2 2 0 012 2v4a2 2 0 01-2 2c0 2.311-2.196 4.257-5.179 4.83A2.001 2.001 0 0110 20a2 2 0 013.622-1.17C15.641 18.396 17 17.188 17 16z\"/></svg>`,\n};\nexport const pepIconSystemTexterea: {\n    name: 'system_texterea';\n    data: string;\n} = {\n    name: 'system_texterea',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.74 16.112a.889.889 0 010 1.257l-2.37 2.37a.889.889 0 11-1.258-1.256l2.37-2.37a.889.889 0 011.258 0zm0-5.926a.889.889 0 010 1.257l-8.297 8.297a.889.889 0 11-1.257-1.257l8.297-8.297a.889.889 0 011.257 0zm0-5.926a.889.889 0 010 1.257L5.517 19.74a.889.889 0 01-1.257-1.257L18.483 4.26a.889.889 0 011.257 0z\"/></svg>`,\n};\nexport const pepIconSystemTool: {\n    name: 'system_tool';\n    data: string;\n} = {\n    name: 'system_tool',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.5 3.293a1 1 0 01.083 1.32l-.083.094-1.06 1.06a1.5 1.5 0 002.12 2.122l1.061-1.06.088-.078a1 1 0 011.41 1.397l-.083.095-1.061 1.06a3.502 3.502 0 01-4.14.606l-5.255 5.255a3.5 3.5 0 11-1.416-1.416l5.256-5.254a3.502 3.502 0 01.605-4.14l1.06-1.061.088-.078a1 1 0 011.327.078zm-10 12.035a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n};\nexport const pepIconSystemView: {\n    name: 'system_view';\n    data: string;\n} = {\n    name: 'system_view',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><path id=\"a\" d=\"M12 5c5.15 0 7.987 4.15 8.942 6.83L21 12c-.893 2.672-3.74 7-9 7-5.15 0-7.987-4.15-8.942-6.83L3 12c.893-2.672 3.74-7 9-7zm0 2c-4.09 0-6.305 3.092-7 5l.056.15C5.81 14.064 8.014 17 12 17c4.09 0 6.305-3.092 7-5l-.056-.15C18.19 9.936 15.986 7 12 7zm0 8.5A3.51 3.51 0 018.5 12 3.51 3.51 0 0112 8.5a3.51 3.51 0 013.5 3.5 3.51 3.51 0 01-3.5 3.5zm0-5c-.825 0-1.5.675-1.5 1.5s.675 1.5 1.5 1.5 1.5-.675 1.5-1.5-.675-1.5-1.5-1.5z\"/></defs><use fill-rule=\"evenodd\" xlink:href=\"#a\"/></svg>`,\n};\nexport const pepIconTimeCal: {\n    name: 'time_cal';\n    data: string;\n} = {\n    name: 'time_cal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm2 8H6v6a1 1 0 001 1h10a1 1 0 001-1v-6zM7.983 7H7a1 1 0 00-1 1v1h12V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017z\"/></svg>`,\n};\nexport const pepIconTimeDatetime: {\n    name: 'time_datetime';\n    data: string;\n} = {\n    name: 'time_datetime',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm1 4H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1zm-5 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 13.02 1 1 0 0111 13V9a1 1 0 011-1z\"/></svg>`,\n};\nexport const pepIconTimeDuration: {\n    name: 'time_duration';\n    data: string;\n} = {\n    name: 'time_duration',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zM7.983 7H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017zm3.724 1.793l2.829 2.828a.998.998 0 01.289.793.998.998 0 01-.29.793l-2.828 2.829a1 1 0 01-1.414-1.415l2.206-2.207-2.206-2.207a1 1 0 011.414-1.414z\"/></svg>`,\n};\nexport const pepIconTimeTime: {\n    name: 'time_time';\n    data: string;\n} = {\n    name: 'time_time',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a8 8 0 110 16 8 8 0 010-16zm0 2a6 6 0 100 12 6 6 0 000-12zm0 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 12.02 1 1 0 0111 12V8a1 1 0 011-1z\"/></svg>`,\n};\nexport const pepIconViewCardLg: {\n    name: 'view_card_lg';\n    data: string;\n} = {\n    name: 'view_card_lg',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 4a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h12zm-7 9H6v3a2 2 0 001.85 1.995L8 18h3v-5zm7 0h-5v5h3a2 2 0 001.995-1.85L18 16v-3zm-7-7H8a2 2 0 00-1.995 1.85L6 8v3h5V6zm5 0h-3v5h5V8a2 2 0 00-2-2z\"/></svg>`,\n};\nexport const pepIconViewCardMd: {\n    name: 'view_card_md';\n    data: string;\n} = {\n    name: 'view_card_md',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 13a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2v-3a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2v-3a2 2 0 012-2h3zM7.5 15a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3zM9 4a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2V6a2 2 0 012-2h3zM7.5 6a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n};\nexport const pepIconViewCardSm: {\n    name: 'view_card_sm';\n    data: string;\n} = {\n    name: 'view_card_sm',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7 16a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 10a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 4a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2z\"/></svg>`,\n};\nexport const pepIconViewLine: {\n    name: 'view_line';\n    data: string;\n} = {\n    name: 'view_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 13a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 17h10a1 1 0 000-2zm1-10a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 9h10a1 1 0 000-2z\"/></svg>`,\n};\nexport const pepIconViewMatrix: {\n    name: 'view_matrix';\n    data: string;\n} = {\n    name: 'view_matrix',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 19a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h14a2 2 0 012 2v14zM5 16v2a1 1 0 00.883.993L6 19h2v-3H5zm9 0h-4v3h4v-3zm5 0h-3v3h2a1 1 0 00.993-.883L19 18v-2zm-5-6h-4v4h4v-4zm5 0h-3v4h3v-4zm-5-5h-4v3h4V5zm4 0h-2v3h3V6a1 1 0 00-1-1zM8 5H6a1 1 0 00-.993.883L5 6v2h3V5zm-3 9h3v-4H5v4z\"/></svg>`,\n};\nexport const pepIconViewTable: {\n    name: 'view_table';\n    data: string;\n} = {\n    name: 'view_table',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 5a2 2 0 012 2v10a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm0 10H6v1a1 1 0 00.883.993L7 17h10a1 1 0 001-1v-1zm0-4H6v2h12v-2zm-1-4H7a1 1 0 00-1 1v1h12V8a1 1 0 00-.883-.993L17 7z\"/></svg>`,\n};\nexport type PepIconType =\n    | 'arrow_back'\n    | 'arrow_down_alt'\n    | 'arrow_down'\n    | 'arrow_either'\n    | 'arrow_left_alt'\n    | 'arrow_left'\n    | 'arrow_right_alt'\n    | 'arrow_right'\n    | 'arrow_two_ways_hor_l'\n    | 'arrow_two_ways_hor_r'\n    | 'arrow_two_ways_ver_b'\n    | 'arrow_two_ways_ver_t'\n    | 'arrow_up_alt'\n    | 'arrow_up'\n    | 'barnd_pepperi'\n    | 'indicator_dot_placeholder'\n    | 'misc_excel'\n    | 'no_image_2'\n    | 'no_image'\n    | 'number_coins'\n    | 'number_decimal'\n    | 'number_dollar'\n    | 'number_euro'\n    | 'number_minus'\n    | 'number_number'\n    | 'number_percent'\n    | 'number_plus'\n    | 'ripples_transparent'\n    | 'shopping_cart'\n    | 'shopping_paper'\n    | 'system_attach'\n    | 'system_avatar'\n    | 'system_bin'\n    | 'system_bolt'\n    | 'system_chat'\n    | 'system_circle'\n    | 'system_close'\n    | 'system_doc'\n    | 'system_door'\n    | 'system_dot_ellipsis'\n    | 'system_edit'\n    | 'system_education'\n    | 'system_email'\n    | 'system_file_download'\n    | 'system_file_upload_cloud'\n    | 'system_file_upload'\n    | 'system_filter_2'\n    | 'system_filter'\n    | 'system_full_screen'\n    | 'system_heart'\n    | 'system_home'\n    | 'system_info'\n    | 'system_inventory'\n    | 'system_link'\n    | 'system_map'\n    | 'system_menu_dots'\n    | 'system_menu'\n    | 'system_move'\n    | 'system_must'\n    | 'system_off_line'\n    | 'system_ok'\n    | 'system_pause'\n    | 'system_phone'\n    | 'system_play'\n    | 'system_print'\n    | 'system_processing'\n    | 'system_question'\n    | 'system_rotate_device'\n    | 'system_search'\n    | 'system_select'\n    | 'system_settings'\n    | 'system_signature'\n    | 'system_spinner'\n    | 'system_support'\n    | 'system_texterea'\n    | 'system_tool'\n    | 'system_view'\n    | 'time_cal'\n    | 'time_datetime'\n    | 'time_duration'\n    | 'time_time'\n    | 'view_card_lg'\n    | 'view_card_md'\n    | 'view_card_sm'\n    | 'view_line'\n    | 'view_matrix'\n    | 'view_table';\nexport interface IPepIconData {\n    name: PepIconType;\n    data: string;\n}\nexport type IconNameSubset<\n    T extends Readonly<IPepIconData[]>\n> = T[number]['name'];\n",
            "properties": [
                {
                    "name": "data",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 701
                },
                {
                    "name": "name",
                    "type": "PepIconType",
                    "optional": false,
                    "description": "",
                    "line": 700
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepImageFieldOptions",
            "id": "interface-IPepImageFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "hasCampaignField",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 275
                },
                {
                    "name": "indicatorsField",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "menuField",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 277
                },
                {
                    "name": "options",
                    "type": "IPepOption[]",
                    "optional": true,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "sizeLimitMB",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 279
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepImagesFieldOptions",
            "id": "interface-IPepImagesFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "IPepOption[]",
                    "optional": true,
                    "description": "",
                    "line": 300
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepImagesFilmstripDialogData",
            "id": "interface-IPepImagesFilmstripDialogData-550c25c05a2019716e1972c470887a52",
            "file": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    ViewChild,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    Input,\n    TemplateRef,\n    Renderer2,\n    ChangeDetectorRef,\n    Inject,\n    Optional,\n    ViewContainerRef,\n} from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    transition,\n    animate,\n} from '@angular/animations';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    Gallery,\n    GalleryConfig,\n    LoadingStrategy,\n    SlidingDirection,\n    ThumbnailsPosition,\n    GalleryItem,\n    ImageItem,\n    GalleryRef,\n} from 'ng-gallery';\nimport {\n    PepCustomizationService,\n    PepLayoutType,\n    PepLayoutService,\n    PepFileService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    PepImagesField,\n} from '@pepperi-addons/ngx-lib';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { pepIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';\nimport { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';\n\nimport 'hammerjs';\n\ninterface IPepImagesFilmstripDialogData {\n    currIndex: number;\n    key: string;\n    value: string;\n    label: string;\n    uid: string;\n    showThumbnails: boolean;\n}\n\n// export const slideInAnimation = trigger('slideAnimation', [\n//     state('in', style({ transform: 'translateY(0)', opacity: 1 })),\n//     transition(':enter', [\n//         style({ transform: 'translateY(-100%)', opacity: 0 }),\n//         animate(400)\n//     ]),\n//     transition(':leave', [\n//         animate(400, style({ transform: 'translateY(-100%)', opacity: 0 }))\n//     ])\n// ]);\n\nimport {\n    IMAGEVIEWER_CONFIG,\n    ImageViewerConfig,\n    createButtonConfig,\n} from '@hallysonh/ngx-imageviewer';\n\nexport function createViewerConfig(\n    translate: TranslateService\n): ImageViewerConfig {\n    return {\n        // width: 850,\n        // height: 150,\n        bgStyle: '#FFF', // component background style\n        // scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)\n        // rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees\n        loadingMessage: translate.instant('MESSAGES.INFO_LOADING_FILE'), // 'Loading...',\n        // buttonStyle: {\n        //     iconFontFamily: 'Material Icons', // font used to render the button icons\n        //     alpha: 0.5, // buttons' transparence value\n        //     hoverAlpha: 0.7, // buttons' transparence value when mouse is over\n        //     bgStyle: '#000000', //  buttons' background style\n        //     iconStyle: '#ffffff', // buttons' icon colors\n        //     borderStyle: '#000000', // buttons' border style\n        //     borderWidth: 0, // buttons' border width (0 == disabled)\n        // },\n        // tooltips: {\n        //     enabled: true, // enable or disable tooltips for buttons\n        //     bgStyle: '#000000', // tooltip background style\n        //     bgAlpha: 0.5, // tooltip background transparence\n        //     textStyle: '#ffffff', // tooltip's text style\n        //     textAlpha: 0.9, // tooltip's text transparence\n        //     padding: 15, // tooltip padding\n        //     radius: 20, // tooltip border radius\n        // },\n        // shorter button configuration style\n        nextPageButton: createButtonConfig(\n            'navigate_next',\n            'Next page',\n            0,\n            false\n        ),\n        beforePageButton: createButtonConfig(\n            'navigate_before',\n            'Previous page',\n            1,\n            false\n        ),\n        zoomOutButton: createButtonConfig('zoom_out', 'Zoom out', 0, false),\n        zoomInButton: createButtonConfig('zoom_in', 'Zoom in', 1, false),\n        rotateLeftButton: createButtonConfig(\n            'rotate_left',\n            'Rotate left',\n            2,\n            false\n        ),\n        rotateRightButton: createButtonConfig(\n            'rotate_right',\n            'Rotate right',\n            3,\n            false\n        ),\n        resetButton: createButtonConfig('autorenew', 'Reset', 4, false),\n    };\n}\n\n@Component({\n    selector: 'pep-images-filmstrip',\n    templateUrl: './images-filmstrip.component.html',\n    styleUrls: ['./images-filmstrip.component.scss'],\n    // animations: [slideInAnimation],\n    providers: [\n        {\n            provide: IMAGEVIEWER_CONFIG,\n            // useValue: IMAGEVIEWER_CONFIG_DEFAULT,\n            useFactory: createViewerConfig,\n            deps: [TranslateService],\n        },\n    ],\n})\nexport class PepImagesFilmstripComponent\n    implements OnInit, AfterViewInit, OnDestroy {\n    // @ViewChild('ngxViewerImage') ngxViewerImage: any; // TODO: Check if we need to use this??\n    @Input() value = '';\n    @Input() key = '';\n    @Input() label = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'images';\n\n    @Input() form: FormGroup = null;\n    @Input() uid = '0';\n    @Input() showTitle = false;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() currIndex = 0;\n    @Input() showThumbnails = false;\n\n    @ViewChild('galleryCont') galleryCont: ElementRef;\n    @ViewChild('galleryDialogTemplate', { read: TemplateRef })\n    galleryDialogTemplate: TemplateRef<any>;\n    @ViewChild('galleryDialogCont') galleryDialogCont: ElementRef;\n\n    config: GalleryConfig;\n    items: GalleryItem[] = null;\n    inDialog = false;\n\n    required = false;\n    readonly = false;\n    disabled = false;\n    fieldHeight = '';\n    standAlone = false;\n\n    galleryWidth = 0;\n    galleryHeight;\n    isVertical = false;\n    galleryRef: GalleryRef;\n    dialogGalleryRef: GalleryRef;\n\n    constructor(\n        private customizationService: PepCustomizationService,\n        private dialogService: PepDialogService,\n        private layoutService: PepLayoutService,\n        private fileService: PepFileService,\n        private gallery: Gallery,\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private cd: ChangeDetectorRef,\n        @Optional()\n        private dialogRef: MatDialogRef<PepImagesFilmstripComponent>,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        private data: IPepImagesFilmstripDialogData\n    ) {\n        // If data exist copy all data properties into this.\n        if (dialogRef && data) {\n            this.inDialog = true;\n\n            Object.keys(data).forEach((key) => {\n                if (key in this) {\n                    this[key] = data[key];\n                }\n            });\n        }\n\n        this.config = {\n            // nav: false, // Show navigation buttons\n            navIcon: pepIconArrowRightAlt.data,\n            // loop: true,\n            // zoomOut: 0,\n            // dots: false,\n            // dotsPosition: 'bottom',\n            // counterPosition: 'top',\n            // thumb: true,\n            counter: false, // Show counter\n            gestures: true, // Use touch events (requires hammer.js)\n            // autoPlay: false,\n            // thumbWidth: 120,\n            // thumbHeight: 90,\n            imageSize: 'contain',\n            // panSensitivity: 25,\n            // disableThumb: false,\n            // playerInterval: 3000,\n            // thumbMode: ThumbnailsMode.Free,\n            // thumbPosition: ThumbnailsPosition.Bottom,\n            loadingStrategy: LoadingStrategy.Default,\n            // slidingDirection: SlidingDirection.Horizontal,\n        };\n    }\n\n    ngOnInit(): void {\n        if (!this.inDialog) {\n            if (this.form === null) {\n                this.standAlone = true;\n                // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required,\n                //     this.readonly, this.disabled);\n                const pepField = new PepImagesField({\n                    key: this.key,\n                    value: this.value,\n                    required: this.required,\n                    readonly: this.readonly,\n                    disabled: this.disabled,\n                });\n                this.form = this.customizationService.getDefaultFromGroup(\n                    pepField\n                );\n\n                this.renderer.addClass(\n                    this.element.nativeElement,\n                    PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n                );\n            }\n            this.fieldHeight = this.customizationService.calculateFieldHeight(\n                this.layoutType,\n                this.rowSpan,\n                this.standAlone\n            );\n        }\n\n        if (this.items === null) {\n            const imgArr = this.value ? this.value.split(';') : [];\n            // add No image image when there is no images\n            if (imgArr.length === 0) {\n                const noImageSrc = this.fileService.getSvgAsImageSrc(\n                    pepIconNoImage2.data\n                );\n                imgArr.push(noImageSrc);\n            }\n\n            this.items = imgArr.map(\n                (img) => new ImageItem({ src: img, thumb: img })\n            );\n        }\n\n        this.config.dots = this.config.nav = this.items.length > 1;\n        this.config.thumb =\n            (this.key === 'ItemFilmstripImages' || this.showThumbnails) &&\n            this.items.length > 1\n                ? true\n                : false;\n        this.currIndex =\n            this.key === 'ItemFilmstripImages' &&\n            this.currIndex === 0 &&\n            this.items.length > 1\n                ? Math.floor(this.items.length / 2) - 1\n                : this.currIndex;\n    }\n\n    ngAfterViewInit(): void {\n        if (this.inDialog) {\n            this.afterDialogOpened();\n        } else {\n            this.galleryRef = this.gallery.ref(\n                `${this.key}-${this.uid}-gallery`\n            );\n            this.initGalleryStyle(this.galleryCont, this.galleryRef);\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.galleryRef) {\n            this.galleryRef.destroy();\n        }\n        if (this.dialogGalleryRef) {\n            this.dialogGalleryRef.destroy();\n        }\n        // if (this.myPinch) { this.myPinch.destroy(); }\n    }\n\n    initGalleryStyle(galleryContainer, galleryRef): void {\n        setTimeout(() => {\n            // Set thumbnails position and sliding direction\n            this.setThumbnailDimension(galleryContainer);\n            galleryRef.setConfig(this.config);\n        }, 0);\n\n        const currentIndex = this.currIndex;\n        if (currentIndex > 0) {\n            setTimeout(() => {\n                galleryRef.load(this.items);\n                galleryRef.set(currentIndex);\n            }, 0);\n            // galleryRef.set(currentIndex);\n        } else {\n            galleryRef.load(this.items);\n        }\n    }\n\n    onError(e): void {\n        const noImageSrc = this.fileService.getSvgAsImageSrc(\n            pepIconNoImage2.data\n        );\n        const noimg = new ImageItem({ src: noImageSrc, thumb: noImageSrc });\n        this.items.splice(e.itemIndex, 1, noimg);\n    }\n\n    enlargeImage(event: any): void {\n        const config = this.dialogService.getDialogConfig({}, 'inline');\n        config.maxWidth = '75vw';\n        config.height = '95vh';\n\n        const dialogRef = this.dialogService.openDialog(\n            this.galleryDialogTemplate,\n            {\n                currIndex: this.currIndex,\n            },\n            config\n        );\n\n        dialogRef.afterOpened().subscribe(() => {\n            this.afterDialogOpened();\n        });\n\n        // Update currentIndex in galleryRef\n        // dialogRef.afterClosed().subscribe(value => {\n        //     this.galleryRef.set(this.currIndex);\n        // });\n    }\n\n    afterDialogOpened(): void {\n        this.dialogGalleryRef = this.gallery.ref(\n            `${this.key}-${this.uid}-dlgGallery`\n        );\n        this.initGalleryStyle(this.galleryDialogCont, this.dialogGalleryRef);\n    }\n\n    setThumbnailDimension(galleryContainer): void {\n        this.galleryWidth = galleryContainer.nativeElement.clientWidth;\n        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32; // TODO - TALK WITH TOMER\n        this.galleryHeight = this.inDialog\n            ? galleryContainer.nativeElement.clientHeight - 32\n            : galleryContainer.nativeElement.clientHeight;\n        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32;\n        this.cd.detectChanges();\n\n        this.isVertical = this.galleryWidth < this.galleryHeight;\n        this.cd.detectChanges();\n        if (this.isVertical) {\n            let width =\n                (this.galleryWidth - (this.items.length - 1) * 16) /\n                this.items.length;\n            width = Math.min(Math.max(width, 24), 96);\n\n            this.config.thumbHeight = width;\n            this.config.thumbWidth = width + 16;\n        } else {\n            let height =\n                (this.galleryHeight - (this.items.length - 1) * 16) /\n                this.items.length;\n            height = Math.min(Math.max(height, 24), 96);\n\n            this.config.thumbHeight = height + 16;\n            this.config.thumbWidth = height;\n        }\n\n        this.config.thumbPosition = this.isVertical\n            ? ThumbnailsPosition.Bottom\n            : this.layoutService.isRtl()\n            ? ThumbnailsPosition.Right\n            : ThumbnailsPosition.Left;\n        this.config.slidingDirection =\n            this.key !== 'ItemFilmstripImages'\n                ? SlidingDirection.Horizontal\n                : this.isVertical\n                ? SlidingDirection.Horizontal\n                : SlidingDirection.Vertical;\n\n        this.config.imageSize = 'contain';\n    }\n\n    indexChange(item: any): void {\n        this.currIndex = item.currIndex;\n        // if (this.ngxViewerImage && this.ngxViewerImage.scale) {\n        //     this.ngxViewerImage.scale = 1;\n        //     this.updateStyle();\n        // }\n    }\n\n    // scrollFunction(e: any): boolean {\n    //     e.deltaY > 0 ? this.zoomOut() : this.zoomIn();\n    //     return false;\n    // }\n\n    // zoomIn(): void {\n    //     if (this.ngxViewerImage.scale < 2) {\n    //         this.ngxViewerImage.scale *= (1 + this.ngxViewerImage.config.zoomFactor);\n    //     } else {\n    //         this.ngxViewerImage.scale = 2;\n    //     }\n    //     this.updateStyle();\n    // }\n\n    // zoomOut(): void {\n    //     if (this.ngxViewerImage.scale > this.ngxViewerImage.config.zoomFactor) {\n    //         this.ngxViewerImage.scale /= (1 + this.ngxViewerImage.config.zoomFactor);\n    //     }\n    //     this.updateStyle();\n    // }\n\n    // private updateStyle(): void {\n    //     this.ngxViewerImage.style.transform = `translate(${this.ngxViewerImage.translateX}px,\n    //         ${this.ngxViewerImage.translateY}px) rotate(${this.ngxViewerImage.rotation}deg) scale(${this.ngxViewerImage.scale})`;\n\n    //     this.cd.detectChanges();\n    // }\n}\n",
            "properties": [
                {
                    "name": "currIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "showThumbnails",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepInternalButtonFieldOptions",
            "id": "interface-IPepInternalButtonFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "referenceObjectInternalType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 426
                },
                {
                    "name": "referenceObjectSubType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 425
                },
                {
                    "name": "referenceObjectType",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 424
                },
                {
                    "name": "type",
                    "type": "PepInternalButtonFieldType",
                    "optional": true,
                    "description": "",
                    "line": 427
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepInternalMenuFieldOptions",
            "id": "interface-IPepInternalMenuFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "IPepOption[]",
                    "optional": true,
                    "description": "",
                    "line": 468
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepInternalPageFieldOptions",
            "id": "interface-IPepInternalPageFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "objectId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 449
                },
                {
                    "name": "parentId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 450
                },
                {
                    "name": "searchCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 451
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepListCarouselItemClickEvent",
            "id": "interface-IPepListCarouselItemClickEvent-1bc660d1df38f7ae696a41dd5b2515ca",
            "file": "projects/ngx-lib/list/list-carousel.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    Renderer2,\n    ChangeDetectorRef,\n    OnDestroy,\n    AfterViewInit,\n} from '@angular/core';\nimport {\n    ObjectsDataRow,\n    UIControl,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { PepCarouselComponent } from '@pepperi-addons/ngx-lib/carousel';\n\nexport type PepListCarouselSizeType = 'xs' | 'sm' | 'md';\n\nexport interface IPepListCarouselItemClickEvent {\n    source: ObjectsDataRow;\n}\n\n@Component({\n    selector: 'pep-list-carousel',\n    templateUrl: './list-carousel.component.html',\n    styleUrls: ['./list-carousel.component.scss'],\n})\n@Injectable()\nexport class PepListCarouselComponent implements AfterViewInit, OnDestroy {\n    @Input() duration = 1000;\n    @Input() layout: UIControl = null;\n    @Input() itemsToMove = 3;\n    @Input() lockItemInnerEvents = true;\n    @Input() hideArrowsInSmallScreen = true;\n\n    private _items: Array<ObjectsDataRow> = null;\n    @Input()\n    set items(value: Array<ObjectsDataRow>) {\n        this._items = value;\n        this.moveTo(0);\n    }\n    get items() {\n        return this._items;\n    }\n\n    private _itemSize: PepListCarouselSizeType = 'xs';\n    @Input()\n    set itemSize(value: PepListCarouselSizeType) {\n        this._itemSize = value;\n        this.moveTo(0);\n    }\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    @Output()\n    itemClick: EventEmitter<IPepListCarouselItemClickEvent> = new EventEmitter<IPepListCarouselItemClickEvent>();\n\n    @ViewChild('carousel', { read: PepCarouselComponent })\n    carousel: PepCarouselComponent;\n\n    prevDisabled = false;\n    nextDisabled = false;\n    screenSize: PepScreenSizeType;\n    PepScreenSizeType = PepScreenSizeType;\n    // deviceHasMouse = false;\n\n    constructor(public layoutService: PepLayoutService) {\n        // this.deviceHasMouse = this.layoutService.getDeviceHasMouse();\n    }\n\n    ngAfterViewInit(): void {\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n\n        // this.layoutService.onMouseOver$.subscribe((deviceHasMouse: boolean) => {\n        //     this.deviceHasMouse = deviceHasMouse;\n        // });\n    }\n\n    ngOnDestroy(): void {\n        if (this.itemClick) {\n            this.itemClick.unsubscribe();\n        }\n    }\n\n    itemClicked(item: ObjectsDataRow): void {\n        this.itemClick.emit({ source: item });\n    }\n\n    moveLeft() {\n        // this.carousel.moveLeft();\n        const indexToMove = Math.max(\n            this.carousel.currIndex - this.itemsToMove,\n            0\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveRight() {\n        // this.carousel.moveRight();\n        const indexToMove = Math.min(\n            this.carousel.currIndex + this.itemsToMove,\n            this.items.length\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveTo(index: number) {\n        if (this.carousel) {\n            this.carousel.moveTo(index);\n        }\n    }\n\n    onReachesLeftBound(event: boolean) {\n        this.prevDisabled = event;\n    }\n\n    onReachesRightBound(event: boolean) {\n        this.nextDisabled = event;\n    }\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListChooserOptionChangeEvent",
            "id": "interface-IPepListChooserOptionChangeEvent-948821535414856bdc617f6f19df7002",
            "file": "projects/ngx-lib/list/list-chooser.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { PepBreadCrumbItem } from '@pepperi-addons/ngx-lib/bread-crumbs';\n\nexport class IPepListChooserOption {\n    key: string;\n    text: string;\n}\n\nexport interface IPepListChooserOptionChangeEvent {\n    source: IPepListChooserOption;\n}\n\n@Component({\n    selector: 'pep-list-chooser',\n    templateUrl: './list-chooser.component.html',\n    styleUrls: ['./list-chooser.component.scss'],\n})\n@Injectable()\nexport class PepListChooserComponent {\n    private _options: Array<IPepListChooserOption> = null;\n    @Input()\n    set options(value: Array<IPepListChooserOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.text };\n        });\n\n        if (this.menuItems?.length === 1) {\n            this.breadCrumbsItems = [];\n            this.breadCrumbsItems.push(\n                new PepBreadCrumbItem({\n                    key: this.menuItems[0].key,\n                    text: this.menuItems[0].text,\n                })\n            );\n        }\n    }\n    get options(): Array<IPepListChooserOption> {\n        return this._options;\n    }\n\n    private _currentList: IPepListChooserOption = null;\n    @Input()\n    set currentList(value: IPepListChooserOption) {\n        this._currentList = value;\n        this.currentItem = { key: value.key, text: value.text };\n    }\n    get currentList(): IPepListChooserOption {\n        return this._currentList;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n\n    @Output()\n    change: EventEmitter<IPepListChooserOptionChangeEvent> = new EventEmitter<IPepListChooserOptionChangeEvent>();\n\n    breadCrumbsItems: Array<PepBreadCrumbItem> = null;\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        const currentList = this.options.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: currentList });\n    }\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "IPepListChooserOption",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListItemClickEvent",
            "id": "interface-IPepListItemClickEvent-3cb2a2a30d9933bf66cd829cc7727980",
            "file": "projects/ngx-lib/list/list.model.ts",
            "type": "interface",
            "sourceCode": "import { ObjectsDataRow } from '@pepperi-addons/ngx-lib';\n\nexport type PepListSelectionType =\n    | 'none'\n    | 'single'\n    | 'single-action'\n    | 'multi';\n\nexport type PepListPagerType = 'pages' | 'scroll';\n\nexport type PepListViewType = '' | 'cards' | 'lines' | 'table' | 'map';\n\nexport interface IPepListItemClickEvent {\n    source: ObjectsDataRow;\n    viewType: PepListViewType;\n}\n\nexport class PepSelectionData {\n    selectionType: number;\n    rows: Array<any>;\n    rowTypes: Array<any>;\n}\n\nexport interface IPepListLoadItemsEvent {\n    start: number;\n    end: number;\n    fromIndex: number;\n    toIndex: number;\n}\n\nexport interface IPepListLoadPageEvent {\n    pageIndex: number;\n    pageSize: number;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport interface IPepListSortingChangeEvent {\n    sortBy: string;\n    isAsc: boolean;\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "viewType",
                    "type": "PepListViewType",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListLoadItemsEvent",
            "id": "interface-IPepListLoadItemsEvent-3cb2a2a30d9933bf66cd829cc7727980",
            "file": "projects/ngx-lib/list/list.model.ts",
            "type": "interface",
            "sourceCode": "import { ObjectsDataRow } from '@pepperi-addons/ngx-lib';\n\nexport type PepListSelectionType =\n    | 'none'\n    | 'single'\n    | 'single-action'\n    | 'multi';\n\nexport type PepListPagerType = 'pages' | 'scroll';\n\nexport type PepListViewType = '' | 'cards' | 'lines' | 'table' | 'map';\n\nexport interface IPepListItemClickEvent {\n    source: ObjectsDataRow;\n    viewType: PepListViewType;\n}\n\nexport class PepSelectionData {\n    selectionType: number;\n    rows: Array<any>;\n    rowTypes: Array<any>;\n}\n\nexport interface IPepListLoadItemsEvent {\n    start: number;\n    end: number;\n    fromIndex: number;\n    toIndex: number;\n}\n\nexport interface IPepListLoadPageEvent {\n    pageIndex: number;\n    pageSize: number;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport interface IPepListSortingChangeEvent {\n    sortBy: string;\n    isAsc: boolean;\n}\n",
            "properties": [
                {
                    "name": "end",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fromIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "start",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListLoadPageEvent",
            "id": "interface-IPepListLoadPageEvent-3cb2a2a30d9933bf66cd829cc7727980",
            "file": "projects/ngx-lib/list/list.model.ts",
            "type": "interface",
            "sourceCode": "import { ObjectsDataRow } from '@pepperi-addons/ngx-lib';\n\nexport type PepListSelectionType =\n    | 'none'\n    | 'single'\n    | 'single-action'\n    | 'multi';\n\nexport type PepListPagerType = 'pages' | 'scroll';\n\nexport type PepListViewType = '' | 'cards' | 'lines' | 'table' | 'map';\n\nexport interface IPepListItemClickEvent {\n    source: ObjectsDataRow;\n    viewType: PepListViewType;\n}\n\nexport class PepSelectionData {\n    selectionType: number;\n    rows: Array<any>;\n    rowTypes: Array<any>;\n}\n\nexport interface IPepListLoadItemsEvent {\n    start: number;\n    end: number;\n    fromIndex: number;\n    toIndex: number;\n}\n\nexport interface IPepListLoadPageEvent {\n    pageIndex: number;\n    pageSize: number;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport interface IPepListSortingChangeEvent {\n    sortBy: string;\n    isAsc: boolean;\n}\n",
            "properties": [
                {
                    "name": "pageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListSortingChangeEvent",
            "id": "interface-IPepListSortingChangeEvent-3cb2a2a30d9933bf66cd829cc7727980",
            "file": "projects/ngx-lib/list/list.model.ts",
            "type": "interface",
            "sourceCode": "import { ObjectsDataRow } from '@pepperi-addons/ngx-lib';\n\nexport type PepListSelectionType =\n    | 'none'\n    | 'single'\n    | 'single-action'\n    | 'multi';\n\nexport type PepListPagerType = 'pages' | 'scroll';\n\nexport type PepListViewType = '' | 'cards' | 'lines' | 'table' | 'map';\n\nexport interface IPepListItemClickEvent {\n    source: ObjectsDataRow;\n    viewType: PepListViewType;\n}\n\nexport class PepSelectionData {\n    selectionType: number;\n    rows: Array<any>;\n    rowTypes: Array<any>;\n}\n\nexport interface IPepListLoadItemsEvent {\n    start: number;\n    end: number;\n    fromIndex: number;\n    toIndex: number;\n}\n\nexport interface IPepListLoadPageEvent {\n    pageIndex: number;\n    pageSize: number;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport interface IPepListSortingChangeEvent {\n    sortBy: string;\n    isAsc: boolean;\n}\n",
            "properties": [
                {
                    "name": "isAsc",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sortBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepListSortingOptionChangeEvent",
            "id": "interface-IPepListSortingOptionChangeEvent-bfb1e43a1d18c5a2449d5363e10a37b1",
            "file": "projects/ngx-lib/list/list-sorting.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuItemClickEvent,\n    PepMenuItem,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepListSortingChangeEvent } from './list.model';\n\nexport class IPepListSortingOption {\n    sortBy: string;\n    title: string;\n    iconName?: string;\n    isAsc?: boolean;\n}\n\nexport interface IPepListSortingOptionChangeEvent {\n    source: IPepListSortingOption;\n}\n\n@Component({\n    selector: 'pep-list-sorting',\n    templateUrl: './list-sorting.component.html',\n    styleUrls: ['./list-sorting.component.scss'],\n})\n@Injectable()\nexport class PepListSortingComponent implements OnInit {\n    private _options: Array<IPepListSortingOption> = null;\n    @Input()\n    set options(value: Array<IPepListSortingOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.sortBy, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get options(): Array<IPepListSortingOption> {\n        return this._options;\n    }\n\n    private _currentSorting: IPepListSortingOption = null;\n    @Input()\n    set currentSorting(value: IPepListSortingOption) {\n        this._currentSorting = value;\n        this.currentItem = {\n            key: value.sortBy,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentSorting(): IPepListSortingOption {\n        return this._currentSorting;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n    @Output()\n    change: EventEmitter<IPepListSortingOptionChangeEvent> = new EventEmitter<IPepListSortingOptionChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (\n            this.currentSorting === null &&\n            this.options &&\n            this.options.length > 0\n        ) {\n            this.currentSorting = this.options[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentSorting = this.options.find(\n            (sorting) => sorting.sortBy === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: this.currentSorting });\n    }\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "IPepListSortingOption",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepMenuItemClickEvent",
            "id": "interface-IPepMenuItemClickEvent-bb37073b91f72b454c6b2bade5c0a369",
            "file": "projects/ngx-lib/menu/menu.model.ts",
            "type": "interface",
            "sourceCode": "export type PepMenuType = 'action' | 'action-select' | 'select';\n\nexport type PepMenuItemType = 'regular' | 'splitter';\n\nexport type PepMenuStateType = 'visible' | 'hidden';\n\nexport class PepMenuItem {\n    key: string;\n    text?: string;\n    disabled?: boolean = false;\n    hidden?: boolean = false;\n    iconName?: string = null;\n    type?: PepMenuItemType = 'regular';\n    children?: Array<PepMenuItem> = null;\n\n    constructor(data: Partial<PepMenuItem>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepMenuItemClickEvent {\n    source: PepMenuItem;\n}\n\nexport interface IPepMenuStateChangeEvent {\n    state: PepMenuStateType;\n}\n",
            "properties": [
                {
                    "name": "source",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepMenuStateChangeEvent",
            "id": "interface-IPepMenuStateChangeEvent-bb37073b91f72b454c6b2bade5c0a369",
            "file": "projects/ngx-lib/menu/menu.model.ts",
            "type": "interface",
            "sourceCode": "export type PepMenuType = 'action' | 'action-select' | 'select';\n\nexport type PepMenuItemType = 'regular' | 'splitter';\n\nexport type PepMenuStateType = 'visible' | 'hidden';\n\nexport class PepMenuItem {\n    key: string;\n    text?: string;\n    disabled?: boolean = false;\n    hidden?: boolean = false;\n    iconName?: string = null;\n    type?: PepMenuItemType = 'regular';\n    children?: Array<PepMenuItem> = null;\n\n    constructor(data: Partial<PepMenuItem>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepMenuItemClickEvent {\n    source: PepMenuItem;\n}\n\nexport interface IPepMenuStateChangeEvent {\n    state: PepMenuStateType;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "type": "PepMenuStateType",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepOption",
            "id": "interface-IPepOption-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepQuantitySelectorFieldOptions",
            "id": "interface-IPepQuantitySelectorFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "alowDecimal",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "notificationInfo",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "type",
                    "type": "PepQuantitySelectorFieldType",
                    "optional": true,
                    "description": "",
                    "line": 320
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepRgbColor",
            "id": "interface-IPepRgbColor-a18bd558e8a99b161c0717147f9348b8",
            "file": "projects/ngx-lib/color/color-utils.ts",
            "type": "interface",
            "sourceCode": "const FLOAT_REGEX = /^\\d+(\\.\\d+)?$/;\nconst THREE_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{3}$/;\nconst THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{3}$/;\nconst SIX_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{6}$/;\nconst SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{6}$/;\n\nexport interface IPepRgbColor {\n    r?: any;\n    g?: any;\n    b?: any;\n}\n\nexport interface IPepHslColor {\n    h?: any;\n    s?: any;\n    l?: any;\n}\n\nexport interface IPepClosestColor {\n    color: string;\n    lightness: number;\n}\n\n/**\n * Convert hex string to 6 digits hex string.\n * @param str The string to convert.\n */\nexport function hex2sixDigitHex(str: string): string {\n    if (!str) {\n        return null;\n    }\n\n    str = str.trim();\n\n    if (SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return str;\n    }\n\n    if (SIX_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str;\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {\n        return '#' + str[1] + str[1] + str[2] + str[2] + str[3] + str[3];\n    }\n\n    if (THREE_DIGIT_HEX_COLOR_REGEX.test(str)) {\n        return '#' + str[0] + str[0] + str[1] + str[1] + str[2] + str[2];\n    }\n\n    return null;\n}\n\n/**\n * Convert rgb color to 6 digits hex string.\n * @param color The rgb color to convert.\n */\nexport function rgb2sixDigitHex(color: IPepRgbColor): string {\n    color.r = color.r.toString(16);\n    color.g = color.g.toString(16);\n    color.b = color.b.toString(16);\n\n    if (color.r.length === 1) {\n        color.r = '0' + color.r;\n    }\n\n    if (color.g.length === 1) {\n        color.g = '0' + color.g;\n    }\n\n    if (color.b.length === 1) {\n        color.b = '0' + color.b;\n    }\n\n    return '#' + color.r + color.g + color.b;\n}\n\n/**\n * Convert hex string to rgb color.\n * @param str The hex string to convert.\n */\nexport function hex2rgb(str: string): IPepRgbColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    return {\n        r: parseInt(sixDigitHex.slice(1, 3), 16),\n        g: parseInt(sixDigitHex.slice(3, 5), 16),\n        b: parseInt(sixDigitHex.slice(5, 7), 16),\n    };\n}\n\nexport function rgbString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const rgbArr = str.substr(4).split(')')[0].split(sep);\n\n    const r = rgbArr[0];\n    const g = rgbArr[1].substr(0, rgbArr[1].length).trim();\n    const b = rgbArr[2].substr(0, rgbArr[2].length).trim();\n\n    return rgb2hsl({ r, g, b });\n}\n\nexport function rgb2hsl({ r, g, b }: IPepRgbColor): IPepHslColor {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    // Find greatest and smallest channel values\n    const cmin = Math.min(r, g, b);\n    const cmax = Math.max(r, g, b);\n    const delta = cmax - cmin;\n\n    let h = 0;\n    let s = 0;\n    let l = 0;\n\n    if (delta === 0) {\n        h = 0;\n    } else if (cmax === r) {\n        h = ((g - b) / delta) % 6;\n    } else if (cmax === g) {\n        h = (b - r) / delta + 2;\n    } else {\n        h = (r - g) / delta + 4;\n    }\n\n    h = Math.round(h * 60);\n\n    if (h < 0) {\n        h += 360;\n    }\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    return { h, s, l };\n}\n\nexport function hslString2hsl(str: string): IPepHslColor {\n    const sep = str.indexOf(',') > -1 ? ',' : ' ';\n    const hslArr = str.substr(4).split(')')[0].split(sep);\n\n    let h: any = hslArr[0];\n    let s = hslArr[1].substr(0, hslArr[1].length).trim();\n    let l = hslArr[2].substr(0, hslArr[2].length).trim();\n\n    // Strip label and convert to degrees (if necessary)\n    if (h.indexOf('deg') > -1) {\n        h = h.substr(0, h.length - 3);\n    } else if (h.indexOf('rad') > -1) {\n        h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));\n    } else if (h.indexOf('turn') > -1) {\n        h = Math.round(h.substr(0, h.length - 4) * 360);\n    }\n\n    // Keep hue fraction of 360 if ending up over\n    if (h >= 360) {\n        h %= 360;\n    }\n\n    // Remove the %\n    if (s.indexOf('%') > -1) {\n        s = s.replace(/%/g, '');\n    }\n\n    // Remove the %\n    if (l.indexOf('%') > -1) {\n        l = l.replace(/%/g, '');\n    }\n\n    return { h, s, l };\n}\n\nexport function hsl2rgb({ h, s, l }: IPepHslColor): IPepRgbColor {\n    let r;\n    let g;\n    let b;\n\n    if (!isFinite(h)) {\n        h = 0;\n    }\n\n    if (!isFinite(s)) {\n        s = 0;\n    }\n\n    if (!isFinite(l)) {\n        l = 0;\n    }\n\n    h /= 60;\n\n    if (h < 0) {\n        h = 6 - (-h % 6);\n    }\n\n    h %= 6;\n\n    s = Math.max(0, Math.min(1, s / 100));\n    l = Math.max(0, Math.min(1, l / 100));\n\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs((h % 2) - 1));\n\n    if (h < 1) {\n        r = c;\n        g = x;\n        b = 0;\n    } else if (h < 2) {\n        r = x;\n        g = c;\n        b = 0;\n    } else if (h < 3) {\n        r = 0;\n        g = c;\n        b = x;\n    } else if (h < 4) {\n        r = 0;\n        g = x;\n        b = c;\n    } else if (h < 5) {\n        r = x;\n        g = 0;\n        b = c;\n    } else {\n        r = c;\n        g = 0;\n        b = x;\n    }\n\n    const m = l - c / 2;\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return { r, g, b };\n}\n\nexport function hex2hsl(str: string): IPepHslColor {\n    const sixDigitHex = hex2sixDigitHex(str);\n\n    if (sixDigitHex === null) {\n        return null;\n    }\n\n    const rgb = hex2rgb(sixDigitHex);\n\n    if (rgb === null) {\n        return null;\n    }\n\n    return rgb2hsl(rgb);\n}\n\nexport function hsl2hex(hsl: IPepHslColor): string {\n    const rgb = hsl2rgb(hsl);\n\n    return rgb2sixDigitHex(rgb);\n}\n\nexport function relativeLuminance({ r, g, b }: IPepRgbColor): number {\n    [r, g, b] = [r, g, b].map((c) => {\n        c = c / 255;\n\n        if (c <= 0.03928) {\n            return c / 12.92;\n        }\n\n        return Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nexport function contrast(str1: string, str2: string): number {\n    const L1 = relativeLuminance(hex2rgb(str1));\n    const L2 = relativeLuminance(hex2rgb(str2));\n\n    if (L1 < L2) {\n        return (L2 + 0.05) / (L1 + 0.05);\n    }\n\n    return (L1 + 0.05) / (L2 + 0.05);\n}\n\nexport function findClosestAccessibleDarkerColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let minColor = hsl2hex({ h, s, l: 0 });\n\n    if (contrast(minColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = 0;\n    let max = l;\n    let maxColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: minColor,\n        lightness: min,\n    };\n}\n\nexport function findClosestAccessibleLighterColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): IPepClosestColor {\n    const { h, s, l } = hex2hsl(adjustableColor);\n\n    if (contrast(adjustableColor, otherColor) >= contrastRatio) {\n        return {\n            color: adjustableColor,\n            lightness: l,\n        };\n    }\n\n    let maxColor = hsl2hex({ h, s, l: 100 });\n\n    if (contrast(maxColor, otherColor) < contrastRatio) {\n        return null;\n    }\n\n    let min = l;\n    let max = 100;\n    let minColor = hsl2hex({ h, s, l });\n    let lastMinColor;\n    let lastMaxColor;\n    let lTemp;\n\n    while (minColor !== lastMinColor || maxColor !== lastMaxColor) {\n        lastMinColor = minColor;\n        lastMaxColor = maxColor;\n\n        lTemp = (min + max) / 2;\n        adjustableColor = hsl2hex({ h, s, l: lTemp });\n\n        if (contrast(adjustableColor, otherColor) < contrastRatio) {\n            min = lTemp;\n            minColor = hsl2hex({ h, s, l: lTemp });\n        } else {\n            max = lTemp;\n            maxColor = hsl2hex({ h, s, l: lTemp });\n        }\n    }\n\n    return {\n        color: maxColor,\n        lightness: max,\n    };\n}\n\nexport function findClosestAccessibleColor(\n    adjustableColor: string,\n    otherColor: string,\n    contrastRatio: number\n): string {\n    const closestDarkerColor: IPepClosestColor = findClosestAccessibleDarkerColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n    const closestLighterColor: IPepClosestColor = findClosestAccessibleLighterColor(\n        adjustableColor,\n        otherColor,\n        contrastRatio\n    );\n\n    if (closestDarkerColor === null) {\n        if (closestLighterColor === null) {\n            return null;\n        }\n\n        return closestLighterColor.color;\n    }\n\n    if (closestLighterColor === null) {\n        return closestDarkerColor.color;\n    }\n\n    const { l } = hex2hsl(adjustableColor);\n\n    if (closestLighterColor.lightness - l < l - closestDarkerColor.lightness) {\n        return closestLighterColor.color;\n    }\n\n    return closestDarkerColor.color;\n}\n\nexport function convertHslToStringHsl(hsl: IPepHslColor): string {\n    return (\n        'hsl(' +\n        (hsl.h < 0 ? hsl.h + 360 : hsl.h) +\n        ', ' +\n        hsl.s +\n        '%, ' +\n        hsl.l +\n        '%)'\n    );\n}\n",
            "properties": [
                {
                    "name": "b",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "g",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "r",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepRichHtmlTextareaToolbarOptions",
            "id": "interface-IPepRichHtmlTextareaToolbarOptions-018c861e3bd0333d89103825ae623a8b",
            "file": "projects/ngx-lib/rich-html-textarea/rich-html-textarea.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    ElementRef,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepRichHtmlTextareaField,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { SafeHtml, DomSanitizer } from '@angular/platform-browser';\n\nexport interface IPepRichHtmlTextareaToolbarOptions {\n    font?: any;\n    size?: any;\n    header?: any;\n    bold?: any;\n    italic?: any;\n    underline?: any;\n    strike?: any;\n    link?: any;\n    image?: any;\n    ordered?: any;\n    bullet?: any;\n    color?: any;\n    background?: any;\n    align?: any;\n}\n\n@Component({\n    selector: 'pep-rich-html-textarea',\n    templateUrl: './rich-html-textarea.component.html',\n    styleUrls: ['./rich-html-textarea.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepRichHtmlTextareaComponent implements OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() maxFieldCharacters = 0;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'richhtmltextarea';\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() inlineMode = false;\n\n    protected _toolbarOptions: IPepRichHtmlTextareaToolbarOptions;\n    @Input()\n    get toolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return this._toolbarOptions;\n    }\n    set toolbarOptions(options: IPepRichHtmlTextareaToolbarOptions) {\n        if (options) {\n            this._toolbarOptions = options;\n        }\n    }\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    @ViewChild('richTextEditorDialogTemplate', { read: TemplateRef })\n    richTextEditorDialogTemplate: TemplateRef<any>;\n    quillContent = '';\n    quillContentDialog = '';\n\n    fieldHeight = '';\n    standAlone = false;\n    active = false;\n\n    constructor(\n        private sanitizer: DomSanitizer,\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {\n        this.toolbarOptions = this.getDefaultToolbarOptions();\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(\n            //     this.key, this.value, this.required, this.readonly, this.disabled, this.maxFieldCharacters);\n            const pepField = new PepRichHtmlTextareaField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n                maxFieldCharacters: this.maxFieldCharacters,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n\n        this.quillContent = this.value;\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    getDefaultToolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return {\n            font: false,\n            size: false,\n            header: true,\n            bold: true,\n            italic: true,\n            underline: true,\n            strike: false,\n            link: true,\n            image: true,\n            ordered: true,\n            bullet: true,\n            color: true,\n            background: false,\n            align: true,\n        };\n    }\n\n    changeValue(value: any, lastFocusedField: any = null): void {\n        if (value !== this.value) {\n            this.value = value;\n            this.quillContent = value;\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                value\n            );\n            this.valueChange.emit({ key: this.key, value, lastFocusedField });\n        }\n    }\n\n    cardTemplateClicked(event: any): void {\n        this.openDialog();\n    }\n\n    openDialog(): void {\n        const config = this.dialogService.getDialogConfig(\n            {\n                // minWidth: '50vw',\n                // maxWidth: '90vw',\n                // maxHeight: '90vh',\n            },\n            'large'\n        );\n\n        // If disabled open regular modal as html mode.\n        if (this.disabled || this.readonly) {\n            const data = new PepDialogData({\n                title: this.label,\n                content: this.quillContent,\n                showFooter: false,\n            });\n            this.dialogService.openDefaultDialog(data, config);\n        } else {\n            this.quillContentDialog = this.quillContent;\n            const dialogRef = this.dialogService.openDialog(\n                this.richTextEditorDialogTemplate,\n                {},\n                config\n            );\n\n            dialogRef.afterClosed().subscribe((value) => {\n                if (value !== undefined && value !== null) {\n                    this.changeValue(value);\n                }\n            });\n        }\n    }\n\n    // Init quillContent in case that there are html tags...\n    onEditorCreated(quill: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.quillContent = quill.getText();\n        }\n    }\n\n    onContentChanged(obj: any, inDialog: boolean): void {\n        if (inDialog) {\n            this.quillContentDialog = obj.html;\n        } else {\n            this.quillContent = obj.html;\n        }\n    }\n\n    onBlur(obj: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.active = false;\n            this.changeValue(this.quillContent);\n        }\n    }\n\n    onFocus(obj: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.active = true;\n        }\n    }\n}\n",
            "properties": [
                {
                    "name": "align",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "background",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bold",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "bullet",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "color",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "font",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "header",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "image",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "italic",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "link",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "ordered",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "size",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "strike",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "underline",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSearchClickEvent",
            "id": "interface-IPepSearchClickEvent-07f8faab9935b03cbc479eef1c36452a",
            "file": "projects/ngx-lib/search/search.model.ts",
            "type": "interface",
            "sourceCode": "export type PepSearchType = 'regular' | 'auto-complete';\n\nexport type PepSearchTriggerType = 'keydown' | 'click';\n\nexport type PepSearchStateType = 'open' | 'close';\n\nexport interface IPepSearchClickEvent {\n    value: string;\n}\n\nexport interface IPepSearchValueChangeEvent {\n    value: string;\n    top: number;\n}\n\nexport interface IPepSearchStateChangeEvent {\n    state: PepSearchStateType;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSearchStateChangeEvent",
            "id": "interface-IPepSearchStateChangeEvent-07f8faab9935b03cbc479eef1c36452a",
            "file": "projects/ngx-lib/search/search.model.ts",
            "type": "interface",
            "sourceCode": "export type PepSearchType = 'regular' | 'auto-complete';\n\nexport type PepSearchTriggerType = 'keydown' | 'click';\n\nexport type PepSearchStateType = 'open' | 'close';\n\nexport interface IPepSearchClickEvent {\n    value: string;\n}\n\nexport interface IPepSearchValueChangeEvent {\n    value: string;\n    top: number;\n}\n\nexport interface IPepSearchStateChangeEvent {\n    state: PepSearchStateType;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "type": "PepSearchStateType",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSearchValueChangeEvent",
            "id": "interface-IPepSearchValueChangeEvent-07f8faab9935b03cbc479eef1c36452a",
            "file": "projects/ngx-lib/search/search.model.ts",
            "type": "interface",
            "sourceCode": "export type PepSearchType = 'regular' | 'auto-complete';\n\nexport type PepSearchTriggerType = 'keydown' | 'click';\n\nexport type PepSearchStateType = 'open' | 'close';\n\nexport interface IPepSearchClickEvent {\n    value: string;\n}\n\nexport interface IPepSearchValueChangeEvent {\n    value: string;\n    top: number;\n}\n\nexport interface IPepSearchStateChangeEvent {\n    state: PepSearchStateType;\n}\n",
            "properties": [
                {
                    "name": "top",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSelectFieldOptions",
            "id": "interface-IPepSelectFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "IPepOption[]",
                    "optional": true,
                    "description": "",
                    "line": 384
                },
                {
                    "name": "type",
                    "type": "PepSelectFieldType",
                    "optional": true,
                    "description": "",
                    "line": 385
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepSideBarStateChangeEvent",
            "id": "interface-IPepSideBarStateChangeEvent-fb029b3111b3c772a021d3dc74a08f33",
            "file": "projects/ngx-lib/side-bar/side-bar.model.ts",
            "type": "interface",
            "sourceCode": "export type PepSideBarStateType = 'open' | 'close';\n\nexport interface IPepSideBarStateChangeEvent {\n    state: PepSideBarStateType;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "type": "PepSideBarStateType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSignatureFieldOptions",
            "id": "interface-IPepSignatureFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "IPepOption[]",
                    "optional": true,
                    "description": "",
                    "line": 262
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepSizeDetectorItem",
            "id": "interface-IPepSizeDetectorItem-03e06dbe6422db3b67eb61e7a380317a",
            "file": "projects/ngx-lib/size-detector/size-detector.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    AfterViewInit,\n    HostListener,\n    ElementRef,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\n\ninterface IPepSizeDetectorItem {\n    id: PepScreenSizeType;\n    name: string;\n    css: string;\n}\n\n@Component({\n    selector: 'pep-size-detector',\n    templateUrl: './size-detector.component.html',\n})\nexport class PepSizeDetectorComponent implements AfterViewInit {\n    @Input() showScreenSize = false;\n\n    @Output()\n    sizeChange: EventEmitter<IPepSizeDetectorItem> = new EventEmitter<IPepSizeDetectorItem>();\n\n    prefix = 'is-';\n    sizes: Array<IPepSizeDetectorItem> = [\n        {\n            id: PepScreenSizeType.XS,\n            name: 'xs',\n            css: `d-block d-sm-none`,\n        },\n        {\n            id: PepScreenSizeType.SM,\n            name: 'sm',\n            css: `d-none d-sm-block d-md-none`,\n        },\n        {\n            id: PepScreenSizeType.MD,\n            name: 'md',\n            css: `d-none d-md-block d-lg-none`,\n        },\n        {\n            id: PepScreenSizeType.LG,\n            name: 'lg',\n            css: `d-none d-lg-block d-xl-none`,\n        },\n        {\n            id: PepScreenSizeType.XL,\n            name: 'xl',\n            css: `d-none d-xl-block`,\n        },\n    ];\n\n    private currentSize: IPepSizeDetectorItem;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.currentSize = this.sizes.find((s) => s.id === size);\n            this.sizeChange.emit(this.currentSize);\n        });\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event): void {\n        this.detectScreenSize();\n    }\n\n    ngAfterViewInit(): void {\n        this.detectScreenSize();\n    }\n\n    private detectScreenSize(): void {\n        this.currentSize = this.sizes.find((x) => {\n            const el = this.hostElement.nativeElement.querySelector(\n                `.${this.prefix}${x.id}`\n            );\n            const isVisible = window.getComputedStyle(el).display !== 'none';\n\n            return isVisible;\n        });\n\n        this.layoutService.onResize(this.currentSize.id);\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.getCurrentSize = this.getCurrentSize.bind(\n            this\n        );\n    }\n\n    getCurrentSize(): IPepSizeDetectorItem {\n        return this.currentSize;\n    }\n}\n",
            "properties": [
                {
                    "name": "css",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSmartFilterData",
            "id": "interface-IPepSmartFilterData-801f878df8f61a44415474cb0d6ef369",
            "file": "projects/ngx-lib/smart-filters/common/model/filter.ts",
            "type": "interface",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\n\nexport interface IPepSmartFilterData {\n    fieldId: string;\n    operator: IPepSmartFilterOperator;\n    operatorUnit?: IPepSmartFilterOperatorUnit;\n    value: IPepSmartFilterDataValue;\n}\nexport interface IPepSmartFilterDataValue {\n    first: any;\n    second?: any;\n}\n",
            "properties": [
                {
                    "name": "fieldId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "operator",
                    "type": "IPepSmartFilterOperator",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "operatorUnit",
                    "type": "IPepSmartFilterOperatorUnit",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "value",
                    "type": "IPepSmartFilterDataValue",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSmartFilterDataValue",
            "id": "interface-IPepSmartFilterDataValue-801f878df8f61a44415474cb0d6ef369",
            "file": "projects/ngx-lib/smart-filters/common/model/filter.ts",
            "type": "interface",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\n\nexport interface IPepSmartFilterData {\n    fieldId: string;\n    operator: IPepSmartFilterOperator;\n    operatorUnit?: IPepSmartFilterOperatorUnit;\n    value: IPepSmartFilterDataValue;\n}\nexport interface IPepSmartFilterDataValue {\n    first: any;\n    second?: any;\n}\n",
            "properties": [
                {
                    "name": "first",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "second",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSmartFilterField",
            "id": "interface-IPepSmartFilterField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "interface",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepSmartFilterFieldOption",
            "id": "interface-IPepSmartFilterFieldOption-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "interface",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPepTextboxFieldOptions",
            "id": "interface-IPepTextboxFieldOptions-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "interface",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "PepTextboxFieldType",
                    "optional": true,
                    "description": "",
                    "line": 190
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPepFieldBaseOptions"
        },
        {
            "name": "IPepVirtualScrollChangeEvent",
            "id": "interface-IPepVirtualScrollChangeEvent-696b7c94f65d00c3e144844186456702",
            "file": "projects/ngx-lib/list/virtual-scroll.component.ts",
            "type": "interface",
            "sourceCode": "import {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\n\nimport * as tween from '@tweenjs/tween.js';\n\ndeclare let _: any;\nexport interface IPepVirtualScrollChangeEvent {\n    start?: number;\n    end?: number;\n    addAtStart?: boolean;\n    calculatedChildHeight?: number;\n}\n\n@Component({\n    selector: 'pep-virtual-scroll',\n    template: `\n        <div class=\"total-padding\" #shim></div>\n        <div class=\"scrollable-content\" #content>\n            <ng-content></ng-content>\n        </div>\n    `,\n    host: {\n        '[style.overflow-y]': \"parentScroll ? 'hidden' : 'auto'\",\n    },\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                position: relative;\n                display: block;\n                -webkit-overflow-scrolling: touch;\n            }\n            .scrollable-content {\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                //   z-index:495;\n            }\n            .total-padding {\n                width: 1px;\n                opacity: 0;\n            }\n\n            .rtl {\n                .scrollable-content {\n                    left: unset;\n                    right: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class PepVirtualScrollComponent implements OnInit, OnChanges, OnDestroy {\n    //@Input()\n    //items: any[] = [];\n\n    @Input()\n    totalRows = 0;\n\n    @Input()\n    scrollbarWidth: number;\n\n    @Input()\n    scrollbarHeight: number;\n\n    @Input()\n    childWidth: number;\n\n    @Input()\n    childHeight: number;\n\n    @Input()\n    bufferAmount = 0;\n\n    @Input()\n    scrollAnimationTime = 1500;\n\n    @Input()\n    doNotCheckAngularZone = false;\n\n    private refreshHandler = () => {\n        this.refresh(true);\n    };\n    private _parentScroll: Element | Window;\n    @Input()\n    set parentScroll(element: Element | Window) {\n        if (this._parentScroll === element) {\n            return;\n        }\n        this._parentScroll = element;\n        this.addParentEventHandlers(this._parentScroll);\n    }\n\n    get parentScroll(): Element | Window {\n        return this._parentScroll;\n    }\n\n    @Input()\n    isTable = false;\n\n    //@Output()\n    //update: EventEmitter<any[]> = new EventEmitter<any[]>();\n    //viewPortItems: any[];\n\n    @Output()\n    change: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    @Output()\n    load: EventEmitter<void> = new EventEmitter<void>();\n\n    // @Output()\n    // start: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    // @Output()\n    // end: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    @ViewChild('content', { read: ElementRef })\n    contentElementRef: ElementRef;\n\n    @ViewChild('shim', { read: ElementRef })\n    shimElementRef: ElementRef;\n\n    @ContentChild('container')\n    containerElementRef: ElementRef;\n\n    previousStart: number;\n    previousEnd: number;\n    startupLoop = true;\n    currentTween: any;\n\n    private disposeScrollHandler: () => void | undefined;\n    private disposeResizeHandler: () => void | undefined;\n\n    /** Cache of the last scroll height to prevent setting CSS when not needed. */\n    private lastScrollHeight = -1;\n\n    /** Cache of the last top padding to prevent setting CSS when not needed. */\n    private lastTopPadding = -1;\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private zone: NgZone\n    ) {}\n\n    ngOnInit() {\n        this.scrollbarWidth = 0; // this.element.nativeElement.offsetWidth - this.element.nativeElement.clientWidth;\n        this.scrollbarHeight = 0; // this.element.nativeElement.offsetHeight - this.element.nativeElement.clientHeight;\n\n        if (!this.parentScroll) {\n            this.addParentEventHandlers(this.element.nativeElement);\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeParentEventHandlers();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.previousStart = undefined;\n        this.previousEnd = undefined;\n        const totalRows = (changes as any).totalRows || {};\n        if (\n            ((changes as any).totalRows !== undefined &&\n                totalRows.previousValue === undefined) ||\n            totalRows.previousValue !== undefined\n        ) {\n            this.startupLoop = true;\n        }\n\n        const ieVer = this.detectIE();\n        const headerRowHeight = '34px';\n\n        // Set padding top for the table view because the header row.\n        //this.renderer.setStyle(this.contentElementRef.nativeElement, 'padding-top', this.isTable ? headerRowHeight : '0');\n\n        if (!ieVer || ieVer >= 16) {\n            // not IE and version < 16\n            this.renderer.setStyle(this.element.nativeElement, 'top', '0');\n        } else {\n            this.renderer.setStyle(\n                this.element.nativeElement,\n                'top',\n                headerRowHeight\n            );\n        }\n\n        //Only for IE browsers\n        /*  let ua = navigator.userAgent;\n        if (this.isTable && (ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0 || ua.indexOf('Edge/') >= 0)) {\n            this.renderer.setStyle(this.element.nativeElement, 'top', headerRowHeight);\n        }\n        else {\n            this.renderer.setStyle(this.element.nativeElement, 'top', '0');\n        }*/\n\n        this.refresh();\n    }\n\n    detectIE(): any {\n        const ua = window.navigator.userAgent;\n\n        // Test values; Uncomment to check result …\n\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n        // Edge 12 (Spartan)\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n        // Edge 13\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n        const msie = ua.indexOf('MSIE ');\n        if (msie > 0) {\n            // IE 10 or older => return version number\n            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        const trident = ua.indexOf('Trident/');\n        if (trident > 0) {\n            // IE 11 => return version number\n            const rv = ua.indexOf('rv:');\n            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        const edge = ua.indexOf('Edge/');\n        if (edge > 0) {\n            // Edge (IE 12+) => return version number\n            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n        }\n\n        // other browser\n        return false;\n    }\n\n    refresh(forceViewportUpdate = false) {\n        this.zone.runOutsideAngular(() => {\n            requestAnimationFrame(() =>\n                this.calculateItems(forceViewportUpdate)\n            );\n        });\n    }\n\n    scrollInto(index: any) {\n        const el: Element =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        // const offsetTop = this.getElementsOffset();\n        //let index: number = (this.items || []).indexOf(item);\n        if (index < 0 || index >= this.totalRows) return;\n\n        const d = this.calculateDimensions();\n        const scrollTop =\n            Math.floor(index / d.itemsPerRow) * d.childHeight -\n            d.childHeight * Math.min(index, this.bufferAmount);\n\n        let animationRequest;\n\n        if (this.currentTween !== undefined) {\n            this.currentTween.stop();\n        }\n\n        // totally disable animate\n        if (!this.scrollAnimationTime) {\n            el.scrollTop = scrollTop;\n            return;\n        }\n\n        this.currentTween = new tween.Tween({ scrollTop: el.scrollTop })\n            .to({ scrollTop }, this.scrollAnimationTime)\n            .easing(tween.Easing.Quadratic.Out)\n            .onUpdate((data) => {\n                if (isNaN(data.scrollTop)) {\n                    return;\n                }\n                this.renderer.setProperty(el, 'scrollTop', data.scrollTop);\n                this.refresh(true);\n            })\n            .onStop(() => {\n                cancelAnimationFrame(animationRequest);\n            })\n            .start();\n\n        const animate = (time?) => {\n            this.currentTween.update(time);\n            if (this.currentTween._object.scrollTop !== scrollTop) {\n                this.zone.runOutsideAngular(() => {\n                    animationRequest = requestAnimationFrame(animate);\n                });\n            }\n        };\n\n        animate();\n    }\n\n    private addParentEventHandlers(parentScroll: Element | Window) {\n        this.removeParentEventHandlers();\n        if (parentScroll) {\n            this.zone.runOutsideAngular(() => {\n                this.disposeScrollHandler = this.renderer.listen(\n                    parentScroll,\n                    'mousewheel',\n                    _.throttle(this.refreshHandler, 20, {\n                        leading: false,\n                        trailing: true,\n                    })\n                );\n                this.renderer.listen(\n                    parentScroll,\n                    'scroll',\n                    _.debounce(this.refreshHandler, 150)\n                );\n\n                //this.renderer.listen(parentScroll, 'scroll', _.debounce(_.throttle(this.refreshHandler, 150), 50));\n\n                if (parentScroll instanceof Window) {\n                    this.disposeScrollHandler = this.renderer.listen(\n                        'window',\n                        'resize',\n                        _.debounce(this.refreshHandler, 250)\n                    );\n                }\n            });\n        }\n    }\n\n    private removeParentEventHandlers() {\n        if (this.disposeScrollHandler) {\n            this.disposeScrollHandler();\n            this.disposeScrollHandler = undefined;\n        }\n        if (this.disposeResizeHandler) {\n            this.disposeResizeHandler();\n            this.disposeResizeHandler = undefined;\n        }\n    }\n\n    private countItemsPerRow() {\n        let offsetTop;\n        let itemsPerRow;\n        const children = this.contentElementRef.nativeElement.children;\n        for (itemsPerRow = 0; itemsPerRow < children.length; itemsPerRow++) {\n            if (\n                offsetTop != undefined &&\n                offsetTop !== children[itemsPerRow].offsetTop\n            )\n                break;\n            offsetTop = children[itemsPerRow].offsetTop;\n        }\n        return itemsPerRow;\n    }\n\n    private getElementsOffset(): number {\n        let offsetTop = 0;\n        if (\n            this.containerElementRef &&\n            this.containerElementRef.nativeElement\n        ) {\n            offsetTop += this.containerElementRef.nativeElement.offsetTop;\n        }\n        if (this.parentScroll) {\n            offsetTop += this.element.nativeElement.offsetTop;\n        }\n        return offsetTop;\n    }\n\n    private calculateDimensions() {\n        const el: Element =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        const itemCount = this.totalRows;\n        const viewWidth = el.clientWidth - this.scrollbarWidth;\n        const viewHeight = el.clientHeight - this.scrollbarHeight;\n\n        let contentDimensions;\n        if (this.childWidth == undefined || this.childHeight == undefined) {\n            let content = this.contentElementRef.nativeElement;\n            if (\n                this.containerElementRef &&\n                this.containerElementRef.nativeElement\n            ) {\n                content = this.containerElementRef.nativeElement;\n            }\n            contentDimensions = content.children[0]\n                ? content.children[0].getBoundingClientRect()\n                : {\n                      width: viewWidth,\n                      height: viewHeight,\n                  };\n        }\n\n        const childWidth = this.childWidth || contentDimensions.width;\n        const childHeight = this.childHeight || contentDimensions.height;\n\n        let itemsPerRow = Math.max(1, this.countItemsPerRow());\n        const itemsPerRowByCalc = Math.max(\n            1,\n            Math.floor(viewWidth / childWidth)\n        );\n        const itemsPerCol = Math.max(1, Math.floor(viewHeight / childHeight));\n        const elScrollTop =\n            this.parentScroll instanceof Window\n                ? window.pageYOffset ||\n                  document.documentElement.scrollTop ||\n                  document.body.scrollTop ||\n                  0\n                : el.scrollTop;\n        const scrollTop = Math.max(0, elScrollTop);\n\n        const scrollHeight =\n            childHeight * Math.floor(itemCount / itemsPerRow) +\n            (itemCount % itemsPerRow != 0 ? childHeight : 0);\n\n        const ua = navigator.userAgent;\n        /*if (this.isTable && (ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0 || ua.indexOf('Edge/') >= 0)) {\n            scrollHeight += 34;\n        }*/\n        if (\n            itemsPerCol === 1 &&\n            Math.floor((scrollTop / scrollHeight) * itemCount) +\n                itemsPerRowByCalc >=\n                itemCount\n        ) {\n            itemsPerRow = itemsPerRowByCalc;\n        }\n\n        if (scrollHeight !== this.lastScrollHeight) {\n            this.renderer.setStyle(\n                this.shimElementRef.nativeElement,\n                'height',\n                `${scrollHeight}px`\n            );\n            this.lastScrollHeight = scrollHeight;\n        }\n\n        return {\n            itemCount: itemCount,\n            viewWidth: viewWidth,\n            viewHeight: viewHeight,\n            childWidth: childWidth,\n            childHeight: childHeight,\n            itemsPerRow: itemsPerRow,\n            itemsPerCol: itemsPerCol,\n            itemsPerRowByCalc: itemsPerRowByCalc,\n            scrollHeight,\n        };\n    }\n\n    private calculateItems(forceViewportUpdate = false) {\n        if (!this.doNotCheckAngularZone) {\n            NgZone.assertNotInAngularZone();\n        }\n\n        const el =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        const d = this.calculateDimensions();\n\n        //let items = this.items || [];\n        const offsetTop = this.getElementsOffset();\n        let elScrollTop =\n            this.parentScroll instanceof Window\n                ? window.pageYOffset ||\n                  document.documentElement.scrollTop ||\n                  document.body.scrollTop ||\n                  0\n                : el.scrollTop;\n\n        if (elScrollTop > d.scrollHeight) {\n            elScrollTop = d.scrollHeight + offsetTop;\n        }\n\n        const scrollTop = Math.max(0, elScrollTop - offsetTop);\n        const indexByScrollTop =\n            ((scrollTop / d.scrollHeight) * d.itemCount) / d.itemsPerRow;\n        let end = Math.min(\n            d.itemCount,\n            Math.ceil(indexByScrollTop) * d.itemsPerRow +\n                d.itemsPerRow * (d.itemsPerCol + 1)\n        );\n\n        let maxStartEnd = end;\n        const modEnd = end % d.itemsPerRow;\n        if (modEnd) {\n            maxStartEnd = end + d.itemsPerRow - modEnd;\n        }\n        const maxStart = Math.max(\n            0,\n            maxStartEnd - d.itemsPerCol * d.itemsPerRow - d.itemsPerRow\n        );\n        let start = Math.min(\n            maxStart,\n            Math.floor(indexByScrollTop) * d.itemsPerRow\n        );\n\n        const startRow = Math.ceil(start / d.itemsPerRow);\n\n        const topPadding =\n            this.totalRows === 0\n                ? 0\n                : d.childHeight * startRow -\n                  d.childHeight * Math.min(startRow, this.bufferAmount);\n\n        if (topPadding !== this.lastTopPadding) {\n            this.renderer.setStyle(\n                this.contentElementRef.nativeElement,\n                'transform',\n                `translateY(${topPadding}px)`\n            );\n            this.renderer.setStyle(\n                this.contentElementRef.nativeElement,\n                'webkitTransform',\n                `translateY(${topPadding}px)`\n            );\n            this.lastTopPadding = topPadding;\n        }\n\n        const buffer = this.bufferAmount * d.itemsPerRow;\n        start = !isNaN(start) ? start : -1;\n        end = !isNaN(end) ? end : -1;\n        start -= buffer;\n        start = Math.max(0, start);\n        end += buffer;\n        end = Math.min(this.totalRows, end);\n\n        if (\n            start !== this.previousStart ||\n            end !== this.previousEnd ||\n            forceViewportUpdate === true\n        ) {\n            this.zone.run(() => {\n                // update the scroll list\n                end = end >= 0 ? end : 0; // To prevent from accidentally selecting the entire array with a negative 1 (-1) in the end position.\n\n                //this.viewPortItems = this.items.slice(start, end);\n                //this.update.emit(this.viewPortItems);\n\n                // emit 'start' event\n                //if (start !== this.previousStart && this.startupLoop === false) {\n                //    this.start.emit({ start, end });\n                //}\n\n                // emit 'end' event\n                //if (end !== this.previousEnd && this.startupLoop === false) {\n                //    this.end.emit({ start, end });\n                //}\n\n                // To know if to add at the start of the list or at the end.\n                const addAtStart = this.previousEnd >= end;\n                this.previousStart = start;\n                this.previousEnd = end;\n\n                if (this.startupLoop === true) {\n                    this.refresh();\n                } else {\n                    const calculatedChildHeight = d.childHeight;\n                    this.change.emit({\n                        start,\n                        end,\n                        addAtStart,\n                        calculatedChildHeight,\n                    });\n                }\n            });\n        } else if (this.startupLoop === true) {\n            this.startupLoop = false;\n            // Added to know when the scroll is ready (UI elements are displayed already).\n            this.load.emit();\n            this.refresh();\n        }\n    }\n}\n",
            "properties": [
                {
                    "name": "addAtStart",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "calculatedChildHeight",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "end",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "start",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "PepAddonService",
            "id": "injectable-PepAddonService-3002d36aedd7186ac5a6dac432e46b3e",
            "file": "projects/ngx-lib/src/core/common/services/addon.service.ts",
            "properties": [
                {
                    "name": "ADDON_API_ASYNC_RELATIVE_PATH",
                    "defaultValue": "`${this.ADDON_API_RELATIVE_PATH}/async`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "ADDON_API_RELATIVE_PATH",
                    "defaultValue": "'/addons/api'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "ADDON_ASSETS_PATH_KEY",
                    "defaultValue": "'AddonAssetsPath'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAddonApiCall",
                    "args": [
                        {
                            "name": "addonUUID",
                            "type": "string"
                        },
                        {
                            "name": "fileName",
                            "type": "string"
                        },
                        {
                            "name": "functionName",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "isAsync",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "addonUUID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsync",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAddonBaseRelativePath",
                    "args": [
                        {
                            "name": "isAsync",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "isAsync",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAddonStaticFolder",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "postAddonApiCall",
                    "args": [
                        {
                            "name": "addonUUID",
                            "type": "string"
                        },
                        {
                            "name": "fileName",
                            "type": "string"
                        },
                        {
                            "name": "functionName",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "httpOptions",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "isAsync",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "addonUUID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsync",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAddonStaticFolder",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PepSessionService } from './session.service';\nimport { PepHttpService } from '../../http/services/http.service';\nimport { Observable } from 'rxjs';\n\n/*\n    This service is the webapp api for addon usege.\n*/\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepAddonService {\n    private readonly ADDON_ASSETS_PATH_KEY = 'AddonAssetsPath';\n    private readonly ADDON_API_RELATIVE_PATH = '/addons/api';\n    private readonly ADDON_API_ASYNC_RELATIVE_PATH = `${this.ADDON_API_RELATIVE_PATH}/async`;\n\n    constructor(\n        private sessionService: PepSessionService,\n        private httpService: PepHttpService\n    ) {}\n\n    private getAddonBaseRelativePath(isAsync: boolean): string {\n        return isAsync\n            ? this.ADDON_API_ASYNC_RELATIVE_PATH\n            : this.ADDON_API_RELATIVE_PATH;\n    }\n\n    getAddonStaticFolder(): string {\n        // return this.assetsPath;\n        return this.sessionService.getObject(this.ADDON_ASSETS_PATH_KEY) || '';\n    }\n\n    setAddonStaticFolder(path: string): void {\n        // this.assetsPath = path;\n        return this.sessionService.setObject(this.ADDON_ASSETS_PATH_KEY, path);\n    }\n\n    getAddonApiCall(\n        addonUUID: string,\n        fileName: string,\n        functionName: string,\n        httpOptions = {},\n        isAsync = false\n    ): Observable<any> {\n        return this.httpService.getPapiApiCall(\n            `${this.getAddonBaseRelativePath(\n                isAsync\n            )}/${addonUUID}/${fileName}/${functionName}`,\n            httpOptions\n        );\n    }\n\n    postAddonApiCall(\n        addonUUID: string,\n        fileName: string,\n        functionName: string,\n        body = {},\n        httpOptions = {},\n        isAsync = false\n    ): Observable<any> {\n        return this.httpService.postPapiApiCall(\n            `${this.getAddonBaseRelativePath(\n                isAsync\n            )}/${addonUUID}/${fileName}/${functionName}`,\n            body,\n            httpOptions\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService"
                    },
                    {
                        "name": "httpService",
                        "type": "PepHttpService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepBreadCrumbsComponent",
            "id": "component-PepBreadCrumbsComponent-83eeee983454bc859312e775e6534557",
            "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.component.ts",
            "properties": [
                {
                    "name": "_displayType",
                    "defaultValue": "'label'",
                    "type": "PepBreadCrumbsDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "type": "Array<PepBreadCrumbItem>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "charSeparator",
                    "defaultValue": "' / '",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "iconSeparator",
                    "defaultValue": "pepIconArrowRight.name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "shrinkItems",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [
                {
                    "name": "getLabelTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "PepBreadCrumbItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PepBreadCrumbItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupShrinkItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    Input,\n    OnInit,\n    Injectable,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepBreadCrumbItemClickEvent,\n    PepBreadCrumbItem,\n    PepBreadCrumbsDisplayType,\n} from './bread-crumbs.model';\nimport {\n    pepIconArrowLeft,\n    pepIconArrowRight,\n} from '@pepperi-addons/ngx-lib/icon';\n@Component({\n    selector: 'pep-bread-crumbs',\n    templateUrl: './bread-crumbs.component.html',\n    styleUrls: ['./bread-crumbs.component.scss'],\n})\n@Injectable()\nexport class PepBreadCrumbsComponent implements OnInit {\n    private _items: Array<PepBreadCrumbItem> = [];\n    @Input()\n    set items(value: Array<PepBreadCrumbItem>) {\n        this._items = value;\n        this.setupShrinkItems();\n    }\n    get items(): Array<PepBreadCrumbItem> {\n        return this._items;\n    }\n\n    private _displayType: PepBreadCrumbsDisplayType = 'label';\n    @Input()\n    set displayType(value: PepBreadCrumbsDisplayType) {\n        this._displayType = value;\n        this.setupShrinkItems();\n    }\n    get displayType(): PepBreadCrumbsDisplayType {\n        return this._displayType;\n    }\n\n    @Input() addSpacing = false;\n\n    @Output()\n    itemClick: EventEmitter<IPepBreadCrumbItemClickEvent> = new EventEmitter<IPepBreadCrumbItemClickEvent>();\n\n    charSeparator = ' / ';\n    iconSeparator: string = pepIconArrowRight.name;\n    shrinkItems = false;\n    screenSize: PepScreenSizeType;\n\n    constructor(private layoutService: PepLayoutService) {}\n\n    ngOnInit(): void {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n            this.setupShrinkItems();\n        });\n\n        if (this.layoutService.isRtl()) {\n            this.charSeparator = ' \\\\ ';\n            this.iconSeparator = pepIconArrowLeft.name;\n        }\n    }\n\n    private setupShrinkItems() {\n        if (this.displayType === 'items' && this.items.length > 1) {\n            this.shrinkItems = this.screenSize > PepScreenSizeType.SM;\n        }\n    }\n\n    getLabelTitle(): string {\n        let labelTitle = '';\n\n        if (this.items && this.items.length > 0) {\n            for (let index = 0; index < this.items.length; index++) {\n                if (index < this.items.length - 1) {\n                    if (index > 0) {\n                        labelTitle += this.charSeparator;\n                    }\n\n                    labelTitle += this.items[index].text;\n                }\n            }\n        }\n\n        return labelTitle;\n    }\n\n    onBreadCrumbItemClick(item: PepBreadCrumbItem): void {\n        this.itemClick.emit({ source: item });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "Array<PepBreadCrumbItem>",
                        "line": 32
                    }
                },
                "displayType": {
                    "name": "displayType",
                    "setSignature": {
                        "name": "displayType",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "displayType",
                        "type": "",
                        "returnType": "PepBreadCrumbsDisplayType",
                        "line": 42
                    }
                }
            },
            "type": "component"
        },
        {
            "name": "PepClipboardService",
            "id": "injectable-PepClipboardService-8362cb03e2f6025e263f8870625554e0",
            "file": "projects/ngx-lib/src/core/clipboard/clipboard.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepClipboardService {\n    // private dom: Document;\n    // // I initialize the Clipboard service.\n    // // --\n    // // CAUTION: This service is tightly couped to the browser DOM (Document Object Model).\n    // // But, by injecting the \"document\" reference rather than trying to reference it\n    // // globally, we can at least pretend that we are trying to lower the tight coupling.\n    // constructor(@Optional() @Inject(DOCUMENT)  dom: Document) {\n    //     this.dom = dom;\n    // }\n    // // ---\n    // // PUBLIC METHODS.\n    // // ---\n    // // I copy the given value to the user's system clipboard. Returns a promise that\n    // // resolves to the given value on success or rejects with the raised Error.\n    // public copy(value: string): Promise<any> {\n    //     const promise = new Promise(\n    //         (resolve, reject): void => {\n    //             let textarea = null;\n    //             try {\n    //                 // In order to execute the \"Copy\" command, we actually have to have\n    //                 // a \"selection\" in the currently rendered document. As such, we're\n    //                 // going to inject a Textarea element and .select() it in order to\n    //                 // force a selection.\n    //                 // --\n    //                 // NOTE: This Textarea is being rendered off-screen.\n    //                 textarea = this.dom.createElement('textarea');\n    //                 textarea.style.height = '0px';\n    //                 textarea.style.left = '-100px';\n    //                 textarea.style.opacity = '0';\n    //                 textarea.style.position = 'fixed';\n    //                 textarea.style.top = '-100px';\n    //                 textarea.style.width = '0px';\n    //                 this.dom.body.appendChild(textarea);\n    //                 // Set and select the value (creating an active Selection range).\n    //                 textarea.value = value;\n    //                 textarea.select();\n    //                 // Ask the browser to copy the current selection to the clipboard.\n    //                 this.dom.execCommand('copy');\n    //                 resolve(value);\n    //             } finally {\n    //                 // Cleanup - remove the Textarea from the DOM if it was injected.\n    //                 if (textarea && textarea.parentNode) {\n    //                     textarea.parentNode.removeChild(textarea);\n    //                 }\n    //             }\n    //         }\n    //     );\n    //     return (promise);\n    // }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepCookieService",
            "id": "injectable-PepCookieService-5bc49b205636fd3cfcaf141e65da086c",
            "file": "projects/ngx-lib/src/core/common/services/cookie.service.ts",
            "properties": [
                {
                    "name": "documentIsAccessible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 558,
                                "end": 562,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 552,
                                "end": 557,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 583,
                                "end": 590,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean - whether cookie with specified name exists</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "domain",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3796,
                                "end": 3800,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3790,
                                "end": 3795,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie name</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3829,
                                "end": 3833,
                                "flags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 3823,
                                "end": 3828,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie path</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3862,
                                "end": 3868,
                                "flags": 0,
                                "escapedText": "domain"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 3856,
                                "end": 3861,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie domain</p>\n"
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAll",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "domain",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4364,
                                "end": 4368,
                                "flags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 4358,
                                "end": 4363,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie path</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4397,
                                "end": 4403,
                                "flags": 0,
                                "escapedText": "domain"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 4391,
                                "end": 4396,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie domain</p>\n"
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 986,
                                "end": 990,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 980,
                                "end": 985,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1011,
                                "end": 1018,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>property value</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 60,
                    "description": "",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1456,
                                "end": 1463,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>all the cookies in json</p>\n"
                        }
                    ]
                },
                {
                    "name": "getCookieRegExp",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "RegExp",
                    "typeParameters": [],
                    "line": 192,
                    "description": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4923,
                                "end": 4927,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 4917,
                                "end": 4922,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4948,
                                "end": 4955,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>property RegExp</p>\n"
                        }
                    ]
                },
                {
                    "name": "safeDecodeURIComponent",
                    "args": [
                        {
                            "name": "encodedURIComponent",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 204,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "encodedURIComponent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "expires",
                            "type": "number | Date",
                            "optional": true
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "domain",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2161,
                                "end": 2165,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2155,
                                "end": 2160,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie name</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2196,
                                "end": 2201,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2190,
                                "end": 2195,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2232,
                                "end": 2239,
                                "flags": 0,
                                "escapedText": "expires"
                            },
                            "type": "number | Date",
                            "optional": true,
                            "tagName": {
                                "pos": 2226,
                                "end": 2231,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Number of days until the cookies expires or an actual <code>Date</code></p>\n"
                        },
                        {
                            "name": {
                                "pos": 2316,
                                "end": 2320,
                                "flags": 0,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2310,
                                "end": 2315,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie path</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2351,
                                "end": 2357,
                                "flags": 0,
                                "escapedText": "domain"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2345,
                                "end": 2350,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cookie domain</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2388,
                                "end": 2394,
                                "flags": 0,
                                "escapedText": "secure"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 2382,
                                "end": 2387,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Secure flag</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2423,
                                "end": 2431,
                                "flags": 0,
                                "escapedText": "sameSite"
                            },
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "defaultValue": "'Lax'",
                            "tagName": {
                                "pos": 2417,
                                "end": 2422,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>OWASP samesite token <code>Lax</code>, <code>None</code>, or <code>Strict</code>. Defaults to <code>Lax</code></p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Injectable,\n    Inject,\n    PLATFORM_ID,\n    InjectionToken,\n    Optional,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepCookieService {\n    private readonly documentIsAccessible: boolean;\n\n    constructor(\n        @Optional() @Inject(DOCUMENT) private document: any,\n        @Inject(PLATFORM_ID) private platformId: InjectionToken<any>\n    ) {\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n\n    /**\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name: string): boolean {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n\n        name = encodeURIComponent(name);\n\n        const regExp: RegExp = this.getCookieRegExp(name);\n        const exists: boolean = regExp.test(this.document.cookie);\n\n        return exists;\n    }\n\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name: string): string {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n\n            const regExp: RegExp = this.getCookieRegExp(name);\n            const result: RegExpExecArray = regExp.exec(this.document.cookie);\n\n            return this.safeDecodeURIComponent(result[1]);\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * @returns all the cookies in json\n     */\n    getAll(): { [key: string]: string } {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n\n        const cookies: { [key: string]: string } = {};\n        const document: any = this.document;\n\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[\n                    this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))\n                ] = this.safeDecodeURIComponent(cookieValue);\n            });\n        }\n\n        return cookies;\n    }\n\n    /**\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     */\n    set(\n        name: string,\n        value: string,\n        expires?: number | Date,\n        path?: string,\n        domain?: string,\n        secure?: boolean,\n        sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'\n    ): void {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n\n        let cookieString: string =\n            encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n        if (expires) {\n            if (typeof expires === 'number') {\n                const dateExpires: Date = new Date(\n                    new Date().getTime() + expires * 1000 * 60 * 60 * 24\n                );\n\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            } else {\n                cookieString += 'expires=' + expires.toUTCString() + ';';\n            }\n        }\n\n        if (path) {\n            cookieString += 'path=' + path + ';';\n        }\n\n        if (domain) {\n            cookieString += 'domain=' + domain + ';';\n        }\n\n        if (secure === false && sameSite === 'None') {\n            secure = true;\n        }\n\n        if (secure) {\n            cookieString += 'secure;';\n        }\n\n        cookieString += 'sameSite=' + sameSite + ';';\n\n        this.document.cookie = cookieString;\n    }\n\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    delete(\n        name: string,\n        path?: string,\n        domain?: string,\n        secure?: boolean,\n        sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'\n    ): void {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n\n        this.set(\n            name,\n            '',\n            new Date('Thu, 01 Jan 1970 00:00:01 GMT'),\n            path,\n            domain,\n            secure,\n            sameSite\n        );\n    }\n\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    deleteAll(\n        path?: string,\n        domain?: string,\n        secure?: boolean,\n        sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'\n    ): void {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n\n        const cookies: any = this.getAll();\n\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    private getCookieRegExp(name: string): RegExp {\n        const escapedName: string = name.replace(\n            /([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi,\n            '\\\\$1'\n        );\n\n        return new RegExp(\n            '(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)',\n            'g'\n        );\n    }\n\n    private safeDecodeURIComponent(encodedURIComponent: string): string {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        } catch {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "platformId",
                        "type": "InjectionToken<any>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "InjectionToken<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepCustomizationService",
            "id": "injectable-PepCustomizationService-1d835a353459572dd41e3aa38ae84753",
            "file": "projects/ngx-lib/src/core/customization/customization.service.ts",
            "properties": [
                {
                    "name": "BORDER_RADIUS_KEY",
                    "defaultValue": "'--pep-border-radius'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "BORDER_RADIUS_LG_KEY",
                    "defaultValue": "PepCustomizationService.BORDER_RADIUS_KEY + '-lg'",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "BORDER_RADIUS_MD_KEY",
                    "defaultValue": "PepCustomizationService.BORDER_RADIUS_KEY + '-md'",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "BORDER_RADIUS_SM_KEY",
                    "defaultValue": "PepCustomizationService.BORDER_RADIUS_KEY + '-sm'",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "CARD_BORDER_RADIUS_KEY",
                    "defaultValue": "'--pep-card-border-radius'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "CARD_FIELD_HEIGHT_KEY",
                    "defaultValue": "'--pep-card-field-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "CARD_SHADOW_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-card-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "CARD_SPACEING_KEY",
                    "defaultValue": "'--pep-card-spacing'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_QS_KEY",
                    "defaultValue": "'--pep-color-qs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_REGULAR_KEY",
                    "defaultValue": "'--pep-color-regular'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_STRONG_KEY",
                    "defaultValue": "'--pep-color-strong'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_SYSTEM_CAUTION_KEY",
                    "defaultValue": "'--pep-color-system-caution'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_SYSTEM_PRIMARY_INVERT_KEY",
                    "defaultValue": "'--pep-color-system-primary-invert'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_SYSTEM_PRIMARY_KEY",
                    "defaultValue": "'--pep-color-system-primary'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_SYSTEM_SUCCESS_KEY",
                    "defaultValue": "'--pep-color-system-success'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_TEXT_LINK_KEY",
                    "defaultValue": "'--pep-color-text-link'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_TOP_HEADER_KEY",
                    "defaultValue": "'--pep-color-top-header'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_USER_PRIMARY_KEY",
                    "defaultValue": "'--pep-color-user-primary'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_USER_SECONDARY_KEY",
                    "defaultValue": "'--pep-color-user-secondary'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "COLOR_WEAK_KEY",
                    "defaultValue": "'--pep-color-weak'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "customHeaderHeight",
                    "defaultValue": "PepCustomizationService.DEFAULT_HEADER_HEIGHT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_BRANDING_COLOR",
                    "defaultValue": "'#fff'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "DEFAULT_HEADER_HEIGHT",
                    "defaultValue": "64",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "DEFAULT_SPINNER_COLOR",
                    "defaultValue": "'#78aa00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "fb",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "FONT_FAMILY_BODY_BOLD_URL_KEY",
                    "defaultValue": "'--pep-font-family-body-bold-url'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_FAMILY_BODY_KEY",
                    "defaultValue": "'--pep-font-family-body'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_FAMILY_BODY_NORMAL_URL_KEY",
                    "defaultValue": "'--pep-font-family-body-normal-url'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_FAMILY_TITLE_BOLD_URL_KEY",
                    "defaultValue": "'--pep-font-family-title-bold-url'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_FAMILY_TITLE_KEY",
                    "defaultValue": "'--pep-font-family-title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_FAMILY_TITLE_NORMAL_URL_KEY",
                    "defaultValue": "'--pep-font-family-title-normal-url'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_2XL_KEY",
                    "defaultValue": "'--pep-font-size-2xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_2XS_KEY",
                    "defaultValue": "'--pep-font-size-2xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_LG_KEY",
                    "defaultValue": "'--pep-font-size-lg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_MD_KEY",
                    "defaultValue": "'--pep-font-size-md'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_SM_KEY",
                    "defaultValue": "'--pep-font-size-sm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_XL_KEY",
                    "defaultValue": "'--pep-font-size-xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FONT_SIZE_XS_KEY",
                    "defaultValue": "'--pep-font-size-xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FOOTER_BAR_SPACING_BOTTOM_KEY",
                    "defaultValue": "'--pep-footer-bar-spacing-bottom'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FOOTER_BAR_SPACING_TOP_KEY",
                    "defaultValue": "'--pep-footer-bar-spacing-top'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FOOTER_HEIGHT_KEY",
                    "defaultValue": "'--pep-footer-bar-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "footerHeight",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "FORM_FIELD_HEIGHT_KEY",
                    "defaultValue": "'--pep-form-field-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FORM_FIELD_SPACEING_KEY",
                    "defaultValue": "'--pep-form-field-spacing'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FORM_FIELD_TITLE_HEIGHT_KEY",
                    "defaultValue": "'--pep-form-field-title-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "FORM_SPACEING_KEY",
                    "defaultValue": "'--pep-form-spacing'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "hasCustomHeader",
                    "defaultValue": "null",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasCustomHomepage",
                    "defaultValue": "null",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "HEADER_HEIGHT_KEY",
                    "defaultValue": "'--pep-header-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_2XL_KEY",
                    "defaultValue": "'--pep-line-height-2xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_2XS_KEY",
                    "defaultValue": "'--pep-line-height-2xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_LG_KEY",
                    "defaultValue": "'--pep-line-height-lg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_MD_KEY",
                    "defaultValue": "'--pep-line-height-md'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_SM_KEY",
                    "defaultValue": "'--pep-line-height-sm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_XL_KEY",
                    "defaultValue": "'--pep-line-height-xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "LINE_HEIGHT_XS_KEY",
                    "defaultValue": "'--pep-line-height-xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "MAIN_HEIGHT_KEY",
                    "defaultValue": "'--pep-main-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "mainContHeight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "PX_STRING",
                    "defaultValue": "'px'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "REM_STRING",
                    "defaultValue": "'rem'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SETTINGS_WIDTH_KEY",
                    "defaultValue": "'--pep-settings-bar-width'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "settingsWidth",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SHADOW_LG_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-lg-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SHADOW_MD_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-md-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SHADOW_NONE_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-none-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SHADOW_SM_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-sm-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SHADOW_XL_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-xl-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SHADOW_XS_OFFSET_KEY",
                    "defaultValue": "'--pep-shadow-xs-offset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SIDE_BAR_WIDTH_KEY",
                    "defaultValue": "'--pep-side-bar-width'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_2XL_KEY",
                    "defaultValue": "'--pep-spacing-2xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_2XS_KEY",
                    "defaultValue": "'--pep-spacing-2xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_LG_KEY",
                    "defaultValue": "'--pep-spacing-lg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_MD_KEY",
                    "defaultValue": "'--pep-spacing-md'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_SM_KEY",
                    "defaultValue": "'--pep-spacing-sm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_XL_KEY",
                    "defaultValue": "'--pep-spacing-xl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "SPACING_SIZE_XS_KEY",
                    "defaultValue": "'--pep-spacing-xs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "STAND_ALONE_FIELD_CLASS_NAME",
                    "defaultValue": "'pep-field'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "STYLE_QS_KEY",
                    "defaultValue": "'--pep-style-qs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "STYLE_TOP_HEADER_KEY",
                    "defaultValue": "'--pep-style-top-header'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TABLE_BORDER_RADIUS_KEY",
                    "defaultValue": "'--pep-table-border-radius'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TABLE_FIELD_HEIGHT_KEY",
                    "defaultValue": "'--pep-table-field-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TABLE_SPACEING_KEY",
                    "defaultValue": "'--pep-table-spacing'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_BAR_FIELD_HEIGHT_KEY",
                    "defaultValue": "'--pep-top-bar-field-height'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_BAR_SPACING_BOTTOM_KEY",
                    "defaultValue": "'--pep-top-bar-spacing-bottom'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_BAR_SPACING_TOP_KEY",
                    "defaultValue": "'--pep-top-bar-spacing-top'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "USER_COLOR",
                    "defaultValue": "'user_color'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "USER_THEME",
                    "defaultValue": "'user_theme'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "USER_THEME_VARIABLES",
                    "defaultValue": "'user_theme_variables'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateCardRowsHeight",
                    "args": [
                        {
                            "name": "rowsCount",
                            "type": "number",
                            "defaultValue": "1"
                        },
                        {
                            "name": "withSpacing",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 253,
                    "jsdoctags": [
                        {
                            "name": "rowsCount",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withSpacing",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateFieldHeight",
                    "args": [
                        {
                            "name": "layoutType",
                            "type": "string",
                            "defaultValue": "'form'"
                        },
                        {
                            "name": "rowSpan",
                            "type": ""
                        },
                        {
                            "name": "standAlone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 287,
                    "jsdoctags": [
                        {
                            "name": "layoutType",
                            "type": "string",
                            "defaultValue": "'form'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowSpan",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "standAlone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateFormFieldHeight",
                    "args": [
                        {
                            "name": "withTitle",
                            "type": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "rowSpan",
                            "type": "number",
                            "defaultValue": "1"
                        },
                        {
                            "name": "standAlone",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "withTitle",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowSpan",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "standAlone",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateTableRowsHeight",
                    "args": [
                        {
                            "name": "rowsCount",
                            "type": "number",
                            "defaultValue": "1"
                        },
                        {
                            "name": "withSpacing",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 270,
                    "jsdoctags": [
                        {
                            "name": "rowsCount",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withSpacing",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBrandingMainColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 964
                },
                {
                    "name": "getBrandingTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 307
                },
                {
                    "name": "getDefaultFromGroup",
                    "args": [
                        {
                            "name": "field",
                            "type": "PepFieldBase"
                        },
                        {
                            "name": "withValidators",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "PepFieldBase",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withValidators",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeBorderRadiusVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeButtonsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeCardCustomizationVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 627,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 570,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeFontsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeFormCustomizationVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 615,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeLayoutVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeQSCustomizationVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 648,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeShadowsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 595,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeSpacingVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeTableCustomizationVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 639,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeTopHeaderCustomizationVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 660,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultThemeVariables",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 671
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "fieldKey",
                            "type": "string"
                        },
                        {
                            "name": "parentFieldKey",
                            "type": "string",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentFieldKey",
                            "type": "string",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoadingSpinnerColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 946
                },
                {
                    "name": "getNumberThemeVariable",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": ""
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 784,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegularColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 546,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStrongColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 555,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemCautionColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 511,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemPrimaryColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 493,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemPrimaryInvertColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 481,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemSuccessColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 502,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTextColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 564,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getThemeVariable",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 774,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getThemeVariables",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 713
                },
                {
                    "name": "getTopBarHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 865
                },
                {
                    "name": "getUserPrimaryColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 520,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserSecondaryColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 528,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeakColorsVariables",
                    "args": [
                        {
                            "name": "themeVars",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "jsdoctags": [
                        {
                            "name": "themeVars",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideFooter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 813
                },
                {
                    "name": "hideSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 850
                },
                {
                    "name": "isFontUrlKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 759,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLegacyColor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 932
                },
                {
                    "name": "isLightColor",
                    "args": [
                        {
                            "name": "hexColor",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 983,
                    "jsdoctags": [
                        {
                            "name": "hexColor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFooterHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 800,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOldUserTheme",
                    "args": [
                        {
                            "name": "res",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 885,
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSettingsWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 837,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setThemeVariables",
                    "args": [
                        {
                            "name": "themeVariablesToSet",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 730,
                    "jsdoctags": [
                        {
                            "name": "themeVariablesToSet",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showFooter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 817
                },
                {
                    "name": "showSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 854
                },
                {
                    "name": "updateFormField",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "field",
                            "type": "PepFieldBase"
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "parentField",
                            "type": "PepFieldBase",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "PepFieldBase",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentField",
                            "type": "PepFieldBase",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFormFieldValue",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "fieldKey",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "parentFieldKey",
                            "type": "string",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentFieldKey",
                            "type": "string",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { PepSessionService } from '../common/services/session.service';\nimport { PepFileService } from '../common/services/file.service';\nimport { PepStyleType, PepFieldBase } from './customization.model';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepCustomizationService {\n    static STAND_ALONE_FIELD_CLASS_NAME = 'pep-field';\n\n    static REM_STRING = 'rem';\n    static PX_STRING = 'px';\n    static USER_THEME = 'user_theme';\n    static USER_COLOR = 'user_color';\n    static USER_THEME_VARIABLES = 'user_theme_variables';\n\n    // Header height\n    static HEADER_HEIGHT_KEY = '--pep-header-height';\n\n    // Side bar variables keys\n    static SIDE_BAR_WIDTH_KEY = '--pep-side-bar-width';\n\n    // Settings width\n    static SETTINGS_WIDTH_KEY = '--pep-settings-bar-width';\n\n    // Top bar variables keys\n    static TOP_BAR_SPACING_TOP_KEY = '--pep-top-bar-spacing-top';\n    static TOP_BAR_SPACING_BOTTOM_KEY = '--pep-top-bar-spacing-bottom';\n    static TOP_BAR_FIELD_HEIGHT_KEY = '--pep-top-bar-field-height';\n\n    // Footer variables keys\n    static FOOTER_HEIGHT_KEY = '--pep-footer-bar-height';\n    static FOOTER_BAR_SPACING_TOP_KEY = '--pep-footer-bar-spacing-top';\n    static FOOTER_BAR_SPACING_BOTTOM_KEY = '--pep-footer-bar-spacing-bottom';\n\n    // Main container height\n    static MAIN_HEIGHT_KEY = '--pep-main-height';\n\n    // Colors variables keys\n    static COLOR_USER_PRIMARY_KEY = '--pep-color-user-primary';\n    static COLOR_USER_SECONDARY_KEY = '--pep-color-user-secondary';\n    static COLOR_SYSTEM_PRIMARY_INVERT_KEY =\n        '--pep-color-system-primary-invert';\n    static COLOR_SYSTEM_PRIMARY_KEY = '--pep-color-system-primary';\n    static COLOR_TEXT_LINK_KEY = '--pep-color-text-link';\n    static COLOR_SYSTEM_CAUTION_KEY = '--pep-color-system-caution';\n    static COLOR_SYSTEM_SUCCESS_KEY = '--pep-color-system-success';\n    static COLOR_STRONG_KEY = '--pep-color-strong';\n    static COLOR_REGULAR_KEY = '--pep-color-regular';\n    static COLOR_WEAK_KEY = '--pep-color-weak';\n\n    // Top header variables keys\n    static COLOR_TOP_HEADER_KEY = '--pep-color-top-header';\n    static STYLE_TOP_HEADER_KEY = '--pep-style-top-header';\n\n    // QS variables keys\n    static COLOR_QS_KEY = '--pep-color-qs';\n    static STYLE_QS_KEY = '--pep-style-qs';\n\n    // Fonts variables keys\n    static FONT_FAMILY_TITLE_KEY = '--pep-font-family-title';\n    static FONT_FAMILY_TITLE_NORMAL_URL_KEY =\n        '--pep-font-family-title-normal-url';\n    static FONT_FAMILY_TITLE_BOLD_URL_KEY = '--pep-font-family-title-bold-url';\n    static FONT_FAMILY_BODY_KEY = '--pep-font-family-body';\n    static FONT_FAMILY_BODY_NORMAL_URL_KEY =\n        '--pep-font-family-body-normal-url';\n    static FONT_FAMILY_BODY_BOLD_URL_KEY = '--pep-font-family-body-bold-url';\n\n    // Border radius variables keys\n    static BORDER_RADIUS_KEY = '--pep-border-radius';\n    static BORDER_RADIUS_SM_KEY =\n        PepCustomizationService.BORDER_RADIUS_KEY + '-sm';\n    static BORDER_RADIUS_MD_KEY =\n        PepCustomizationService.BORDER_RADIUS_KEY + '-md';\n    static BORDER_RADIUS_LG_KEY =\n        PepCustomizationService.BORDER_RADIUS_KEY + '-lg';\n\n    // Fonts variables keys\n    static FONT_SIZE_2XS_KEY = '--pep-font-size-2xs';\n    static FONT_SIZE_XS_KEY = '--pep-font-size-xs';\n    static FONT_SIZE_SM_KEY = '--pep-font-size-sm';\n    static FONT_SIZE_MD_KEY = '--pep-font-size-md';\n    static FONT_SIZE_LG_KEY = '--pep-font-size-lg';\n    static FONT_SIZE_XL_KEY = '--pep-font-size-xl';\n    static FONT_SIZE_2XL_KEY = '--pep-font-size-2xl';\n\n    // Line height variables keys\n    static LINE_HEIGHT_2XS_KEY = '--pep-line-height-2xs';\n    static LINE_HEIGHT_XS_KEY = '--pep-line-height-xs';\n    static LINE_HEIGHT_SM_KEY = '--pep-line-height-sm';\n    static LINE_HEIGHT_MD_KEY = '--pep-line-height-md';\n    static LINE_HEIGHT_LG_KEY = '--pep-line-height-lg';\n    static LINE_HEIGHT_XL_KEY = '--pep-line-height-xl';\n    static LINE_HEIGHT_2XL_KEY = '--pep-line-height-2xl';\n\n    // Shadows offset variables keys\n    static SHADOW_NONE_OFFSET_KEY = '--pep-shadow-none-offset';\n    static SHADOW_XS_OFFSET_KEY = '--pep-shadow-xs-offset';\n    static SHADOW_SM_OFFSET_KEY = '--pep-shadow-sm-offset';\n    static SHADOW_MD_OFFSET_KEY = '--pep-shadow-md-offset';\n    static SHADOW_LG_OFFSET_KEY = '--pep-shadow-lg-offset';\n    static SHADOW_XL_OFFSET_KEY = '--pep-shadow-xl-offset';\n\n    // Spacing variables keys\n    static SPACING_SIZE_2XS_KEY = '--pep-spacing-2xs';\n    static SPACING_SIZE_XS_KEY = '--pep-spacing-xs';\n    static SPACING_SIZE_SM_KEY = '--pep-spacing-sm';\n    static SPACING_SIZE_MD_KEY = '--pep-spacing-md';\n    static SPACING_SIZE_LG_KEY = '--pep-spacing-lg';\n    static SPACING_SIZE_XL_KEY = '--pep-spacing-xl';\n    static SPACING_SIZE_2XL_KEY = '--pep-spacing-2xl';\n\n    // Form variables keys\n    static FORM_FIELD_HEIGHT_KEY = '--pep-form-field-height';\n    static FORM_FIELD_TITLE_HEIGHT_KEY = '--pep-form-field-title-height';\n    static FORM_FIELD_SPACEING_KEY = '--pep-form-field-spacing';\n    static FORM_SPACEING_KEY = '--pep-form-spacing';\n\n    // Card variables keys\n    static CARD_FIELD_HEIGHT_KEY = '--pep-card-field-height';\n    static CARD_SPACEING_KEY = '--pep-card-spacing';\n    static CARD_SHADOW_OFFSET_KEY = '--pep-shadow-card-offset';\n    static CARD_BORDER_RADIUS_KEY = '--pep-card-border-radius';\n\n    // Table variables keys\n    static TABLE_FIELD_HEIGHT_KEY = '--pep-table-field-height';\n    static TABLE_SPACEING_KEY = '--pep-table-spacing';\n    static TABLE_BORDER_RADIUS_KEY = '--pep-table-border-radius';\n\n    static DEFAULT_HEADER_HEIGHT = 64; // Default\n\n    static DEFAULT_SPINNER_COLOR = '#78aa00';\n    static DEFAULT_BRANDING_COLOR = '#fff';\n\n    public hasCustomHomepage: boolean = null;\n    public hasCustomHeader: boolean = null;\n    public customHeaderHeight = PepCustomizationService.DEFAULT_HEADER_HEIGHT;\n    public mainContHeight = 0;\n    public footerHeight = new BehaviorSubject<number>(0);\n    public settingsWidth = new BehaviorSubject<number>(0);\n\n    constructor(\n        private sessionService: PepSessionService,\n        private fileService: PepFileService,\n        public fb: FormBuilder\n    ) {}\n\n    getDefaultFromGroup(field: PepFieldBase, withValidators = true): FormGroup {\n        const validators = withValidators ? field.getValidators() : [];\n        const group = {};\n        group[field.key] = [\n            { value: field.value, disabled: field.disabled },\n            validators,\n        ];\n        return this.fb.group(group);\n    }\n\n    getFormControl(\n        form: FormGroup,\n        fieldKey: string,\n        parentFieldKey: string = null\n    ): any {\n        let formControl = null;\n\n        if (form && form.controls) {\n            if (parentFieldKey === null) {\n                formControl = form.controls[fieldKey];\n            } else {\n                formControl = form.controls[parentFieldKey].get(fieldKey);\n            }\n        }\n\n        return formControl;\n    }\n\n    updateFormFieldValue(\n        form: FormGroup,\n        fieldKey: string,\n        value = '',\n        parentFieldKey: string = null\n    ): void {\n        const formControl = this.getFormControl(form, fieldKey, parentFieldKey);\n        if (formControl) {\n            formControl.setValue(value);\n        }\n    }\n\n    updateFormField(\n        form: FormGroup,\n        field: PepFieldBase,\n        value = '',\n        parentField: PepFieldBase = null\n    ): void {\n        const formControl: FormControl = this.getFormControl(\n            form,\n            field.key,\n            parentField?.key\n        );\n        if (formControl) {\n            formControl.setValue(value);\n\n            // If disabled has changed.\n            if (formControl.disabled !== field.disabled) {\n                field.disabled ? formControl.disable() : formControl.enable();\n\n                // const validators = this.getValidatorsForField(field.required, field.readonly, field.disabled,\n                //     field.maxFieldCharacters, field.type, field.controlType === 'checkbox');\n\n                const validators = field.getValidators();\n                formControl.setValidators(validators);\n            }\n        }\n    }\n\n    calculateFormFieldHeight(\n        withTitle = true,\n        rowSpan = 1,\n        standAlone = false\n    ): number {\n        const themeVars = this.getThemeVariables();\n        const rowFieldHeight = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.FORM_FIELD_HEIGHT_KEY\n        );\n        const rowFieldTitleHeight = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY\n        );\n        const rowFieldSpacingBottom = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.FORM_SPACEING_KEY\n        );\n\n        let fieldHeight = 0;\n        if (rowSpan === 1) {\n            fieldHeight =\n                (withTitle ? rowFieldTitleHeight : 0) + rowFieldHeight;\n        } else {\n            const rowSpanCalc = withTitle ? rowSpan : rowSpan - 1;\n            fieldHeight =\n                rowSpan * rowFieldHeight +\n                rowSpanCalc * rowFieldTitleHeight +\n                (standAlone ? 0 : rowSpanCalc * rowFieldSpacingBottom);\n        }\n\n        return fieldHeight;\n    }\n\n    calculateCardRowsHeight(rowsCount = 1, withSpacing = true): number {\n        const themeVars = this.getThemeVariables();\n        const cardFieldHeight = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.CARD_FIELD_HEIGHT_KEY\n        );\n        const cardFieldSpacing = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.CARD_SPACEING_KEY\n        );\n\n        const fieldHeight =\n            rowsCount * cardFieldHeight +\n            (rowsCount - 1) * (withSpacing ? cardFieldSpacing : 0);\n        return fieldHeight;\n    }\n\n    calculateTableRowsHeight(rowsCount = 1, withSpacing = true): number {\n        const themeVars = this.getThemeVariables();\n        const tableFieldHeight = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.TABLE_FIELD_HEIGHT_KEY\n        );\n        const tableFieldSpacing = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.TABLE_SPACEING_KEY\n        );\n\n        const fieldHeight =\n            rowsCount *\n            (tableFieldHeight + (withSpacing ? tableFieldSpacing * 2 : 0));\n        return fieldHeight;\n    }\n\n    calculateFieldHeight(layoutType = 'form', rowSpan, standAlone): string {\n        let fieldHeight = 'inherit'; // Default for card (with no title)\n        if (layoutType === 'table') {\n            fieldHeight = this.getThemeVariable(\n                PepCustomizationService.TABLE_FIELD_HEIGHT_KEY\n            );\n        } else if (layoutType === 'card') {\n            fieldHeight =\n                this.calculateCardRowsHeight(rowSpan, !standAlone) +\n                PepCustomizationService.REM_STRING;\n        } else {\n            // Form\n            fieldHeight =\n                this.calculateFormFieldHeight(false, rowSpan, standAlone) +\n                PepCustomizationService.REM_STRING;\n        }\n\n        return fieldHeight;\n    }\n\n    getBrandingTheme(): string {\n        const themeObj = this.sessionService.getObject(\n            PepCustomizationService.USER_THEME\n        );\n        return (themeObj && themeObj.Theme) || 'default-theme'; // 'light-theme';\n    }\n\n    getDefaultThemeLayoutVariables(themeVars: any): void {\n        // Declare default screen sizes.\n        themeVars['--pep-screen-max-size-2xs'] =\n            '460' + PepCustomizationService.PX_STRING;\n        themeVars['--pep-screen-max-size-xs'] =\n            '767' + PepCustomizationService.PX_STRING;\n        themeVars['--pep-screen-max-size-sm'] =\n            '991' + PepCustomizationService.PX_STRING;\n        themeVars['--pep-screen-max-size-md'] =\n            '1199' + PepCustomizationService.PX_STRING;\n        themeVars['--pep-screen-max-size-lg'] =\n            '1366' + PepCustomizationService.PX_STRING;\n        themeVars['--pep-screen-max-size-xl'] =\n            '1920' + PepCustomizationService.PX_STRING;\n\n        // Declare default top bar.\n        themeVars[PepCustomizationService.SIDE_BAR_WIDTH_KEY] =\n            '16' + PepCustomizationService.REM_STRING;\n\n        // Declare default top bar.\n        themeVars[PepCustomizationService.TOP_BAR_SPACING_TOP_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.TOP_BAR_SPACING_BOTTOM_KEY] =\n            '0.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY] =\n            '2.5' + PepCustomizationService.REM_STRING;\n\n        // Declare default footer.\n        themeVars[PepCustomizationService.FOOTER_BAR_SPACING_TOP_KEY] =\n            '0.75' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FOOTER_BAR_SPACING_BOTTOM_KEY] =\n            '1.25' + PepCustomizationService.REM_STRING;\n    }\n\n    getDefaultThemeBorderRadiusVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.BORDER_RADIUS_SM_KEY] =\n            '0.125' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.BORDER_RADIUS_MD_KEY] =\n            '0.25' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.BORDER_RADIUS_LG_KEY] =\n            '0.5' + PepCustomizationService.REM_STRING;\n    }\n\n    getDefaultThemeSpacingVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.SPACING_SIZE_2XS_KEY] =\n            '0.125' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_XS_KEY] =\n            '0.25' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_SM_KEY] =\n            '0.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_MD_KEY] =\n            '0.75' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_LG_KEY] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_XL_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.SPACING_SIZE_2XL_KEY] =\n            '2' + PepCustomizationService.REM_STRING;\n    }\n\n    getDefaultThemeFontsVariables(themeVars: any): void {\n        // Title font family\n        themeVars[PepCustomizationService.FONT_FAMILY_TITLE_KEY] = 'Nexa';\n\n        // Body font family\n        themeVars[PepCustomizationService.FONT_FAMILY_BODY_KEY] = 'Inter';\n\n        // Font sizes\n        themeVars[PepCustomizationService.FONT_SIZE_2XS_KEY] =\n            '0.625' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_XS_KEY] =\n            '0.75' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_SM_KEY] =\n            '0.875' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_MD_KEY] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_LG_KEY] =\n            '1.125' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_XL_KEY] =\n            '1.25' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FONT_SIZE_2XL_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n\n        // Line height\n        themeVars[PepCustomizationService.LINE_HEIGHT_2XS_KEY] =\n            '0.75' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_XS_KEY] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_SM_KEY] =\n            '1.25' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_MD_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_LG_KEY] =\n            '1.75' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_XL_KEY] =\n            '2' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.LINE_HEIGHT_2XL_KEY] =\n            '2.25' + PepCustomizationService.REM_STRING;\n\n        // Font weight\n        themeVars['--pep-font-weight-normal'] = 400;\n        themeVars['--pep-font-weight-bold'] = 600;\n        themeVars['--pep-font-weight-bolder'] = 800;\n    }\n\n    getDefaultThemeButtonsVariables(themeVars: any): void {\n        themeVars['--pep-button-2xs-horizontal-spacing'] =\n            '0.25' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-2xs-min-width'] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-2xs-height'] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-2xs-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_2XS_KEY + ')';\n        // themeVars['--pep-button-2xs-icon-horizontal-spacing'] = '0.125' + PepCustomizationService.REM_STRING;\n\n        themeVars['--pep-button-xs-horizontal-spacing'] =\n            '0.5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xs-min-width'] =\n            '2' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xs-height'] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xs-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_XS_KEY + ')';\n        // themeVars['--pep-button-xs-icon-horizontal-spacing'] = '0.25' + PepCustomizationService.REM_STRING;\n\n        themeVars['--pep-button-sm-horizontal-spacing'] =\n            '0.75' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-sm-min-width'] =\n            '2' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-sm-height'] =\n            '2' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-sm-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_SM_KEY + ')';\n        // themeVars['--pep-button-sm-icon-horizontal-spacing'] = '0.5' + PepCustomizationService.REM_STRING;\n\n        themeVars['--pep-button-md-horizontal-spacing'] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-md-min-width'] =\n            '2.5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-md-height'] =\n            '2.5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-md-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_MD_KEY + ')';\n        // themeVars['--pep-button-md-icon-horizontal-spacing'] = '0.5' + PepCustomizationService.REM_STRING;\n\n        themeVars['--pep-button-lg-horizontal-spacing'] =\n            '1' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-lg-min-width'] =\n            '3' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-lg-height'] =\n            '3' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-lg-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_LG_KEY + ')';\n        // themeVars['--pep-button-lg-icon-horizontal-spacing'] = '0.75' + PepCustomizationService.REM_STRING;\n\n        themeVars['--pep-button-xl-horizontal-spacing'] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xl-min-width'] =\n            '5' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xl-height'] =\n            '4' + PepCustomizationService.REM_STRING;\n        themeVars['--pep-button-xl-font-size'] =\n            'var(' + PepCustomizationService.FONT_SIZE_XL_KEY + ')';\n        // themeVars['--pep-button-xl-icon-horizontal-spacing'] = '1' + PepCustomizationService.REM_STRING;\n    }\n\n    getSystemPrimaryInvertColorsVariables(themeVars: any): void {\n        themeVars[\n            PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-h'\n        ] = '255';\n        themeVars[\n            PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-s'\n        ] = '100%';\n        themeVars[\n            PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-l'\n        ] = '100%';\n    }\n\n    getSystemPrimaryColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h'] =\n            '0';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s'] =\n            '0%';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l'] =\n            '10%';\n    }\n\n    getSystemSuccessColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-h'] =\n            '100';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-s'] =\n            '100%';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-l'] =\n            '25%';\n    }\n\n    getSystemCautionColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-h'] =\n            '360';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-s'] =\n            '100%';\n        themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-l'] =\n            '40%';\n    }\n\n    getUserPrimaryColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-h'] = '78';\n        themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-s'] =\n            '87%';\n        themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-l'] =\n            '27%';\n    }\n\n    getUserSecondaryColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-h'] =\n            '77';\n        themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-s'] =\n            '87%';\n        themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-l'] =\n            '42%';\n    }\n\n    getWeakColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-h'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';\n        themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-s'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';\n        themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-l'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';\n    }\n\n    getRegularColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-h'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';\n        themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-s'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';\n        themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-l'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';\n    }\n\n    getStrongColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-h'] =\n            'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-h)';\n        themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-s'] =\n            'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-s)';\n        themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-l'] =\n            'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-l)';\n    }\n\n    getTextColorsVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-h'] = '207';\n        themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-s'] = '76%';\n        themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-l'] = '37%';\n    }\n\n    getDefaultThemeColorsVariables(themeVars: any): void {\n        // System primary invert colors.\n        this.getSystemPrimaryInvertColorsVariables(themeVars);\n        // System primary colors.\n        this.getSystemPrimaryColorsVariables(themeVars);\n        // System success colors.\n        this.getSystemSuccessColorsVariables(themeVars);\n        // System caution colors.\n        this.getSystemCautionColorsVariables(themeVars);\n        // User primary colors.\n        this.getUserPrimaryColorsVariables(themeVars);\n        // User secondary colors.\n        this.getUserSecondaryColorsVariables(themeVars);\n\n        // Weak colors.\n        this.getWeakColorsVariables(themeVars);\n        // Regular colors.\n        this.getRegularColorsVariables(themeVars);\n        // Strong colors.\n        this.getStrongColorsVariables(themeVars);\n\n        // Text colors.\n        this.getTextColorsVariables(themeVars);\n    }\n\n    getDefaultThemeShadowsVariables(themeVars: any): void {\n        const noneOffset = '0';\n        themeVars[PepCustomizationService.SHADOW_NONE_OFFSET_KEY] = noneOffset;\n\n        const xsOffset = '0 0.125rem 0.25rem 0';\n        themeVars[PepCustomizationService.SHADOW_XS_OFFSET_KEY] = xsOffset;\n\n        const smOffset = '0 0.25rem 0.5rem 0';\n        themeVars[PepCustomizationService.SHADOW_SM_OFFSET_KEY] = smOffset;\n\n        const mdOffset = '0 0.5rem 1rem 0';\n        themeVars[PepCustomizationService.SHADOW_MD_OFFSET_KEY] = mdOffset;\n\n        const lgOffset = '0 1rem 2rem 0';\n        themeVars[PepCustomizationService.SHADOW_LG_OFFSET_KEY] = lgOffset;\n\n        const xlOffset = '0 2rem 4rem 0';\n        themeVars[PepCustomizationService.SHADOW_XL_OFFSET_KEY] = xlOffset;\n    }\n\n    getDefaultThemeFormCustomizationVariables(themeVars: any): void {\n        const formFieldSpacing = 1;\n        themeVars[PepCustomizationService.FORM_FIELD_HEIGHT_KEY] =\n            '2.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FORM_SPACEING_KEY] =\n            formFieldSpacing + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.FORM_FIELD_SPACEING_KEY] =\n            formFieldSpacing + PepCustomizationService.REM_STRING;\n    }\n\n    getDefaultThemeCardCustomizationVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.CARD_FIELD_HEIGHT_KEY] =\n            '1.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.CARD_SPACEING_KEY] =\n            'var(' + PepCustomizationService.SPACING_SIZE_XS_KEY + ')';\n\n        themeVars[PepCustomizationService.CARD_BORDER_RADIUS_KEY] =\n            'var(' + PepCustomizationService.BORDER_RADIUS_MD_KEY + ')';\n        themeVars[PepCustomizationService.CARD_SHADOW_OFFSET_KEY] =\n            'var(' + PepCustomizationService.SHADOW_MD_OFFSET_KEY + ')';\n    }\n\n    getDefaultThemeTableCustomizationVariables(themeVars: any): void {\n        themeVars[PepCustomizationService.TABLE_FIELD_HEIGHT_KEY] =\n            '2' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.TABLE_SPACEING_KEY] =\n            '0.5' + PepCustomizationService.REM_STRING;\n        themeVars[PepCustomizationService.TABLE_BORDER_RADIUS_KEY] =\n            'var(' + PepCustomizationService.BORDER_RADIUS_MD_KEY + ')';\n    }\n\n    getDefaultThemeQSCustomizationVariables(themeVars: any): void {\n        const qsState: PepStyleType = 'regular';\n        themeVars[PepCustomizationService.STYLE_QS_KEY] = qsState;\n\n        themeVars[PepCustomizationService.COLOR_QS_KEY + '-h'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';\n        themeVars[PepCustomizationService.COLOR_QS_KEY + '-s'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';\n        themeVars[PepCustomizationService.COLOR_QS_KEY + '-l'] =\n            'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';\n    }\n\n    getDefaultThemeTopHeaderCustomizationVariables(themeVars: any): void {\n        const topHeaderState: PepStyleType = 'strong';\n        themeVars[\n            PepCustomizationService.STYLE_TOP_HEADER_KEY\n        ] = topHeaderState;\n\n        themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-h'] = '';\n        themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-s'] = '';\n        themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-l'] = '';\n    }\n\n    getDefaultThemeVariables(): any {\n        const themeVars = {};\n\n        // Declare default layout.\n        this.getDefaultThemeLayoutVariables(themeVars);\n\n        // Declare default border radius.\n        this.getDefaultThemeBorderRadiusVariables(themeVars);\n\n        // Declare default spacing.\n        this.getDefaultThemeSpacingVariables(themeVars);\n\n        // Declare default fonts size & line height.\n        this.getDefaultThemeFontsVariables(themeVars);\n\n        // Declare default buttons.\n        this.getDefaultThemeButtonsVariables(themeVars);\n\n        // Declare default colors.\n        this.getDefaultThemeColorsVariables(themeVars);\n\n        // Declare default shadows.\n        this.getDefaultThemeShadowsVariables(themeVars);\n\n        // Declare default form customization.\n        this.getDefaultThemeFormCustomizationVariables(themeVars);\n\n        // Declare default card customization.\n        this.getDefaultThemeCardCustomizationVariables(themeVars);\n\n        // Declare default table customization.\n        this.getDefaultThemeTableCustomizationVariables(themeVars);\n\n        // Declare default qs customization.\n        this.getDefaultThemeQSCustomizationVariables(themeVars);\n\n        // Declare default top header customization.\n        this.getDefaultThemeTopHeaderCustomizationVariables(themeVars);\n\n        return themeVars;\n    }\n\n    getThemeVariables(): any {\n        const ret = this.getDefaultThemeVariables();\n        const themeVars = this.sessionService.getObject(\n            PepCustomizationService.USER_THEME_VARIABLES\n        );\n\n        // Override defaults.\n        if (themeVars) {\n            // tslint:disable-next-line: forin\n            for (const key in themeVars) {\n                ret[key] = themeVars[key];\n            }\n        }\n\n        return ret;\n    }\n\n    setThemeVariables(themeVariablesToSet = null): void {\n        const themeVariables = this.getThemeVariables();\n\n        // Override defaults.\n        if (themeVariablesToSet) {\n            // tslint:disable-next-line: forin\n            for (const key in themeVariablesToSet) {\n                themeVariables[key] = themeVariablesToSet[key];\n            }\n        }\n\n        this.sessionService.setObject(\n            PepCustomizationService.USER_THEME_VARIABLES,\n            JSON.stringify(themeVariables)\n        );\n\n        // tslint:disable-next-line: forin\n        for (const key in themeVariables) {\n            if (this.isFontUrlKey(key)) {\n                this.fileService.loadFontStyle(key, themeVariables[key]);\n            } else {\n                document.documentElement.style.setProperty(\n                    key,\n                    themeVariables[key]\n                );\n            }\n        }\n    }\n\n    isFontUrlKey(key: string): boolean {\n        let res = false;\n\n        if (\n            key === PepCustomizationService.FONT_FAMILY_TITLE_NORMAL_URL_KEY ||\n            key === PepCustomizationService.FONT_FAMILY_TITLE_BOLD_URL_KEY ||\n            key === PepCustomizationService.FONT_FAMILY_BODY_NORMAL_URL_KEY ||\n            key === PepCustomizationService.FONT_FAMILY_BODY_BOLD_URL_KEY\n        ) {\n            res = true;\n        }\n\n        return res;\n    }\n\n    getThemeVariable(key: string): string {\n        const themeVars = this.getThemeVariables();\n\n        if (themeVars.hasOwnProperty(key)) {\n            return themeVars[key];\n        } else {\n            return '';\n        }\n    }\n\n    getNumberThemeVariable(themeVars, key: string): number {\n        if (themeVars && themeVars.hasOwnProperty(key)) {\n            // If it's reference to another key.\n            if (themeVars[key].indexOf('var(') === 0) {\n                key = themeVars[key].substr(4).split(')')[0];\n            }\n\n            const tmp = Number(\n                themeVars[key].replace(PepCustomizationService.REM_STRING, '')\n            );\n            return tmp;\n        } else {\n            return 0;\n        }\n    }\n\n    private setFooterHeight(height): void {\n        if (this.footerHeight.getValue() !== height) {\n            // it is publishing this value to all the subscribers that have already subscribed to this message\n            setTimeout(() => {\n                this.footerHeight.next(height);\n            }, 0);\n        }\n        document.documentElement.style.setProperty(\n            PepCustomizationService.FOOTER_HEIGHT_KEY,\n            height + PepCustomizationService.REM_STRING\n        );\n    }\n\n    hideFooter(): void {\n        this.setFooterHeight(0);\n    }\n\n    showFooter(): void {\n        const themeVars = this.getThemeVariables();\n\n        const res =\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FOOTER_BAR_SPACING_TOP_KEY\n            ) +\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FOOTER_BAR_SPACING_BOTTOM_KEY\n            ) +\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY\n            );\n\n        this.setFooterHeight(res);\n    }\n\n    private setSettingsWidth(width): void {\n        if (this.settingsWidth.getValue() !== width) {\n            // it is publishing this value to all the subscribers that have already subscribed to this message\n            setTimeout(() => {\n                this.settingsWidth.next(width);\n            }, 0);\n        }\n        document.documentElement.style.setProperty(\n            PepCustomizationService.SETTINGS_WIDTH_KEY,\n            width + PepCustomizationService.REM_STRING\n        );\n    }\n\n    hideSettings(): void {\n        this.setSettingsWidth(0);\n    }\n\n    showSettings(): void {\n        const themeVars = this.getThemeVariables();\n\n        const res = this.getNumberThemeVariable(\n            themeVars,\n            PepCustomizationService.SIDE_BAR_WIDTH_KEY\n        );\n\n        this.setSettingsWidth(res);\n    }\n\n    getTopBarHeight(): number {\n        const themeVars = this.getThemeVariables();\n\n        const res =\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.TOP_BAR_SPACING_TOP_KEY\n            ) +\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.TOP_BAR_SPACING_BOTTOM_KEY\n            ) +\n            this.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY\n            );\n\n        return res;\n    }\n\n    setOldUserTheme(res: any): void {\n        // Added user theme.\n        const themeObj = {\n            Theme: res.Theme || 'default-theme',\n        };\n\n        this.sessionService.setObject(\n            PepCustomizationService.USER_THEME,\n            JSON.stringify(themeObj)\n        );\n\n        let spinnerColor;\n        let brandingFontColor;\n\n        if (this.isLightColor(res.BrandingMainColor)) {\n            spinnerColor = PepCustomizationService.DEFAULT_SPINNER_COLOR;\n            brandingFontColor = '#222';\n        } else {\n            spinnerColor = res.BrandingMainColor;\n            brandingFontColor = PepCustomizationService.DEFAULT_BRANDING_COLOR;\n        }\n\n        const color = {\n            BrandingSecondaryColor: res.BrandingSecondaryColor,\n            BrandingMainColor: res.BrandingMainColor,\n            BrandingFontColor: brandingFontColor,\n            SpinnerColor: spinnerColor,\n        };\n\n        this.sessionService.setObject(\n            PepCustomizationService.USER_COLOR,\n            JSON.stringify(color)\n        );\n\n        this.hasCustomHeader =\n            res.TopHeaderFiles &&\n            res.TopHeaderFiles.length > 0 &&\n            res.TopHeaderFiles[0] !== ''\n                ? true\n                : false;\n        this.hasCustomHomepage =\n            res.UserRole === 'Buyer' &&\n            res.TopHeaderFiles &&\n            res.TopHeaderFiles.length > 1 &&\n            res.TopHeaderFiles[1] !== '';\n    }\n\n    isLegacyColor(): boolean {\n        const h = document.documentElement.style.getPropertyValue(\n            PepCustomizationService.COLOR_TOP_HEADER_KEY + '-h'\n        );\n        const s = document.documentElement.style.getPropertyValue(\n            PepCustomizationService.COLOR_TOP_HEADER_KEY + '-s'\n        );\n        const l = document.documentElement.style.getPropertyValue(\n            PepCustomizationService.COLOR_TOP_HEADER_KEY + '-l'\n        );\n\n        return !(h && s && l);\n    }\n\n    getLoadingSpinnerColor(): string {\n        let spinnerColor = '';\n\n        if (this.isLegacyColor()) {\n            const color = this.sessionService.getObject(\n                PepCustomizationService.USER_COLOR\n            );\n\n            if (color && color.SpinnerColor) {\n                spinnerColor = color.SpinnerColor;\n            } else {\n                spinnerColor = PepCustomizationService.DEFAULT_SPINNER_COLOR;\n            }\n        }\n\n        return spinnerColor;\n    }\n\n    getBrandingMainColor(): string {\n        let brandingMainColor = '';\n\n        if (this.isLegacyColor()) {\n            const color = this.sessionService.getObject(\n                PepCustomizationService.USER_COLOR\n            );\n\n            if (color && color.BrandingMainColor) {\n                brandingMainColor = color.BrandingMainColor;\n            } else {\n                brandingMainColor =\n                    PepCustomizationService.DEFAULT_BRANDING_COLOR;\n            }\n        }\n\n        return brandingMainColor;\n    }\n\n    isLightColor(hexColor): boolean {\n        if (!hexColor) {\n            return;\n        }\n\n        let isBright = false;\n        let sum = 0;\n        const c = hexColor.replace(/^#/, '');\n\n        sum = parseInt(c[0] + c[1], 16);\n        sum += parseInt(c[2] + c[3], 16);\n        sum += parseInt(c[4] + c[5], 16);\n\n        if (sum > 382.6) {\n            // it's bright color\n            isBright = true;\n        }\n\n        return isBright;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepDataConvertorService",
            "id": "injectable-PepDataConvertorService-c31d6fb5e856b9875980966d03fb561c",
            "file": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertFormData",
                    "args": [
                        {
                            "name": "formData",
                            "type": "PepRowData"
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRow",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "PepRowData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertListData",
                    "args": [
                        {
                            "name": "tableData",
                            "type": "PepRowData[]"
                        },
                        {
                            "name": "rowUUID",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<ObjectsDataRow>",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "tableData",
                            "type": "PepRowData[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowUUID",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUiControl",
                    "args": [
                        {
                            "name": "formData",
                            "type": "PepRowData"
                        }
                    ],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "PepRowData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDataField",
                    "args": [
                        {
                            "name": "field",
                            "type": "PepFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRowCell",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "PepFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldLayout",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "width",
                            "type": "number"
                        },
                        {
                            "name": "xAlignment",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "height",
                            "type": "number"
                        },
                        {
                            "name": "yAlignment",
                            "type": "number"
                        },
                        {
                            "name": "lineNumber",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "FieldLayout",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "xAlignment",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "yAlignment",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lineNumber",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUIControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "PepFieldData"
                        }
                    ],
                    "optional": false,
                    "returnType": "UIControlField",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "PepFieldData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n    FieldLayout,\n    ObjectsDataRow,\n    UIControl,\n    UIControlField,\n    ObjectsDataRowCell,\n    FIELD_TYPE,\n    X_ALIGNMENT_TYPE,\n} from '../model/wapi.model';\nimport { PepGuid } from '../model/utilities.model';\n\nexport class PepFieldData {\n    ApiName: string;\n    Enabled?: boolean;\n    Value: string;\n    FormattedValue?: string;\n    FieldType: FIELD_TYPE;\n    ReadOnly?: boolean;\n    ColumnWidth: number;\n    ColumnWidthType?: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Title: string;\n    AdditionalValue?: string;\n    OptionalValues?: any;\n\n    constructor(\n        options: {\n            ApiName?: string;\n            Enabled?: boolean;\n            Value?: string;\n            FormattedValue?: string;\n            FieldType?: FIELD_TYPE;\n            ReadOnly?: boolean;\n            ColumnWidth?: number;\n            ColumnWidthType?: number;\n            XAlignment?: X_ALIGNMENT_TYPE;\n            Title?: string;\n        } = {}\n    ) {\n        this.ApiName = options.ApiName;\n        this.Enabled = !!options.Enabled;\n        this.Value = options.Value;\n        this.FormattedValue = options.FormattedValue || '';\n        this.FieldType = options.FieldType;\n        this.ReadOnly = !!options.ReadOnly;\n        this.ColumnWidth = options.ColumnWidth;\n        this.ColumnWidthType = options.ColumnWidthType;\n        this.XAlignment = options.XAlignment || X_ALIGNMENT_TYPE.Left;\n        this.Title = options.Title || '';\n    }\n}\nexport class PepRowData {\n    Fields: PepFieldData[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDataConvertorService {\n    getUiControl(formData: PepRowData): UIControl {\n        const uiControl = new UIControl();\n\n        if (formData?.Fields?.length > 0) {\n            const uiRow = formData.Fields;\n            uiControl.ControlFields = [];\n            uiRow.forEach((field) =>\n                uiControl.ControlFields.push(this.setUIControlField(field))\n            );\n        }\n\n        return uiControl;\n    }\n\n    convertFormData(formData: PepRowData): ObjectsDataRow {\n        const rowData = new ObjectsDataRow();\n        rowData.Fields = [];\n        rowData.Type = 0;\n        rowData.UID = PepGuid.newGuid();\n        formData.Fields.forEach((field) =>\n            rowData.Fields.push(this.setDataField(field))\n        );\n\n        return rowData;\n    }\n\n    convertListData(\n        tableData: PepRowData[],\n        rowUUID = ''\n    ): Array<ObjectsDataRow> {\n        const rows = new Array<ObjectsDataRow>();\n\n        if (tableData.length > 0) {\n            tableData.forEach((row) => {\n                const rowData = new ObjectsDataRow();\n                rowData.Fields = [];\n                rowData.Type = 0;\n                rowData.UID = rowUUID ? rowUUID : PepGuid.newGuid();\n                row.Fields.forEach((field) =>\n                    rowData.Fields.push(this.setDataField(field))\n                );\n                rows.push(rowData);\n            });\n        }\n\n        return rows;\n    }\n\n    setUIControlField(field: PepFieldData): UIControlField {\n        const controlField = new UIControlField();\n        controlField.ApiName = field.ApiName;\n        controlField.FieldType = field.FieldType;\n\n        controlField.Layout = new FieldLayout({\n            X: 1,\n            Width: 1,\n            XAlignment: field.XAlignment,\n            Y: 1,\n            Height: 1,\n            YAlignment: 1,\n        });\n\n        controlField.Title = field.Title;\n        controlField.ReadOnly = field.ReadOnly === true ? true : false;\n        controlField.ColumnWidth = field.ColumnWidth;\n        controlField.ColumnWidthType = field.ColumnWidthType || 1;\n        return controlField;\n    }\n\n    setDataField(field: PepFieldData): ObjectsDataRowCell {\n        const dataField = new ObjectsDataRowCell();\n        dataField.AdditionalValue = field.AdditionalValue;\n        dataField.ApiName = field.ApiName;\n        dataField.Enabled = field.Enabled === false ? false : true;\n        dataField.FieldType = field.FieldType;\n        dataField.FormattedValue =\n            field.FormattedValue || field.Value.toString();\n        dataField.GroupFields = null;\n        dataField.NotificationInfo = '';\n        dataField.OptionalValues = field.OptionalValues;\n        dataField.ReferenceObjectSubType = '';\n        dataField.TextColor = '';\n        dataField.Value = field.Value.toString();\n        dataField.Visible = true;\n        return dataField;\n    }\n\n    setFieldLayout(\n        x: number,\n        width: number,\n        xAlignment: number,\n        y: number,\n        height: number,\n        yAlignment: number,\n        lineNumber: number\n    ): FieldLayout {\n        const layout = new FieldLayout({\n            X: x,\n            Width: width,\n            XAlignment: xAlignment,\n            Y: y,\n            Height: height,\n            YAlignment: yAlignment,\n            LineNumber: lineNumber,\n        });\n\n        return layout;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepDialogService",
            "id": "injectable-PepDialogService-78817554e15da0c473bb079c4856f3d2",
            "file": "projects/ngx-lib/dialog/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getDialogConfig",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "size",
                            "type": "PepDialogSizeType",
                            "defaultValue": "'regular'"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogConfig",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "PepDialogSizeType",
                            "defaultValue": "'regular'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDefaultDialog",
                    "args": [
                        {
                            "name": "data",
                            "type": "PepDialogData"
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "PepDialogData",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>"
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "MatDialogConfig",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, TemplateRef } from '@angular/core';\nimport {\n    MatDialog,\n    MatDialogConfig,\n    MatDialogRef,\n} from '@angular/material/dialog';\nimport { PepLayoutService } from '@pepperi-addons/ngx-lib';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { PepDialogSizeType, PepDialogData } from './dialog.model';\nimport { PepDefaultDialogComponent } from './default-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDialogService {\n    constructor(\n        private dialog: MatDialog,\n        private layoutService: PepLayoutService,\n        private overlay: Overlay\n    ) {}\n\n    getDialogConfig(\n        options: {\n            disableClose?: boolean;\n            height?: string;\n            minWidth?: string;\n            maxWidth?: string;\n            maxHeight?: string;\n            panelClass?: string;\n        } = {},\n        size: PepDialogSizeType = 'regular'\n    ): MatDialogConfig {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.autoFocus = false;\n        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';\n        dialogConfig.disableClose = options.disableClose ?? true;\n        dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];\n\n        if (size === 'inline') {\n            dialogConfig.height = options.height || 'auto';\n            dialogConfig.maxWidth = options.maxWidth || '100vw';\n            dialogConfig.maxHeight = options.maxHeight || '100vh';\n            dialogConfig.minWidth = options.minWidth || '300px';\n        }\n\n        dialogConfig.panelClass.push(size);\n\n        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();\n        // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();\n\n        return dialogConfig;\n    }\n\n    openDefaultDialog(\n        data: PepDialogData,\n        config: MatDialogConfig = null\n    ): MatDialogRef<any> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n\n        config.data = data;\n        const dialogRef = this.dialog.open(PepDefaultDialogComponent, config);\n        return dialogRef;\n    }\n\n    openDialog<T>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        data: any = {},\n        config: MatDialogConfig = null\n    ): MatDialogRef<T> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n\n        config.data = data;\n\n        const dialogRef = this.dialog.open(componentOrTemplateRef, config);\n        return dialogRef;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepFileService",
            "id": "injectable-PepFileService-55c7b4cbc235030b372d733c77989fd1",
            "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
            "properties": [
                {
                    "name": "scripts",
                    "type": "Map<string | literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "styles",
                    "type": "Map<string | literal type>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convertFromb64toBlob",
                    "args": [
                        {
                            "name": "b64Data",
                            "type": "any"
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sliceSize",
                            "type": "number",
                            "defaultValue": "512"
                        }
                    ],
                    "optional": false,
                    "returnType": "Blob",
                    "typeParameters": [],
                    "line": 211,
                    "jsdoctags": [
                        {
                            "name": "b64Data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sliceSize",
                            "type": "number",
                            "defaultValue": "512",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAssetsImagesPath",
                    "args": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "image",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 253,
                    "jsdoctags": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAssetsPath",
                    "args": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 239,
                    "jsdoctags": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAssetsTranslationsPath",
                    "args": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 249,
                    "jsdoctags": [
                        {
                            "name": "assetsDomain",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAssetsTranslationsSuffix",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 245
                },
                {
                    "name": "getFileExtension",
                    "args": [
                        {
                            "name": "filePath",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 191,
                    "jsdoctags": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFileName",
                    "args": [
                        {
                            "name": "filePath",
                            "type": "string"
                        },
                        {
                            "name": "withExtenstion",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withExtenstion",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSvgAsImageSrc",
                    "args": [
                        {
                            "name": "svg",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 257,
                    "jsdoctags": [
                        {
                            "name": "svg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFiles",
                    "args": [
                        {
                            "name": "files",
                            "type": "IPepExternalFileModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "IPepExternalFileModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFontStyle",
                    "args": [
                        {
                            "name": "styleId",
                            "type": "string"
                        },
                        {
                            "name": "href",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "styleId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "href",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScript",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadStyle",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFiles",
                    "args": [
                        {
                            "name": "files",
                            "type": "IPepExternalFileModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "IPepExternalFileModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport type PepFileType = 'script' | 'style';\n\nexport interface IPepExternalFileModel {\n    path: string;\n    type: PepFileType;\n}\n\ndeclare let document: any;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepFileService {\n    private scripts: Map<string, { loaded: boolean; src: string }>;\n    private styles: Map<string, { loaded: boolean; src: string }>;\n\n    constructor() {\n        this.scripts = new Map<string, { loaded: boolean; src: string }>();\n        this.styles = new Map<string, { loaded: boolean; src: string }>();\n    }\n\n    loadFiles(files: IPepExternalFileModel[]): Promise<any[]> {\n        const promises: any[] = [];\n        files.forEach((file) => {\n            if (file.type === 'style') {\n                promises.push(this.loadStyle(file.path));\n            } else if (file.type === 'script') {\n                promises.push(this.loadScript(file.path));\n            }\n        });\n        return Promise.all(promises);\n    }\n\n    removeFiles(files: IPepExternalFileModel[]): void {\n        for (\n            let index = 0;\n            index < files.length &&\n            files[index].path &&\n            files[index].path.trim() !== '';\n            index++\n        ) {\n            const name = this.getFileName(files[index].path, true);\n            const element = document.getElementById(name);\n            element.parentNode.removeChild(element);\n\n            if (files[index].type === 'script' && this.scripts.has(name)) {\n                this.scripts.delete(name);\n            } else if (files[index].type === 'style' && this.styles.has(name)) {\n                this.styles.delete(name);\n            }\n        }\n    }\n\n    loadScript(path: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const name = this.getFileName(path, true);\n\n            // If the script isn't exist add it.\n            if (!this.scripts.has(name)) {\n                this.scripts.set(name, { loaded: false, src: path });\n            }\n\n            const scriptItem = this.scripts.get(name);\n\n            // Resolve if already loaded\n            if (scriptItem.loaded) {\n                resolve({\n                    script: name,\n                    loaded: true,\n                    status: 'Already Loaded',\n                });\n            } else {\n                // Load script\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = scriptItem.src;\n                script.setAttribute('id', name);\n                script.async = false;\n\n                if (script.readyState) {\n                    // IE\n                    script.onreadystatechange = () => {\n                        if (\n                            script.readyState === 'loaded' ||\n                            script.readyState === 'complete'\n                        ) {\n                            script.onreadystatechange = null;\n                            scriptItem.loaded = true;\n                            resolve({\n                                path,\n                                type: 'script',\n                                loaded: true,\n                                status: 'Loaded',\n                            });\n                        }\n                    };\n                } else {\n                    // Others\n                    script.onload = () => {\n                        scriptItem.loaded = true;\n                        resolve({\n                            path,\n                            type: 'script',\n                            loaded: true,\n                            status: 'Loaded',\n                        });\n                    };\n                }\n                script.onerror = (error: any) =>\n                    resolve({\n                        path,\n                        type: 'script',\n                        loaded: false,\n                        status: 'Loaded',\n                    });\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n        });\n    }\n\n    loadStyle(path: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const name = this.getFileName(path, true);\n\n            // If the style isn't exist add it.\n            if (!this.styles.has(name)) {\n                this.styles.set(name, { loaded: false, src: path });\n            }\n\n            const styleItem = this.styles.get(name);\n\n            // Resolve if already loaded\n            if (styleItem.loaded) {\n                resolve({\n                    path,\n                    type: 'style',\n                    loaded: true,\n                    status: 'Already Loaded',\n                });\n            } else {\n                // Load style\n                const style = document.createElement('link');\n                style.type = 'text/css';\n                style.rel = 'stylesheet';\n                style.href = styleItem.src;\n                style.media = 'all';\n                style.setAttribute('id', name);\n\n                styleItem.loaded = true;\n                resolve({\n                    path,\n                    type: 'style',\n                    loaded: true,\n                    status: 'Loaded',\n                });\n\n                document.getElementsByTagName('head')[0].appendChild(style);\n            }\n        });\n    }\n\n    loadFontStyle(styleId: string, href: string): void {\n        const head = document.getElementsByTagName('head')[0];\n\n        const styleElement = document.getElementById(\n            styleId\n        ) as HTMLLinkElement;\n\n        if (styleElement) {\n            styleElement.href = href;\n        } else {\n            const style = document.createElement('link');\n            style.id = styleId;\n            style.rel = 'stylesheet';\n            style.href = `${href}`;\n\n            head.appendChild(style);\n        }\n    }\n\n    getFileName(filePath: string, withExtenstion = false): string {\n        const lastIndex = withExtenstion\n            ? filePath.length - 1\n            : filePath.lastIndexOf('.');\n\n        return filePath.substr(filePath.lastIndexOf('/') + 1, lastIndex);\n    }\n\n    getFileExtension(filePath: string): string {\n        const fileSplit = filePath.split('.');\n        let fileExt = '';\n        if (fileSplit.length > 1) {\n            fileExt = fileSplit[fileSplit.length - 2];\n        }\n        return fileExt;\n    }\n\n    /* Returns true if url is valid */\n    isValidUrl(url: string): boolean {\n        /* Try creating a valid URL */\n        try {\n            const tmp = new URL(url);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    convertFromb64toBlob(\n        b64Data: any,\n        contentType = '',\n        sliceSize = 512\n    ): Blob {\n        const byteCharacters = atob(b64Data);\n        const byteArrays = [];\n\n        for (\n            let offset = 0;\n            offset < byteCharacters.length;\n            offset += sliceSize\n        ) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n\n        const blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    }\n\n    getAssetsPath(assetsDomain = ''): string {\n        const concatChar =\n            assetsDomain === '' || assetsDomain.endsWith('/') ? '' : '/';\n        return `${assetsDomain}${concatChar}assets/ngx-lib/`;\n    }\n\n    getAssetsTranslationsSuffix(): string {\n        return '.ngx-lib.json';\n    }\n\n    getAssetsTranslationsPath(assetsDomain = ''): string {\n        return `${this.getAssetsPath(assetsDomain)}i18n/`;\n    }\n\n    getAssetsImagesPath(assetsDomain = '', image = ''): string {\n        return `${this.getAssetsPath(assetsDomain)}images/${image}`;\n    }\n\n    getSvgAsImageSrc(svg: string): string {\n        const blob = new Blob([svg], { type: 'image/svg+xml' });\n        const url = URL.createObjectURL(blob);\n        return url;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "PepFilesUploaderComponent",
            "id": "component-PepFilesUploaderComponent-7c4a1a430cfeadd6f119708ee23155c8",
            "file": "projects/ngx-lib/files-uploader/files-uploader.component.ts",
            "properties": [
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "fileInput",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ]
                },
                {
                    "name": "imagePreview",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imagePreview'"
                        }
                    ]
                },
                {
                    "name": "intervalID",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "uploader",
                    "type": "FileUploader",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBase64FileSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidFile",
                    "args": [
                        {
                            "name": "fileStr",
                            "type": ""
                        },
                        {
                            "name": "fileExtension",
                            "type": ""
                        },
                        {
                            "name": "acceptedExtensions",
                            "type": ""
                        },
                        {
                            "name": "sizeLimitMB",
                            "type": "number",
                            "defaultValue": "5"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "fileStr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileExtension",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "acceptedExtensions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sizeLimitMB",
                            "type": "number",
                            "defaultValue": "5",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "onClick_ChooseFile",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onElementClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyPress_ChooseFile",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIntervalX",
                    "args": [
                        {
                            "name": "delay",
                            "type": ""
                        },
                        {
                            "name": "repetitions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repetitions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProgress",
                    "args": [
                        {
                            "name": "progress",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "progress",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Observable } from 'rxjs';\nimport {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Optional,\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepFileService,\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldClickEvent,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-files-uploader',\n    templateUrl: './files-uploader.component.html',\n    styleUrls: ['./files-uploader.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\n@Injectable()\nexport class PepFilesUploaderComponent implements OnInit {\n    @Input() key = '';\n    @Input() src = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() controlType = '';\n    @Input() sizeLimitMB = 5;\n\n    @Input() form: FormGroup;\n    @Input() standAlone = false;\n    @Input() acceptedExtensions = 'bmp,jpg,jpeg,png,gif,ico,svg,html,css';\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output() fileChange: EventEmitter<string> = new EventEmitter<string>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    @ViewChild('fileInput') fileInput: any;\n    @ViewChild('imagePreview') imagePreview: any;\n\n    fieldHeight = '';\n\n    // multiple = false;\n    uploader: FileUploader;\n    progress = 0;\n    // response: string;\n    intervalID: any = null;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fileService: PepFileService,\n        private translate: TranslateService\n    ) {\n        this.uploader = new FileUploader({ removeAfterUpload: true });\n\n        this.uploader.onAfterAddingFile = (item) => {\n            if (this.fileInput?.nativeElement) {\n                this.fileInput.nativeElement.value = '';\n            }\n            const reader = new FileReader();\n\n            reader.onload = (event: any) => {\n                const fileExt = item._file.name.split('.').pop();\n                const target = event.target || event.srcElement;\n                const fileStr = target.result;\n                const errorMsg = this.isValidFile(\n                    fileStr,\n                    fileExt,\n                    this.acceptedExtensions,\n                    this.sizeLimitMB\n                );\n                if (errorMsg === '') {\n                    this.src = fileStr;\n                    this.setIntervalX(25, 75);\n                    this.setProgress(5);\n                    this.fileChange.emit(\n                        JSON.stringify({\n                            acceptedExtensions: this.acceptedExtensions,\n                            fileStr,\n                            fileExt,\n                        })\n                    );\n                } else {\n                    const title = this.translate.instant(\n                        'MESSAGES.TITLE_NOTICE'\n                    );\n                    const data = new PepDialogData({\n                        title,\n                        content: errorMsg,\n                    });\n                    this.dialogService.openDefaultDialog(data);\n                }\n            };\n            reader.readAsDataURL(item._file);\n        };\n    }\n\n    ngOnInit(): void {\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n\n        /*this.uploader.onCompleteAll = () => {\n            this.fileInput.nativeElement.value = '';\n        }*/\n    }\n\n    isValidFile(\n        fileStr,\n        fileExtension,\n        acceptedExtensions,\n        sizeLimitMB = 5\n    ): string {\n        const file: any = fileStr;\n        let fileSize = 0;\n        let content = '';\n        // check if got file as Base64\n        if (typeof fileStr === 'string' && fileStr.indexOf('data:') > -1) {\n            fileSize = this.getBase64FileSize(fileStr);\n        } else {\n            fileSize = file.size;\n        }\n        // check the size and the extension\n        const sizeOK: boolean =\n            fileSize !== -1 && file != null && fileSize < sizeLimitMB * 1048576;\n        const extensionOK =\n            acceptedExtensions === '' ||\n            acceptedExtensions.indexOf(fileExtension.toLowerCase()) !== -1;\n        if (!extensionOK) {\n            content = this.translate.instant(\n                'MESSAGES.ERROR_FAILD_TO_LOAD_EXTENSION',\n                {\n                    fileExtension:\n                        \"<label class='uppercase bold'>\" +\n                        fileExtension +\n                        '</label>',\n                }\n            );\n        } else if (!sizeOK) {\n            content = this.translate.instant(\n                'MESSAGES.ERROR_FAILD_TO_LOAD_SIZE',\n                {\n                    fileSize:\n                        \"<label class='uppercase bold'>\" +\n                        sizeLimitMB.toString() +\n                        '</label>',\n                }\n            );\n        }\n        return content;\n    }\n\n    getBase64FileSize(base64String: string): number {\n        let fileSize: number;\n\n        try {\n            base64String = base64String.substr(base64String.indexOf(',') + 1);\n            fileSize = atob(base64String).length;\n        } catch (e) {\n            fileSize = -1;\n        }\n\n        return fileSize; // return size in bytes;\n    }\n\n    setIntervalX(delay, repetitions): void {\n        let x = 0;\n        this.intervalID = window.setInterval(() => {\n            // this.setProgress(this.progress + 5);\n            if (++x === repetitions || this.uploader.progress >= 100) {\n                window.clearInterval(this.intervalID);\n            }\n        }, delay);\n    }\n\n    errorHandler(event): void {\n        event.target.src = this.fileService.getSvgAsImageSrc(\n            pepIconNoImage2.data\n        );\n        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');\n    }\n\n    private setProgress(progress): void {\n        this.progress = progress;\n        this.uploader.progress = progress;\n    }\n\n    deleteFile(): void {\n        this.uploader.clearQueue();\n        window.clearInterval(this.intervalID);\n        this.setProgress(0);\n\n        const value = '';\n        this.src = value;\n        this.fileChange.emit(value);\n    }\n\n    onElementClicked(event): void {\n        this.elementClick.emit({\n            key: this.key,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n    }\n\n    onClick_ChooseFile(event): void {\n        if (this.fileInput?.nativeElement) {\n            this.fileInput.nativeElement.click();\n        }\n    }\n\n    onKeyPress_ChooseFile(event): void {\n        const e = event as KeyboardEvent;\n\n        if ([13, 32].indexOf(e.which) !== -1) {\n            if (this.fileInput?.nativeElement) {\n                this.fileInput.nativeElement.click();\n            }\n        }\n        e.preventDefault();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "component"
        },
        {
            "name": "PepHttpService",
            "id": "injectable-PepHttpService-5443b6a7b6979183a07bd97db9696070",
            "file": "projects/ngx-lib/src/core/http/services/http.service.ts",
            "properties": [
                {
                    "name": "AUTH_HEADER",
                    "defaultValue": "'Authorization'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "PEPPERI_TOKEN_COOKIE",
                    "defaultValue": "'PepperiUserSettings'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "PEPPERI_TOKEN_HEADER",
                    "defaultValue": "'PepperiSessionToken'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "WAPI_TOKEN_KEY",
                    "defaultValue": "'auth_token'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAuthorizationToken",
                    "args": [
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addWebApiToken",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHttpCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPapiApiCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServerErrorMessage",
                    "args": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWapiApiCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postHttpCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any | null"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postPapiApiCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any | null"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postWapiApiCall",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "body",
                            "type": "any | null"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 174,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaultHeaderOptions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpOptions",
                            "type": "any",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n    HttpClient,\n    HttpErrorResponse,\n    HttpParams,\n    HttpHeaders,\n} from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { retry, catchError, tap } from 'rxjs/operators';\nimport { PepSessionService } from '../../common/services/session.service';\nimport { PepCookieService } from '../../common/services/cookie.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepHttpService {\n    private readonly AUTH_HEADER = 'Authorization';\n    private readonly PEPPERI_TOKEN_HEADER = 'PepperiSessionToken';\n    private readonly WAPI_TOKEN_KEY = 'auth_token';\n    private readonly PEPPERI_TOKEN_COOKIE = 'PepperiUserSettings';\n\n    constructor(\n        private sessionService: PepSessionService,\n        private cookieService: PepCookieService,\n        private http: HttpClient\n    ) {}\n\n    private handleError(response: HttpErrorResponse): Observable<never> {\n        let errorMessage = 'Unknown error!';\n        if (response.error instanceof ErrorEvent) {\n            // Client-side errors\n            errorMessage = `Error: ${response.error.message}`;\n        } else {\n            // Server-side errors\n            errorMessage = this.getServerErrorMessage(response);\n        }\n\n        return throwError(errorMessage);\n    }\n\n    private getServerErrorMessage(response: HttpErrorResponse): string {\n        if (response?.error?.fault?.faultstring) {\n            return `${response.error.fault.faultstring}`;\n        } else {\n            switch (response.status) {\n                case 404: {\n                    return `Not Found: ${response.message}`;\n                }\n                case 403: {\n                    return `Access Denied: ${response.message}`;\n                }\n                case 500: {\n                    return `Internal Server Error: ${response.message}`;\n                }\n                default: {\n                    return `Unknown Server Error\\nError Code: ${response.status}\\nMessage: ${response.message}`;\n                }\n            }\n        }\n    }\n\n    // Add authorization token if the token exist.\n    private addAuthorizationToken(httpOptions: any = {}): any {\n        if (!httpOptions.headers.has(this.AUTH_HEADER)) {\n            const idpToken = this.sessionService.getIdpToken();\n\n            if (idpToken) {\n                httpOptions.headers = httpOptions.headers.set(\n                    this.AUTH_HEADER,\n                    `Bearer ${idpToken}`\n                );\n            }\n        }\n\n        return httpOptions;\n    }\n\n    // Add web api token if calling to wapi domain.\n    private addWebApiToken(url: string, httpOptions: any = {}): any {\n        if (!httpOptions.headers.has(this.PEPPERI_TOKEN_HEADER)) {\n            const wapiBaseUrl = this.sessionService.getWapiBaseUrl();\n\n            if (wapiBaseUrl && url.match(new RegExp(wapiBaseUrl, 'g'))) {\n                // TODO:\n                // const webApiToken = this.sessionService.getWapiToken();\n                try {\n                    const userSettingCookie = this.cookieService.get(\n                        this.PEPPERI_TOKEN_COOKIE\n                    );\n                    const webApiToken = JSON.parse(userSettingCookie).values\n                        .items[this.WAPI_TOKEN_KEY];\n                    if (webApiToken) {\n                        httpOptions.headers = httpOptions.headers.set(\n                            this.PEPPERI_TOKEN_HEADER,\n                            webApiToken\n                        );\n                    }\n                } catch {\n                    // Do nothing.\n                }\n            }\n        }\n\n        return httpOptions;\n    }\n\n    private setDefaultHeaderOptions(url: string, httpOptions: any = {}): any {\n        if (!httpOptions.headers) {\n            httpOptions.headers = new HttpHeaders();\n        }\n\n        // Add content type\n        if (!httpOptions.headers.has('Content-Type')) {\n            httpOptions.headers = httpOptions.headers.set(\n                'Content-Type',\n                'application/json'\n            );\n        }\n\n        httpOptions = this.addAuthorizationToken(httpOptions);\n        httpOptions = this.addWebApiToken(url, httpOptions);\n\n        return httpOptions;\n    }\n\n    // getTextFile(filename: string): void {\n    //     // The Observable returned by get() is of type Observable<string>\n    //     // because a text response was specified.\n    //     // There's no need to pass a <string> type parameter to get().\n    //     // return this.http.get(filename, {responseType: 'text'})\n    //     //     .pipe(\n    //     //         tap( // Log the result or error\n    //     //         data => this.log(filename, data),\n    //     //         error => this.logError(filename, error)\n    //     //         )\n    //     // );\n    // }\n\n    getHttpCall(url: string, httpOptions: any = {}): Observable<any> {\n        httpOptions = this.setDefaultHeaderOptions(url, httpOptions);\n\n        return this.http\n            .get(url, httpOptions)\n            .pipe(catchError(this.handleError.bind(this)));\n        //     .subscribe(\n        //         (res) => console.log(''),\n        //         (error) => console.log(''),\n        //         () => {}\n        // );\n    }\n\n    postHttpCall(\n        url: string,\n        body: any | null,\n        httpOptions: any = {}\n    ): Observable<any> {\n        httpOptions = this.setDefaultHeaderOptions(url, httpOptions);\n\n        return this.http\n            .post(url, body, httpOptions)\n            .pipe(catchError(this.handleError.bind(this)));\n        //     .subscribe(\n        //         (res) => console.log(''),\n        //         (error) => console.log(''),\n        //         () => {}\n        // );\n    }\n\n    getWapiApiCall(url: string, httpOptions: any = {}): Observable<any> {\n        const wapiBaseUrl = this.sessionService.getWapiBaseUrl();\n        return this.getHttpCall(`${wapiBaseUrl}${url}`, httpOptions);\n    }\n\n    postWapiApiCall(\n        url: string,\n        body: any | null,\n        httpOptions: any = {}\n    ): Observable<any> {\n        const wapiBaseUrl = this.sessionService.getWapiBaseUrl();\n        return this.postHttpCall(`${wapiBaseUrl}${url}`, body, httpOptions);\n    }\n\n    getPapiApiCall(url: string, httpOptions: any = {}): Observable<any> {\n        const papiBaseUrl = this.sessionService.getPapiBaseUrl();\n        return this.getHttpCall(`${papiBaseUrl}${url}`, httpOptions);\n    }\n\n    postPapiApiCall(\n        url: string,\n        body: any | null,\n        httpOptions: any = {}\n    ): Observable<any> {\n        const papiBaseUrl = this.sessionService.getPapiBaseUrl();\n        return this.postHttpCall(`${papiBaseUrl}${url}`, body, httpOptions);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService"
                    },
                    {
                        "name": "cookieService",
                        "type": "PepCookieService"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "PepSessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "PepCookieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepIconRegistry",
            "id": "injectable-PepIconRegistry-430aab75b5e8a559e5030eb6c0effae7",
            "file": "projects/ngx-lib/icon/icon-registry.service.ts",
            "properties": [
                {
                    "name": "registry",
                    "defaultValue": "new Map<PepIconType, string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "iconName",
                            "type": "PepIconType"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "iconName",
                            "type": "PepIconType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerIcons",
                    "args": [
                        {
                            "name": "icons",
                            "type": "IPepIconData[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "icons",
                            "type": "IPepIconData[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IPepIconData, PepIconType } from './icon-generated.model';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepIconRegistry {\n    private registry = new Map<PepIconType, string>();\n\n    public registerIcons(icons: IPepIconData[]): void {\n        icons.forEach((icon: IPepIconData) =>\n            this.registry.set(icon.name, icon.data)\n        );\n    }\n\n    public getIcon(iconName: PepIconType): string | undefined {\n        if (!this.registry.has(iconName)) {\n            console.warn(`We could not find the Icon with the name ${iconName},\n                did you add it to the Icon registry?`);\n        }\n        return this.registry.get(iconName);\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepInternalPageService",
            "id": "injectable-PepInternalPageService-cd8cfcd98835f05984ca0b6e5331c8f4",
            "file": "projects/ngx-lib/form/internal-page.service.ts",
            "properties": [
                {
                    "name": "additionalApiName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "objectId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "parentId",
                    "defaultValue": "'0'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "searchCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "transactionUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "viewType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeAdditionalApiName",
                    "args": [
                        {
                            "name": "additionalApiName",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "additionalApiName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeChildrenViewType",
                    "args": [
                        {
                            "name": "viewType",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "viewType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "childMinusClick",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "childPlusClick",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "childValueChanged",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldApiName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseParentUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "getChildren",
                    "args": [
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initDetails",
                    "args": [
                        {
                            "name": "objectId",
                            "type": "string"
                        },
                        {
                            "name": "parentId",
                            "type": "string"
                        },
                        {
                            "name": "searchCode",
                            "type": "string"
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "objectId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callbackFunc",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PepHttpService } from '@pepperi-addons/ngx-lib';\n\n@Injectable()\nexport class PepInternalPageService {\n    private transactionUrl: string;\n    private objectId: string;\n    private parentId = '0';\n    private searchCode: string;\n    private viewType: string;\n    public additionalApiName = '';\n\n    constructor(private httpService: PepHttpService) {\n        this.transactionUrl = 'Service1.svc/v1/OrderCenter/Transaction/';\n    }\n\n    getBaseParentUrl(): string {\n        const url = `${this.transactionUrl}${this.objectId}/ParentLine/${this.parentId}/`;\n        return url;\n    }\n\n    getChildren(callbackFunc: any): void {\n        const body = JSON.stringify({\n            TransactionUID: this.objectId,\n            SearchCode: this.searchCode,\n            AdditionalApiName: this.additionalApiName,\n            ParentTransactionLineID: this.parentId,\n            ViewType: this.viewType,\n        });\n\n        // Set the additional api name with view type string.\n        const moreParams =\n            this.additionalApiName?.length > 0\n                ? `${this.additionalApiName}/${this.viewType}`\n                : `''/${this.viewType}`;\n\n        const url = `${this.getBaseParentUrl()}Items/${moreParams}`;\n\n        this.httpService.postWapiApiCall(url, body).subscribe(\n            (res) => {\n                callbackFunc(res);\n            }\n            // (error) => {},\n            // () => {}\n        );\n    }\n\n    initDetails(\n        objectId: string,\n        parentId: string,\n        searchCode: string,\n        callbackFunc: any\n    ): void {\n        if (!objectId || !parentId) {\n            return;\n        }\n\n        this.objectId = objectId;\n        this.parentId = parentId;\n        this.searchCode = searchCode;\n\n        this.httpService\n            .getWapiApiCall(`${this.getBaseParentUrl()}ViewTypes`)\n            .subscribe(\n                (res) => {\n                    callbackFunc(res);\n                }\n                // (error) => {},\n                // () => {}\n            );\n    }\n\n    changeChildrenViewType(viewType: string, callbackFunc: any): void {\n        this.viewType = viewType;\n        this.getChildren(callbackFunc);\n    }\n\n    changeAdditionalApiName(\n        additionalApiName: string,\n        callbackFunc: any\n    ): void {\n        this.additionalApiName = additionalApiName;\n        this.getChildren(callbackFunc);\n    }\n\n    childPlusClick(\n        itemId: string,\n        fieldApiName: string,\n        callbackFunc: any\n    ): void {\n        const body = JSON.stringify({\n            TransactionUID: this.objectId,\n            SearchCode: this.searchCode,\n            ParentTransactionLineID: this.parentId,\n            TransactionLineUID: itemId,\n            FieldApiName: fieldApiName,\n            ViewType: this.viewType,\n        });\n\n        this.httpService\n            .postWapiApiCall(`${this.getBaseParentUrl()}IncrementValue`, body)\n            .subscribe(\n                (res) => {\n                    callbackFunc(res);\n                }\n                // (error) => {},\n                // () => {}\n            );\n    }\n\n    childMinusClick(\n        itemId: string,\n        fieldApiName: string,\n        callbackFunc: any\n    ): void {\n        const body = JSON.stringify({\n            TransactionUID: this.objectId,\n            SearchCode: this.searchCode,\n            ParentTransactionLineID: this.parentId,\n            TransactionLineUID: itemId,\n            FieldApiName: fieldApiName,\n            ViewType: this.viewType,\n        });\n\n        this.httpService\n            .postWapiApiCall(`${this.getBaseParentUrl()}DecrementValue`, body)\n            .subscribe(\n                (res) => {\n                    callbackFunc(res);\n                }\n                // (error) => {},\n                // () => {}\n            );\n    }\n\n    childValueChanged(\n        itemId: string,\n        fieldApiName: string,\n        value: string,\n        callbackFunc: any\n    ): void {\n        const body = JSON.stringify({\n            TransactionUID: this.objectId,\n            SearchCode: this.searchCode,\n            ParentTransactionLineID: this.parentId,\n            TransactionLineUID: itemId,\n            FieldApiName: fieldApiName,\n            FieldValue: value,\n            ViewType: this.viewType,\n        });\n\n        this.httpService\n            .postWapiApiCall(`${this.getBaseParentUrl()}SetFieldValue`, body)\n            .subscribe(\n                (res) => {\n                    callbackFunc(res);\n                }\n                // (error) => {},\n                // () => {}\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepJwtHelperService",
            "id": "injectable-PepJwtHelperService-103c23a2b660162533553a3f051aae24",
            "file": "projects/ngx-lib/src/core/common/services/jwt-helper.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "b64decode",
                    "args": [
                        {
                            "name": "str",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "b64DecodeUnicode",
                    "args": [
                        {
                            "name": "str",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthScheme",
                    "args": [
                        {
                            "name": "authScheme",
                            "type": "function",
                            "function": [
                                {
                                    "name": "request",
                                    "type": "HttpRequest<any>"
                                }
                            ]
                        },
                        {
                            "name": "request",
                            "type": "HttpRequest<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "authScheme",
                            "type": "function",
                            "function": [
                                {
                                    "name": "request",
                                    "type": "HttpRequest<any>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTokenExpirationDate",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTokenExpired",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        },
                        {
                            "name": "offsetSeconds",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offsetSeconds",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "urlBase64Decode",
                    "args": [
                        {
                            "name": "str",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpRequest } from '@angular/common/http';\nimport { Injectable, Inject } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepJwtHelperService {\n    public urlBase64Decode(str: string): string {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw new Error('Illegal base64url string!');\n            }\n        }\n        return this.b64DecodeUnicode(output);\n    }\n\n    // credits for decoder goes to https://github.com/atk\n    private b64decode(str: string): string {\n        const chars =\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let output = '';\n\n        str = String(str).replace(/=+$/, '');\n\n        if (str.length % 4 === 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\"\n            );\n        }\n\n        for (\n            // initialize result and counters\n            let bc = 0, bs: any, buffer: any, idx = 0;\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n        return output;\n    }\n\n    private b64DecodeUnicode(str: any): string {\n        return decodeURIComponent(\n            Array.prototype.map\n                .call(this.b64decode(str), (c: any) => {\n                    return (\n                        '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n                    );\n                })\n                .join('')\n        );\n    }\n\n    public decodeToken(token: string): any {\n        if (!token || token === '') {\n            return null;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== 3) {\n            throw new Error(\n                \"The inspected token doesn't appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.\"\n            );\n        }\n\n        const decoded = this.urlBase64Decode(parts[1]);\n        if (!decoded) {\n            throw new Error('Cannot decode the token.');\n        }\n\n        return JSON.parse(decoded);\n    }\n\n    public getTokenExpirationDate(token: string): Date | null {\n        const decoded = this.decodeToken(token);\n\n        if (!decoded || !decoded.hasOwnProperty('exp')) {\n            return null;\n        }\n\n        const date = new Date(0);\n        date.setUTCSeconds(decoded.exp);\n\n        return date;\n    }\n\n    public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        if (!token || token === '') {\n            return true;\n        }\n        const date = this.getTokenExpirationDate(token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (date === null) {\n            return false;\n        }\n\n        return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n    }\n\n    public getAuthScheme(\n        authScheme: (request: HttpRequest<any>) => any | string | undefined,\n        request: HttpRequest<any>\n    ): string {\n        if (typeof authScheme === 'function') {\n            return authScheme(request);\n        }\n\n        return authScheme;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepLayoutService",
            "id": "injectable-PepLayoutService-93777c8de625ae9adce89c4a840017db",
            "file": "projects/ngx-lib/src/core/layout/layout.service.ts",
            "properties": [
                {
                    "name": "deviceHasMouseSubject",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "documentMouseoverListener",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resizeSubject",
                    "type": "BehaviorSubject<PepScreenSizeType>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentLanguage",
                    "args": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "translate",
                            "type": "TranslateService",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeviceHasMouse",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "getOrintation",
                    "args": [],
                    "optional": false,
                    "returnType": "PepOrientationType",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "getScreenHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "getScreenHeightPx",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "getScreenWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "getScreenWidthPx",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 157
                },
                {
                    "name": "isRtl",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 169
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "size",
                            "type": "PepScreenSizeType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>Set the current screen size.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2762,
                                "end": 2766,
                                "flags": 0,
                                "escapedText": "size"
                            },
                            "type": "PepScreenSizeType",
                            "tagName": {
                                "pos": 2756,
                                "end": 2761,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The size to change to.</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\n// Const BIDI_RTL_LANGS Array\n// BIDI_RTL_LANGS ref: http://en.wikipedia.org/wiki/Right-to-left\n// Table of scripts in Unicode: https://en.wikipedia.org/wiki/Script_(Unicode)\nconst _BIDI_RTL_LANGS = [\n    'ae' /* Avestan */,\n    'ar' /* 'العربية', Arabic */,\n    'arc' /* Aramaic */,\n    'bcc' /* 'بلوچی مکرانی', Southern Balochi */,\n    'bqi' /* 'بختياري', Bakthiari */,\n    'ckb' /* 'Soranî / کوردی', Sorani */,\n    'dv' /* Dhivehi */,\n    'fa' /* 'فارسی', Persian */,\n    'glk' /* 'گیلکی', Gilaki */,\n    'he' /* 'עברית', Hebrew */,\n    'ku' /* 'Kurdî / كوردی', Kurdish */,\n    'mzn' /* 'مازِرونی', Mazanderani */,\n    'nqo' /* N'Ko */,\n    'pnb' /* 'پنجابی', Western Punjabi */,\n    'ps' /* 'پښتو', Pashto, */,\n    'sd' /* 'سنڌي', Sindhi */,\n    'ug' /* 'Uyghurche / ئۇيغۇرچە', Uyghur */,\n    'ur' /* 'اردو', Urdu */,\n    'yi' /* 'ייִדיש', Yiddish */,\n];\n\nexport type PepOrientationType = 'landscape' | 'portrait';\n\nexport enum PepScreenSizeType {\n    XL,\n    LG,\n    MD,\n    SM,\n    XS,\n}\n// export type PepScreenSizeType = 'xl' | 'lg' | 'md' | 'sm' | 'xs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepLayoutService {\n    private resizeSubject: BehaviorSubject<PepScreenSizeType>;\n    private deviceHasMouseSubject: BehaviorSubject<boolean>;\n\n    get onResize$(): Observable<PepScreenSizeType> {\n        return this.resizeSubject.asObservable().pipe(distinctUntilChanged());\n    }\n\n    get onMouseOver$(): Observable<boolean> {\n        return this.deviceHasMouseSubject\n            .asObservable()\n            .pipe(distinctUntilChanged());\n    }\n\n    constructor() {\n        this.resizeSubject = new BehaviorSubject(PepScreenSizeType.LG);\n\n        this.deviceHasMouseSubject = new BehaviorSubject(false);\n        document.addEventListener(\n            'mouseover',\n            this.documentMouseoverListener,\n            false\n        );\n        // document.addEventListener('touchstart', this._documentTouchstartListener, false);\n    }\n\n    private documentMouseoverListener = (event: MouseEvent) => {\n        this.deviceHasMouseSubject.next(true);\n        this.deviceHasMouseSubject.complete();\n        document.removeEventListener(\n            'mouseover',\n            this.documentMouseoverListener,\n            false\n        );\n    };\n\n    // private _documentTouchstartListener = (event: TouchEvent) => {\n    //     debugger;\n    //     this.isTouchDevice = true;\n    //     document.removeEventListener('touchstart', this._documentTouchstartListener, false);\n    // }\n\n    /**\n     * Set the current screen size.\n     * @param size The size to change to.\n     */\n    onResize(size: PepScreenSizeType): void {\n        this.resizeSubject.next(size);\n    }\n\n    getDeviceHasMouse(): boolean {\n        return this.deviceHasMouseSubject.getValue();\n    }\n\n    getOrintation(): PepOrientationType {\n        if (window.innerHeight > window.innerWidth) {\n            return 'portrait';\n        } else {\n            return 'landscape';\n        }\n    }\n\n    getScreenWidth(): number {\n        let retVal = 250.0;\n        switch (this.resizeSubject.getValue()) {\n            case PepScreenSizeType.XS: {\n                retVal = this.getOrintation() === 'landscape' ? 130.0 : 65.0;\n                break;\n            }\n            case PepScreenSizeType.SM:\n            case PepScreenSizeType.MD: {\n                retVal = this.getOrintation() === 'landscape' ? 220.0 : 140.0;\n                break;\n            }\n            case PepScreenSizeType.LG:\n            case PepScreenSizeType.XL: {\n                retVal = this.getOrintation() === 'landscape' ? 400.0 : 250.0;\n                break;\n            }\n        }\n        return retVal;\n    }\n\n    getScreenHeight(): number {\n        let retVal = 250.0;\n        switch (this.resizeSubject.getValue()) {\n            case PepScreenSizeType.XS: {\n                retVal = this.getOrintation() === 'landscape' ? 65.0 : 130.0;\n                break;\n            }\n            case PepScreenSizeType.SM:\n            case PepScreenSizeType.MD: {\n                retVal = this.getOrintation() === 'landscape' ? 140.0 : 220.0;\n                break;\n            }\n            case PepScreenSizeType.LG:\n            case PepScreenSizeType.XL: {\n                retVal = this.getOrintation() === 'landscape' ? 250.0 : 400.0;\n                break;\n            }\n        }\n        return retVal;\n    }\n\n    getScreenHeightPx(): number {\n        return (\n            window.innerHeight ||\n            document.documentElement.clientHeight ||\n            document.body.clientHeight\n        );\n    }\n\n    getScreenWidthPx(): number {\n        return (\n            window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth\n        );\n    }\n\n    getCurrentLanguage(translate: TranslateService = null): string {\n        return translate?.currentLang || navigator.language;\n    }\n\n    isRtl(): boolean {\n        const userLang = this.getCurrentLanguage();\n        const isRtl = _BIDI_RTL_LANGS.indexOf(userLang) >= 0;\n\n        return isRtl;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 57
            },
            "accessors": {
                "onResize$": {
                    "name": "onResize$",
                    "getSignature": {
                        "name": "onResize$",
                        "type": "",
                        "returnType": "Observable<PepScreenSizeType>",
                        "line": 49
                    }
                },
                "onMouseOver$": {
                    "name": "onMouseOver$",
                    "getSignature": {
                        "name": "onMouseOver$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 53
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepListActionsComponent",
            "id": "injectable-PepListActionsComponent-d4255ea2a45765aa754021990ae49dc0",
            "file": "projects/ngx-lib/list/list-actions.component.ts",
            "properties": [],
            "methods": [
                {
                    "name": "onActionClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStateChanged",
                    "args": [
                        {
                            "name": "menuStateChangeEvent",
                            "type": "IPepMenuStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "menuStateChangeEvent",
                            "type": "IPepMenuStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuStateChangeEvent,\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\n@Component({\n    selector: 'pep-list-actions',\n    templateUrl: './list-actions.component.html',\n    styleUrls: ['./list-actions.component.scss'],\n})\n@Injectable()\nexport class PepListActionsComponent {\n    @Input() actions: Array<PepMenuItem> = null;\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() xPosition: 'before' | 'after' = 'before';\n    @Input() hidden = false;\n\n    @Output()\n    actionClick: EventEmitter<IPepMenuItemClickEvent> = new EventEmitter<IPepMenuItemClickEvent>();\n    @Output()\n    stateChange: EventEmitter<IPepMenuStateChangeEvent> = new EventEmitter<IPepMenuStateChangeEvent>();\n    @Output()\n    menuClick: EventEmitter<void> = new EventEmitter<void>();\n\n    onActionClicked(action): void {\n        this.actionClick.emit(action);\n    }\n\n    onStateChanged(menuStateChangeEvent: IPepMenuStateChangeEvent): void {\n        this.stateChange.emit(menuStateChangeEvent);\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepListCarouselComponent",
            "id": "injectable-PepListCarouselComponent-1bc660d1df38f7ae696a41dd5b2515ca",
            "file": "projects/ngx-lib/list/list-carousel.component.ts",
            "properties": [
                {
                    "name": "_items",
                    "defaultValue": "null",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_itemSize",
                    "defaultValue": "'xs'",
                    "type": "PepListCarouselSizeType",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "carousel",
                    "type": "PepCarouselComponent",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel', {read: PepCarouselComponent}"
                        }
                    ]
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "prevDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methods": [
                {
                    "name": "itemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "moveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "onReachesLeftBound",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReachesRightBound",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    Renderer2,\n    ChangeDetectorRef,\n    OnDestroy,\n    AfterViewInit,\n} from '@angular/core';\nimport {\n    ObjectsDataRow,\n    UIControl,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { PepCarouselComponent } from '@pepperi-addons/ngx-lib/carousel';\n\nexport type PepListCarouselSizeType = 'xs' | 'sm' | 'md';\n\nexport interface IPepListCarouselItemClickEvent {\n    source: ObjectsDataRow;\n}\n\n@Component({\n    selector: 'pep-list-carousel',\n    templateUrl: './list-carousel.component.html',\n    styleUrls: ['./list-carousel.component.scss'],\n})\n@Injectable()\nexport class PepListCarouselComponent implements AfterViewInit, OnDestroy {\n    @Input() duration = 1000;\n    @Input() layout: UIControl = null;\n    @Input() itemsToMove = 3;\n    @Input() lockItemInnerEvents = true;\n    @Input() hideArrowsInSmallScreen = true;\n\n    private _items: Array<ObjectsDataRow> = null;\n    @Input()\n    set items(value: Array<ObjectsDataRow>) {\n        this._items = value;\n        this.moveTo(0);\n    }\n    get items() {\n        return this._items;\n    }\n\n    private _itemSize: PepListCarouselSizeType = 'xs';\n    @Input()\n    set itemSize(value: PepListCarouselSizeType) {\n        this._itemSize = value;\n        this.moveTo(0);\n    }\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    @Output()\n    itemClick: EventEmitter<IPepListCarouselItemClickEvent> = new EventEmitter<IPepListCarouselItemClickEvent>();\n\n    @ViewChild('carousel', { read: PepCarouselComponent })\n    carousel: PepCarouselComponent;\n\n    prevDisabled = false;\n    nextDisabled = false;\n    screenSize: PepScreenSizeType;\n    PepScreenSizeType = PepScreenSizeType;\n    // deviceHasMouse = false;\n\n    constructor(public layoutService: PepLayoutService) {\n        // this.deviceHasMouse = this.layoutService.getDeviceHasMouse();\n    }\n\n    ngAfterViewInit(): void {\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n\n        // this.layoutService.onMouseOver$.subscribe((deviceHasMouse: boolean) => {\n        //     this.deviceHasMouse = deviceHasMouse;\n        // });\n    }\n\n    ngOnDestroy(): void {\n        if (this.itemClick) {\n            this.itemClick.unsubscribe();\n        }\n    }\n\n    itemClicked(item: ObjectsDataRow): void {\n        this.itemClick.emit({ source: item });\n    }\n\n    moveLeft() {\n        // this.carousel.moveLeft();\n        const indexToMove = Math.max(\n            this.carousel.currIndex - this.itemsToMove,\n            0\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveRight() {\n        // this.carousel.moveRight();\n        const indexToMove = Math.min(\n            this.carousel.currIndex + this.itemsToMove,\n            this.items.length\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveTo(index: number) {\n        if (this.carousel) {\n            this.carousel.moveTo(index);\n        }\n    }\n\n    onReachesLeftBound(event: boolean) {\n        this.prevDisabled = event;\n    }\n\n    onReachesRightBound(event: boolean) {\n        this.nextDisabled = event;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "itemSize": {
                    "name": "itemSize",
                    "setSignature": {
                        "name": "itemSize",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "itemSize",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepListChooserComponent",
            "id": "injectable-PepListChooserComponent-948821535414856bdc617f6f19df7002",
            "file": "projects/ngx-lib/list/list-chooser.component.ts",
            "properties": [
                {
                    "name": "_currentList",
                    "defaultValue": "null",
                    "type": "IPepListChooserOption",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "null",
                    "type": "Array<IPepListChooserOption>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "null",
                    "type": "Array<PepBreadCrumbItem>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methods": [
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { PepBreadCrumbItem } from '@pepperi-addons/ngx-lib/bread-crumbs';\n\nexport class IPepListChooserOption {\n    key: string;\n    text: string;\n}\n\nexport interface IPepListChooserOptionChangeEvent {\n    source: IPepListChooserOption;\n}\n\n@Component({\n    selector: 'pep-list-chooser',\n    templateUrl: './list-chooser.component.html',\n    styleUrls: ['./list-chooser.component.scss'],\n})\n@Injectable()\nexport class PepListChooserComponent {\n    private _options: Array<IPepListChooserOption> = null;\n    @Input()\n    set options(value: Array<IPepListChooserOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.text };\n        });\n\n        if (this.menuItems?.length === 1) {\n            this.breadCrumbsItems = [];\n            this.breadCrumbsItems.push(\n                new PepBreadCrumbItem({\n                    key: this.menuItems[0].key,\n                    text: this.menuItems[0].text,\n                })\n            );\n        }\n    }\n    get options(): Array<IPepListChooserOption> {\n        return this._options;\n    }\n\n    private _currentList: IPepListChooserOption = null;\n    @Input()\n    set currentList(value: IPepListChooserOption) {\n        this._currentList = value;\n        this.currentItem = { key: value.key, text: value.text };\n    }\n    get currentList(): IPepListChooserOption {\n        return this._currentList;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n\n    @Output()\n    change: EventEmitter<IPepListChooserOptionChangeEvent> = new EventEmitter<IPepListChooserOptionChangeEvent>();\n\n    breadCrumbsItems: Array<PepBreadCrumbItem> = null;\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        const currentList = this.options.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: currentList });\n    }\n}\n",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<IPepListChooserOption>",
                        "line": 50
                    }
                },
                "currentList": {
                    "name": "currentList",
                    "setSignature": {
                        "name": "currentList",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentList",
                        "type": "",
                        "returnType": "IPepListChooserOption",
                        "line": 60
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepListPagerComponent",
            "id": "injectable-PepListPagerComponent-4f074f2efb71a87bf888378b289a1988",
            "file": "projects/ngx-lib/list/list-pager.component.ts",
            "properties": [
                {
                    "name": "_pageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_emitChangeEvent",
                    "args": [
                        {
                            "name": "previousPageIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "description": "<p>Emits an event notifying that a change of the paginator&#39;s properties has been triggered. </p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "previousPageIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_nextButtonsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "description": "<p>Checks whether the buttons for going forwards should be disabled. </p>\n"
                },
                {
                    "name": "_previousButtonsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Checks whether the buttons for going backwards should be disabled. </p>\n"
                },
                {
                    "name": "firstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "getNumberOfPages",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "hasNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "hasPreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "lastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "setPageIndex",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Injectable,\n    Input,\n    Output,\n} from '@angular/core';\nimport { IPepFieldValueChangeEvent } from '@pepperi-addons/ngx-lib';\nimport { DEFAULT_PAGE_SIZE } from './list.model';\n\nexport class IPepListPagerChangeEvent {\n    pageIndex: number;\n    previousPageIndex: number;\n    pageSize: number;\n    length: number;\n}\n\n@Component({\n    selector: 'pep-list-pager',\n    templateUrl: './list-pager.component.html',\n    styleUrls: ['./list-pager.component.scss'],\n})\n@Injectable()\nexport class PepListPagerComponent {\n    @Input() disabled = false;\n    private _pageIndex = 0;\n    @Input()\n    set pageIndex(value: number) {\n        this.setPageIndex(value);\n    }\n    get pageIndex(): number {\n        return this._pageIndex;\n    }\n\n    @Input() length = 0;\n    @Input() pageSize = DEFAULT_PAGE_SIZE;\n\n    @Output()\n    pagerChange: EventEmitter<IPepListPagerChangeEvent> = new EventEmitter<IPepListPagerChangeEvent>();\n\n    constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n    nextPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex + 1);\n    }\n\n    previousPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex - 1);\n    }\n\n    firstPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(0);\n    }\n\n    lastPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.getNumberOfPages() - 1);\n    }\n\n    hasPreviousPage(): boolean {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n\n    hasNextPage(): boolean {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n\n    getNumberOfPages(): number {\n        if (!this.pageSize) {\n            return 0;\n        }\n\n        return Math.ceil(this.length / this.pageSize);\n    }\n\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n\n    onValueChange(event: IPepFieldValueChangeEvent) {\n        const pageNumber = coerceNumberProperty(event.value);\n        this.setPageIndex(pageNumber - 1); // - 1 to convert number into index.\n    }\n\n    private setPageIndex(newIndex: number) {\n        const previousPageIndex = this.pageIndex;\n\n        if (newIndex >= 0 && newIndex < this.getNumberOfPages()) {\n            this._pageIndex = newIndex;\n        } else {\n            this._pageIndex = 0;\n        }\n\n        if (this.pageIndex !== previousPageIndex) {\n            this._emitChangeEvent(previousPageIndex);\n        }\n    }\n\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitChangeEvent(previousPageIndex: number) {\n        this.pagerChange.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "pageIndex": {
                    "name": "pageIndex",
                    "setSignature": {
                        "name": "pageIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pageIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 33
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepListSortingComponent",
            "id": "injectable-PepListSortingComponent-bfb1e43a1d18c5a2449d5363e10a37b1",
            "file": "projects/ngx-lib/list/list-sorting.component.ts",
            "properties": [
                {
                    "name": "_currentSorting",
                    "defaultValue": "null",
                    "type": "IPepListSortingOption",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "null",
                    "type": "Array<IPepListSortingOption>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methods": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuItemClickEvent,\n    PepMenuItem,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepListSortingChangeEvent } from './list.model';\n\nexport class IPepListSortingOption {\n    sortBy: string;\n    title: string;\n    iconName?: string;\n    isAsc?: boolean;\n}\n\nexport interface IPepListSortingOptionChangeEvent {\n    source: IPepListSortingOption;\n}\n\n@Component({\n    selector: 'pep-list-sorting',\n    templateUrl: './list-sorting.component.html',\n    styleUrls: ['./list-sorting.component.scss'],\n})\n@Injectable()\nexport class PepListSortingComponent implements OnInit {\n    private _options: Array<IPepListSortingOption> = null;\n    @Input()\n    set options(value: Array<IPepListSortingOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.sortBy, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get options(): Array<IPepListSortingOption> {\n        return this._options;\n    }\n\n    private _currentSorting: IPepListSortingOption = null;\n    @Input()\n    set currentSorting(value: IPepListSortingOption) {\n        this._currentSorting = value;\n        this.currentItem = {\n            key: value.sortBy,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentSorting(): IPepListSortingOption {\n        return this._currentSorting;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n    @Output()\n    change: EventEmitter<IPepListSortingOptionChangeEvent> = new EventEmitter<IPepListSortingOptionChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (\n            this.currentSorting === null &&\n            this.options &&\n            this.options.length > 0\n        ) {\n            this.currentSorting = this.options[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentSorting = this.options.find(\n            (sorting) => sorting.sortBy === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: this.currentSorting });\n    }\n}\n",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<IPepListSortingOption>",
                        "line": 44
                    }
                },
                "currentSorting": {
                    "name": "currentSorting",
                    "setSignature": {
                        "name": "currentSorting",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentSorting",
                        "type": "",
                        "returnType": "IPepListSortingOption",
                        "line": 58
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepListTotalComponent",
            "id": "injectable-PepListTotalComponent-071f1227d2e3d088cad7634c85af11c4",
            "file": "projects/ngx-lib/list/list-total.component.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Component, Injectable, Input } from '@angular/core';\n\n@Component({\n    selector: 'pep-list-total',\n    templateUrl: './list-total.component.html',\n    styleUrls: ['./list-total.component.scss'],\n})\n@Injectable()\nexport class PepListTotalComponent {\n    @Input() totalRows = -1;\n    @Input() totalAmount = -1;\n    @Input() isMapView = false;\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepListViewsComponent",
            "id": "injectable-PepListViewsComponent-707ba6227b2d128e0720b514366c8691",
            "file": "projects/ngx-lib/list/list-views.component.ts",
            "properties": [
                {
                    "name": "_currentView",
                    "defaultValue": "null",
                    "type": "IPepListView",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_views",
                    "defaultValue": "null",
                    "type": "Array<IPepListView>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methods": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewChanged",
                    "args": [
                        {
                            "name": "view",
                            "type": "IPepListView"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "IPepListView",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n} from '@angular/core';\nimport { PepSizeType, PepStyleType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\nexport type PepListViewDisplayType = 'menu' | 'buttons';\n\nexport class IPepListView {\n    key: string;\n    iconName: string;\n    title?: string;\n}\n\nexport interface IListViewChangeEvent {\n    source: IPepListView;\n}\n\n@Component({\n    selector: 'pep-list-views',\n    templateUrl: './list-views.component.html',\n    styleUrls: ['./list-views.component.scss'],\n})\n@Injectable()\nexport class PepListViewsComponent implements OnInit {\n    private _views: Array<IPepListView> = null;\n    @Input()\n    set views(value: Array<IPepListView>) {\n        this._views = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get views(): Array<IPepListView> {\n        return this._views;\n    }\n\n    private _currentView: IPepListView = null;\n    @Input()\n    set currentView(value: IPepListView) {\n        this._currentView = value;\n        this.currentItem = {\n            key: value.key,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentView(): IPepListView {\n        return this._currentView;\n    }\n\n    @Input() displayType: PepListViewDisplayType = 'buttons';\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n\n    @Output()\n    change: EventEmitter<IListViewChangeEvent> = new EventEmitter<IListViewChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (this.currentView === null && this.views && this.views.length > 0) {\n            this.currentView = this.views[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentView = this.views.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.raiseChangeEvent();\n    }\n\n    onViewChanged(view: IPepListView): void {\n        this.currentView = view;\n        this.raiseChangeEvent();\n    }\n\n    private raiseChangeEvent(): void {\n        this.change.emit({ source: this.currentView });\n    }\n}\n",
            "accessors": {
                "views": {
                    "name": "views",
                    "setSignature": {
                        "name": "views",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "views",
                        "type": "",
                        "returnType": "Array<IPepListView>",
                        "line": 44
                    }
                },
                "currentView": {
                    "name": "currentView",
                    "setSignature": {
                        "name": "currentView",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentView",
                        "type": "",
                        "returnType": "IPepListView",
                        "line": 58
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepLoaderService",
            "id": "injectable-PepLoaderService-ef6e4f208ff1f79db3515811bdafe877",
            "file": "projects/ngx-lib/src/core/http/services/loader.service.ts",
            "properties": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "showLoaderSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(\n        false\n    )",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "showLoaderChanged",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepLoaderService {\n    counter = 0;\n    private showLoaderSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n        false\n    );\n\n    get onChanged$(): Observable<boolean> {\n        return this.showLoaderSubject\n            .asObservable()\n            .pipe(distinctUntilChanged());\n    }\n\n    constructor() {\n        // Raise custom event for showing the loader.\n        this.onChanged$.subscribe((show) => {\n            this.showLoaderChanged(show);\n        });\n    }\n\n    private showLoaderChanged(show: boolean): void {\n        const eventData = {\n            detail: {\n                showLoader: show,\n            },\n        };\n\n        const event = new CustomEvent('toggleLoader', eventData);\n        window.dispatchEvent(event);\n    }\n\n    show(): void {\n        this.counter++;\n        this.showLoaderSubject.next(true);\n    }\n\n    hide(): void {\n        this.counter--;\n\n        if (this.counter < 0) {\n            this.counter = 0;\n        }\n\n        if (this.counter === 0) {\n            this.showLoaderSubject.next(false);\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "accessors": {
                "onChanged$": {
                    "name": "onChanged$",
                    "getSignature": {
                        "name": "onChanged$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 14
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepPortalService",
            "id": "injectable-PepPortalService-b2a087b994d2d16326041f6278668f59",
            "file": "projects/ngx-lib/src/core/portal/portal.service.ts",
            "properties": [
                {
                    "name": "targets",
                    "type": "Map<string | ViewContainerRef>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTarget",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string"
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "attach",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string"
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTarget",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewContainerRef",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepPortalService {\n    private targets: Map<string, ViewContainerRef>;\n\n    constructor() {\n        this.targets = new Map<string, ViewContainerRef>();\n    }\n\n    addTarget(targetName: string, viewContainer: ViewContainerRef): void {\n        this.targets.set(targetName, viewContainer);\n    }\n\n    attach(targetName: string, template: TemplateRef<any>): void {\n        const target = this.getTarget(targetName);\n\n        if (target) {\n            target.createEmbeddedView(template);\n        }\n    }\n\n    clear(targetName: string): void {\n        const target = this.getTarget(targetName);\n\n        if (target) {\n            target.clear();\n        }\n    }\n\n    private getTarget(targetName: string): ViewContainerRef {\n        return this.targets.has(targetName)\n            ? this.targets.get(targetName)\n            : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "PepScrollToService",
            "id": "injectable-PepScrollToService-552946dccb27702c3220059b712f84cf",
            "file": "projects/ngx-lib/src/core/scroll-to/scroll-to.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_scrollElementTo",
                    "args": [
                        {
                            "name": "el",
                            "type": "Element | Window"
                        },
                        {
                            "name": "duration",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "Element | Window",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_scrollWindowToElement",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "duration",
                            "type": "number"
                        },
                        {
                            "name": "offset",
                            "type": "number"
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doScrolling",
                    "args": [
                        {
                            "name": "scrollingElement",
                            "type": "Element | Window"
                        },
                        {
                            "name": "startingY",
                            "type": "number"
                        },
                        {
                            "name": "elementY",
                            "type": "number"
                        },
                        {
                            "name": "duration",
                            "type": "number"
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "scrollingElement",
                            "type": "Element | Window",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startingY",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementY",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subject",
                            "type": "Subject<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollElementTo",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element | Window"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "500"
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element | Window",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "500",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollWindowToElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "string | HTMLElement"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "500"
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string | HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "defaultValue": "500",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepScrollToService {\n    public scrollElementTo(\n        element: Element | Window,\n        duration = 500,\n        top = 0\n    ): Observable<any> {\n        const subject: Subject<any> = new Subject<any>();\n        if (element instanceof Element || element instanceof Window) {\n            this._scrollElementTo(element, duration, top, subject);\n        } else {\n            subject.error(\"I don't find element\");\n        }\n\n        return subject;\n    }\n\n    private _scrollElementTo(\n        el: Element | Window,\n        duration: number,\n        top: number,\n        subject: Subject<any>\n    ): Observable<any> {\n        if (el) {\n            let startingY: number;\n            if (el instanceof Window) {\n                startingY = window.pageYOffset;\n            } else {\n                const viewportOffset = (el as Element).getBoundingClientRect();\n                startingY = viewportOffset.top;\n            }\n            this.doScrolling(el, startingY, top, duration, subject);\n        } else {\n            subject.error(\"I don't find element\");\n        }\n\n        return subject;\n    }\n\n    public scrollWindowToElement(\n        element: string | HTMLElement,\n        duration = 500,\n        offset = 0\n    ): Observable<any> {\n        const subject: Subject<any> = new Subject<any>();\n        if (typeof element === 'string') {\n            const el = document.querySelector(element as string);\n            this._scrollWindowToElement(\n                el as HTMLElement,\n                duration,\n                offset,\n                subject\n            );\n        } else if (element instanceof HTMLElement) {\n            this._scrollWindowToElement(element, duration, offset, subject);\n        } else {\n            subject.error(\"I don't find element\");\n        }\n\n        return subject;\n    }\n\n    private _scrollWindowToElement(\n        el: HTMLElement,\n        duration: number,\n        offset: number,\n        subject: Subject<any>\n    ): Observable<any> {\n        if (el) {\n            const viewportOffset = el.getBoundingClientRect();\n            const startingY = window.pageYOffset;\n            const offsetTop = viewportOffset.top + startingY;\n            this.doScrolling(\n                window,\n                startingY,\n                offsetTop + offset,\n                duration,\n                subject\n            );\n        } else {\n            subject.error(\"I don't find element\");\n        }\n\n        return subject;\n    }\n\n    private doScrolling(\n        scrollingElement: Element | Window,\n        startingY: number,\n        elementY: number,\n        duration: number,\n        subject: Subject<any>\n    ): void {\n        const diff = elementY - startingY;\n        let start;\n\n        requestAnimationFrame(function step(timestamp) {\n            start = !start ? timestamp : start;\n\n            const time = timestamp - start;\n            const percent = Math.min(time / duration, 1);\n\n            scrollingElement.scrollTo(0, startingY + diff * percent);\n\n            if (time < duration) {\n                requestAnimationFrame(step);\n                subject.next({});\n            } else {\n                subject.complete();\n            }\n        });\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepSearchComponent",
            "id": "component-PepSearchComponent-3610c84bf59449a25be18b819763cdd9",
            "file": "projects/ngx-lib/search/search.component.ts",
            "properties": [
                {
                    "name": "_autoCompleteValues",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_searchControl",
                    "defaultValue": "null",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "fadeState",
                    "type": "\"fadeOut\" | \"fadeIn\"",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "isFloating",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "isRtl",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "lastValue",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput'"
                        }
                    ]
                },
                {
                    "name": "showFloatSrcBtn",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "state",
                    "defaultValue": "'open'",
                    "type": "\"open\" | \"close\"",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "type",
                    "defaultValue": "'regular'",
                    "type": "PepSearchType",
                    "optional": false,
                    "description": "",
                    "line": 128
                }
            ],
            "methods": [
                {
                    "name": "animateSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269
                },
                {
                    "name": "animateSearchDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285
                },
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createSearchControlIfNotExist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "emitSearchClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "onClearClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearch",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242
                },
                {
                    "name": "showFloatingButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "triggerSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    ViewEncapsulation,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChange,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    Renderer2,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n    trigger,\n    state,\n    style,\n    transition,\n    animate,\n} from '@angular/animations';\nimport { FormControl } from '@angular/forms';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport {\n    IPepSearchClickEvent,\n    IPepSearchValueChangeEvent,\n    IPepSearchStateChangeEvent,\n    PepSearchType,\n    PepSearchTriggerType,\n} from './search.model';\n\n@Component({\n    selector: 'pep-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    animations: [\n        trigger('slideInOut', [\n            state(\n                'close',\n                style({\n                    width: '0',\n                    padding: '0',\n                    border: 'none',\n                })\n            ),\n            state(\n                'open',\n                style({\n                    width: 'inherit',\n                })\n            ),\n            transition('close => open', animate('500ms ease-in-out')),\n            transition('open => close', animate('500ms ease-in-out')),\n        ]),\n        trigger('fadeInOut', [\n            state(\n                'fadeOut',\n                style({\n                    opacity: 0,\n                    width: '1px',\n                })\n            ),\n            state(\n                'fadeIn',\n                style({\n                    opacity: 1,\n                    width: '100%',\n                })\n            ),\n            transition(\n                'fadeOut => fadeIn',\n                animate(300, style({ opacity: 1, width: '100%' }))\n            ),\n            transition(\n                'fadeIn => fadeOut',\n                animate(350, style({ opacity: 0, width: '1px' }))\n            ),\n        ]),\n    ],\n})\n@Injectable()\nexport class PepSearchComponent implements OnInit, OnDestroy {\n    @Input() triggerOn: PepSearchTriggerType = 'click';\n    @Input() autoCompleteTop = 20;\n    private _autoCompleteValues = [];\n    @Input()\n    set autoCompleteValues(val: any[]) {\n        this.type = 'auto-complete';\n        this._autoCompleteValues = val;\n    }\n    get autoCompleteValues(): any[] {\n        return this._autoCompleteValues;\n    }\n\n    @Input() shrinkInSmallScreen = true;\n\n    @Input()\n    set value(val: string) {\n        this.createSearchControlIfNotExist();\n        this.searchControl.setValue(val);\n    }\n    get value(): string {\n        return this.searchControl.value || '';\n    }\n\n    private _searchControl: FormControl = null;\n    @Input()\n    set searchControl(ctrl: FormControl) {\n        this._searchControl = ctrl;\n    }\n    get searchControl(): FormControl {\n        return this._searchControl;\n    }\n\n    @Output()\n    search: EventEmitter<IPepSearchClickEvent> = new EventEmitter<IPepSearchClickEvent>();\n    @Output()\n    valueChange: EventEmitter<IPepSearchValueChangeEvent> = new EventEmitter<IPepSearchValueChangeEvent>();\n    @Output()\n    stateChange: EventEmitter<IPepSearchStateChangeEvent> = new EventEmitter<IPepSearchStateChangeEvent>();\n\n    @ViewChild('searchInput') searchInput: ElementRef;\n\n    private readonly _destroyed = new Subject<void>();\n    type: PepSearchType = 'regular';\n    fadeState: 'fadeOut' | 'fadeIn';\n    state: 'open' | 'close' = 'open';\n    lastValue = null;\n    showFloatSrcBtn = true;\n    isRtl = false;\n    isFloating = false;\n    screenSize: PepScreenSizeType;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n    }\n\n    ngOnInit(): void {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n\n            if (this.shrinkInSmallScreen) {\n                this.isFloating = this.screenSize > PepScreenSizeType.SM;\n            }\n\n            // Just for the smoote animation\n            if (this.isFloating) {\n                this.showFloatSrcBtn = false;\n\n                this.showFloatingButton();\n            } else {\n                this.fadeState = 'fadeIn';\n            }\n        });\n\n        this.isRtl = this.layoutService.isRtl();\n        this.createSearchControlIfNotExist();\n\n        this.searchControl.valueChanges\n            .pipe(debounceTime(1000), takeUntil(this._destroyed))\n            .subscribe((newValue) => {\n                if (this.type === 'auto-complete') {\n                    this.autoCompleteValues = [];\n                    if (\n                        newValue &&\n                        newValue.length > 2 &&\n                        newValue !== this.lastValue\n                    ) {\n                        this.valueChange.emit({\n                            value: newValue,\n                            top: this.autoCompleteTop,\n                        });\n                    }\n                } else if (this.type === 'regular') {\n                    if (this.triggerOn === 'keydown') {\n                        this.emitSearchClick();\n                    }\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.initSearch = this.initSearch.bind(this);\n    }\n\n    private createSearchControlIfNotExist(): void {\n        if (!this.searchControl) {\n            this.searchControl = new FormControl();\n        }\n    }\n\n    private blur() {\n        setTimeout(() => {\n            this.searchInput.nativeElement.blur();\n        }, 0);\n    }\n\n    private showFloatingButton() {\n        this.fadeState = 'fadeOut';\n\n        setTimeout(() => {\n            this.stateChange.emit({ state: 'close' });\n            this.showFloatSrcBtn = true;\n        }, 500);\n\n        // close the phone keyboard\n        this.blur();\n    }\n\n    initSearch() {\n        this.lastValue = null;\n        this.searchControl.setValue('');\n    }\n\n    onClearClicked(event: any) {\n        if (this.type === 'auto-complete') {\n            this.autoCompleteValues = [];\n        }\n\n        this.initSearch();\n        this.search.emit({ value: '' });\n\n        event.preventDefault();\n\n        if (this.isFloating) {\n            this.showFloatingButton();\n        }\n    }\n\n    onSearchClicked() {\n        if (this.isFloating) {\n            this.triggerSearch();\n        } else {\n            if (this.state === 'open') {\n                this.triggerSearch();\n            } else {\n                this.state = 'open';\n            }\n        }\n    }\n\n    onSearch(event: Event) {\n        // Stop the event propagation - cause we don't want fire two events.\n        event.stopPropagation();\n        this.triggerSearch();\n    }\n\n    triggerSearch() {\n        if (this.type === 'auto-complete') {\n            this.autoCompleteValues = [];\n        }\n\n        this.blur();\n        this.emitSearchClick();\n    }\n\n    animateSearch() {\n        if (this.state === 'open') {\n            this.fadeState =\n                this.fadeState === 'fadeOut' ? 'fadeIn' : 'fadeOut';\n            if (this.fadeState === 'fadeIn') {\n                this.stateChange.emit({ state: 'open' });\n                this.showFloatSrcBtn = false;\n                this.searchInput.nativeElement.focus();\n            }\n        } else {\n            this.fadeState = 'fadeIn';\n        }\n    }\n\n    // do the emit just when done because of the line break when closing the search\n    // component and showen all other components before\n    animateSearchDone() {\n        if (this.state !== 'open') {\n            this.stateChange.emit({ state: 'close' });\n        }\n    }\n\n    emitSearchClick() {\n        const value = this.searchControl.value;\n\n        if (value !== this.lastValue) {\n            this.lastValue = value;\n            this.search.emit({ value });\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 135,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "autoCompleteValues": {
                    "name": "autoCompleteValues",
                    "setSignature": {
                        "name": "autoCompleteValues",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "autoCompleteValues",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 94
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 105
                    }
                },
                "searchControl": {
                    "name": "searchControl",
                    "setSignature": {
                        "name": "searchControl",
                        "type": "void",
                        "args": [
                            {
                                "name": "ctrl",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "ctrl",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "searchControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 114
                    }
                }
            },
            "type": "component"
        },
        {
            "name": "PepSessionService",
            "id": "injectable-PepSessionService-c4d488b78a0baf1d2b913a0c01b23d9a",
            "file": "projects/ngx-lib/src/core/common/services/session.service.ts",
            "properties": [
                {
                    "name": "IDP_TOKEN_KEY",
                    "defaultValue": "'idp_token'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "PAPI_BASE_URL_KEY",
                    "defaultValue": "'pepperi.baseurl'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "WAPI_BASE_URL_KEY",
                    "defaultValue": "'serverHostURL'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIdpToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "getObject",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPapiBaseUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "getParseToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getWapiBaseUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "removeObject",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setObject",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "object",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PepJwtHelperService } from './jwt-helper.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepSessionService {\n    private readonly IDP_TOKEN_KEY = 'idp_token';\n    private readonly PAPI_BASE_URL_KEY = 'pepperi.baseurl';\n    // private readonly WAPI_TOKEN_KEY = 'auth_token';\n    private readonly WAPI_BASE_URL_KEY = 'serverHostURL'; // pepperi.webapibaseurl\n    // private readonly PEPPERI_CONSUMER_TOKEN: 'YY2pAwx6Exo2LWXrUllF9xzSfWF53wqc';\n\n    constructor(private jwtHelper: PepJwtHelperService) {}\n\n    // TODO: Maybe need to move this parse into the c'tor.\n    private getParseToken(): any {\n        // debugger;\n        // const tokenTest = \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjRiYTFjNzJmMTI3NThjYzEzMzg3ZWQ3YTBiZjNlODg3IiwidHlwIjoiSldUIn0.eyJuYmYiOjE1OTY3MjU5NjksImV4cCI6MTU5NjcyNjI2OSwiaXNzIjoiaHR0cHM6Ly9pZHAuc2FuZGJveC5wZXBwZXJpLmNvbSIsImF1ZCI6InBlcHBlcmkud2ViYXBwLmFwcC5zYW5kYm94LnBlcHBlcmkuY29tIiwiaWF0IjoxNTk2NzI1OTY5LCJhdF9oYXNoIjoiSGtmRXJ0Q2JzQ3NzOTVKUm05VmJTdyIsInNpZCI6IjJkNzFiM2JiNWUyNjRiNDk2Y2JmZDkzNmYyNTNhNWIzIiwic3ViIjoiZTJkZmQ0MDYtZDM4Yy00ZmYwLThhZGItMWRlMjI3ODIzYWEyIiwiYXV0aF90aW1lIjoxNTk2NzE4ODA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJkYW5pZWwgZGF2aWRvZmYiLCJlbWFpbCI6ImRhbmllbC5kQHBlcHBlcml0ZXN0LmNvbSIsInBlcHBlcmkuaWQiOjg2OTAzMDQsInBlcHBlcmkudXNlcnV1aWQiOiJlMmRmZDQwNi1kMzhjLTRmZjAtOGFkYi0xZGUyMjc4MjNhYTIiLCJwZXBwZXJpLmRpc3RyaWJ1dG9yaWQiOjMwMDEyMzUxLCJwZXBwZXJpLmRpc3RyaWJ1dG9ydXVpZCI6IjBiZDBlZDc5LThlOWUtNDRmYi05NmY0LThlNTNlZDljZTgyYiIsInBlcHBlcmkuZGF0YWNlbnRlciI6InNhbmRib3giLCJwZXBwZXJpLmtlZXBsb2dpbiI6ZmFsc2UsInBlcHBlcmkuaWRsZXRpbWV3ZWIiOjEyMCwidXBkYXRlZF9hdCI6MTU5NjcwMjgwMCwiZ2l2ZW5fbmFtZSI6ImRhbmllbCIsImZhbWlseV9uYW1lIjoiZGF2aWRvZmYiLCJwZXBwZXJpLmFwaW50YmFzZXVybCI6Imh0dHBzOi8vcmVzdGFwaS5zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS53ZWJhcGliYXNldXJsIjoiaHR0cHM6Ly93ZWJhcGkuc2FuZGJveC5wZXBwZXJpLmNvbS9WMTZfNTAvV2ViQXBwXzYiLCJwZXBwZXJpLnB1YmxpY2FwaWJhc2V1cmwiOiJodHRwczovL2FwaS1zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS5iYXNldXJsIjoiaHR0cHM6Ly9wYXBpLnNhbmRib3gucGVwcGVyaS5jb20vVjEuMCIsInBlcHBlcmkuZW1wbG95ZWV0eXBlIjoxLCJhbXIiOlsicHdkIl19.tNtZT3Cl4dMmTQftoaO2KP5BvHOlWGIP-5GpHrAhZoymBkxBSxpKprQGqr0ATtQlNHjX3gDV1W6k_avaSkyJgDiB2hcwr1tNRilasNuMzNV93gxLC9Oh_HdkIN4cZ0hahIcJvf_17PHpS8zD_MRwvGG_i45wRYJAtiGXChxCMzooethRsLOq5TEwuNbE3MxdjZOpImGYyytmsfdsdJRWQn1LQwQBt95ssuypcUzBsVB34P5XuFttjAe9dhTwHIfgsPG-VdfAWH_r-hVe834wKpKrplSWlC_MucgS0X4XP_tN4CtLnHO2wXKPsojqSTH2NQycfqh6YvT6rzRDBEdQIQ\";\n        const token = this.getIdpToken();\n        // token = token || tokenTest;\n\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        // const expirationDate = this.jwtHelper.getTokenExpirationDate(token);\n        // const isExpired = this.jwtHelper.isTokenExpired(token);\n\n        return decodedToken;\n    }\n\n    setObject<T>(key: string, object: T): void {\n        const stringifiedObject =\n            typeof object === 'string' || object instanceof String\n                ? object\n                : JSON.stringify(object);\n\n        sessionStorage.setItem(key, stringifiedObject.toString());\n    }\n\n    getObject<T = any>(key: string): T {\n        let result = null;\n        const item = sessionStorage.getItem(key);\n\n        try {\n            result = item ? (JSON.parse(item) as T) : item;\n        } catch {\n            result = item;\n        }\n\n        return result;\n    }\n\n    // setObject(key: string, value: string): void {\n    //     sessionStorage.setItem(key, value);\n    // }\n\n    // getObject(key: string): string | null {\n    //     return sessionStorage.getItem(key);\n    // }\n\n    removeObject(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    // getWapiToken(): string {\n    //     return this.getObject(this.WAPI_TOKEN_KEY);\n    // }\n\n    getWapiBaseUrl(): string {\n        return this.getObject(this.WAPI_BASE_URL_KEY);\n    }\n\n    getIdpToken(): string {\n        return this.getObject(this.IDP_TOKEN_KEY);\n    }\n\n    getPapiBaseUrl(): string {\n        const tokenObj = this.getParseToken();\n        return tokenObj ? tokenObj[this.PAPI_BASE_URL_KEY] : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "jwtHelper",
                        "type": "PepJwtHelperService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "jwtHelper",
                        "type": "PepJwtHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PepSideBarComponent",
            "id": "component-PepSideBarComponent-fd16a87c0fe41d15a67d206b79cf9808",
            "file": "projects/ngx-lib/side-bar/side-bar.component.ts",
            "properties": [
                {
                    "name": "isMouseIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "sideBarHeight",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sidenav",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidenav'"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mouseLeaveSideBar",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "openedChange",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSideBarHeight",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                }
            ],
            "description": "",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport {\n    PepCustomizationService,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { IPepSideBarStateChangeEvent } from './side-bar.model';\n// import { pepIconSystemClose } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-side-bar',\n    templateUrl: './side-bar.component.html',\n    styleUrls: ['./side-bar.component.scss'],\n})\n@Injectable()\nexport class PepSideBarComponent implements OnInit {\n    // @Input() showOnLargeScreens = true;\n    // @Input() sideBarButtons: Array<SideBarButton> = [];\n    @Input() showFooter = true;\n\n    @Output()\n    stateChange: EventEmitter<IPepSideBarStateChangeEvent> = new EventEmitter<IPepSideBarStateChangeEvent>();\n\n    @ViewChild('sidenav') sidenav: MatSidenav;\n\n    isMouseIn = false;\n    sideBarHeight = '100%';\n\n    screenSize: PepScreenSizeType;\n    PepScreenSizeType = PepScreenSizeType;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.open = this.open.bind(this);\n        this.hostElement.nativeElement.close = this.close.bind(this);\n    }\n\n    ngOnInit() {\n        // this.sideBarButtons.push(new SideBarButton('', () => this.close(), pepIconSystemClose.name, null, true, null, ''));\n    }\n\n    setSideBarHeight(event) {\n        const from = event.relatedTarget\n            ? event.relatedTarget\n            : event.fromElement;\n        const to = event.target ? event.target : event.toElement;\n\n        if (typeof from === 'undefined' || typeof to === 'undefined') {\n            return;\n        }\n        this.isMouseIn = true;\n\n        this.sideBarHeight = window.innerHeight - to.offsetTop + 'px';\n    }\n\n    mouseLeaveSideBar(event) {\n        const from = event.relatedTarget\n            ? event.relatedTarget\n            : event.fromElement;\n        const to = event.target ? event.target : event.toElement;\n\n        if (typeof from === 'undefined' || typeof to === 'undefined') {\n            return;\n        }\n        this.sideBarHeight = '100%';\n        this.isMouseIn = false;\n    }\n\n    open() {\n        if (this.sidenav) {\n            this.sidenav.open();\n        }\n    }\n\n    close() {\n        if (this.sidenav) {\n            this.sidenav.close();\n        }\n    }\n\n    toggle() {\n        if (this.sidenav) {\n            const isOpen = this.sidenav.opened;\n            this.sidenav.toggle();\n        }\n    }\n\n    openedChange(isOpen: boolean) {\n        this.stateChange.emit({ state: isOpen ? 'open' : 'close' });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "component"
        },
        {
            "name": "PepUtilitiesService",
            "id": "injectable-PepUtilitiesService-23d89d4026e6fcd0f278437b21556bf7",
            "file": "projects/ngx-lib/src/core/common/services/utilities.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getSvgElementFromString",
                    "args": [
                        {
                            "name": "document",
                            "type": ""
                        },
                        {
                            "name": "svgContent",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SVGElement",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "document",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "svgContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJsonString",
                    "args": [
                        {
                            "name": "str",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValueHtml",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseDate",
                    "args": [
                        {
                            "name": "dateStr",
                            "type": "string"
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringifyDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date"
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showTime",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepUtilitiesService {\n    parseDate(dateStr: string, showTime = false): Date {\n        let retVal: Date = null;\n        if (dateStr !== '') {\n            retVal = new Date(dateStr);\n\n            // Convert to date with no offset.\n            const dateText = dateStr.split('-');\n            if (dateText.length === 3 && !showTime) {\n                const year = Number(dateText[0]);\n                const month = Number(dateText[1]) - 1;\n                const day = Number(dateText[2]);\n                retVal = new Date(year, month, day);\n            }\n        }\n        if (retVal && isNaN(retVal.getTime())) {\n            retVal = null;\n        }\n        return retVal;\n    }\n\n    stringifyDate(date: Date, showTime = false): string {\n        if (date) {\n            if (showTime) {\n                return date.toISOString(); // include - offset\n            } else {\n                const dateText = [];\n                dateText.push(\n                    date.getFullYear(),\n                    '-',\n                    date.getMonth() + 1,\n                    '-',\n                    date.getDate()\n                );\n                return dateText.join('');\n            }\n        } else {\n            return '';\n        }\n\n        // if (date) {\n        //     const dateText = [];\n        //     dateText.push(\n        //         date.getFullYear(),\n        //         '-',\n        //         date.getMonth() + 1,\n        //         '-',\n        //         date.getDate()\n        //     );\n\n        //     if (showTime) {\n        //         dateText.push(\n        //             'T',\n        //             (date.getHours() < 10 ? '0' : '') + date.getHours(),\n        //             ':',\n        //             (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),\n        //             ':',\n        //             (date.getSeconds() < 10 ? '0' : '') + date.getSeconds(),\n        //             'Z'\n        //         );\n        //     }\n\n        //     return dateText.join('');\n        // } else {\n        //     return '';\n        // }\n    }\n\n    // stringifyDateWithOffset(date: Date, showTime = false): string {\n    //     if (showTime) {\n    //         const offsetMinutes = new Date().getTimezoneOffset() * -1;\n    //         date.setMinutes(date.getMinutes() - offsetMinutes);\n    //     }\n\n    //     return this.stringifyDate(date, showTime);\n    // }\n\n    isValueHtml(value: string): boolean {\n        let res = false;\n        const REGEXP = /<\\/?[a-z][\\s\\S]*>/i;\n        res = REGEXP.test(value);\n\n        return res;\n    }\n\n    isJsonString(str: string): boolean {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n\n    getSvgElementFromString(document, svgContent: string): SVGElement {\n        const div = document.createElement('DIV');\n        div.innerHTML = svgContent;\n        return (\n            div.querySelector('svg') ||\n            document.createElementNS('http://www.w3.org/2000/svg', 'path')\n        );\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PepWindowScrollingService",
            "id": "injectable-PepWindowScrollingService-3041387415e31013a64ed0be23c2ec62",
            "file": "projects/ngx-lib/src/core/common/services/window-scrolling.service.ts",
            "properties": [
                {
                    "name": "styleTag",
                    "type": "HTMLStyleElement",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildStyleElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLStyleElement",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepWindowScrollingService {\n    // Inject a STYLE element for overrides the scroll behavior, this way we can add | remove it in order to the behavior.\n    private styleTag: HTMLStyleElement;\n\n    constructor() {\n        this.styleTag = this.buildStyleElement();\n    }\n\n    // Disable the scrolling feature on the main viewport.\n    public disable(): void {\n        document.body.appendChild(this.styleTag);\n    }\n\n    // Re-enable the scrolling feature on the main viewport.\n    public enable(): void {\n        document.body.removeChild(this.styleTag);\n    }\n\n    // Return a Style element that will prevent scrolling on the body.\n    private buildStyleElement(): HTMLStyleElement {\n        const style = document.createElement('style');\n\n        style.type = 'text/css';\n        style.setAttribute(\n            'data-debug',\n            'Injected by WindowScrolling service.'\n        );\n        style.textContent = `\n            body {\n                overflow: hidden !important ;\n            }\n        `;\n\n        return style;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ValidatorService",
            "id": "injectable-ValidatorService-7bcab0a65993c3aab1858979ad0fe3e6",
            "file": "projects/ngx-lib/src/core/common/services/validator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allowableCharactersValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "allowableCharactersWithoutNumberValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "allowableCharactersWithoutSpecialValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "checkEmails",
                    "args": [
                        {
                            "name": "separator",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "separator",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "isEqual",
                    "args": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isGreaterThan",
                    "args": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLessThan",
                    "args": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "FormControl | AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numberValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "zipCodeValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 84
                }
            ],
            "description": "",
            "sourceCode": "import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Injectable } from '@angular/core';\nimport {\n    AbstractControl,\n    ValidatorFn,\n    FormControl,\n    Validators,\n} from '@angular/forms';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ValidatorService {\n    isEqual(target: FormControl | AbstractControl): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            if (control.value) {\n                return target.value !== control.value\n                    ? { equal: { value: true } }\n                    : null;\n            } else {\n                return null;\n            }\n        };\n    }\n\n    isGreaterThan(target: FormControl | AbstractControl): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            if (control.value && typeof target.value === 'number') {\n                return target.value > control.value\n                    ? { greater: { value: true } }\n                    : null;\n            } else if (control.value && typeof target.value === 'string') {\n                const controlValueNumer = coerceNumberProperty(control.value);\n                const targetValueNumer = coerceNumberProperty(target.value);\n\n                return targetValueNumer > controlValueNumer\n                    ? { greater: { value: true } }\n                    : null;\n            } else {\n                return null;\n            }\n        };\n    }\n\n    isLessThan(target: FormControl | AbstractControl): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            if (control.value && typeof target.value === 'number') {\n                return target.value < control.value\n                    ? { less: { value: true } }\n                    : null;\n            } else if (control.value && typeof target.value === 'string') {\n                const controlValueNumer = coerceNumberProperty(control.value);\n                const targetValueNumer = coerceNumberProperty(target.value);\n\n                return targetValueNumer < controlValueNumer\n                    ? { less: { value: true } }\n                    : null;\n            } else {\n                return null;\n            }\n        };\n    }\n\n    checkEmails(separator?: string): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            if (control.value) {\n                const emails = control.value.split(separator ? separator : ',');\n                const ctrl = new FormControl('', [\n                    Validators.required,\n                    Validators.email,\n                ]);\n                const result = emails.every((val: string) => {\n                    ctrl.setValue(val);\n                    return ctrl.valid;\n                });\n\n                return !result ? { emails: { value: true } } : null;\n            } else {\n                return null;\n            }\n        };\n    }\n\n    zipCodeValidator(): ValidatorFn {\n        return Validators.pattern(/^(\\d{5}(-\\d{4})?|[A-Z]\\d[A-Z] *\\d[A-Z]\\d)$/);\n    }\n\n    allowableCharactersValidator(): ValidatorFn {\n        return Validators.pattern(\n            /^[a-zA-Z0-9`~!@#$%^&*()_+}{|\":?><,./;'\\\\\\]\\[=\\- ]+$/\n        );\n    }\n\n    allowableCharactersWithoutNumberValidator(): ValidatorFn {\n        return Validators.pattern(\n            /^[a-zA-Z`~!@#$%^&*()_+}{|\":?><,./;'\\\\\\]\\[=\\- ]+$/\n        );\n    }\n\n    allowableCharactersWithoutSpecialValidator(): ValidatorFn {\n        return Validators.pattern(/^[a-zA-Z0-9 ]+$/);\n    }\n\n    dateValidator(): ValidatorFn {\n        return Validators.pattern(\n            /^(?:(0[1-9]|1[012])[\\/.](0[1-9]|[12][0-9]|3[01])[\\/.](19|20)[0-9]{2})$/\n        );\n    }\n\n    numberValidator(): ValidatorFn {\n        return Validators.pattern(/^[0-9]*$/);\n    }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "FieldLayout",
            "id": "class-FieldLayout-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<FieldLayout>"
                    }
                ],
                "line": 99,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<FieldLayout>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "Height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "LineNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "Width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "X",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "XAlignment",
                    "type": "X_ALIGNMENT_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "Y",
                    "type": "Y_ALIGNMENT_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "YAlignment",
                    "type": "Y_ALIGNMENT_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepListChooserOption",
            "id": "class-IPepListChooserOption-948821535414856bdc617f6f19df7002",
            "file": "projects/ngx-lib/list/list-chooser.component.ts",
            "type": "class",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { PepBreadCrumbItem } from '@pepperi-addons/ngx-lib/bread-crumbs';\n\nexport class IPepListChooserOption {\n    key: string;\n    text: string;\n}\n\nexport interface IPepListChooserOptionChangeEvent {\n    source: IPepListChooserOption;\n}\n\n@Component({\n    selector: 'pep-list-chooser',\n    templateUrl: './list-chooser.component.html',\n    styleUrls: ['./list-chooser.component.scss'],\n})\n@Injectable()\nexport class PepListChooserComponent {\n    private _options: Array<IPepListChooserOption> = null;\n    @Input()\n    set options(value: Array<IPepListChooserOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.text };\n        });\n\n        if (this.menuItems?.length === 1) {\n            this.breadCrumbsItems = [];\n            this.breadCrumbsItems.push(\n                new PepBreadCrumbItem({\n                    key: this.menuItems[0].key,\n                    text: this.menuItems[0].text,\n                })\n            );\n        }\n    }\n    get options(): Array<IPepListChooserOption> {\n        return this._options;\n    }\n\n    private _currentList: IPepListChooserOption = null;\n    @Input()\n    set currentList(value: IPepListChooserOption) {\n        this._currentList = value;\n        this.currentItem = { key: value.key, text: value.text };\n    }\n    get currentList(): IPepListChooserOption {\n        return this._currentList;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n\n    @Output()\n    change: EventEmitter<IPepListChooserOptionChangeEvent> = new EventEmitter<IPepListChooserOptionChangeEvent>();\n\n    breadCrumbsItems: Array<PepBreadCrumbItem> = null;\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        const currentList = this.options.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: currentList });\n    }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepListPagerChangeEvent",
            "id": "class-IPepListPagerChangeEvent-4f074f2efb71a87bf888378b289a1988",
            "file": "projects/ngx-lib/list/list-pager.component.ts",
            "type": "class",
            "sourceCode": "import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Injectable,\n    Input,\n    Output,\n} from '@angular/core';\nimport { IPepFieldValueChangeEvent } from '@pepperi-addons/ngx-lib';\nimport { DEFAULT_PAGE_SIZE } from './list.model';\n\nexport class IPepListPagerChangeEvent {\n    pageIndex: number;\n    previousPageIndex: number;\n    pageSize: number;\n    length: number;\n}\n\n@Component({\n    selector: 'pep-list-pager',\n    templateUrl: './list-pager.component.html',\n    styleUrls: ['./list-pager.component.scss'],\n})\n@Injectable()\nexport class PepListPagerComponent {\n    @Input() disabled = false;\n    private _pageIndex = 0;\n    @Input()\n    set pageIndex(value: number) {\n        this.setPageIndex(value);\n    }\n    get pageIndex(): number {\n        return this._pageIndex;\n    }\n\n    @Input() length = 0;\n    @Input() pageSize = DEFAULT_PAGE_SIZE;\n\n    @Output()\n    pagerChange: EventEmitter<IPepListPagerChangeEvent> = new EventEmitter<IPepListPagerChangeEvent>();\n\n    constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n    nextPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex + 1);\n    }\n\n    previousPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex - 1);\n    }\n\n    firstPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(0);\n    }\n\n    lastPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.getNumberOfPages() - 1);\n    }\n\n    hasPreviousPage(): boolean {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n\n    hasNextPage(): boolean {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n\n    getNumberOfPages(): number {\n        if (!this.pageSize) {\n            return 0;\n        }\n\n        return Math.ceil(this.length / this.pageSize);\n    }\n\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n\n    onValueChange(event: IPepFieldValueChangeEvent) {\n        const pageNumber = coerceNumberProperty(event.value);\n        this.setPageIndex(pageNumber - 1); // - 1 to convert number into index.\n    }\n\n    private setPageIndex(newIndex: number) {\n        const previousPageIndex = this.pageIndex;\n\n        if (newIndex >= 0 && newIndex < this.getNumberOfPages()) {\n            this._pageIndex = newIndex;\n        } else {\n            this._pageIndex = 0;\n        }\n\n        if (this.pageIndex !== previousPageIndex) {\n            this._emitChangeEvent(previousPageIndex);\n        }\n    }\n\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitChangeEvent(previousPageIndex: number) {\n        this.pagerChange.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "length",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "previousPageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepListSortingOption",
            "id": "class-IPepListSortingOption-bfb1e43a1d18c5a2449d5363e10a37b1",
            "file": "projects/ngx-lib/list/list-sorting.component.ts",
            "type": "class",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuItemClickEvent,\n    PepMenuItem,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepListSortingChangeEvent } from './list.model';\n\nexport class IPepListSortingOption {\n    sortBy: string;\n    title: string;\n    iconName?: string;\n    isAsc?: boolean;\n}\n\nexport interface IPepListSortingOptionChangeEvent {\n    source: IPepListSortingOption;\n}\n\n@Component({\n    selector: 'pep-list-sorting',\n    templateUrl: './list-sorting.component.html',\n    styleUrls: ['./list-sorting.component.scss'],\n})\n@Injectable()\nexport class PepListSortingComponent implements OnInit {\n    private _options: Array<IPepListSortingOption> = null;\n    @Input()\n    set options(value: Array<IPepListSortingOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.sortBy, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get options(): Array<IPepListSortingOption> {\n        return this._options;\n    }\n\n    private _currentSorting: IPepListSortingOption = null;\n    @Input()\n    set currentSorting(value: IPepListSortingOption) {\n        this._currentSorting = value;\n        this.currentItem = {\n            key: value.sortBy,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentSorting(): IPepListSortingOption {\n        return this._currentSorting;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n    @Output()\n    change: EventEmitter<IPepListSortingOptionChangeEvent> = new EventEmitter<IPepListSortingOptionChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (\n            this.currentSorting === null &&\n            this.options &&\n            this.options.length > 0\n        ) {\n            this.currentSorting = this.options[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentSorting = this.options.find(\n            (sorting) => sorting.sortBy === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: this.currentSorting });\n    }\n}\n",
            "properties": [
                {
                    "name": "iconName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isAsc",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sortBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepListView",
            "id": "class-IPepListView-707ba6227b2d128e0720b514366c8691",
            "file": "projects/ngx-lib/list/list-views.component.ts",
            "type": "class",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n} from '@angular/core';\nimport { PepSizeType, PepStyleType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\nexport type PepListViewDisplayType = 'menu' | 'buttons';\n\nexport class IPepListView {\n    key: string;\n    iconName: string;\n    title?: string;\n}\n\nexport interface IListViewChangeEvent {\n    source: IPepListView;\n}\n\n@Component({\n    selector: 'pep-list-views',\n    templateUrl: './list-views.component.html',\n    styleUrls: ['./list-views.component.scss'],\n})\n@Injectable()\nexport class PepListViewsComponent implements OnInit {\n    private _views: Array<IPepListView> = null;\n    @Input()\n    set views(value: Array<IPepListView>) {\n        this._views = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get views(): Array<IPepListView> {\n        return this._views;\n    }\n\n    private _currentView: IPepListView = null;\n    @Input()\n    set currentView(value: IPepListView) {\n        this._currentView = value;\n        this.currentItem = {\n            key: value.key,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentView(): IPepListView {\n        return this._currentView;\n    }\n\n    @Input() displayType: PepListViewDisplayType = 'buttons';\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n\n    @Output()\n    change: EventEmitter<IListViewChangeEvent> = new EventEmitter<IListViewChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (this.currentView === null && this.views && this.views.length > 0) {\n            this.currentView = this.views[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentView = this.views.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.raiseChangeEvent();\n    }\n\n    onViewChanged(view: IPepListView): void {\n        this.currentView = view;\n        this.raiseChangeEvent();\n    }\n\n    private raiseChangeEvent(): void {\n        this.change.emit({ source: this.currentView });\n    }\n}\n",
            "properties": [
                {
                    "name": "iconName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepSmartFilterOperator",
            "id": "class-IPepSmartFilterOperator-b25f2e85698a9a75dc389ff658153381",
            "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
            "type": "class",
            "sourceCode": "import {\n    PepSmartFilterComponentType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\nexport class IPepSmartFilterOperator {\n    id: PepSmartFilterOperatorType;\n    name: string;\n    short: string;\n    componentType: PepSmartFilterComponentType[];\n}\n\nconst Equals: IPepSmartFilterOperator = {\n    id: 'eq',\n    name: 'EQUAL',\n    short: '=',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n};\n\nconst NotEqual: IPepSmartFilterOperator = {\n    id: 'neq',\n    name: 'NOT_EQUAL',\n    short: '<>',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n};\n\nconst LessThan: IPepSmartFilterOperator = {\n    id: 'lt',\n    name: 'LESS_THEN',\n    short: '<',\n    componentType: ['number'],\n};\n\n// const LessThanOrEquals: IPepSmartFilterOperator = {\n//     id: 'ltoe',\n//     name: 'LESS_THEN_OR_EQUAL',\n//     short: '<=',\n//     type: ['number'],\n// };\n\nconst GreaterThan: IPepSmartFilterOperator = {\n    id: 'gt',\n    name: 'GREATER_THEN',\n    short: '>',\n    componentType: ['number'],\n};\n\n// const GreaterThanOrEquals: IPepSmartFilterOperator = {\n//     id: 'gtoe',\n//     name: 'GREATER_THEN_OR_EQUAL',\n//     short: '>=',\n//     type: ['number'],\n// };\n\nconst NumberRange: IPepSmartFilterOperator = {\n    id: 'numberRange',\n    name: 'NUMBER_RANGE',\n    short: 'Range',\n    componentType: ['number'],\n};\n\n// const Contains: Operator = {\n//     id: 'contains',\n//     name: 'Contains',\n//     short: 'Contains',\n//     type: ['text'],\n// };\n\n// const BeginsWith: Operator = {\n//     id: 'beginsWith',\n//     name: 'Begins With',\n//     short: 'Begins With',\n//     type: ['text'],\n// };\n\n// const EndsWith: Operator = {\n//     id: 'endsWith',\n//     name: 'Ends With',\n//     short: 'End With',\n//     type: ['text'],\n// };\n\n// const After: Operator = {\n//     id: 'after',\n//     name: 'After',\n//     short: 'After',\n//     type: ['date'],\n// };\n\n// const Before: Operator = {\n//     id: 'before',\n//     name: 'Before',\n//     short: 'Before',\n//     type: ['date'],\n// };\n\nconst InTheLast: IPepSmartFilterOperator = {\n    id: 'inTheLast',\n    name: 'IN_THE_LAST',\n    short: 'In the last',\n    componentType: ['date'],\n};\n\nconst Today: IPepSmartFilterOperator = {\n    id: 'today',\n    name: 'TODAY',\n    short: 'Today',\n    componentType: ['date'],\n};\n\nconst ThisWeek: IPepSmartFilterOperator = {\n    id: 'thisWeek',\n    name: 'THIS_WEEK',\n    short: 'This week',\n    componentType: ['date'],\n};\n\nconst ThisMonth: IPepSmartFilterOperator = {\n    id: 'thisMonth',\n    name: 'THIS_MONTH',\n    short: 'This month',\n    componentType: ['date'],\n};\n\nconst DateRange: IPepSmartFilterOperator = {\n    id: 'dateRange',\n    name: 'DATE_RANGE',\n    short: 'Range',\n    componentType: ['date'],\n};\n\nconst DueIn: IPepSmartFilterOperator = {\n    id: 'dueIn',\n    name: 'DUE_IN',\n    short: 'Due in',\n    componentType: ['date'],\n};\n\nconst On: IPepSmartFilterOperator = {\n    id: 'on',\n    name: 'ON',\n    short: 'On',\n    componentType: ['date'],\n};\n\nconst NotInTheLast: IPepSmartFilterOperator = {\n    id: 'notInTheLast',\n    name: 'NOT_IN_THE_LAST',\n    short: 'Not in the last',\n    componentType: ['date'],\n};\n\nconst NotDueIn: IPepSmartFilterOperator = {\n    id: 'notDueIn',\n    name: 'NOT_DUE_IN',\n    short: 'Not due in',\n    componentType: ['date'],\n};\n\nconst IsEmpty: IPepSmartFilterOperator = {\n    id: 'isEmpty',\n    name: 'IS_EMPTY',\n    short: 'Is empty',\n    componentType: ['date'],\n};\n\nconst IsNotEmpty: IPepSmartFilterOperator = {\n    id: 'isNotEmpty',\n    name: 'IS_NOT_EMPTY',\n    short: 'Is not empty',\n    componentType: ['date'],\n};\n\nconst In: IPepSmartFilterOperator = {\n    id: 'in',\n    name: 'IN',\n    short: 'In',\n    componentType: ['multi-select'],\n};\n\nexport const PepSmartFilterOperators = {\n    Equals: Equals,\n    NotEqual: NotEqual,\n    LessThan: LessThan,\n    // LessThanOrEquals: LessThanOrEquals,\n    GreaterThan: GreaterThan,\n    // GreaterThanOrEquals: GreaterThanOrEquals,\n    NumberRange: NumberRange,\n    // Contains: Contains,\n    // BeginsWith: BeginsWith,\n    // EndsWith: EndsWith,\n    // After: After,\n    // Before: Before,\n    InTheLast: InTheLast,\n    Today: Today,\n    ThisWeek: ThisWeek,\n    ThisMonth: ThisMonth,\n    DateRange: DateRange,\n    DueIn: DueIn,\n    On: On,\n    NotInTheLast: NotInTheLast,\n    NotDueIn: NotDueIn,\n    IsEmpty: IsEmpty,\n    IsNotEmpty: IsNotEmpty,\n    In: In,\n};\n\nexport class IPepSmartFilterOperatorUnit {\n    id: PepSmartFilterOperatorUnitType;\n    name: string;\n    componentType: PepSmartFilterComponentType[];\n}\n\nconst Days: IPepSmartFilterOperatorUnit = {\n    id: 'days',\n    name: 'DAYS',\n    componentType: ['date'],\n};\n\nconst Weeks: IPepSmartFilterOperatorUnit = {\n    id: 'weeks',\n    name: 'WEEKS',\n    componentType: ['date'],\n};\n\nconst Months: IPepSmartFilterOperatorUnit = {\n    id: 'months',\n    name: 'MONTHS',\n    componentType: ['date'],\n};\n\nconst Years: IPepSmartFilterOperatorUnit = {\n    id: 'years',\n    name: 'YEARS',\n    componentType: ['date'],\n};\n\nexport const PepSmartFilterOperatorUnits = {\n    Days: Days,\n    Weeks: Weeks,\n    Months: Months,\n    Years: Years,\n};\n",
            "properties": [
                {
                    "name": "componentType",
                    "type": "PepSmartFilterComponentType[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "PepSmartFilterOperatorType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "short",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPepSmartFilterOperatorUnit",
            "id": "class-IPepSmartFilterOperatorUnit-b25f2e85698a9a75dc389ff658153381",
            "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
            "type": "class",
            "sourceCode": "import {\n    PepSmartFilterComponentType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\nexport class IPepSmartFilterOperator {\n    id: PepSmartFilterOperatorType;\n    name: string;\n    short: string;\n    componentType: PepSmartFilterComponentType[];\n}\n\nconst Equals: IPepSmartFilterOperator = {\n    id: 'eq',\n    name: 'EQUAL',\n    short: '=',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n};\n\nconst NotEqual: IPepSmartFilterOperator = {\n    id: 'neq',\n    name: 'NOT_EQUAL',\n    short: '<>',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n};\n\nconst LessThan: IPepSmartFilterOperator = {\n    id: 'lt',\n    name: 'LESS_THEN',\n    short: '<',\n    componentType: ['number'],\n};\n\n// const LessThanOrEquals: IPepSmartFilterOperator = {\n//     id: 'ltoe',\n//     name: 'LESS_THEN_OR_EQUAL',\n//     short: '<=',\n//     type: ['number'],\n// };\n\nconst GreaterThan: IPepSmartFilterOperator = {\n    id: 'gt',\n    name: 'GREATER_THEN',\n    short: '>',\n    componentType: ['number'],\n};\n\n// const GreaterThanOrEquals: IPepSmartFilterOperator = {\n//     id: 'gtoe',\n//     name: 'GREATER_THEN_OR_EQUAL',\n//     short: '>=',\n//     type: ['number'],\n// };\n\nconst NumberRange: IPepSmartFilterOperator = {\n    id: 'numberRange',\n    name: 'NUMBER_RANGE',\n    short: 'Range',\n    componentType: ['number'],\n};\n\n// const Contains: Operator = {\n//     id: 'contains',\n//     name: 'Contains',\n//     short: 'Contains',\n//     type: ['text'],\n// };\n\n// const BeginsWith: Operator = {\n//     id: 'beginsWith',\n//     name: 'Begins With',\n//     short: 'Begins With',\n//     type: ['text'],\n// };\n\n// const EndsWith: Operator = {\n//     id: 'endsWith',\n//     name: 'Ends With',\n//     short: 'End With',\n//     type: ['text'],\n// };\n\n// const After: Operator = {\n//     id: 'after',\n//     name: 'After',\n//     short: 'After',\n//     type: ['date'],\n// };\n\n// const Before: Operator = {\n//     id: 'before',\n//     name: 'Before',\n//     short: 'Before',\n//     type: ['date'],\n// };\n\nconst InTheLast: IPepSmartFilterOperator = {\n    id: 'inTheLast',\n    name: 'IN_THE_LAST',\n    short: 'In the last',\n    componentType: ['date'],\n};\n\nconst Today: IPepSmartFilterOperator = {\n    id: 'today',\n    name: 'TODAY',\n    short: 'Today',\n    componentType: ['date'],\n};\n\nconst ThisWeek: IPepSmartFilterOperator = {\n    id: 'thisWeek',\n    name: 'THIS_WEEK',\n    short: 'This week',\n    componentType: ['date'],\n};\n\nconst ThisMonth: IPepSmartFilterOperator = {\n    id: 'thisMonth',\n    name: 'THIS_MONTH',\n    short: 'This month',\n    componentType: ['date'],\n};\n\nconst DateRange: IPepSmartFilterOperator = {\n    id: 'dateRange',\n    name: 'DATE_RANGE',\n    short: 'Range',\n    componentType: ['date'],\n};\n\nconst DueIn: IPepSmartFilterOperator = {\n    id: 'dueIn',\n    name: 'DUE_IN',\n    short: 'Due in',\n    componentType: ['date'],\n};\n\nconst On: IPepSmartFilterOperator = {\n    id: 'on',\n    name: 'ON',\n    short: 'On',\n    componentType: ['date'],\n};\n\nconst NotInTheLast: IPepSmartFilterOperator = {\n    id: 'notInTheLast',\n    name: 'NOT_IN_THE_LAST',\n    short: 'Not in the last',\n    componentType: ['date'],\n};\n\nconst NotDueIn: IPepSmartFilterOperator = {\n    id: 'notDueIn',\n    name: 'NOT_DUE_IN',\n    short: 'Not due in',\n    componentType: ['date'],\n};\n\nconst IsEmpty: IPepSmartFilterOperator = {\n    id: 'isEmpty',\n    name: 'IS_EMPTY',\n    short: 'Is empty',\n    componentType: ['date'],\n};\n\nconst IsNotEmpty: IPepSmartFilterOperator = {\n    id: 'isNotEmpty',\n    name: 'IS_NOT_EMPTY',\n    short: 'Is not empty',\n    componentType: ['date'],\n};\n\nconst In: IPepSmartFilterOperator = {\n    id: 'in',\n    name: 'IN',\n    short: 'In',\n    componentType: ['multi-select'],\n};\n\nexport const PepSmartFilterOperators = {\n    Equals: Equals,\n    NotEqual: NotEqual,\n    LessThan: LessThan,\n    // LessThanOrEquals: LessThanOrEquals,\n    GreaterThan: GreaterThan,\n    // GreaterThanOrEquals: GreaterThanOrEquals,\n    NumberRange: NumberRange,\n    // Contains: Contains,\n    // BeginsWith: BeginsWith,\n    // EndsWith: EndsWith,\n    // After: After,\n    // Before: Before,\n    InTheLast: InTheLast,\n    Today: Today,\n    ThisWeek: ThisWeek,\n    ThisMonth: ThisMonth,\n    DateRange: DateRange,\n    DueIn: DueIn,\n    On: On,\n    NotInTheLast: NotInTheLast,\n    NotDueIn: NotDueIn,\n    IsEmpty: IsEmpty,\n    IsNotEmpty: IsNotEmpty,\n    In: In,\n};\n\nexport class IPepSmartFilterOperatorUnit {\n    id: PepSmartFilterOperatorUnitType;\n    name: string;\n    componentType: PepSmartFilterComponentType[];\n}\n\nconst Days: IPepSmartFilterOperatorUnit = {\n    id: 'days',\n    name: 'DAYS',\n    componentType: ['date'],\n};\n\nconst Weeks: IPepSmartFilterOperatorUnit = {\n    id: 'weeks',\n    name: 'WEEKS',\n    componentType: ['date'],\n};\n\nconst Months: IPepSmartFilterOperatorUnit = {\n    id: 'months',\n    name: 'MONTHS',\n    componentType: ['date'],\n};\n\nconst Years: IPepSmartFilterOperatorUnit = {\n    id: 'years',\n    name: 'YEARS',\n    componentType: ['date'],\n};\n\nexport const PepSmartFilterOperatorUnits = {\n    Days: Days,\n    Weeks: Weeks,\n    Months: Months,\n    Years: Years,\n};\n",
            "properties": [
                {
                    "name": "componentType",
                    "type": "PepSmartFilterComponentType[]",
                    "optional": false,
                    "description": "",
                    "line": 225
                },
                {
                    "name": "id",
                    "type": "PepSmartFilterOperatorUnitType",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KeyValuePair",
            "id": "class-KeyValuePair-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "Key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 253
                },
                {
                    "name": "Value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 254
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectsData",
            "id": "class-ObjectsData-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 223
            },
            "properties": [
                {
                    "name": "DateFilter",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "ErrorCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 215
                },
                {
                    "name": "ErrorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "Rows",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "SearchCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "SecSmartSearchList",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "SmartSearchList",
                    "type": "Array<SmartSearchResponse>",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "Success",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 221
                },
                {
                    "name": "TotalRows",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 222
                },
                {
                    "name": "UIControl",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 223
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectsDataRow",
            "id": "class-ObjectsDataRow-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "AdditionalData",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "BackgroundColor",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "ExtraInfo",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "Fields",
                    "type": "Array<ObjectsDataRowCell>",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "IsEditable",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "IsSelectableForActions",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "MainAction",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "Profile",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "Type",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "UID",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 191
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectsDataRowCell",
            "id": "class-ObjectsDataRowCell-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "Accessory",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "AdditionalValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "ApiName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "BackgroundColor",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "Enabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "FieldType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "FormattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "GroupFields",
                    "type": "Array<ObjectsDataRowCell>",
                    "optional": true,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "Highlighted",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "NotificationInfo",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "OptionalValues",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": true,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "ReferenceObjectInternalType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "ReferenceObjectSubType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "ReferenceObjectType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "TextColor",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "UiPageKey",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "Value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "Visible",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 178
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectSingleData",
            "id": "class-ObjectSingleData-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "uiControl",
                        "type": "UIControl",
                        "defaultValue": "null"
                    },
                    {
                        "name": "data",
                        "type": "ObjectsDataRow",
                        "defaultValue": "null"
                    }
                ],
                "line": 201,
                "jsdoctags": [
                    {
                        "name": "uiControl",
                        "type": "UIControl",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ObjectsDataRow",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "Data",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "ErrorCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 196
                },
                {
                    "name": "ErrorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "IsEditable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 198
                },
                {
                    "name": "Success",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 199
                },
                {
                    "name": "Type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 200
                },
                {
                    "name": "UIControl",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 201
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepAddressField",
            "id": "class-PepAddressField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepAddressFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 411,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepAddressFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'address'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 410
                },
                {
                    "name": "groupFields",
                    "defaultValue": "null",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 411
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepAttachmentField",
            "id": "class-PepAttachmentField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 164,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'attachment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepBreadCrumbItem",
            "id": "class-PepBreadCrumbItem-ff55ebc69ace21c2be7599922710a91d",
            "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
            "type": "class",
            "sourceCode": "export type PepBreadCrumbsDisplayType = 'label' | 'items';\n\nexport class PepBreadCrumbItem {\n    key: string;\n    text: string;\n    title?: string;\n    disabled?: boolean = false;\n\n    constructor(data: Partial<PepBreadCrumbItem>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepBreadCrumbItemClickEvent {\n    source: PepBreadCrumbItem;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<PepBreadCrumbItem>"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<PepBreadCrumbItem>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepButton",
            "id": "class-PepButton-a5e509206df878951ebfd5b907e3772b",
            "file": "projects/ngx-lib/button/button.model.ts",
            "type": "class",
            "sourceCode": "export class PepButton {\n    key: string;\n    value?: string;\n    class?: string;\n    icon?: string;\n    callback?: (action: IPepButtonClickEvent) => void;\n\n    constructor(data: Partial<PepButton>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepButtonClickEvent {\n    source: PepButton;\n    event?: Event;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<PepButton>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<PepButton>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "callback",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "class",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepCheckboxField",
            "id": "class-PepCheckboxField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepCheckboxFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 368,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepCheckboxFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'checkbox'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 367
                },
                {
                    "name": "type",
                    "type": "PepCheckboxFieldType",
                    "optional": false,
                    "description": "",
                    "line": 368
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 376,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepDateField",
            "id": "class-PepDateField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepDateFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 353,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepDateFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'date'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 352
                },
                {
                    "name": "type",
                    "type": "PepDateFieldType",
                    "optional": false,
                    "description": "",
                    "line": 353
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepDialogActionButton",
            "id": "class-PepDialogActionButton-df77d499c804468fa83642ec34c36364",
            "file": "projects/ngx-lib/dialog/dialog.model.ts",
            "type": "class",
            "sourceCode": "export type PepDialogSizeType =\n    | 'inline'\n    | 'small'\n    | 'regular'\n    | 'large'\n    | 'full-screen';\n\nexport type PepDialogActionsType =\n    | 'close'\n    | 'cancel-continue'\n    | 'cancel-ok'\n    | 'cancel-delete'\n    | 'custom';\n\nexport class PepDialogActionButton {\n    title = '';\n    className = '';\n    callback: () => void;\n\n    constructor(title = '', className = '', callback: () => void = null) {\n        this.title = title;\n        this.className = className;\n        this.callback = callback;\n    }\n}\n\nexport class PepDialogData {\n    title: string;\n    type: PepDialogActionsType;\n    content: any;\n    showClose: boolean;\n    showHeader: boolean;\n    showFooter: boolean;\n    actionButtons: Array<PepDialogActionButton>;\n\n    constructor(options: {\n        title?: string;\n        type?: PepDialogActionsType;\n        content?: any;\n        contentDisabled?: boolean;\n        showClose?: boolean;\n        showHeader?: boolean;\n        showFooter?: boolean;\n        actionButtons?: Array<PepDialogActionButton>;\n    }) {\n        this.title = options.title || '';\n        this.type = options.type || 'close';\n        this.content = options.content || '';\n        this.showClose = options.showClose ?? true;\n        this.showHeader = options.showHeader ?? true;\n        this.showFooter = options.showFooter ?? true;\n        this.actionButtons = options.actionButtons ?? null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "className",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "callback",
                        "type": "function",
                        "function": [],
                        "defaultValue": "null"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "className",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "callback",
                        "type": "function",
                        "function": [],
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "callback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepDialogData",
            "id": "class-PepDialogData-df77d499c804468fa83642ec34c36364",
            "file": "projects/ngx-lib/dialog/dialog.model.ts",
            "type": "class",
            "sourceCode": "export type PepDialogSizeType =\n    | 'inline'\n    | 'small'\n    | 'regular'\n    | 'large'\n    | 'full-screen';\n\nexport type PepDialogActionsType =\n    | 'close'\n    | 'cancel-continue'\n    | 'cancel-ok'\n    | 'cancel-delete'\n    | 'custom';\n\nexport class PepDialogActionButton {\n    title = '';\n    className = '';\n    callback: () => void;\n\n    constructor(title = '', className = '', callback: () => void = null) {\n        this.title = title;\n        this.className = className;\n        this.callback = callback;\n    }\n}\n\nexport class PepDialogData {\n    title: string;\n    type: PepDialogActionsType;\n    content: any;\n    showClose: boolean;\n    showHeader: boolean;\n    showFooter: boolean;\n    actionButtons: Array<PepDialogActionButton>;\n\n    constructor(options: {\n        title?: string;\n        type?: PepDialogActionsType;\n        content?: any;\n        contentDisabled?: boolean;\n        showClose?: boolean;\n        showHeader?: boolean;\n        showFooter?: boolean;\n        actionButtons?: Array<PepDialogActionButton>;\n    }) {\n        this.title = options.title || '';\n        this.type = options.type || 'close';\n        this.content = options.content || '';\n        this.showClose = options.showClose ?? true;\n        this.showHeader = options.showHeader ?? true;\n        this.showFooter = options.showFooter ?? true;\n        this.actionButtons = options.actionButtons ?? null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "actionButtons",
                    "type": "Array<PepDialogActionButton>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "content",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showClose",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showFooter",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showHeader",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "type": "PepDialogActionsType",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepFieldBase",
            "id": "class-PepFieldBase-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepFieldData",
            "id": "class-PepFieldData-c31d6fb5e856b9875980966d03fb561c",
            "file": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n    FieldLayout,\n    ObjectsDataRow,\n    UIControl,\n    UIControlField,\n    ObjectsDataRowCell,\n    FIELD_TYPE,\n    X_ALIGNMENT_TYPE,\n} from '../model/wapi.model';\nimport { PepGuid } from '../model/utilities.model';\n\nexport class PepFieldData {\n    ApiName: string;\n    Enabled?: boolean;\n    Value: string;\n    FormattedValue?: string;\n    FieldType: FIELD_TYPE;\n    ReadOnly?: boolean;\n    ColumnWidth: number;\n    ColumnWidthType?: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Title: string;\n    AdditionalValue?: string;\n    OptionalValues?: any;\n\n    constructor(\n        options: {\n            ApiName?: string;\n            Enabled?: boolean;\n            Value?: string;\n            FormattedValue?: string;\n            FieldType?: FIELD_TYPE;\n            ReadOnly?: boolean;\n            ColumnWidth?: number;\n            ColumnWidthType?: number;\n            XAlignment?: X_ALIGNMENT_TYPE;\n            Title?: string;\n        } = {}\n    ) {\n        this.ApiName = options.ApiName;\n        this.Enabled = !!options.Enabled;\n        this.Value = options.Value;\n        this.FormattedValue = options.FormattedValue || '';\n        this.FieldType = options.FieldType;\n        this.ReadOnly = !!options.ReadOnly;\n        this.ColumnWidth = options.ColumnWidth;\n        this.ColumnWidthType = options.ColumnWidthType;\n        this.XAlignment = options.XAlignment || X_ALIGNMENT_TYPE.Left;\n        this.Title = options.Title || '';\n    }\n}\nexport class PepRowData {\n    Fields: PepFieldData[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDataConvertorService {\n    getUiControl(formData: PepRowData): UIControl {\n        const uiControl = new UIControl();\n\n        if (formData?.Fields?.length > 0) {\n            const uiRow = formData.Fields;\n            uiControl.ControlFields = [];\n            uiRow.forEach((field) =>\n                uiControl.ControlFields.push(this.setUIControlField(field))\n            );\n        }\n\n        return uiControl;\n    }\n\n    convertFormData(formData: PepRowData): ObjectsDataRow {\n        const rowData = new ObjectsDataRow();\n        rowData.Fields = [];\n        rowData.Type = 0;\n        rowData.UID = PepGuid.newGuid();\n        formData.Fields.forEach((field) =>\n            rowData.Fields.push(this.setDataField(field))\n        );\n\n        return rowData;\n    }\n\n    convertListData(\n        tableData: PepRowData[],\n        rowUUID = ''\n    ): Array<ObjectsDataRow> {\n        const rows = new Array<ObjectsDataRow>();\n\n        if (tableData.length > 0) {\n            tableData.forEach((row) => {\n                const rowData = new ObjectsDataRow();\n                rowData.Fields = [];\n                rowData.Type = 0;\n                rowData.UID = rowUUID ? rowUUID : PepGuid.newGuid();\n                row.Fields.forEach((field) =>\n                    rowData.Fields.push(this.setDataField(field))\n                );\n                rows.push(rowData);\n            });\n        }\n\n        return rows;\n    }\n\n    setUIControlField(field: PepFieldData): UIControlField {\n        const controlField = new UIControlField();\n        controlField.ApiName = field.ApiName;\n        controlField.FieldType = field.FieldType;\n\n        controlField.Layout = new FieldLayout({\n            X: 1,\n            Width: 1,\n            XAlignment: field.XAlignment,\n            Y: 1,\n            Height: 1,\n            YAlignment: 1,\n        });\n\n        controlField.Title = field.Title;\n        controlField.ReadOnly = field.ReadOnly === true ? true : false;\n        controlField.ColumnWidth = field.ColumnWidth;\n        controlField.ColumnWidthType = field.ColumnWidthType || 1;\n        return controlField;\n    }\n\n    setDataField(field: PepFieldData): ObjectsDataRowCell {\n        const dataField = new ObjectsDataRowCell();\n        dataField.AdditionalValue = field.AdditionalValue;\n        dataField.ApiName = field.ApiName;\n        dataField.Enabled = field.Enabled === false ? false : true;\n        dataField.FieldType = field.FieldType;\n        dataField.FormattedValue =\n            field.FormattedValue || field.Value.toString();\n        dataField.GroupFields = null;\n        dataField.NotificationInfo = '';\n        dataField.OptionalValues = field.OptionalValues;\n        dataField.ReferenceObjectSubType = '';\n        dataField.TextColor = '';\n        dataField.Value = field.Value.toString();\n        dataField.Visible = true;\n        return dataField;\n    }\n\n    setFieldLayout(\n        x: number,\n        width: number,\n        xAlignment: number,\n        y: number,\n        height: number,\n        yAlignment: number,\n        lineNumber: number\n    ): FieldLayout {\n        const layout = new FieldLayout({\n            X: x,\n            Width: width,\n            XAlignment: xAlignment,\n            Y: y,\n            Height: height,\n            YAlignment: yAlignment,\n            LineNumber: lineNumber,\n        });\n\n        return layout;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "AdditionalValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "ApiName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "ColumnWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ColumnWidthType",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "Enabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "FieldType",
                    "type": "FIELD_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "FormattedValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "OptionalValues",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "ReadOnly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "Title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "Value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "XAlignment",
                    "type": "X_ALIGNMENT_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepGuid",
            "id": "class-PepGuid-00b71305f74a42d4a77ba8ed96b6e560",
            "file": "projects/ngx-lib/src/core/common/model/utilities.model.ts",
            "type": "class",
            "sourceCode": "export class PepGuid {\n    private static pad4(num: number): string {\n        let ret: string = num.toString(16);\n        while (ret.length < 4) {\n            ret = '0' + ret;\n        }\n        return ret;\n    }\n\n    private static random4(): string {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n\n    public static newGuid(): string {\n        // This is not build for -prod\n        // return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        //     const r = Math.random() * 16 | 0;\n        //     const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        //     return v.toString(16);\n        // });\n\n        // If we have a cryptographically secure PRNG, use that\n        if (\n            typeof window !== 'undefined' &&\n            typeof window.crypto !== 'undefined' &&\n            typeof window.crypto.getRandomValues !== 'undefined'\n        ) {\n            const buf: Uint16Array = new Uint16Array(8);\n            window.crypto.getRandomValues(buf);\n            return (\n                this.pad4(buf[0]) +\n                this.pad4(buf[1]) +\n                '-' +\n                this.pad4(buf[2]) +\n                '-' +\n                this.pad4(buf[3]) +\n                '-' +\n                this.pad4(buf[4]) +\n                '-' +\n                this.pad4(buf[5]) +\n                this.pad4(buf[6]) +\n                this.pad4(buf[7])\n            );\n        } else {\n            // Otherwise, just use Math.random\n            return (\n                this.random4() +\n                this.random4() +\n                '-' +\n                this.random4() +\n                '-' +\n                this.random4() +\n                '-' +\n                this.random4() +\n                '-' +\n                this.random4() +\n                this.random4() +\n                this.random4()\n            );\n        }\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "newGuid",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "pad4",
                    "args": [
                        {
                            "name": "num",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 2,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "random4",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        112,
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepImageField",
            "id": "class-PepImageField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepImageFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 287,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepImageFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'image'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 282
                },
                {
                    "name": "hasCampaignField",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 283
                },
                {
                    "name": "indicatorsField",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 284
                },
                {
                    "name": "menuField",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 285
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "IPepOption[]",
                    "optional": false,
                    "description": "",
                    "line": 286
                },
                {
                    "name": "sizeLimitMB",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 287
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepImagesField",
            "id": "class-PepImagesField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepImagesFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 304,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepImagesFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'images'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 303
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "IPepOption[]",
                    "optional": false,
                    "description": "",
                    "line": 304
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepIndicatorsField",
            "id": "class-PepIndicatorsField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 172,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'indicators'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepInternalButtonField",
            "id": "class-PepInternalButtonField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepInternalButtonFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 434,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepInternalButtonFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'button'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 430
                },
                {
                    "name": "referenceObjectInternalType",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 433
                },
                {
                    "name": "referenceObjectSubType",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 432
                },
                {
                    "name": "referenceObjectType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 431
                },
                {
                    "name": "type",
                    "type": "PepInternalButtonFieldType",
                    "optional": false,
                    "description": "",
                    "line": 434
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepInternalMenuField",
            "id": "class-PepInternalMenuField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepInternalMenuFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 472,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepInternalMenuFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'menu'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 471
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "IPepOption[]",
                    "optional": false,
                    "description": "",
                    "line": 472
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepInternalPageField",
            "id": "class-PepInternalPageField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepInternalPageFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 457,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepInternalPageFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'internalPage'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 454
                },
                {
                    "name": "objectId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 455
                },
                {
                    "name": "parentId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 456
                },
                {
                    "name": "searchCode",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 457
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepMenuItem",
            "id": "class-PepMenuItem-bb37073b91f72b454c6b2bade5c0a369",
            "file": "projects/ngx-lib/menu/menu.model.ts",
            "type": "class",
            "sourceCode": "export type PepMenuType = 'action' | 'action-select' | 'select';\n\nexport type PepMenuItemType = 'regular' | 'splitter';\n\nexport type PepMenuStateType = 'visible' | 'hidden';\n\nexport class PepMenuItem {\n    key: string;\n    text?: string;\n    disabled?: boolean = false;\n    hidden?: boolean = false;\n    iconName?: string = null;\n    type?: PepMenuItemType = 'regular';\n    children?: Array<PepMenuItem> = null;\n\n    constructor(data: Partial<PepMenuItem>) {\n        Object.assign(this, data);\n    }\n}\n\nexport interface IPepMenuItemClickEvent {\n    source: PepMenuItem;\n}\n\nexport interface IPepMenuStateChangeEvent {\n    state: PepMenuStateType;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Partial<PepMenuItem>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Partial<PepMenuItem>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "children",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iconName",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "defaultValue": "'regular'",
                    "type": "PepMenuItemType",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepMultiSelectFilterOption",
            "id": "class-PepMultiSelectFilterOption-052cdbba15f9a71d10e181fce605e271",
            "file": "projects/ngx-lib/smart-filters/multi-select-filter/multi-select-filter.component.ts",
            "type": "class",
            "sourceCode": "import {\n    AfterViewInit,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { BaseFilterComponent } from '../common/model/base-filter-component';\nimport {\n    IPepSmartFilterOperator,\n    PepSmartFilterOperators,\n} from '../common/model/operator';\nimport { IPepSmartFilterDataValue } from '../common/model/filter';\nimport { IPepSmartFilterFieldOption } from '../common/model/field';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { VirtualScrollerComponent } from 'ngx-virtual-scroller';\n\nclass PepMultiSelectFilterOption implements IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n    selected = false;\n}\n\n@Component({\n    selector: 'pep-multi-select-filter',\n    templateUrl: './multi-select-filter.component.html',\n    styleUrls: ['./multi-select-filter.component.scss'],\n})\nexport class PepMultiSelectFilterComponent\n    extends BaseFilterComponent\n    implements OnInit, AfterViewInit {\n    options: PepMultiSelectFilterOption[] = [];\n    filteredOptions$: Observable<any>;\n    searchControl = new FormControl();\n\n    @ViewChild('optionsContainer')\n    optionsContainer: ElementRef;\n\n    private readonly MAX_OPTIONS_TO_SHOW = 6.35;\n    @ViewChild(VirtualScrollerComponent)\n    private virtualScroller: VirtualScrollerComponent;\n\n    numberOptionsToShowSearch = 10;\n\n    ngOnInit() {\n        super.ngOnInit;\n\n        if (this.field.options?.length > 0) {\n            this.options = this.field.options.map((opt) => {\n                return { value: opt.value, count: opt.count, selected: false };\n            });\n        } else {\n            this.searchControl.disable();\n        }\n\n        // Init the selected values from first value.\n        const firstControl = this.firstControl;\n        if (firstControl.value) {\n            this.initOptionsSelectedValues(firstControl.value);\n        }\n\n        // Add subscription for the first value change to set the selected options.\n        firstControl.valueChanges\n            .pipe(this.getDestroyer(), distinctUntilChanged())\n            .subscribe((selectedValues: string[]) => {\n                this.initOptionsSelectedValues(selectedValues);\n            });\n\n        // Filter the options by the search control.\n        this.filteredOptions$ = this.searchControl.valueChanges.pipe(\n            this.getDestroyer(),\n            startWith<any>(''),\n            map((option) =>\n                typeof option === 'string' ? option : option && option.value\n            ),\n            map((value) => (value ? this.filterOptions(value) : this.options))\n        );\n\n        // Each time the filter change.\n        this.filteredOptions$.subscribe(\n            (filterdOptions: PepMultiSelectFilterOption[]) => {\n                this.calcOptionsHeight(filterdOptions.length);\n                setTimeout(() => {\n                    // 8 is the padding top of the multi-select-options\n                    this.virtualScroller.scrollToPosition(-8);\n                }, 125);\n            }\n        );\n    }\n\n    ngAfterViewInit(): void {\n        // Calc for the first time.\n        this.calcOptionsHeight(this.options.length);\n    }\n\n    initOptionsSelectedValues(selectedValues: string[]): void {\n        this.options.forEach((opt) => {\n            const isValueSelected =\n                selectedValues && selectedValues.includes(opt.value);\n            opt.selected = isValueSelected;\n\n            // TODO: Maybe we need to support in values that not come over here from the api (with count 0).\n            // if (isValueSelected) {\n            //     opt.selected === true;\n            // }\n        });\n    }\n\n    private calcOptionsHeight(optionsCount: number) {\n        if (this.optionsContainer) {\n            const optionsToShow =\n                optionsCount > this.MAX_OPTIONS_TO_SHOW\n                    ? this.MAX_OPTIONS_TO_SHOW\n                    : optionsCount;\n            // optionsToShow * 2.25 is 1 option height + 1 is the padding top & bottom of the container.\n            const optionsHeight = optionsToShow * 2.25 + 1 + 'rem';\n\n            this.renderer.setStyle(\n                this.optionsContainer.nativeElement,\n                'height',\n                optionsHeight\n            );\n        }\n    }\n\n    private filterOptions(value: string): any[] {\n        const filterValue = value.toLowerCase();\n        return this.options.filter(\n            (opt) =>\n                opt.value &&\n                opt.value.toLowerCase().includes(filterValue.toLowerCase())\n        );\n    }\n\n    // Override\n    getDefaultOperator(): IPepSmartFilterOperator {\n        return PepSmartFilterOperators.In;\n    }\n\n    // Override\n    getFilterValue(): IPepSmartFilterDataValue {\n        const selectedValues = this.options\n            .filter((opt) => opt.selected)\n            .map((opt) => opt.value);\n        const filterValue = {\n            first: selectedValues,\n        };\n\n        return selectedValues.length > 0 ? filterValue : null;\n    }\n\n    // Override\n    initFilter() {\n        this.options.forEach((opt) => (opt.selected = false));\n        this.searchControl.setValue('');\n    }\n\n    onOptionChange(\n        option: PepMultiSelectFilterOption,\n        event: MatCheckboxChange\n    ) {\n        option.selected = event.checked;\n        this.firstControl.setValue(\n            this.options.filter((opt) => opt.selected).map((opt) => opt.value),\n            { emitEvent: false }\n        );\n    }\n}\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IPepSmartFilterFieldOption"
            ]
        },
        {
            "name": "PepPlaceholderField",
            "id": "class-PepPlaceholderField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 148,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'placeholder'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepQuantitySelectorField",
            "id": "class-PepQuantitySelectorField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepQuantitySelectorFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 327,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepQuantitySelectorFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "alowDecimal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "controlType",
                    "defaultValue": "'qs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "notificationInfo",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "type",
                    "type": "PepQuantitySelectorFieldType",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "updatedDataCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 326
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepQuantitySelectorFieldOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepQuantitySelectorFieldOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepRichHtmlTextareaField",
            "id": "class-PepRichHtmlTextareaField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 253,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'richhtmltextarea'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 253
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepRowData",
            "id": "class-PepRowData-c31d6fb5e856b9875980966d03fb561c",
            "file": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n    FieldLayout,\n    ObjectsDataRow,\n    UIControl,\n    UIControlField,\n    ObjectsDataRowCell,\n    FIELD_TYPE,\n    X_ALIGNMENT_TYPE,\n} from '../model/wapi.model';\nimport { PepGuid } from '../model/utilities.model';\n\nexport class PepFieldData {\n    ApiName: string;\n    Enabled?: boolean;\n    Value: string;\n    FormattedValue?: string;\n    FieldType: FIELD_TYPE;\n    ReadOnly?: boolean;\n    ColumnWidth: number;\n    ColumnWidthType?: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Title: string;\n    AdditionalValue?: string;\n    OptionalValues?: any;\n\n    constructor(\n        options: {\n            ApiName?: string;\n            Enabled?: boolean;\n            Value?: string;\n            FormattedValue?: string;\n            FieldType?: FIELD_TYPE;\n            ReadOnly?: boolean;\n            ColumnWidth?: number;\n            ColumnWidthType?: number;\n            XAlignment?: X_ALIGNMENT_TYPE;\n            Title?: string;\n        } = {}\n    ) {\n        this.ApiName = options.ApiName;\n        this.Enabled = !!options.Enabled;\n        this.Value = options.Value;\n        this.FormattedValue = options.FormattedValue || '';\n        this.FieldType = options.FieldType;\n        this.ReadOnly = !!options.ReadOnly;\n        this.ColumnWidth = options.ColumnWidth;\n        this.ColumnWidthType = options.ColumnWidthType;\n        this.XAlignment = options.XAlignment || X_ALIGNMENT_TYPE.Left;\n        this.Title = options.Title || '';\n    }\n}\nexport class PepRowData {\n    Fields: PepFieldData[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDataConvertorService {\n    getUiControl(formData: PepRowData): UIControl {\n        const uiControl = new UIControl();\n\n        if (formData?.Fields?.length > 0) {\n            const uiRow = formData.Fields;\n            uiControl.ControlFields = [];\n            uiRow.forEach((field) =>\n                uiControl.ControlFields.push(this.setUIControlField(field))\n            );\n        }\n\n        return uiControl;\n    }\n\n    convertFormData(formData: PepRowData): ObjectsDataRow {\n        const rowData = new ObjectsDataRow();\n        rowData.Fields = [];\n        rowData.Type = 0;\n        rowData.UID = PepGuid.newGuid();\n        formData.Fields.forEach((field) =>\n            rowData.Fields.push(this.setDataField(field))\n        );\n\n        return rowData;\n    }\n\n    convertListData(\n        tableData: PepRowData[],\n        rowUUID = ''\n    ): Array<ObjectsDataRow> {\n        const rows = new Array<ObjectsDataRow>();\n\n        if (tableData.length > 0) {\n            tableData.forEach((row) => {\n                const rowData = new ObjectsDataRow();\n                rowData.Fields = [];\n                rowData.Type = 0;\n                rowData.UID = rowUUID ? rowUUID : PepGuid.newGuid();\n                row.Fields.forEach((field) =>\n                    rowData.Fields.push(this.setDataField(field))\n                );\n                rows.push(rowData);\n            });\n        }\n\n        return rows;\n    }\n\n    setUIControlField(field: PepFieldData): UIControlField {\n        const controlField = new UIControlField();\n        controlField.ApiName = field.ApiName;\n        controlField.FieldType = field.FieldType;\n\n        controlField.Layout = new FieldLayout({\n            X: 1,\n            Width: 1,\n            XAlignment: field.XAlignment,\n            Y: 1,\n            Height: 1,\n            YAlignment: 1,\n        });\n\n        controlField.Title = field.Title;\n        controlField.ReadOnly = field.ReadOnly === true ? true : false;\n        controlField.ColumnWidth = field.ColumnWidth;\n        controlField.ColumnWidthType = field.ColumnWidthType || 1;\n        return controlField;\n    }\n\n    setDataField(field: PepFieldData): ObjectsDataRowCell {\n        const dataField = new ObjectsDataRowCell();\n        dataField.AdditionalValue = field.AdditionalValue;\n        dataField.ApiName = field.ApiName;\n        dataField.Enabled = field.Enabled === false ? false : true;\n        dataField.FieldType = field.FieldType;\n        dataField.FormattedValue =\n            field.FormattedValue || field.Value.toString();\n        dataField.GroupFields = null;\n        dataField.NotificationInfo = '';\n        dataField.OptionalValues = field.OptionalValues;\n        dataField.ReferenceObjectSubType = '';\n        dataField.TextColor = '';\n        dataField.Value = field.Value.toString();\n        dataField.Visible = true;\n        return dataField;\n    }\n\n    setFieldLayout(\n        x: number,\n        width: number,\n        xAlignment: number,\n        y: number,\n        height: number,\n        yAlignment: number,\n        lineNumber: number\n    ): FieldLayout {\n        const layout = new FieldLayout({\n            X: x,\n            Width: width,\n            XAlignment: xAlignment,\n            Y: y,\n            Height: height,\n            YAlignment: yAlignment,\n            LineNumber: lineNumber,\n        });\n\n        return layout;\n    }\n}\n",
            "properties": [
                {
                    "name": "Fields",
                    "type": "PepFieldData[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSelectField",
            "id": "class-PepSelectField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepSelectFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 390,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepSelectFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'select'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 388
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "IPepOption[]",
                    "optional": false,
                    "description": "",
                    "line": 389
                },
                {
                    "name": "type",
                    "type": "PepSelectFieldType",
                    "optional": false,
                    "description": "",
                    "line": 390
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepSelectFieldOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 399,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepSelectFieldOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSelectionData",
            "id": "class-PepSelectionData-3cb2a2a30d9933bf66cd829cc7727980",
            "file": "projects/ngx-lib/list/list.model.ts",
            "type": "class",
            "sourceCode": "import { ObjectsDataRow } from '@pepperi-addons/ngx-lib';\n\nexport type PepListSelectionType =\n    | 'none'\n    | 'single'\n    | 'single-action'\n    | 'multi';\n\nexport type PepListPagerType = 'pages' | 'scroll';\n\nexport type PepListViewType = '' | 'cards' | 'lines' | 'table' | 'map';\n\nexport interface IPepListItemClickEvent {\n    source: ObjectsDataRow;\n    viewType: PepListViewType;\n}\n\nexport class PepSelectionData {\n    selectionType: number;\n    rows: Array<any>;\n    rowTypes: Array<any>;\n}\n\nexport interface IPepListLoadItemsEvent {\n    start: number;\n    end: number;\n    fromIndex: number;\n    toIndex: number;\n}\n\nexport interface IPepListLoadPageEvent {\n    pageIndex: number;\n    pageSize: number;\n}\n\nexport const DEFAULT_PAGE_SIZE = 50;\n\nexport interface IPepListSortingChangeEvent {\n    sortBy: string;\n    isAsc: boolean;\n}\n",
            "properties": [
                {
                    "name": "rows",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "rowTypes",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectionType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSeparatorField",
            "id": "class-PepSeparatorField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'separator'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSignatureField",
            "id": "class-PepSignatureField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepSignatureFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 266,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepSignatureFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'signature'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "IPepOption[]",
                    "optional": false,
                    "description": "",
                    "line": 266
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterBaseField",
            "id": "class-PepSmartFilterBaseField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "componentType": {
                    "name": "componentType",
                    "getSignature": {
                        "name": "componentType",
                        "type": "",
                        "returnType": "PepSmartFilterComponentType",
                        "line": 37
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "PepSmartFilterType",
                        "line": 42
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IPepSmartFilterField"
            ]
        },
        {
            "name": "PepSmartFilterBooleanField",
            "id": "class-PepSmartFilterBooleanField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterCurrencyField",
            "id": "class-PepSmartFilterCurrencyField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 139,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterNumberBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterDateBaseField",
            "id": "class-PepSmartFilterDateBaseField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterDateField",
            "id": "class-PepSmartFilterDateField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterDateBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterDateTimeField",
            "id": "class-PepSmartFilterDateTimeField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterDateBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterDateBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterIntField",
            "id": "class-PepSmartFilterIntField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterNumberBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterMultiSelectField",
            "id": "class-PepSmartFilterMultiSelectField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 108
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterNumberBaseField",
            "id": "class-PepSmartFilterNumberBaseField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 115,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterPercentageField",
            "id": "class-PepSmartFilterPercentageField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 148,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 153
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterNumberBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepSmartFilterRealField",
            "id": "class-PepSmartFilterRealField-8a0b35deca337c8c3c41381857f77009",
            "file": "projects/ngx-lib/smart-filters/common/model/field.ts",
            "type": "class",
            "sourceCode": "import {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n} from './operator';\nimport {\n    PepSmartFilterComponentType,\n    PepSmartFilterType,\n    PepSmartFilterOperatorType,\n    PepSmartFilterOperatorUnitType,\n} from './type';\n\nexport interface IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n}\n\nexport interface IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n}\n\n// Base field\n// ------------------------------\nexport abstract class PepSmartFilterBaseField implements IPepSmartFilterField {\n    id: string;\n    name: string;\n    isOpen?: boolean;\n    options?: IPepSmartFilterFieldOption[];\n    operators?: PepSmartFilterOperatorType[];\n    operatorUnits?: PepSmartFilterOperatorUnitType[];\n\n    protected _componentType: PepSmartFilterComponentType;\n    get componentType(): PepSmartFilterComponentType {\n        return this._componentType;\n    }\n\n    private _type: PepSmartFilterType;\n    get type(): PepSmartFilterType {\n        return this._type;\n    }\n\n    constructor(field: IPepSmartFilterField) {\n        this.id = field.id;\n        this.name = field.name;\n        this.isOpen = field.isOpen;\n        this.options = field.options;\n        this.operators = field.operators;\n        this.operatorUnits = field.operatorUnits;\n\n        this._type = this.getType();\n    }\n\n    protected abstract getType(): PepSmartFilterType;\n}\n\n// Boolean field\n// ------------------------------\nexport class PepSmartFilterBooleanField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'boolean';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'boolean';\n    }\n}\n\n// Date fields\n// ------------------------------\nexport abstract class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'date';\n    }\n}\nexport class PepSmartFilterDateField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date';\n    }\n}\nexport class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'date-time';\n    }\n}\n\n// Multi select field\n// ------------------------------\nexport class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'multi-select';\n    }\n\n    getType(): PepSmartFilterType {\n        return 'multi-select';\n    }\n}\n\n// Number fields\n// ------------------------------\nexport abstract class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n        this._componentType = 'number';\n    }\n}\nexport class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'int';\n    }\n}\nexport class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'real';\n    }\n}\nexport class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'currency';\n    }\n}\nexport class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {\n    constructor(field: IPepSmartFilterField) {\n        super(field);\n    }\n\n    getType(): PepSmartFilterType {\n        return 'percentage';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField"
                    }
                ],
                "line": 130,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "IPepSmartFilterField",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "_componentType",
                    "type": "PepSmartFilterComponentType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "_type",
                    "type": "PepSmartFilterType",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "isOpen",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operators",
                    "type": "PepSmartFilterOperatorType[]",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "operatorUnits",
                    "type": "PepSmartFilterOperatorUnitType[]",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                },
                {
                    "name": "options",
                    "type": "IPepSmartFilterFieldOption[]",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterNumberBaseField"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSmartFilterType",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PepSmartFilterBaseField"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepSmartFilterNumberBaseField",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepTextareaField",
            "id": "class-PepTextareaField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 244,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepFieldBaseOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'textarea'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 244
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepTextboxField",
            "id": "class-PepTextboxField-81dccd27af1a391705195f89b293493a",
            "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, Validators } from '@angular/forms';\n\n/** Allowed layout options */\nexport type PepLayoutType = 'form' | 'card' | 'table';\n\n/** Allowed style options */\nexport type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';\n\n/** Allowed size options */\nexport type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Allowed horizontal alignment options */\nexport type PepHorizontalAlignment = 'left' | 'center' | 'right';\n/** Default horizontal alignment. */\nexport const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment = 'left';\n\n/** Allowed vertical alignment options */\nexport type PepVerticalAlignment = 'top' | 'middle' | 'bottom';\n/** Default horizontal alignment. */\nexport const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment = 'top';\nexport interface IPepOption {\n    key: string;\n    value: string;\n}\n\n// export type PepFieldBaseType = '' | PepInternalButtonFieldType | PepTextboxFieldType |\n//     PepQuantitySelectorFieldType | PepDateFieldType | PepCheckboxFieldType | PepSelectFieldType;\ninterface IPepFieldBaseOptions {\n    value?: any;\n    formattedValue?: any;\n    additionalValue?: string;\n    key?: string;\n    label?: string;\n    accessory?: string;\n    required?: boolean;\n    readonly?: boolean;\n    disabled?: boolean;\n    order?: number;\n    controlType?: string;\n    // type?: PepFieldBaseType;\n    placeholder?: string;\n    hidden?: boolean;\n    row?: number;\n    rowSpan?: number;\n    col?: number;\n    colSpan?: number;\n    xAlignment?: PepHorizontalAlignment;\n    yAlignment?: PepVerticalAlignment;\n    maxFieldCharacters?: number;\n    minValue?: number;\n    maxValue?: number;\n    textColor?: string;\n    // lastFocusField?: any;\n}\nexport class PepFieldBase {\n    value: any;\n    formattedValue: any;\n    additionalValue: string;\n    key: string;\n    label: string;\n    accessory: string;\n    required: boolean;\n    readonly: boolean;\n    disabled: boolean;\n    order: number;\n    // type: string;\n    controlType: string;\n    placeholder: string;\n    hidden: boolean;\n    row: number;\n    rowSpan: number;\n    col: number;\n    colSpan: number;\n    xAlignment: PepHorizontalAlignment;\n    yAlignment: PepVerticalAlignment;\n    groupFields: PepFieldBase[];\n    maxFieldCharacters: number;\n    minValue: number;\n    maxValue: number;\n    textColor: string;\n    // lastFocusField: any;\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.accessory = options.accessory || '';\n        this.required = !!options.required;\n\n        this.order = options.order ?? 1;\n        this.controlType = options.controlType || '';\n        // this.type = options.type || '';\n        this.placeholder = options.placeholder || '';\n        this.hidden = !!options.hidden;\n\n        this.row = options.row ?? 1;\n        this.rowSpan = options.rowSpan ?? 1;\n        this.col = options.col ?? 1;\n        this.colSpan = options.colSpan ?? 1;\n\n        this.xAlignment = options.xAlignment ?? DEFAULT_HORIZONTAL_ALIGNMENT;\n        this.yAlignment = options.yAlignment ?? DEFAULT_VERTICAL_ALIGNMENT;\n\n        this.maxFieldCharacters = options.maxFieldCharacters ?? 0;\n        this.minValue = options.minValue ?? 0;\n        this.maxValue = options.maxValue ?? 0;\n\n        this.update(options);\n    }\n\n    protected getBaseValidators(isCheckbox = false): ValidatorFn[] {\n        const validators = [];\n\n        if (this.required && !this.readonly && !this.disabled) {\n            if (isCheckbox) {\n                validators.push(Validators.requiredTrue);\n            } else {\n                validators.push(Validators.required);\n            }\n        } else {\n            validators.push(Validators.nullValidator);\n        }\n\n        if (this.maxFieldCharacters > 0) {\n            validators.push(Validators.maxLength(this.maxFieldCharacters));\n        }\n\n        return validators;\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = this.getBaseValidators();\n        return validators;\n    }\n\n    public update(options: IPepFieldBaseOptions): void {\n        this.value = options.value;\n        this.formattedValue = options.formattedValue;\n        this.additionalValue = options.additionalValue;\n        // TODO: Remove this from here we not suppose to update the read only prop.\n        this.readonly = !!options.readonly;\n        this.disabled = !!options.disabled;\n        this.textColor = options.textColor || '';\n        // this.lastFocusField = options.lastFocusField || null;\n    }\n}\n\nexport class PepPlaceholderField extends PepFieldBase {\n    controlType = 'placeholder';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepSeparatorField extends PepFieldBase {\n    controlType = 'separator';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepAttachmentField extends PepFieldBase {\n    controlType = 'attachment';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport class PepIndicatorsField extends PepFieldBase {\n    controlType = 'indicators';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n    }\n}\n\nexport type PepTextboxFieldType =\n    | 'text'\n    | 'link'\n    | 'email'\n    | 'phone'\n    | 'duration'\n    | 'int'\n    | 'percentage'\n    | 'currency'\n    | 'real';\ninterface IPepTextboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepTextboxFieldType;\n}\nexport class PepTextboxField extends PepFieldBase {\n    controlType = 'textbox';\n    type: PepTextboxFieldType = 'text';\n\n    constructor(options: IPepTextboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'text';\n\n        this.update(options);\n    }\n\n    public update(options: IPepTextboxFieldOptions): void {\n        super.update(options);\n\n        if (this.type === 'link') {\n            // DI-11292 - add changes for link field for the \"Read Only display value\" prop\n            this.formattedValue =\n                this.disabled && this.formattedValue && this.value\n                    ? this.formattedValue\n                    : this.value;\n        }\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators();\n\n        if (this.type === 'email') {\n            validators.push(\n                Validators.pattern(\n                    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                )\n            );\n        } else if (this.type === 'phone') {\n            validators.push(Validators.pattern(/^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/));\n        } else if (this.type === 'int' || this.type === 'real') {\n            validators.push(Validators.pattern(/^[\\.,\\-\\+\\d]+$/));\n\n            if (!isNaN(this.minValue)) {\n                validators.push(Validators.min(this.minValue));\n            }\n\n            if (!isNaN(this.maxValue)) {\n                validators.push(Validators.max(this.maxValue));\n            }\n        }\n\n        return validators;\n    }\n}\n\nexport class PepTextareaField extends PepFieldBase {\n    controlType = 'textarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'textarea';\n    }\n}\n\nexport class PepRichHtmlTextareaField extends PepFieldBase {\n    controlType = 'richhtmltextarea';\n\n    constructor(options: IPepFieldBaseOptions = {}) {\n        super(options);\n        // this.type = 'richhtmltextarea';\n    }\n}\n\ninterface IPepSignatureFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepSignatureField extends PepFieldBase {\n    controlType = 'signature';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepSignatureFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepImageFieldOptions extends IPepFieldBaseOptions {\n    hasCampaignField?: any;\n    indicatorsField?: any;\n    menuField?: any;\n    options?: IPepOption[];\n    sizeLimitMB?: number;\n}\nexport class PepImageField extends PepFieldBase {\n    controlType = 'image';\n    hasCampaignField = null;\n    indicatorsField = null;\n    menuField = null;\n    options: IPepOption[] = [];\n    sizeLimitMB = 5;\n\n    constructor(options: IPepImageFieldOptions = {}) {\n        super(options);\n        this.hasCampaignField = options.hasCampaignField || null;\n        this.indicatorsField = options.indicatorsField || null;\n        this.menuField = options.menuField || null;\n        this.options = options.options || [];\n        this.sizeLimitMB = options.sizeLimitMB || 5;\n    }\n}\n\ninterface IPepImagesFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepImagesField extends PepFieldBase {\n    controlType = 'images';\n    options: IPepOption[] = [];\n\n    constructor(options: IPepImagesFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n    }\n}\n\nexport type PepQuantitySelectorFieldType =\n    | 'button'\n    | 'packageButton'\n    | 'qs'\n    | 'qsForMatrix';\ninterface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {\n    alowDecimal?: boolean;\n    notificationInfo?: any;\n    type?: PepQuantitySelectorFieldType;\n}\nexport class PepQuantitySelectorField extends PepFieldBase {\n    controlType = 'qs';\n    alowDecimal: boolean;\n    notificationInfo: any = {};\n    updatedDataCount: number;\n    type: PepQuantitySelectorFieldType;\n\n    constructor(options: IPepQuantitySelectorFieldOptions = {}) {\n        super(options);\n\n        this.updatedDataCount = 0;\n        this.alowDecimal = options.alowDecimal || false;\n        this.type = options.type || 'qs';\n\n        this.update(options);\n    }\n\n    public update(options: IPepQuantitySelectorFieldOptions): void {\n        super.update(options);\n\n        this.notificationInfo = options.notificationInfo;\n        this.updatedDataCount += 1;\n    }\n}\n\nexport type PepDateFieldType = 'datetime' | 'date';\ninterface IPepDateFieldOptions extends IPepFieldBaseOptions {\n    type?: PepDateFieldType;\n}\nexport class PepDateField extends PepFieldBase {\n    controlType = 'date';\n    type: PepDateFieldType;\n\n    constructor(options: IPepDateFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'date';\n    }\n}\n\nexport type PepCheckboxFieldType = 'checkbox' | 'booleanText';\ninterface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {\n    type?: PepCheckboxFieldType;\n}\nexport class PepCheckboxField extends PepFieldBase {\n    controlType = 'checkbox';\n    type: PepCheckboxFieldType;\n\n    constructor(options: IPepCheckboxFieldOptions = {}) {\n        super(options);\n\n        this.type = options.type || 'checkbox';\n    }\n\n    public getValidators(): ValidatorFn[] {\n        const validators = super.getBaseValidators(true);\n        return validators;\n    }\n}\n\nexport type PepSelectFieldType = 'select' | 'multi';\ninterface IPepSelectFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n    type?: PepSelectFieldType;\n}\nexport class PepSelectField extends PepFieldBase {\n    controlType = 'select';\n    options: IPepOption[] = [];\n    type: PepSelectFieldType;\n\n    constructor(options: IPepSelectFieldOptions = {}) {\n        super(options);\n        this.type = options.type || 'select';\n\n        this.update(options);\n    }\n\n    public update(options: IPepSelectFieldOptions): void {\n        super.update(options);\n\n        this.options = options.options || [];\n    }\n}\n\ninterface IPepAddressFieldOptions extends IPepFieldBaseOptions {\n    groupFields?: PepFieldBase[];\n}\nexport class PepAddressField extends PepFieldBase {\n    controlType = 'address';\n    groupFields: PepFieldBase[] = null;\n\n    constructor(options: IPepAddressFieldOptions = {}) {\n        super(options);\n        this.groupFields = options.groupFields || null;\n    }\n}\n\nexport type PepInternalButtonFieldType =\n    | 'button'\n    | 'reference'\n    | 'listofobjects';\ninterface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {\n    referenceObjectType?: any;\n    referenceObjectSubType?: string;\n    referenceObjectInternalType?: string;\n    type?: PepInternalButtonFieldType;\n}\nexport class PepInternalButtonField extends PepFieldBase {\n    controlType = 'button';\n    referenceObjectType;\n    referenceObjectSubType = '';\n    referenceObjectInternalType = '';\n    type: PepInternalButtonFieldType;\n\n    constructor(options: IPepInternalButtonFieldOptions = {}) {\n        super(options);\n\n        this.referenceObjectType = options.referenceObjectType || null;\n        this.referenceObjectSubType = options.referenceObjectSubType || null;\n        this.referenceObjectInternalType =\n            options.referenceObjectInternalType || null;\n\n        this.type = options.type || 'button';\n    }\n}\n\ninterface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {\n    objectId?: string;\n    parentId?: string;\n    searchCode?: string;\n}\nexport class PepInternalPageField extends PepFieldBase {\n    controlType = 'internalPage';\n    objectId = '';\n    parentId = '';\n    searchCode = '';\n\n    constructor(options: IPepInternalPageFieldOptions = {}) {\n        super(options);\n        this.objectId = options.objectId || '';\n        this.parentId = options.parentId || '';\n        this.searchCode = options.searchCode || '';\n    }\n}\n\ninterface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {\n    options?: IPepOption[];\n}\nexport class PepInternalMenuField extends PepFieldBase {\n    controlType = 'menu';\n    options: IPepOption[] = [];\n    // hasSubMenu: boolean = false;\n\n    constructor(options: IPepInternalMenuFieldOptions = {}) {\n        super(options);\n        this.options = options.options || [];\n        // this.hasSubMenu = options['hasSubMenu'];\n    }\n}\n\nexport interface IPepFieldValueChangeEvent {\n    key: string;\n    value: string;\n    controlType?: string;\n    lastFocusedField?: any;\n}\n\nexport interface IPepFieldClickEvent {\n    key: string;\n    value?: string;\n    controlType?: string;\n    eventWhich?: any;\n    otherData?: any;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IPepTextboxFieldOptions",
                        "defaultValue": "{}"
                    }
                ],
                "line": 194,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IPepTextboxFieldOptions",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'textbox'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 193
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "type": "PepTextboxFieldType",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "accessory",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "additionalValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "colSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "controlType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "formattedValue",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "groupFields",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "maxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "minValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "row",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "rowSpan",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "textColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "xAlignment",
                    "type": "PepHorizontalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "yAlignment",
                    "type": "PepVerticalAlignment",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 216,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepTextboxFieldOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepTextboxFieldOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseValidators",
                    "args": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isCheckbox",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IPepFieldBaseOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PepFieldBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PepFieldBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SmartSearchResponse",
            "id": "class-SmartSearchResponse-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "ApiName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 245
                },
                {
                    "name": "FieldType",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 246
                },
                {
                    "name": "SmartSearchData",
                    "type": "SmartSearchValues",
                    "optional": false,
                    "description": "",
                    "line": 249
                },
                {
                    "name": "Title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 247
                },
                {
                    "name": "Values",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": false,
                    "description": "",
                    "line": 248
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SmartSearchValues",
            "id": "class-SmartSearchValues-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "ApiName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 237
                },
                {
                    "name": "ComparisonType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 238
                },
                {
                    "name": "Value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "ValueRange",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 240
                },
                {
                    "name": "Values",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 241
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Test",
            "id": "class-Test-a4fd488cce430ce24971fe99e35e586f",
            "file": "projects/ngx-lib/src/core/common/model/papi.model.ts",
            "type": "class",
            "sourceCode": "export class Test {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UIControl",
            "id": "class-UIControl-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "Columns",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "ControlFields",
                    "type": "Array<UIControlField>",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "DisplayName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "ObjectID",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "Type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 153
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UIControlField",
            "id": "class-UIControlField-c5cd1ebd87d74d22ecacc2c5fc84b734",
            "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
            "type": "class",
            "sourceCode": "export enum FIELD_TYPE {\n    // specify text field\n    'Default' = 0,\n    'TextBox' = 1,\n    'LimitedLengthTextBox' = 2,\n    // specify text area field\n    'TextArea' = 3,\n    'TextHeader' = 4,\n    // specify date field\n    'Date' = 5,\n    // specify date & time field\n    'DateAndTime' = 6,\n    // specify integer field\n    'NumberInteger' = 7,\n    // specify decimal field\n    'NumberReal' = 8,\n    // specify currency field\n    'Currency' = 9,\n    // specify boolean field\n    'Boolean' = 10,\n    // specify multiple options field\n    'ComboBox' = 11,\n    // specify multiple options field\n    'MultiTickBox' = 12,\n    // specify separator (view only) field\n    'Separator' = 13,\n    // specify address field\n    'Address' = 14,\n    // specify percentage field\n    'Percentage' = 15,\n    'EmptyComboBox' = 16, // For Category, CPIPriceList, Special Price List (ComboBox Without Values)\n    'InternalLink' = 17, // for reps, Contacts, Locations & Catalogs\n    // specify email field\n    'Email' = 18,\n    'LimitedDate' = 19,\n    // specify image field\n    'Image' = 20,\n    'MultiTickBoxToComboBox' = 21,\n    'EmptyMultiTickBox' = 22,\n    'Totals' = 23,\n    // specify attachment field\n    'Attachment' = 24,\n    'Signature' = 25,\n    // specify link field\n    'Link' = 26,\n    // specify image url field\n    'ImageURL' = 27,\n    'NumberIntegerQuantitySelector' = 28, // hack for quantity selector in case of integer\n    'NumberRealQuantitySelector' = 29, // hack for quantity selector in case of double\n    'NumberIntegerForMatrix' = 30, // hack for integer in matrix\n    'NumberRealForMatrix' = 31, // hack for double in matrix\n    'Images' = 32, // hack for Images (for filmstrip and variants)\n    'Indicators' = 33, // Indicators is like address (group field that conains boolean fields).\n    'CalculatedReal' = 34,\n    'CalculatedInt' = 35,\n    'CalculatedString' = 36,\n    'CalculatedDate' = 37,\n    'CalculatedBool' = 38,\n    'MapDataDropDown' = 39,\n    'MapDataReal' = 40,\n    'MapDataString' = 41,\n    'MapDataInt' = 42,\n    'Sum' = 43,\n    'Phone' = 44,\n    'UrlForApi' = 45,\n    'ManyToManyUrlForApi' = 46,\n    'ReferenceType' = 47,\n    'GuidReferenceType' = 48,\n    'Button' = 49,\n    'InternalPage' = 50, // The old value was 45 - in the cpi project the \"InternalPage\" value is 50 so i fixed it!!!\n    'Duration' = 51,\n    'ListOfObjects' = 52,\n    'Package' = 53, // Package Quantity Selector\n    'BooleanText' = 55, // Boolean that return a string defined by the user in case of true/false\n    'RichTextHTML' = 56, // Html Text\n}\n\nexport enum X_ALIGNMENT_TYPE {\n    None = 0,\n    Left = 1,\n    Right = 2,\n    Center = 3,\n}\n\nexport enum Y_ALIGNMENT_TYPE {\n    None = 0,\n    Top = 1,\n    Bottom = 2,\n    Center = 3,\n}\n\nexport class FieldLayout {\n    X: number;\n    Width: number;\n    XAlignment: X_ALIGNMENT_TYPE;\n    Y: Y_ALIGNMENT_TYPE;\n    Height: number;\n    YAlignment: Y_ALIGNMENT_TYPE;\n    LineNumber: number;\n\n    // constructor(\n    //     x = 0,\n    //     width = 1,\n    //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {\n    //     this.X = x;\n    //     this.Width = width;\n    //     this.XAlignment = xAlignment;\n    //     this.Y = y;\n    //     this.Height = height;\n    //     this.YAlignment = yAlignment;\n    //     this.LineNumber = lineNumber;\n    // }\n\n    constructor(data: Partial<FieldLayout>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class UIControlField {\n    Title: string;\n    MandatoryField = false;\n    Mandatory = false;\n    ReadOnlyField: boolean;\n    ReadOnly: boolean;\n    FieldConditions: any;\n    CustomField: any;\n    ApiName: string;\n    FieldType: FIELD_TYPE;\n    OptionalValues: Array<KeyValuePair<string>>;\n    MinValue: number;\n    MaxValue: number;\n    MaxCharacters: number;\n    MaxFieldCharacters: number;\n    MaxLines: number;\n    Layout: FieldLayout; // { X: number; Height: number; Y: number; Width: number; XAlignment: number; YAlignment: number };\n    ColumnWidth: number;\n    ColumnWidthType: number;\n    FieldName: string;\n    DefaultValue: string;\n    Hidden: boolean;\n    ObjectTypeReference: any;\n    ParentField: string;\n    WrntyFieldName: string;\n    Editor: any;\n    minFieldWidth = 45;\n    calcColumnWidth = 10;\n    calcTitleColumnWidthString = '100%';\n    calcColumnWidthString = '100%';\n}\n\nexport class UIControl {\n    ObjectID: any;\n    Type: string;\n    DisplayName: string;\n    ControlFields: Array<UIControlField>;\n    Columns: number;\n}\n\nexport class ObjectsDataRowCell {\n    Accessory?: string;\n    AdditionalValue?: string;\n    ApiName: string;\n    BackgroundColor?: string;\n    Enabled?: boolean;\n    FieldType: number;\n    FormattedValue: any;\n    GroupFields?: Array<ObjectsDataRowCell>;\n    Highlighted?: boolean;\n    NotificationInfo?: string;\n    OptionalValues?: Array<KeyValuePair<string>>;\n    ReferenceObjectInternalType?: string;\n    ReferenceObjectSubType?: string;\n    ReferenceObjectType?: string;\n    TextColor?: string;\n    UiPageKey?: string;\n    // Type?: string; // This is in the object??\n    Value: any;\n    Visible?: boolean;\n}\n\nexport class ObjectsDataRow {\n    AdditionalData?: any;\n    BackgroundColor?: string;\n    ExtraInfo?: Array<{ Key: string; Value: string }>;\n    Fields: Array<ObjectsDataRowCell>;\n    IsEditable = true;\n    IsSelectableForActions = true;\n    MainAction?: string;\n    Profile?: any;\n    Type: number;\n    UID: any;\n}\n\nexport class ObjectSingleData {\n    Data: ObjectsDataRow;\n    ErrorCode: string;\n    ErrorMessage: string;\n    IsEditable: boolean;\n    Success: boolean;\n    Type: string;\n    UIControl: UIControl;\n\n    constructor(uiControl: UIControl = null, data: ObjectsDataRow = null) {\n        this.Success = true;\n        this.ErrorMessage = '';\n        this.Type = '';\n\n        this.UIControl = uiControl;\n        this.Data = data;\n    }\n}\n\nexport class ObjectsData {\n    DateFilter?: string;\n    ErrorCode: string;\n    ErrorMessage: string;\n    Rows: Array<ObjectsDataRow>;\n    SearchCode?: string;\n    SecSmartSearchList?: [];\n    SmartSearchList: Array<SmartSearchResponse>;\n    Success: boolean;\n    TotalRows: number;\n    UIControl: UIControl;\n    // AllRows: Array<ObjectsDataRow>;\n    // TotalAmount: any;\n    // CurrencySymbol: any;\n\n    constructor() {\n        this.ErrorMessage = '';\n        this.Success = true;\n        // this.TotalAmount = '0';\n        // this.CurrencySymbol = '$';\n    }\n}\n\nexport class SmartSearchValues {\n    ApiName: string;\n    ComparisonType: string;\n    Value: string;\n    ValueRange: { Start: string; End: string };\n    Values: Array<string>;\n}\n\nexport class SmartSearchResponse {\n    ApiName: string;\n    FieldType: any;\n    Title: string;\n    Values: Array<KeyValuePair<string>>;\n    SmartSearchData: SmartSearchValues;\n}\n\nexport class KeyValuePair<T> {\n    Key: string;\n    Value: T;\n}\n",
            "properties": [
                {
                    "name": "ApiName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "calcColumnWidth",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "calcColumnWidthString",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "calcTitleColumnWidthString",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "ColumnWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "ColumnWidthType",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "CustomField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "DefaultValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "Editor",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "FieldConditions",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "FieldName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "FieldType",
                    "type": "FIELD_TYPE",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "Hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "Layout",
                    "type": "FieldLayout",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "Mandatory",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "MandatoryField",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "MaxCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "MaxFieldCharacters",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "MaxLines",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "MaxValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "minFieldWidth",
                    "defaultValue": "45",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "MinValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "ObjectTypeReference",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "OptionalValues",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "ParentField",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "ReadOnly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "ReadOnlyField",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "Title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "WrntyFieldName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 143
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PepAttachDirective",
            "id": "directive-PepAttachDirective-c068fe83d4259acc01a0e9f08940d1c9",
            "file": "projects/ngx-lib/src/core/portal/attach.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n    Directive,\n    OnInit,\n    OnDestroy,\n    Input,\n    TemplateRef,\n} from '@angular/core';\nimport { PepPortalService } from './portal.service';\n\n@Directive({\n    selector: '[pepAttach]',\n})\nexport class PepAttachDirective implements OnInit, OnDestroy {\n    @Input('pepAttach') targetName: string;\n\n    constructor(\n        private portalService: PepPortalService,\n        private templateRef: TemplateRef<any>\n    ) {}\n\n    ngOnInit(): void {\n        this.portalService.attach(this.targetName, this.templateRef);\n    }\n\n    ngOnDestroy(): void {\n        this.portalService.clear(this.targetName);\n    }\n}\n",
            "selector": "[pepAttach]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pepAttach",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "portalService",
                        "type": "PepPortalService"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "portalService",
                        "type": "PepPortalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepButtonBlurDirective",
            "id": "directive-PepButtonBlurDirective-d1781d6bdc9017a902b9ed60d2b579f4",
            "file": "projects/ngx-lib/src/core/common/directives/button-blur.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[pepButtonBlur]',\n})\nexport class PepButtonBlurDirective {\n    constructor(private element: ElementRef) {}\n\n    @HostListener('click')\n    onClick(): void {\n        setTimeout(() => {\n            this.element.nativeElement.blur();\n        }, 0);\n    }\n}\n",
            "selector": "[pepButtonBlur]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 10
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepButtonLoaderDirective",
            "id": "directive-PepButtonLoaderDirective-a972ddbbd4cb679e34131b7a470e11fd",
            "file": "projects/ngx-lib/src/core/common/directives/button-loader.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    Input,\n    OnInit,\n    Optional,\n    Renderer2,\n} from '@angular/core';\nimport { PepUtilitiesService } from '../services/utilities.service';\n\n@Directive({\n    selector: '[pepButtonLoader]',\n})\nexport class PepButtonLoaderDirective implements OnInit {\n    @Input() loaderTime = 0;\n    @Input() loaderColor = null;\n    @Input() loaderWidth = '1.5rem';\n    @Input() loaderHeight = 'inherit';\n    @Input() ignoreDisabledStyle = false;\n\n    private _isLoading = false;\n    private _finish = null;\n    @Input()\n    set finish(value: boolean) {\n        this._finish = value;\n\n        if (this._isLoading && value) {\n            this.toggleLoading(false);\n        }\n    }\n\n    private svgIcon: SVGElement;\n\n    constructor(\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private utilitiesService: PepUtilitiesService,\n        @Optional() @Inject(DOCUMENT) private document: any\n    ) {}\n\n    @HostListener('click', ['$event'])\n    clickEvent(event): void {\n        this.toggleLoading(true);\n\n        // In case that the finish input is supplied - init it.\n        if (this._finish !== null) {\n            this._finish = false;\n        } else {\n            // Init loaderTime if is not supplied (3000 - default 3 seconds).\n            if (this.loaderTime === 0) {\n                this.loaderTime = 3000;\n            }\n        }\n\n        if (this.loaderTime > 0) {\n            setTimeout(() => {\n                this.toggleLoading(false);\n            }, this.loaderTime);\n        }\n    }\n\n    ngOnInit(): void {\n        this.setButtonStyle();\n        const svgData =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 128 128\" preserveAspectRatio=\"xMidYMid\" class=\"lds-ripple\" style=\"background:0 0; \"><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-1.6s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-1.6s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-0.8s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-0.8s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"0s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"0s\" repeatCount=\"indefinite\"/></circle></svg>';\n        this.svgIcon = this.utilitiesService.getSvgElementFromString(\n            this.document,\n            svgData\n        );\n        this.setIconStyle();\n    }\n\n    private setButtonStyle(): void {\n        this.renderer.setStyle(this.element.nativeElement, 'display', 'flex');\n        this.renderer.setStyle(\n            this.element.nativeElement,\n            'justify-content',\n            'center'\n        );\n        this.renderer.setStyle(\n            this.element.nativeElement,\n            'align-items',\n            'center'\n        );\n\n        if (this.ignoreDisabledStyle) {\n            this.renderer.addClass(\n                this.element.nativeElement,\n                'ignore-disabled'\n            );\n        }\n    }\n\n    private setIconStyle(): void {\n        if (this.loaderColor) {\n            this.renderer.setStyle(this.svgIcon, 'stroke', this.loaderColor);\n        }\n\n        this.renderer.setStyle(this.svgIcon, 'width', this.loaderWidth);\n        this.renderer.setStyle(this.svgIcon, 'height', this.loaderHeight);\n        this.renderer.setStyle(this.svgIcon, 'margin-inline-start', '0.5rem');\n        this.renderer.addClass(this.svgIcon, 'svg-icon');\n        this.renderer.addClass(this.svgIcon, 'stroke');\n    }\n\n    private toggleLoading(show: boolean): void {\n        if (show) {\n            this._isLoading = true;\n            this.renderer.appendChild(this.element.nativeElement, this.svgIcon);\n            this.renderer.setAttribute(\n                this.element.nativeElement,\n                'disabled',\n                'true'\n            );\n            this.renderer.addClass(this.element.nativeElement, 'lock-events');\n        } else {\n            if (this._isLoading) {\n                this._isLoading = false;\n                this.renderer.removeChild(\n                    this.element.nativeElement,\n                    this.svgIcon\n                );\n                this.renderer.removeAttribute(\n                    this.element.nativeElement,\n                    'disabled'\n                );\n                this.renderer.removeClass(\n                    this.element.nativeElement,\n                    'lock-events'\n                );\n            }\n        }\n    }\n}\n",
            "selector": "[pepButtonLoader]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "finish",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "ignoreDisabledStyle",
                    "defaultValue": "false",
                    "line": 22
                },
                {
                    "name": "loaderColor",
                    "defaultValue": "null",
                    "line": 19
                },
                {
                    "name": "loaderHeight",
                    "defaultValue": "'inherit'",
                    "line": 21
                },
                {
                    "name": "loaderTime",
                    "defaultValue": "0",
                    "line": 18
                },
                {
                    "name": "loaderWidth",
                    "defaultValue": "'1.5rem'",
                    "line": 20
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 45
                }
            ],
            "propertiesClass": [
                {
                    "name": "_finish",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "svgIcon",
                    "type": "SVGElement",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "setButtonStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setIconStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "toggleLoading",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "finish": {
                    "name": "finish",
                    "setSignature": {
                        "name": "finish",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PepCarouselItemDirective",
            "id": "directive-PepCarouselItemDirective-bf9481bc1ff054e64c1ae9cce2cb4911",
            "file": "projects/ngx-lib/carousel/carousel-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n    Directive,\n    ElementRef,\n    Input,\n    HostBinding,\n    Inject,\n} from '@angular/core';\n\n@Directive({\n    selector: '[pepCarouselItem]',\n})\nexport class PepCarouselItemDirective {\n    @HostBinding('style.display')\n    display = 'inline-block';\n\n    @Input('dragDisabled')\n    get dragDisabled() {\n        return this._dragDisabled;\n    }\n    set dragDisabled(value: boolean) {\n        this._dragDisabled = value;\n    }\n\n    _dragDisabled = false;\n\n    _elementRef: ElementRef;\n\n    constructor(@Inject(ElementRef) elementRef: ElementRef) {\n        this._elementRef = elementRef;\n    }\n}\n",
            "selector": "[pepCarouselItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dragDisabled",
                    "line": 17
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.display",
                    "defaultValue": "'inline-block'",
                    "line": 14
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_dragDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "dragDisabled": {
                    "name": "dragDisabled",
                    "setSignature": {
                        "name": "dragDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PepClipboardDirective",
            "id": "directive-PepClipboardDirective-ccff136b558622c83bbb0933027a794d",
            "file": "projects/ngx-lib/src/core/clipboard/clipboard.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\n\n// Import the application components and services.\nimport { PepClipboardService } from './clipboard.service';\n\n// This directive acts as a simple glue layer between the given [clipboard] property\n// and the underlying ClipboardService. Upon the (click) event, the [clipboard] value\n// will be copied to the ClipboardService and a (clipboardCopy) event will be emitted.\n@Directive({\n    selector: '[pepClipboard]',\n    inputs: ['value: clipboard'],\n    outputs: ['copyEvent: clipboardCopy', 'errorEvent: clipboardError'],\n    host: {\n        '(click)': 'copyToClipboard()',\n    },\n})\nexport class PepClipboardDirective {\n    // public copyEvent: EventEmitter<string>;\n    // public errorEvent: EventEmitter<Error>;\n    // public value: string;\n    // private clipboardService: ClipboardService;\n    // // I initialize the clipboard directive.\n    // constructor(clipboardService: ClipboardService) {\n    //     this.clipboardService = clipboardService;\n    //     this.copyEvent = new EventEmitter();\n    //     this.errorEvent = new EventEmitter();\n    //     this.value = '';\n    // }\n    // // ---\n    // // PUBLIC METODS.\n    // // ---\n    // // I copy the value-input to the Clipboard. Emits success or error event.\n    // public copyToClipboard(): void {\n    //     this.clipboardService\n    //         .copy(this.value)\n    //         .then((value: string): void => {\n    //             this.copyEvent.emit(value);\n    //         })\n    //         .catch((error: Error): void => {\n    //             this.errorEvent.emit(error);\n    //         });\n    // }\n}\n",
            "selector": "[pepClipboard]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "PepDataQaDirective",
            "id": "directive-PepDataQaDirective-4ac30e98da5bbf8d734aa954fca04b1a",
            "file": "projects/ngx-lib/src/core/common/directives/data-qa.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n    Directive,\n    HostListener,\n    ElementRef,\n    Renderer2,\n    OnInit,\n    Input,\n} from '@angular/core';\n\n@Directive({\n    selector: '[pepDataQa]',\n})\nexport class PepDataQaDirective implements OnInit {\n    @Input('pepDataQa') dataQa: string;\n\n    constructor(private renderer: Renderer2, private element: ElementRef) {}\n\n    ngOnInit(): void {\n        this.renderer.setAttribute(\n            this.element.nativeElement,\n            'data-qa',\n            this.dataQa\n        );\n    }\n}\n",
            "selector": "[pepDataQa]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pepDataQa",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepIconDirective",
            "id": "directive-PepIconDirective-94c6a2c899b772efda54581d10882b43",
            "file": "projects/ngx-lib/icon/icon.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n    Directive,\n    OnInit,\n    Input,\n    Renderer2,\n    ElementRef,\n    Optional,\n    Inject,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PepIconRegistry } from './icon-registry.service';\nimport { PepUtilitiesService } from '@pepperi-addons/ngx-lib';\nimport { PepIconType } from './icon-generated.model';\n\n@Directive({\n    selector: '[pepSvgIcon]',\n})\nexport class PepIconDirective implements OnInit {\n    @Input('pepSvgIcon') iconName: PepIconType;\n\n    constructor(\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private utilitiesService: PepUtilitiesService,\n        private iconRegistry: PepIconRegistry,\n        @Optional() @Inject(DOCUMENT) private document: any\n    ) {}\n\n    ngOnInit(): void {\n        const svgData = this.iconRegistry.getIcon(this.iconName);\n        const svgIcon = this.utilitiesService.getSvgElementFromString(\n            this.document,\n            svgData\n        );\n        this.element.nativeElement.appendChild(svgIcon);\n        this.renderer.addClass(svgIcon, 'svg-icon');\n    }\n}\n",
            "selector": "[pepSvgIcon]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pepSvgIcon",
                    "line": 19,
                    "type": "PepIconType"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService"
                    },
                    {
                        "name": "iconRegistry",
                        "type": "PepIconRegistry"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconRegistry",
                        "type": "PepIconRegistry",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepInputAutoWidthDirective",
            "id": "directive-PepInputAutoWidthDirective-73d6cb05c82d486dbba0a1e4b64d859f",
            "file": "projects/ngx-lib/src/core/common/directives/auto-width.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    Renderer2,\n} from '@angular/core';\n\n@Directive({\n    selector: '[pepAutoWidth]',\n})\nexport class PepInputAutoWidthDirective implements AfterViewInit, OnDestroy {\n    @Input() includePadding = true;\n\n    private input: any = null;\n\n    constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n    ngAfterViewInit(): void {\n        if (this.el.nativeElement.tagName.toLowerCase() === 'input') {\n            this.input = this.el;\n        } else {\n            const list = this.el.nativeElement.querySelectorAll('input');\n            this.input = list.length > 0 ? list[0] : null;\n        }\n\n        if (this.input) {\n            this.input.addEventListener(\n                'blur',\n                this.setWidthUsingText.bind(this)\n            );\n            this.input.addEventListener(\n                'keyup',\n                this.setWidthUsingText.bind(this)\n            );\n        }\n\n        this.setWidthUsingText();\n    }\n\n    ngOnDestroy() {\n        this.input.removeEventListener(\n            'blur',\n            this.setWidthUsingText.bind(this)\n        );\n        this.input.removeEventListener(\n            'keyup',\n            this.setWidthUsingText.bind(this)\n        );\n    }\n\n    get paddingWidth(): number {\n        return this.includePadding\n            ? this._sumPropertyValues(['padding-left', 'padding-right'])\n            : 0;\n    }\n\n    get style() {\n        return getComputedStyle(this.input, '');\n    }\n\n    setWidth(width: number): void {\n        this.renderer.setStyle(this.input, 'width', width + 'px');\n    }\n\n    setWidthUsingText(): void {\n        if (this.input) {\n            const text = this.input.value;\n            this.setWidth(this.textWidth(text) + this.paddingWidth);\n        }\n    }\n\n    private _sumPropertyValues(properties: string[]): number {\n        return properties\n            .map((property) =>\n                parseInt(this.style.getPropertyValue(property), 10)\n            )\n            .reduce((a, b) => a + b, 0);\n    }\n\n    private textWidth(value: string): number {\n        const ctx = this.renderer.createElement('canvas').getContext('2d');\n        const {\n            fontStyle,\n            fontVariant,\n            fontWeight,\n            fontSize,\n            fontFamily,\n        } = this.style;\n\n        // font string format: {normal, normal, 700, 20px, Roboto, \"Helvetica Neue\", sans-serif}\n        ctx.font =\n            fontStyle +\n            ' ' +\n            fontVariant +\n            ' ' +\n            fontWeight +\n            ' ' +\n            fontSize +\n            ' ' +\n            fontFamily;\n        return ctx ? ctx.measureText(value).width : 0;\n    }\n}\n",
            "selector": "[pepAutoWidth]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "includePadding",
                    "defaultValue": "true",
                    "line": 15
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_sumPropertyValues",
                    "args": [
                        {
                            "name": "properties",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "properties",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidthUsingText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "textWidth",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "paddingWidth": {
                    "name": "paddingWidth",
                    "getSignature": {
                        "name": "paddingWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 54
                    }
                },
                "style": {
                    "name": "style",
                    "getSignature": {
                        "name": "style",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            }
        },
        {
            "name": "PepMenuBlurDirective",
            "id": "directive-PepMenuBlurDirective-a52715f07b893d4a552b73f431a534bf",
            "file": "projects/ngx-lib/src/core/common/directives/menu-blur.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[pepMenuBlur]',\n})\nexport class PepMenuBlurDirective {\n    constructor(private element: ElementRef) {}\n\n    @HostListener('menuClosed')\n    menuClosedEvent(): void {\n        setTimeout(() => {\n            this.element.nativeElement.blur();\n        }, 0);\n    }\n\n    @HostListener('menuOpened')\n    menuOpenedEvent(): void {\n        setTimeout(() => {\n            this.element.nativeElement.blur();\n        }, 0);\n    }\n}\n",
            "selector": "[pepMenuBlur]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "menuClosed",
                    "args": [],
                    "argsDecorator": [],
                    "line": 10
                },
                {
                    "name": "menuOpened",
                    "args": [],
                    "argsDecorator": [],
                    "line": 17
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepPreventMultiClickDirective",
            "id": "directive-PepPreventMultiClickDirective-5be541204a30665203d608bbd27fd526",
            "file": "projects/ngx-lib/src/core/common/directives/prevent-multi-click.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n    selector: '[pepPreventMultiClick]',\n})\nexport class PepPreventMultiClickDirective {\n    @Input() disabledTime = 1000;\n\n    @HostListener('click', ['$event'])\n    clickEvent(event): void {\n        event.srcElement.setAttribute('disabled', true);\n        setTimeout(() => {\n            event.srcElement.removeAttribute('disabled');\n        }, this.disabledTime);\n    }\n}\n",
            "selector": "[pepPreventMultiClick]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "disabledTime",
                    "defaultValue": "1000",
                    "line": 7
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 10
                }
            ],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "PepRtlClassDirective",
            "id": "directive-PepRtlClassDirective-7131c64a86ecac6540a715fe3f3a77ab",
            "file": "projects/ngx-lib/src/core/layout/rtl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Renderer2, ElementRef, OnInit } from '@angular/core';\nimport { PepLayoutService } from './layout.service';\n\n@Directive({\n    selector: '[pepRtlClass]',\n})\nexport class PepRtlClassDirective implements OnInit {\n    constructor(\n        private layoutService: PepLayoutService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        const isRtl = this.layoutService.isRtl();\n\n        if (isRtl) {\n            this.renderer.addClass(this.element.nativeElement, 'rtl');\n        }\n    }\n}\n\n@Directive({\n    selector: '[pepRtlDirection]',\n})\nexport class PepRtlDirectionDirective implements OnInit {\n    constructor(\n        private layoutService: PepLayoutService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        const isRtl = this.layoutService.isRtl();\n\n        this.renderer.setAttribute(\n            this.element.nativeElement,\n            'dir',\n            isRtl ? 'rtl' : 'ltr'\n        );\n    }\n}\n",
            "selector": "[pepRtlClass]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepRtlDirectionDirective",
            "id": "directive-PepRtlDirectionDirective-7131c64a86ecac6540a715fe3f3a77ab",
            "file": "projects/ngx-lib/src/core/layout/rtl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Renderer2, ElementRef, OnInit } from '@angular/core';\nimport { PepLayoutService } from './layout.service';\n\n@Directive({\n    selector: '[pepRtlClass]',\n})\nexport class PepRtlClassDirective implements OnInit {\n    constructor(\n        private layoutService: PepLayoutService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        const isRtl = this.layoutService.isRtl();\n\n        if (isRtl) {\n            this.renderer.addClass(this.element.nativeElement, 'rtl');\n        }\n    }\n}\n\n@Directive({\n    selector: '[pepRtlDirection]',\n})\nexport class PepRtlDirectionDirective implements OnInit {\n    constructor(\n        private layoutService: PepLayoutService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        const isRtl = this.layoutService.isRtl();\n\n        this.renderer.setAttribute(\n            this.element.nativeElement,\n            'dir',\n            isRtl ? 'rtl' : 'ltr'\n        );\n    }\n}\n",
            "selector": "[pepRtlDirection]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepTargetDirective",
            "id": "directive-PepTargetDirective-64133024896433d564b8d9c5e8788dc0",
            "file": "projects/ngx-lib/src/core/portal/target.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, OnInit, Input, ViewContainerRef } from '@angular/core';\nimport { PepPortalService } from './portal.service';\n\n@Directive({\n    selector: '[pepTarget]',\n})\nexport class PepTargetDirective implements OnInit {\n    @Input('pepTarget') targetName: string;\n\n    constructor(\n        private portalService: PepPortalService,\n        private viewContainer: ViewContainerRef\n    ) {}\n\n    ngOnInit(): void {\n        this.portalService.addTarget(this.targetName, this.viewContainer);\n    }\n}\n",
            "selector": "[pepTarget]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "pepTarget",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "portalService",
                        "type": "PepPortalService"
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "portalService",
                        "type": "PepPortalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PepTextboxValidationDirective",
            "id": "directive-PepTextboxValidationDirective-c3532dc05c5956c9d06dc744fe79ccb8",
            "file": "projects/ngx-lib/textbox/textbox-validation.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    HostListener,\n    Input,\n    OnInit,\n} from '@angular/core';\nimport { PepTextboxFieldType, PepLayoutService } from '@pepperi-addons/ngx-lib';\n\n@Directive({\n    selector: '[pepTextboxValidation]',\n})\nexport class PepTextboxValidationDirective implements OnInit {\n    @Input() type: PepTextboxFieldType = 'text';\n\n    // @Input() allowDecimals: boolean = true;\n    // @Input() allowSign: boolean = false;\n    // @Input() decimalSeparator: string = '.';\n\n    decimalSeparator = '.';\n    previousValue = '';\n\n    // --------------------------------------\n    //  Regular expressions\n    integerUnsigned = '^[0-9]*$';\n    integerSigned = '^-?[0-9]+$';\n    // decimalUnsigned: string = '^[0-9]+(.[0-9]+)?$';\n    decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\n\n    phone = '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-s./0-9]*$';\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {}\n\n    ngOnInit() {\n        this.decimalSeparator = getLocaleNumberSymbol(\n            this.layoutService.getCurrentLanguage(),\n            NumberSymbol.Decimal\n        );\n    }\n\n    private isNumber(): boolean {\n        return this.isInteger() || this.isDecimal();\n    }\n\n    private isInteger(): boolean {\n        return this.type === 'int';\n    }\n\n    private isDecimal(): boolean {\n        return (\n            this.type === 'currency' ||\n            this.type === 'percentage' ||\n            this.type === 'real'\n        );\n    }\n\n    private isPhone(): boolean {\n        return this.type === 'phone';\n    }\n\n    private isText(): boolean {\n        return (\n            this.type === 'email' ||\n            this.type === 'link' ||\n            this.type === 'text'\n        );\n    }\n\n    @HostListener('change', ['$event'])\n    onChange(e) {\n        this.validateValue(this.hostElement.nativeElement.value);\n    }\n\n    @HostListener('paste', ['$event'])\n    onPaste(e) {\n        // get and validate data from clipboard\n        const value = e.clipboardData.getData('text/plain');\n        this.validateValue(value);\n        e.preventDefault();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(e: KeyboardEvent) {\n        const cursorPosition: number = e.target['selectionStart'];\n        const originalValue: string = e.target['value'];\n        const key: string = this.getName(e);\n        const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n        const signExists = originalValue.includes('-');\n        const separatorExists = originalValue.includes(this.decimalSeparator);\n\n        // allowed keys apart from numeric characters\n        let allowedKeys = [\n            'Backspace',\n            'ArrowLeft',\n            'ArrowRight',\n            'Escape',\n            'Tab',\n            'Home',\n            'End',\n            'Delete',\n        ];\n\n        if (this.isNumber()) {\n            // when decimals are allowed, add\n            // decimal separator to allowed codes when\n            // its position is not close to the the sign (-. and .-)\n            const separatorIsCloseToSign = signExists && cursorPosition <= 1;\n            if (\n                this.isDecimal() &&\n                !separatorIsCloseToSign &&\n                !separatorExists\n            ) {\n                if (this.decimalSeparator == '.') allowedKeys.push('.');\n                else allowedKeys.push(',');\n            }\n\n            // when minus sign is allowed, add its\n            // key to allowed key only when the\n            // cursor is in the first position, and\n            // first character is different from\n            // decimal separator\n            const firstCharacterIsSeparator =\n                originalValue.charAt(0) != this.decimalSeparator;\n            if (\n                !signExists &&\n                firstCharacterIsSeparator &&\n                cursorPosition == 0\n            ) {\n                allowedKeys.push('-');\n            }\n        } else if (this.isPhone()) {\n            allowedKeys = allowedKeys.concat([\n                '.',\n                '-',\n                '+',\n                '(',\n                ')',\n                '*',\n                '#',\n            ]);\n        }\n\n        // allow some non-numeric characters\n        if (\n            allowedKeys.indexOf(key) != -1 ||\n            // Allow: Ctrl+A and Command+A\n            (key == 'a' && controlOrCommand) ||\n            // Allow: Ctrl+C and Command+C\n            (key == 'c' && controlOrCommand) ||\n            // Allow: Ctrl+V and Command+V\n            (key == 'v' && controlOrCommand) ||\n            // Allow: Ctrl+X and Command+X\n            (key == 'x' && controlOrCommand)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n\n        // save value before keydown event\n        this.previousValue = originalValue;\n\n        if (this.isNumber()) {\n            // allow number characters only\n            const isNumber = new RegExp(this.integerUnsigned).test(key);\n            if (isNumber) return;\n            else e.preventDefault();\n        } else if (this.isPhone()) {\n            // allow phone characters only\n            const isPhone = new RegExp(this.phone).test(key);\n            if (isPhone) return;\n            else e.preventDefault();\n        }\n    }\n\n    validateValue(value: string): void {\n        if (this.isNumber()) {\n            // choose the appropiate regular expression\n            let regex: string;\n\n            if (this.isDecimal()) {\n                regex = this.decimalSigned;\n            } else {\n                regex = this.integerSigned;\n            }\n\n            // when a numbers begins with a decimal separator,\n            // fix it adding a zero in the beginning\n            const firstCharacter = value.charAt(0);\n            if (firstCharacter == this.decimalSeparator) value = 0 + value;\n\n            // when a numbers ends with a decimal separator,\n            // fix it adding a zero in the end\n            const lastCharacter = value.charAt(value.length - 1);\n            if (lastCharacter == this.decimalSeparator) value = value + 0;\n\n            // test number with regular expression, when\n            // number is invalid, replace it with a zero\n            const valid: boolean = new RegExp(regex).test(value);\n            this.hostElement.nativeElement['value'] = valid ? value : 0;\n        } else if (this.isPhone()) {\n            // test phone with regular expression, when\n            // phone is invalid, replace it with the previousValue\n            const valid: boolean = new RegExp(this.phone).test(value);\n            this.hostElement.nativeElement['value'] = valid\n                ? value\n                : this.previousValue;\n        }\n    }\n\n    getName(e): string {\n        if (e.key) {\n            return e.key;\n        } else {\n            // for old browsers\n            if (e.keyCode && String.fromCharCode) {\n                switch (e.keyCode) {\n                    case 8:\n                        return 'Backspace';\n                    case 9:\n                        return 'Tab';\n                    case 27:\n                        return 'Escape';\n                    case 37:\n                        return 'ArrowLeft';\n                    case 39:\n                        return 'ArrowRight';\n                    case 188:\n                        return ',';\n                    case 190:\n                        return '.';\n                    case 109:\n                        return '-'; // minus in numbpad\n                    case 173:\n                        return '-'; // minus in alphabet keyboard in firefox\n                    case 189:\n                        return '-'; // minus in alphabet keyboard in chrome\n                    default:\n                        return String.fromCharCode(e.keyCode);\n                }\n            }\n        }\n    }\n}\n",
            "selector": "[pepTextboxValidation]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 15,
                    "type": "PepTextboxFieldType"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 74
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 87
                },
                {
                    "name": "paste",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 79
                }
            ],
            "propertiesClass": [
                {
                    "name": "decimalSeparator",
                    "defaultValue": "'.'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "decimalSigned",
                    "defaultValue": "'^-?[0-9]+(.[0-9]+)?$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "integerSigned",
                    "defaultValue": "'^-?[0-9]+$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "integerUnsigned",
                    "defaultValue": "'^[0-9]*$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "phone",
                    "defaultValue": "'^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-s./0-9]*$'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "previousValue",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 214,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDecimal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isInteger",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isPhone",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isText",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "validateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-339accb277eb5cf2b75a602ede83ed9b",
            "file": "projects/web-app/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customizationService",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "footerHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "loaderService",
                    "type": "PepLoaderService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showLoading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "\"keep-background-on-focus\" | \"invert\"",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getTopBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "navigateHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n    PepCustomizationService,\n    PepLoaderService,\n    PepStyleType,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    footerHeight: number;\n    showLoading = false;\n\n    constructor(\n        public customizationService: PepCustomizationService,\n        public loaderService: PepLoaderService\n    ) {\n        // this.loaderService.show();\n        this.loaderService.onChanged$.subscribe((show) => {\n            this.showLoading = show;\n        });\n    }\n\n    ngOnInit() {\n        this.customizationService.setThemeVariables();\n        this.customizationService.hideSettings();\n\n        this.customizationService.footerHeight.subscribe((footerHeight) => {\n            this.footerHeight = footerHeight;\n        });\n    }\n\n    getTopBarStyle() {\n        return document.documentElement.style.getPropertyValue(\n            PepCustomizationService.STYLE_TOP_HEADER_KEY\n        ) as PepStyleType;\n    }\n\n    navigateHome() {\n        alert('Home');\n    }\n\n    getButtonClassName() {\n        return this.getTopBarStyle() === 'strong'\n            ? 'keep-background-on-focus'\n            : 'invert';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'ngx-lib/src/core/style/abstracts/mixins';\n@import 'ngx-lib/src/core/style/abstracts/variables';\n\n.viewportDiv {\n    background: white;\n    display: -ms-grid;\n    display: grid;\n    height: 100vh;\n\n    max-width: $max-scr-width;\n    margin: 0 auto;\n\n    grid-template-areas: 'header header' 'sidebar content';\n    -ms-grid-rows: $header-height 1fr;\n    grid-template-rows: $header-height 1fr;\n    -ms-grid-columns: auto 1fr;\n    grid-template-columns: auto 1fr;\n\n    header {\n        grid-row: header;\n        -ms-grid-row: header;\n        grid-row-start: header;\n        -ms-grid-row-span: NaN;\n        grid-row-end: header;\n        grid-column: header;\n        -ms-grid-column: header;\n        grid-column-start: header;\n        -ms-grid-column-span: NaN;\n        grid-column-end: header;\n\n        position: fixed;\n        top: 0;\n        width: 100%;\n        z-index: $z-index-high + 1;\n    }\n\n    aside {\n        grid-area: sidebar;\n    }\n\n    main {\n        -ms-grid-row: 2;\n        -ms-grid-column: 2;\n        grid-area: content;\n    }\n}\n\n#header {\n    height: $header-height;\n\n    .navbar {\n        // border: none !important;\n        border-radius: 0;\n        @include box-sizing(border-box);\n        height: inherit;\n        width: 100%;\n        padding: $spacing-lg $double-content-padding;\n        margin: 0;\n        max-width: $max-scr-width;\n\n        @media (max-width: $screen-max-size-xs) {\n            padding-left: $content-padding;\n            padding-right: $content-padding;\n        }\n\n        .navbar-default {\n            background-color: transparent;\n            border-bottom-color: transparent;\n        }\n    }\n}\n\n#mainCont {\n    flex-grow: 1;\n    min-height: 100%;\n}\n\n#loadingSpinnerModal {\n    z-index: $z-index-high + 101;\n    height: 1rem;\n    width: 100%;\n    position: fixed;\n    left: 0;\n    background-color: transparent;\n    opacity: 1;\n \n    &.no-top-bar {\n        top: $header-height !important;\n    }\n}\n \n#loadingSpinner {\n    z-index: $z-index-high;\n    width: 100%;\n    margin-top: 5px;\n \n    div {\n        width: 7px;\n        height: 7px;\n        position: absolute;\n        left: -20px;\n        // background-color: @pepperiGreen;\n        border-radius: 50%;\n        -moz-animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\n        -o-animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\n        -webkit-animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\n        animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\n    }\n \n    div:nth-child(2) {\n        -moz-animation-delay: 150ms;\n        -o-animation-delay: 150ms;\n        -webkit-animation-delay: 150ms;\n        animation-delay: 150ms;\n    }\n \n    div:nth-child(3) {\n        -moz-animation-delay: 300ms;\n        -o-animation-delay: 300ms;\n        -webkit-animation-delay: 300ms;\n        animation-delay: 300ms;\n    }\n \n    div:nth-child(4) {\n        -moz-animation-delay: 450ms;\n        -o-animation-delay: 450ms;\n        -webkit-animation-delay: 450ms;\n        animation-delay: 450ms;\n    }\n \n    div:nth-child(5) {\n        -moz-animation-delay: 600ms;\n        -o-animation-delay: 600ms;\n        -webkit-animation-delay: 600ms;\n        animation-delay: 600ms;\n    }\n}\n\n@keyframes move {\n    0% {\n        left: 0%;\n    }\n    50% {\n        left: 100%;\n    }\n    75% {\n        left: 100%;\n    }\n    100% {\n        left: 100%;\n    }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n    This code is for stand alon addon, if this addon should be under webapp remove all\n    except the <router-outlet></router-outlet>\n-->\n<!-- <router-outlet></router-outlet> -->\n\n<div class=\"viewportDiv\" #viewportDiv pepRtlDirection>\n    <header>\n        <div id=\"header\" pepRtlClass>\n            <nav class=\"navbar {{ getTopBarStyle() }} navbar-light bg-faded menuCont\"\n                [ngStyle]=\"{'background-color': customizationService.getBrandingMainColor() }\">\n                <div class=\"pep-spacing-element-negative\">\n                    <button id=\"btnMenuHome\" (click)=\"navigateHome()\"\n                        class=\"pep-spacing-element pep-button icon-button sm weak pull-left flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        <mat-icon>\n                            <pep-icon name=\"system_home\"></pep-icon>\n                        </mat-icon>\n                    </button>\n                </div>\n                <div class=\"pep-spacing-element-negative\">\n                    <button id=\"btnToggleSettings\"\n                        class=\"pep-spacing-element pep-button icon-button sm weak pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        <mat-icon>\n                            <pep-icon name=\"system_menu\"></pep-icon>\n                        </mat-icon>\n                    </button>\n                    <button [routerLink]=\"['carousel-example']\"\n                        class=\"pep-spacing-element pep-button sm strong pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        carousel\n                    </button>\n                    <button [routerLink]=\"['components-example']\"\n                        class=\"pep-spacing-element pep-button sm strong pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        components\n                    </button>\n                    <button [routerLink]=\"['inline-list-example']\"\n                        class=\"pep-spacing-element pep-button sm strong pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        inline list\n                    </button>\n                    <button [routerLink]=\"['list-example']\"\n                        class=\"pep-spacing-element pep-button sm strong pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        list\n                    </button>\n                    <button [routerLink]=\"['top-bar-example']\"\n                        class=\"pep-spacing-element pep-button sm strong pull-right flip \"\n                        [ngClass]=\"getButtonClassName()\" mat-button>\n                        top bar\n                    </button>\n                </div>\n            </nav>\n        </div>\n    </header>\n    <aside>\n    </aside>\n    <main>\n        <div #loadingSpinner pepRtlClass [ngStyle]=\"{ visibility: showLoading ? 'visible' : 'hidden' }\"\n            id=\"loadingSpinnerModal\">\n            <div id=\"loadingSpinner\">\n                <div class=\"pep-loading-spinner\" *ngFor=\"let number of [0, 1, 2, 3, 4]\"\n                    [ngStyle]=\"{ 'background-color': customizationService?.getLoadingSpinnerColor() }\"></div>\n            </div>\n        </div>\n        <div id=\"mainCont\" #mainCont pepRtlDirection pepRtlClass [ngStyle]=\"{ 'padding-bottom': footerHeight + 'rem' }\">\n            <router-outlet [ngStyle]=\"{ 'padding-bottom': footerHeight + 'rem' }\"></router-outlet>\n        </div>\n    </main>\n</div>\n<pep-size-detector></pep-size-detector>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-9454480afc0f07afd4afe2fc46cdb144",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button       type=\"button\"\n       (click)=\"onClick.emit($event)\"\n       [ngClass]=\"classes\"\n       [ngStyle]=\"{ 'background-color': backgroundColor }\"\n   >\n       {{ label }}\n   </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-button',\n    template: ` <button\n        type=\"button\"\n        (click)=\"onClick.emit($event)\"\n        [ngClass]=\"classes\"\n        [ngStyle]=\"{ 'background-color': backgroundColor }\"\n    >\n        {{ label }}\n    </button>`,\n    styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    @Input()\n    primary = false;\n\n    /**\n     * What background color to use\n     */\n    @Input()\n    backgroundColor?: string;\n\n    /**\n     * How large should the button be?\n     */\n    @Input()\n    size: 'small' | 'medium' | 'large' = 'medium';\n\n    /**\n     * Button contents\n     *\n     * @required\n     */\n    @Input()\n    label = 'Button';\n\n    /**\n     * Optional click handler\n     */\n    @Output()\n    onClick = new EventEmitter<Event>();\n\n    public get classes(): string[] {\n        const mode = this.primary\n            ? 'storybook-button--primary'\n            : 'storybook-button--secondary';\n\n        return ['storybook-button', `storybook-button--${this.size}`, mode];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: 700;\n    border: 0;\n    border-radius: 3em;\n    cursor: pointer;\n    display: inline-block;\n    line-height: 1;\n}\n.storybook-button--primary {\n    color: white;\n    background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n    color: #333;\n    background-color: transparent;\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n    font-size: 12px;\n    padding: 10px 16px;\n}\n.storybook-button--medium {\n    font-size: 14px;\n    padding: 11px 20px;\n}\n.storybook-button--large {\n    font-size: 16px;\n    padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CarouselExampleComponent",
            "id": "component-CarouselExampleComponent-de957e7528352f2c3d349aecca886f2b",
            "file": "projects/web-app/src/app/carousel-example/carousel-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./carousel-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadCrumbsItems",
                    "type": "Array<PepBreadCrumbItem>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "items",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuItems",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "searchAutoCompleteValues",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "title",
                    "defaultValue": "'client-side'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "uiControl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "getCardsData",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<ObjectsDataRow>",
                    "typeParameters": [],
                    "line": 1973,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getCardsUiControl",
                    "args": [],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 1802,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getLinesData",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<ObjectsDataRow>",
                    "typeParameters": [],
                    "line": 277,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getLinesUiControl",
                    "args": [],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getMenuItems",
                    "args": [
                        {
                            "name": "withChildren",
                            "type": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<PepMenuItem>",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "withChildren",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadBreadCrumbsItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "loadlist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "menuClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1987,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1983,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1977,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1979,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchAutocompleteChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1999,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChanged",
                    "args": [
                        {
                            "name": "search",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1995,
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchStateChanged",
                    "args": [
                        {
                            "name": "searchStateChangeEvent",
                            "type": "IPepSearchStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1991,
                    "jsdoctags": [
                        {
                            "name": "searchStateChangeEvent",
                            "type": "IPepSearchStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n    PepLayoutService,\n    ObjectsDataRow,\n    PepScreenSizeType,\n    UIControl,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepSearchStateChangeEvent } from '@pepperi-addons/ngx-lib/search';\nimport {\n    pepIconSystemBin,\n    pepIconSystemSettings,\n} from '@pepperi-addons/ngx-lib/icon';\n\nimport { PepBreadCrumbItem, IPepBreadCrumbItemClickEvent } from '@pepperi-addons/ngx-lib/bread-crumbs';\n\n@Component({\n    templateUrl: './carousel-example.component.html',\n    styleUrls: ['./carousel-example.component.scss'],\n})\nexport class CarouselExampleComponent implements OnInit {\n    uiControl;\n    items;\n\n    title = 'client-side';\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    searchString = '';\n    searchAutoCompleteValues = [];\n\n    menuItems: Array<PepMenuItem>;\n    breadCrumbsItems: Array<PepBreadCrumbItem>;\n\n    constructor(public layoutService: PepLayoutService) {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n        });\n    }\n\n    ngOnInit(): void {\n        this.loadlist();\n        this.loadBreadCrumbsItems();\n        this.menuItems = this.getMenuItems();\n    }\n\n    loadBreadCrumbsItems() {\n        this.breadCrumbsItems = [];\n        this.breadCrumbsItems.push({ key: '0', text: 'Home' });\n        this.breadCrumbsItems.push({ key: '1', text: 'Carusel', disabled: false });\n        this.breadCrumbsItems.push({ key: '2', text: 'Carusel items', disabled: true });\n    }\n\n    getMenuItems(withChildren = true, index = 0): Array<PepMenuItem> {\n        let menuItems: Array<PepMenuItem>;\n\n        index++;\n\n        if (withChildren) {\n            menuItems = [\n                {\n                    key: 'test1',\n                    text: 'test 1',\n                    iconName: pepIconSystemBin.name,\n                },\n                {\n                    key: 'test2',\n                    text: 'test 2',\n                    iconName: pepIconSystemSettings.name,\n                },\n                { key: 'sep', type: 'splitter' },\n                {\n                    key: 'test3',\n                    text: 'test 3',\n                    iconName: pepIconSystemBin.name,\n                    children: this.getMenuItems(index <= 3, index),\n                },\n            ];\n        } else {\n            menuItems = [\n                { key: 'test1', text: 'test 1' },\n                { key: 'test2', text: 'test 2', disabled: true },\n                { key: 'sep', type: 'splitter' },\n                { key: 'test3', text: 'test 3' },\n            ];\n        }\n\n        return menuItems;\n    }\n\n    loadlist() {\n        const loadLines = true;\n        const uiControl = loadLines\n            ? this.getLinesUiControl()\n            : this.getCardsUiControl();\n        const rows = loadLines ? this.getLinesData() : this.getCardsData();\n\n        this.uiControl = uiControl;\n        this.items = rows;\n    }\n\n    private getLinesUiControl(): UIControl {\n        return JSON.parse(\n            `{\n                \"Columns\": 9,\n                \"ControlFields\": [\n                    {\n                        \"ApiName\": \"Image\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Image\",\n                        \"FieldType\": 20,\n                        \"Layout\": {\n                            \"Height\": 4,\n                            \"LineNumber\": 0,\n                            \"Width\": 4,\n                            \"X\": 0,\n                            \"XAlignment\": 3,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemExternalID\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item External ID\",\n                        \"FieldType\": 1,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 4,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ObjectMenu\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Object Menu\",\n                        \"FieldType\": 17,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 1,\n                            \"X\": 8,\n                            \"XAlignment\": 2,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": false,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemPrice\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Price\",\n                        \"FieldType\": 9,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 1,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"ColumnWidth\": 0,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Future Availability Date\",\n                        \"FieldType\": 5,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 2,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"Availabe\"\n                    },\n                    {\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"ColumnWidth\": 0,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Long Description\",\n                        \"FieldType\": 1,\n                        \"Layout\": {\n                            \"Height\": 2,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 3,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Unit Quantity\",\n                        \"FieldType\": 8,\n                        \"Layout\": {\n                            \"Height\": 2,\n                            \"LineNumber\": 0,\n                            \"Width\": 2,\n                            \"X\": 1,\n                            \"XAlignment\": 3,\n                            \"Y\": 4,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": false,\n                        \"Title\": \"\"\n                    }\n                ]\n            }`\n        );\n    }\n\n    private getLinesData(): Array<ObjectsDataRow> {\n        return JSON.parse(\n            `[{\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/8/55351188_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/8/55351188_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11107\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11107\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"c24392e3-8410-484f-aae7-65bb00a45dcc\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/9/55351189_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/9/55351189_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11109\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11109\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"111db36c-1fe1-46d6-969f-7e9ba19fb98b\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/0/55351190_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/0/55351190_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11152\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11152\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"941e160d-1a0d-41f0-9f33-100ecbc1adca\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/1/55351191_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/1/55351191_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11158\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11158\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"3d274499-2c5a-4b9a-a03f-a5f88104689b\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/2/55351192_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/2/55351192_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11161\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11161\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"74820a2c-f92d-468b-a440-ae92edc01fab\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/3/55351193_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/3/55351193_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11162\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11162\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Lightweight and flexible carbon fiber temple arms give these wide aviators a modern and sporty profile. The gray metal frame front has a brushed finish. Sunglasses shown with gradient gray tint.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Lightweight and flexible carbon fiber temple arms give these wide aviators a modern and sporty profile. The gray metal frame front has a brushed finish. Sunglasses shown with gradient gray tint.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"f883a5e8-95a6-48a5-b211-f9f0ed1b6f70\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/7/55351437_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/7/55351437_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11163\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11163\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Made with TR90 plastic, these square sunglasses are lightweight and flexible for superior comfort. The temple arms have rubber grips to keep them in place. This wide frame is available in the following colors: dark tortoiseshell (shown with dark gray tint), black (shown with dark gray tint and flame red mirror finish), and navy blue (shown with dark gray tint and sky blue mirror finish).\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"3eef19ee-d791-4708-82ff-137b3a18d0fc\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/8/55351438_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/8/55351438_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11164\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11164\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious look and feel with subtly curved lenses. These sunglasses offer a refined retro vibe, giving your look an instant update in the process. This boldly designed wide frame features glossy acetate with a shiny gold metal bridge and hinge accents. Opt for classic black (shown with dark gray tint and gold mirror finish) or tortoiseshell with matching temple arms (shown with dark gray tint).\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious look and feel with subtly curved lenses. These sunglasses offer a refined retro vibe, giving your look an instant update in the process. This boldly designed wide frame features glossy acetate with a shiny gold metal bridge and hinge accents. Opt for classic black (shown with dark gray tint and gold mirror finish) or tortoiseshell with matching temple arms (shown with dark gray tint).\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"b5d48e54-5849-4fbc-9a77-4989dfcd44c6\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/4/55351194_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/4/55351194_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11165\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11165\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 1869881459,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Lightweight and flexible carbon fiber temple arms give these wide aviators a modern and sporty profile. The gray metal frame front has a brushed finish. Sunglasses shown with gradient gray tint.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Using advanced edging technology and high-quality materials, our premium sunglasses have a luxurious feel with subtly curved lenses. Lightweight and flexible carbon fiber temple arms give these wide aviators a modern and sporty profile. The gray metal frame front has a brushed finish. Sunglasses shown with gradient gray tint.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"40921895-134c-4c85-b093-f7b14e414f27\"\n            },\n            {\n                \"AdditionalData\": null,\n                \"BackgroundColor\": \"\",\n                \"Fields\": [\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"Image\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 27,\n                        \"FormattedValue\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/5/55351195_1_200x200.jpg?ft=1\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"https://cdn.pepperi.com/WrntyImages/30013037/PortfolioItems/5/55351195_1.jpg?ft=1\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemExternalID\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"11166\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"11166\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ObjectMenu\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"$\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemPrice\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 9,\n                        \"FormattedValue\": \"$35.95\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"35.9500\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 5,\n                        \"FormattedValue\": \"\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"1970-01-01\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": false,\n                        \"FieldType\": 1,\n                        \"FormattedValue\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"Make a statement with these ultra-modern aviator sunglasses. The wide frame has a shiny gold metal frame front with an angular brow bar. The temple arms are made with matte black TR90 flexible plastic for a comfortable wear. Sunglasses are shown with dark gray tint with rose gold mirror finish.\",\n                        \"Visible\": true\n                    },\n                    {\n                        \"Accessory\": \"\",\n                        \"AdditionalValue\": \"\",\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"BackgroundColor\": \"\",\n                        \"Enabled\": true,\n                        \"FieldType\": 17,\n                        \"FormattedValue\": \"0\",\n                        \"GroupFields\": null,\n                        \"Highlighted\": false,\n                        \"NotificationInfo\": \"\",\n                        \"OptionalValues\": [],\n                        \"ReferenceObjectInternalType\": \"\",\n                        \"ReferenceObjectSubType\": \"\",\n                        \"ReferenceObjectType\": 0,\n                        \"TextColor\": \"\",\n                        \"UiPageKey\": \"\",\n                        \"Value\": \"0.0000\",\n                        \"Visible\": true\n                    }\n                ],\n                \"IsEditable\": false,\n                \"IsSelectableForActions\": false,\n                \"MainAction\": null,\n                \"Profile\": null,\n                \"Type\": 0,\n                \"UID\": \"543b8487-764c-4d59-8fbf-97db7bdb8d3c\"\n            }]`\n        );\n    }\n\n    private getCardsUiControl(): UIControl {\n        return JSON.parse(\n            `{\n                \"Columns\": 9,\n                \"ControlFields\": [\n                    {\n                        \"ApiName\": \"Image\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Image\",\n                        \"FieldType\": 20,\n                        \"Layout\": {\n                            \"Height\": 4,\n                            \"LineNumber\": 0,\n                            \"Width\": 4,\n                            \"X\": 0,\n                            \"XAlignment\": 3,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemExternalID\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item External ID\",\n                        \"FieldType\": 1,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 4,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ObjectMenu\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Object Menu\",\n                        \"FieldType\": 17,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 1,\n                            \"X\": 8,\n                            \"XAlignment\": 2,\n                            \"Y\": 0,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": false,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemPrice\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Price\",\n                        \"FieldType\": 9,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 1,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"ItemFutureAvailabilityDate\",\n                        \"ColumnWidth\": 0,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Future Availability Date\",\n                        \"FieldType\": 5,\n                        \"Layout\": {\n                            \"Height\": 1,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 2,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"Availabe\"\n                    },\n                    {\n                        \"ApiName\": \"ItemLongDescription\",\n                        \"ColumnWidth\": 0,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Item Long Description\",\n                        \"FieldType\": 1,\n                        \"Layout\": {\n                            \"Height\": 2,\n                            \"LineNumber\": 0,\n                            \"Width\": 5,\n                            \"X\": 4,\n                            \"XAlignment\": 1,\n                            \"Y\": 3,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": true,\n                        \"Title\": \"\"\n                    },\n                    {\n                        \"ApiName\": \"UnitsQuantity\",\n                        \"ColumnWidth\": 10,\n                        \"ColumnWidthType\": 0,\n                        \"FieldName\": \"Unit Quantity\",\n                        \"FieldType\": 8,\n                        \"Layout\": {\n                            \"Height\": 2,\n                            \"LineNumber\": 0,\n                            \"Width\": 2,\n                            \"X\": 1,\n                            \"XAlignment\": 3,\n                            \"Y\": 4,\n                            \"YAlignment\": 3\n                        },\n                        \"Mandatory\": false,\n                        \"MaxFieldCharacters\": 0,\n                        \"MaxFieldLines\": 0,\n                        \"MaxValue\": 1000000000,\n                        \"MinValue\": -1000000000,\n                        \"ReadOnly\": false,\n                        \"Title\": \"\"\n                    }\n                ]\n            }`\n        );\n    }\n\n    private getCardsData(): Array<ObjectsDataRow> {\n        return this.getLinesData();\n    }\n\n    onItemClicked(item: ObjectsDataRow): void { }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    onBreadCrumbItemClick(event: IPepBreadCrumbItemClickEvent) {\n        console.log(event);\n    }\n\n    menuClicked(event): void {\n        alert('menu clicked');\n    }\n\n    onSearchStateChanged(searchStateChangeEvent: IPepSearchStateChangeEvent) {\n        // debugger;\n    }\n\n    onSearchChanged(search: any) {\n        // debugger;\n    }\n\n    onSearchAutocompleteChanged(value) {\n        // debugger;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n// .carousel-container {\n//     position: relative;\n//     padding: 1.5rem 0;\n\n//     .carousel-arrow {\n//         position: absolute;\n//         top: 50%;\n//         transform: translate(0%, -50%);\n//         z-index: 1;\n\n//         // state-weak-invert-active($pepperi-theme)\n\n//         &.start-arrow { \n//             left: -0.5rem;\n//         }\n        \n//         &.end-arrow {\n//             right: -0.5rem;\n//         }   \n//     }\n\n// }",
                    "styleUrl": "./carousel-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"addon-page-container \">\n    <pep-top-bar [title]=\"''\">\n        <div header-start-content>\n            <pep-bread-crumbs class=\"pep-spacing-element\" [items]=\"breadCrumbsItems\" [displayType]=\"'items'\"\n                (itemClick)=\"onBreadCrumbItemClick($event)\">\n\n            </pep-bread-crumbs>\n            <pep-menu class=\"pep-spacing-element\" [styleType]=\"'regular'\" [text]=\"'open menu'\" [iconName]=\"'arrow_down'\"\n                [items]=\"menuItems\" (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n        </div>\n        <div header-end-content>\n\n        </div>\n        <pep-search [autoCompleteValues]=\"searchAutoCompleteValues\" [value]=\"searchString\"\n            (search)=\"onSearchChanged($event)\" (valueChange)=\"onSearchAutocompleteChanged($event)\"\n            (stateChange)=\"onSearchStateChanged($event)\">\n        </pep-search>\n    </pep-top-bar>\n    <div class=\"main-content \">\n        <div class=\"content\">\n            <pep-list-carousel [layout]=\"uiControl\" [items]=\"items\" (itemClick)=\"onItemClicked($event)\"\n                [itemSize]=\"'xs'\">\n            </pep-list-carousel>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "FormFieldsExampleComponent",
            "id": "component-FormFieldsExampleComponent-eda0c286c4f7cbcaf47d08c642a1149a",
            "file": "projects/web-app/src/app/form-fields-example/form-fields-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./form-fields-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-fields-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "maxDateValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "menuItems",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "minDateValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "richHtml",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchAutoCompleteValues",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "defaultValue": "'client-side'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "elementClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n    PepLayoutService,\n    IPepFieldClickEvent,\n    IPepFieldValueChangeEvent,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { pepIconSystemBin } from '@pepperi-addons/ngx-lib/icon';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\n@Component({\n    templateUrl: './form-fields-example.component.html',\n    styleUrls: ['./form-fields-example.component.scss'],\n})\nexport class FormFieldsExampleComponent implements OnInit {\n    title = 'client-side';\n    minDateValue: number;\n    maxDateValue: number;\n\n    richHtml;\n\n    menuItems: Array<PepMenuItem>;\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    searchString = '';\n    searchAutoCompleteValues = [];\n\n    constructor(public layoutService: PepLayoutService) {\n        this.minDateValue = new Date('1-1-2019').getTime();\n        this.maxDateValue = new Date('1-1-2021').getTime();\n\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n        });\n\n        this.richHtml =\n            \"<h1><u>Rich Text Value Example</u></h1><h2><em style=' color: rgb(147, 200, 14);'>Pepperi Rich Text Value </em><u style='color: rgb(0, 102, 204);'>Example</u></h2><ol><li><strong><u>Pepperi Rich Text Value Example</u></strong></li><li>Pepperi Rich text [value] example</li></ol>\";\n    }\n\n    ngOnInit(): void {\n        this.menuItems = [\n            { key: 'test1', text: 'test 1' },\n            { key: 'test2', text: 'test 2', disabled: true },\n            { key: 'sep', type: 'splitter' },\n            { key: 'test3', text: 'test 3' },\n        ];\n    }\n\n    menuClicked(event): void {\n        alert('menu clicked');\n    }\n\n    onValueChanged(event: IPepFieldValueChangeEvent) {\n        alert(`${event.key}: value was changed to ${event.value}`);\n    }\n\n    elementClicked(event: IPepFieldClickEvent) {\n        alert(`${event.key}: was clicked`);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-test-container {\n    //   margin: 0 2rem;\n\n    .main-content{\n    //   padding-top: .5rem;\n\n        .content {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr 1fr;\n            gap: 1px 60px;\n            grid-template-areas: \"child1 child2 child3 child4\";\n            .child1 { grid-area: child1; }\n\n            .child2 { grid-area: child2; }\n\n            .child3 { grid-area: child3; }\n\n            .child4 { grid-area: child4; }\n        }\n\n    }\n\n    .header-content{\n        .content{\n        //   padding-bottom: 1rem;\n        }\n    }\n}\n\n@media screen and (max-width: 767px) {\n    .ui-test-container{\n        .main-content {\n            .content {\n                display: block;\n            }\n        }\n    }\n}\n\n\n",
                    "styleUrl": "./form-fields-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"addon-page-container ui-test-container\">\n    <pep-top-bar [title]=\"'Components_Example_Title' | translate\">\n        <div header-start-content>\n\n        </div>\n        <div header-end-content>\n            <pep-button [value]=\"'test 1'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\"\n                [classNames]=\"'pep-spacing-element '\">\n            </pep-button>\n        </div>\n    </pep-top-bar>\n    <!-- <div class=\"header-content \">\n        <div class=\"content pep-border-bottom\">\n            <div class=\"left-container body-lg pep-spacing-element-negative pull-left flip\">\n                <div class=\"pep-spacing-element title\">\n                    {{ 'Components_Example_Title' | translate }}\n                </div>\n            </div>\n            <div class=\"right-container pep-spacing-element-negative pull-right flip\">\n                <pep-menu class=\"pull-right flip\" [xPosition]=\"'before'\" [sizeType]=\"'md'\" [styleType]=\"'weak'\"\n                    [items]=\"menuItems\" (menuClick)=\"menuClicked($event)\"\n                    (menuItemClick)=\"onMenuItemClicked($event)\">\n                </pep-menu>\n            </div>\n        </div>\n    </div> -->\n    <div class=\"main-content \">\n        <div class=\"content spacing-top\">\n            <div class=\"child1 child-container\">\n                <!-- Textbox Examples -->\n                <pep-textbox [key]=\"'Texbox'\" [label]=\"'Pepperi Texbox'\" [placeholder]=\"'place holder'\"\n                    [maxFieldCharacters]=\"15\" [required]=\"true\" [xAlignment]=\"'left'\" [rowSpan]=\"2\"\n                    [value]=\"'Pepperi Textbox'\" (valueChanged)=\"onValueChanged($event)\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'float'\" [label]=\"'Pepperi float'\" [type]=\"'real'\" [xAlignment]=\"'left'\"\n                    [value]=\"'9399371'\" [required]=\"true\" [formattedValue]=\"'9399371'\" [disabled]=\"false\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'currency'\" [label]=\"'Pepperi currency'\" [type]=\"'currency'\" [xAlignment]=\"'left'\"\n                    [value]=\"'1092.50'\" [required]=\"true\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'int'\" [label]=\"'Pepperi int'\" [type]=\"'int'\" [xAlignment]=\"'left'\"\n                    [value]=\"'20302'\" [required]=\"true\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'Email'\" [label]=\"'Pepperi Email'\" [type]=\"'email'\" [xAlignment]=\"'left'\"\n                    [value]=\"'email@pepperi.com'\" [formattedValue]=\"'email@pepperi.com'\" [disabled]=\"true\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'phone'\" [label]=\"'Pepperi phone'\" [type]=\"'phone'\" [xAlignment]=\"'left'\"\n                    [value]=\"'+972-54-3653-445'\">\n                </pep-textbox>\n\n                <!-- Separator Example -->\n                <pep-separator [key]=\"'sep1'\" [label]=\"'separator'\"></pep-separator>\n\n                <!-- Checkbox Exmaples -->\n                <pep-checkbox [key]=\"'cb1'\" [label]=\"'Pepperi Checkbox'\" [value]=\"'true'\" [xAlignment]=\"'left'\"\n                    (valueChanged)=\"onValueChanged($event)\">\n                </pep-checkbox>\n                <pep-checkbox [key]=\"'bt1'\" [label]=\"'Pepperi Emoji Checkbox'\" [type]=\"'booleanText'\" [value]=\"'true'\"\n                    [additionalValue]='{ \"CheckedText\": \"❤\", \"UncheckedText\": \"💛\" }' [xAlignment]=\"'left'\">\n                </pep-checkbox>\n\n                <!-- Date Examples -->\n                <pep-date [key]=\"'date1'\" [required]=\"true\" [label]=\"'Pepperi Date'\" [value]=\"'1-1-2020'\"\n                    [minValue]=\"minDateValue\" [maxValue]=\"maxDateValue\" [xAlignment]=\"'left'\"\n                    (valueChanged)=\"onValueChanged($event)\">\n                </pep-date>\n                <pep-date [key]=\"'dateTime1'\" [label]=\"'Pepperi Date Time'\" [type]=\"'datetime'\"\n                    [value]=\"'1-1-2020 12:00'\" [xAlignment]=\"'left'\" (valueChanged)=\"onValueChanged($event)\">\n                </pep-date>\n\n                <!-- Quantity Selector -->\n                <pep-quantity-selector [key]=\"'qs2'\" [label]=\"'Pepperi Quantity Selector 1'\" [type]=\"'button'\"\n                    [value]=\"'55'\" [xAlignment]=\"'left'\" (valueChanged)=\"onValueChanged($event)\">\n                </pep-quantity-selector>\n            </div>\n\n            <div class=\"child2 child-container\">\n                <!-- Signature Example -->\n                <pep-signature [key]=\"'sig1'\"\n                    [src]=\"'https://i.ibb.co/VMHwLkm/58957776-8700-4c6a-b9bc-a171b84d8080.png'\"\n                    [label]=\"'Pepperi Signature'\" [xAlignment]=\"'center'\" [rowSpan]=\"4\"\n                    (valueChanged)=\"onValueChanged($event)\">\n                </pep-signature>\n\n                <!-- Attachment Example -->\n                <pep-attachment [key]=\"'attachment1'\" [label]=\"'Pepperi Attachment'\" [xAlignment]=\"'center'\"\n                    [rowSpan]=\"2\" (valueChanged)=\"onValueChanged($event)\">\n                </pep-attachment>\n\n                <!-- Icons Examples -->\n                <!--\n                    <pep-icon name=\"system_spinner\" [spin]=\"true\"></pep-icon>\n                    <pep-icon name=\"system_bolt\"></pep-icon>\n                    <pep-icon name=\"no_image\"></pep-icon> \n                -->\n            </div>\n\n            <div class=\"child3 child-container\">\n                <!-- Images Examples Events [elementClicked, valueChanged]-->\n                <!-- <pep-image [key]=\"'No Image'\" [src]=\"\" [label]=\"'image'\" [xAlignment]=\"'center'\"\n                    [rowSpan]=\"6\">\n                </pep-image> -->\n\n                <pep-image [key]=\"'Image'\" [label]=\"'Pepperi Image'\" [xAlignment]=\"'center'\" [rowSpan]=\"4\"\n                    [disabled]=\"true\"\n                    [src]=\"'https://idpfiles.sandbox.pepperi.com/f389fd2e-4a31-4965-a21e-3a98b4553300/images/logo.svg'\"\n                    (elementClicked)=\"elementClicked($event)\">\n                </pep-image>\n\n                <!-- Filmstrip Examples -->\n                <!-- <pep-images-filmstrip [key]=\"'Images Filmstrip 1'\" [xAlignment]=\"'center'\"\n                    [label]=\"'Pepperi Images Filmstrip 1'\" [showTitle]=\"true\" [rowSpan]=\"3\" [value]=\"'https://idpfiles.sandbox.pepperi.com/f389fd2e-4a31-4965-a21e-3a98b4553300/images/left-side-background.jpg;\n                    https://idpfiles.sandbox.pepperi.com/f389fd2e-4a31-4965-a21e-3a98b4553300/images/logo.svg'\">\n                </pep-images-filmstrip> -->\n\n                <pep-images-filmstrip [key]=\"'Images Filmstrip 2'\" [xAlignment]=\"'center'\"\n                    [label]=\"'Pepperi Images Filmstrip 1'\" [showTitle]=\"true\" [rowSpan]=\"7\"\n                    [value]=\"'https://idpfiles.sandbox.pepperi.com/f389fd2e-4a31-4965-a21e-3a98b4553300/images/left-side-background.jpg;https://idpfiles.sandbox.pepperi.com/f389fd2e-4a31-4965-a21e-3a98b4553300/images/logo.svg'\"\n                    (elementClicked)=\"elementClicked($event)\">\n                </pep-images-filmstrip>\n            </div>\n\n            <div class=\"child4 child-container\">\n                <!-- Quantity Selector -->\n                <pep-quantity-selector [key]=\"'qs1'\" [label]=\"'Pepperi Quantity Selector 2'\" [value]=\"'50'\"\n                    [xAlignment]=\"'right'\" (elementClicked)=\"elementClicked($event)\">\n                </pep-quantity-selector>\n\n                <!-- Select Example -->\n                <pep-select [key]=\"'select1'\" [label]=\"'Pepperi Select'\" [value]=\"'val2'\" [xAlignment]=\"'right'\"\n                    [options]='[{ \"key\": \"val1\", \"value\": \"Option 1\" }, { \"key\": \"val2\", \"value\": \"Option 2\" }]'\n                    (valueChanged)=\"onValueChanged($event)\">\n                </pep-select>\n\n                <pep-select [key]=\"'multi1'\" [label]=\"'Pepperi Multi Select'\" [type]=\"'multi'\" [value]=\"'val1;val2'\"\n                    [xAlignment]=\"'right'\"\n                    [options]='[{ \"key\": \"val1\", \"value\": \"Option 1\" }, { \"key\": \"val2\", \"value\": \"Option 2\" }, { \"key\": \"val3\", \"value\": \"Option 3\" }, { \"key\": \"val4\", \"value\": \"Option 4\" }]'\n                    (valueChanged)=\"onValueChanged($event)\">\n                </pep-select>\n\n                <!-- Textarea Example -->\n                <pep-textarea [key]=\"'textarea1'\" [label]=\"'Pepperi Text Area'\" [value]=\"'Pepperi Textarea Example'\"\n                    [rowSpan]=\"2\" [maxFieldCharacters]=\"300\" [xAlignment]=\"'right'\">\n                </pep-textarea>\n\n                <!-- Rich Html Textarea Example -->\n                <pep-rich-html-textarea [key]=\"'richText1'\" [label]=\"'Pepperi Rich Html Textarea'\" [value]=\"richHtml\"\n                    [rowSpan]=\"3\" [maxFieldCharacters]=\"300\" [xAlignment]=\"'left'\" [disabled]=\"true\">\n                </pep-rich-html-textarea>\n\n                <!-- <pep-rich-html-textarea [key]=\"'richText2'\" [label]=\"'richText2'\" [value]=\"richTextValue\" [rowSpan]=\"3\"\n                    [maxFieldCharacters]=\"300\" [xAlignment]=\"'right'\" [inlineMode]=\"true\">\n                </pep-rich-html-textarea> -->\n            </div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b945b80bf6f50a562be9ff7cf2739c6d",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>        <div class=\"wrapper\">\n            <div>\n                <svg\n                    width=\"32\"\n                    height=\"32\"\n                    viewBox=\"0 0 32 32\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\"\n                        />\n                        <path\n                            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n                            fill=\"#555AB9\"\n                        />\n                        <path\n                            d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n                            fill=\"#91BAF8\"\n                        />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <storybook-button\n                    *ngIf=\"user\"\n                    size=\"small\"\n                    (onClick)=\"onLogout.emit($event)\"\n                    label=\"Log out\"\n                ></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    size=\"small\"\n                    (onClick)=\"onLogin.emit($event)\"\n                    label=\"Log in\"\n                ></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    primary\n                    size=\"small\"\n                    (onClick)=\"onCreateAccount.emit($event)\"\n                    label=\"Sign up\"\n                ></storybook-button>\n            </div>\n        </div>\n    </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 58,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 64,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-header',\n    template: `<header>\n        <div class=\"wrapper\">\n            <div>\n                <svg\n                    width=\"32\"\n                    height=\"32\"\n                    viewBox=\"0 0 32 32\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\"\n                        />\n                        <path\n                            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n                            fill=\"#555AB9\"\n                        />\n                        <path\n                            d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n                            fill=\"#91BAF8\"\n                        />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <storybook-button\n                    *ngIf=\"user\"\n                    size=\"small\"\n                    (onClick)=\"onLogout.emit($event)\"\n                    label=\"Log out\"\n                ></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    size=\"small\"\n                    (onClick)=\"onLogin.emit($event)\"\n                    label=\"Log in\"\n                ></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    primary\n                    size=\"small\"\n                    (onClick)=\"onCreateAccount.emit($event)\"\n                    label=\"Sign up\"\n                ></storybook-button>\n            </div>\n        </div>\n    </header>`,\n    styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n    @Input()\n    user: unknown = null;\n\n    @Output()\n    onLogin = new EventEmitter<Event>();\n\n    @Output()\n    onLogout = new EventEmitter<Event>();\n\n    @Output()\n    onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InlineListExampleComponent",
            "id": "component-InlineListExampleComponent-c6c9b0ec686f5fa3c262b252db6d6d95",
            "file": "projects/web-app/src/app/inline-list-example/inline-list-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./inline-list-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./inline-list-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customList",
                    "type": "PepListComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PepListComponent"
                        }
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "FakeData.Addons",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "footerState",
                    "type": "PepFooterStateType",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listOptions",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "menuActions",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "sortingOptions",
                    "type": "Array<IPepListSortingOption>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "views",
                    "type": "Array<IPepListView>",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "convertToPepRowData",
                    "args": [
                        {
                            "name": "object",
                            "type": "any"
                        },
                        {
                            "name": "displayedColumns",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayedColumns",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<PepMenuItem>",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "initDataRowField",
                    "args": [
                        {
                            "name": "object",
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepFieldData",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadlist",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadListChooser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadListSorting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadViews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "onAnimationStateChange",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFooterStateChange",
                    "args": [
                        {
                            "name": "footerStateType",
                            "type": "IPepFooterStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "jsdoctags": [
                        {
                            "name": "footerStateType",
                            "type": "IPepFooterStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListChanged",
                    "args": [
                        {
                            "name": "listChangeEvent",
                            "type": "IPepListChooserOptionChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "jsdoctags": [
                        {
                            "name": "listChangeEvent",
                            "type": "IPepListChooserOptionChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortingChanged",
                    "args": [
                        {
                            "name": "sortingChangeEvent",
                            "type": "IPepListSortingOptionChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "jsdoctags": [
                        {
                            "name": "sortingChangeEvent",
                            "type": "IPepListSortingOptionChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewChanged",
                    "args": [
                        {
                            "name": "viewChangeEvent",
                            "type": "IListViewChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "jsdoctags": [
                        {
                            "name": "viewChangeEvent",
                            "type": "IListViewChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedRowsChanged",
                    "args": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    AfterViewInit,\n    ViewChild,\n    Optional,\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepHttpService,\n    PepDataConvertorService,\n    PepLayoutService,\n    PepRowData,\n    PepFieldData,\n    FIELD_TYPE,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { IPepFormFieldClickEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    IPepListChooserOptionChangeEvent,\n    IPepListSortingOptionChangeEvent,\n    PepListComponent,\n    IPepListSortingOption,\n    IPepListView,\n    IListViewChangeEvent,\n} from '@pepperi-addons/ngx-lib/list';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport {\n    PepFooterStateType,\n    IPepFooterStateChangeEvent,\n} from '@pepperi-addons/ngx-lib/top-bar';\nimport { FakeData } from './fake-data';\n\n@Component({\n    templateUrl: './inline-list-example.component.html',\n    styleUrls: ['./inline-list-example.component.scss'],\n})\nexport class InlineListExampleComponent implements OnInit, AfterViewInit {\n    @ViewChild(PepListComponent) customList: PepListComponent;\n    dataSource = FakeData.Addons;\n\n    menuActions: Array<PepMenuItem>;\n    listOptions: Array<PepMenuItem>;\n    sortingOptions: Array<IPepListSortingOption>;\n    views: Array<IPepListView>;\n\n    footerState: PepFooterStateType;\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    pageIndex = 0;\n\n    constructor(\n        private dataConvertorService: PepDataConvertorService,\n        public layoutService: PepLayoutService,\n        // private httpService: PepHttpService,\n        private translate: TranslateService\n    ) {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n        });\n\n        // this.httpService.getPapiHttpCall('/meta_data/transactions/types')\n        //     .subscribe(\n        //         (res) => {\n        //             debugger;\n        //             console.log('')\n        //         },\n        //         (error) => {\n        //             debugger;\n        //             console.log(error);\n        //         },\n        //         () => {\n        //             debugger;\n        //         }\n        // );\n    }\n\n    ngOnInit() {\n        this.loadMenuItems();\n        this.loadListChooser();\n        this.loadListSorting();\n        this.loadViews();\n    }\n\n    ngAfterViewInit(): void {\n        if (this.customList && this.dataSource) {\n            this.loadlist(this.dataSource);\n        }\n    }\n\n    private loadMenuItems(): void {\n        this.menuActions = this.getMenuActions();\n    }\n\n    getMenuActions(): Array<PepMenuItem> {\n        const menuActions: Array<PepMenuItem> = [\n            { key: 'test1', text: 'test 1' },\n            { key: 'test2', text: 'test 2', disabled: true },\n            { key: 'sep', type: 'splitter' },\n            { key: 'test3', text: 'test 3' },\n        ];\n\n        return menuActions;\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    private loadListChooser(): void {\n        this.listOptions = [\n            { key: 'accounts', text: 'accounts' },\n            { key: 'orders', text: 'orders' },\n        ];\n    }\n\n    private loadListSorting(): void {\n        this.sortingOptions = [\n            { sortBy: 'a-z', title: 'A -> Z', isAsc: true },\n            { sortBy: 'z-a', title: 'Z -> A', isAsc: false },\n            { sortBy: 'index', title: 'Index' },\n        ];\n    }\n\n    private loadViews(): void {\n        this.views = [\n            { key: 'table', title: 'table view', iconName: 'view_table' },\n            { key: 'line', title: 'line view', iconName: 'view_line' },\n            { key: 'card', title: 'card view', iconName: 'view_card_md' },\n        ];\n    }\n\n    toggleMenu(): void {\n        this.menuActions =\n            this.menuActions === null ? this.getMenuActions() : null;\n    }\n\n    onAnimationStateChange(state): void { }\n\n    loadlist(dataSource) {\n        if (this.customList && dataSource) {\n            const tableData = new Array<PepRowData>();\n            dataSource.forEach((rowData: any) => {\n                const displayedColumns = [\n                    'UUID',\n                    'Description',\n                    'Version',\n                    'Type',\n                    'AutomaticUpgrade',\n                ];\n                tableData.push(\n                    this.convertToPepRowData(rowData, displayedColumns)\n                );\n            });\n\n            const uiControl = this.dataConvertorService.getUiControl(\n                tableData[0]\n            );\n            const rows = this.dataConvertorService.convertListData(tableData);\n            this.customList.initListData(\n                uiControl,\n                rows.length,\n                rows,\n                'table',\n                '',\n                true\n            );\n\n            this.pageIndex = 1;\n        }\n    }\n\n    convertToPepRowData(object: any, displayedColumns = null) {\n        const row = new PepRowData();\n        row.Fields = [];\n        const keys = displayedColumns ? displayedColumns : Object.keys(object);\n        keys.forEach((key) =>\n            row.Fields.push(this.initDataRowField(object, key))\n        );\n        return row;\n    }\n\n    initDataRowField(object: any, key: any): PepFieldData {\n        const dataRowField: PepFieldData = {\n            ApiName: key,\n            Title: this.translate.instant(key),\n            XAlignment: 1,\n            FormattedValue: object[key] ? object[key].toString() : '',\n            Value: object[key] ? object[key].toString() : '',\n            ColumnWidth: 10,\n            AdditionalValue: '',\n            OptionalValues: [],\n            FieldType: FIELD_TYPE.TextBox,\n        };\n\n        switch (key) {\n            case 'Description':\n                dataRowField.ColumnWidth = 25;\n                break;\n            case 'Name':\n                dataRowField.ColumnWidth = 15;\n                break;\n            case 'Type':\n                dataRowField.ColumnWidth = 15;\n                dataRowField.FieldType = FIELD_TYPE.ComboBox;\n                dataRowField.OptionalValues = [\n                    {\n                        Key: 'UseExisting',\n                        Value: 'Use Existing',\n                    },\n                    {\n                        Key: 'OverwriteExisting',\n                        Value: 'Overwrite Existing',\n                    },\n                ];\n                break;\n            default:\n                dataRowField.FormattedValue = object[key]\n                    ? object[key].toString()\n                    : '';\n                break;\n        }\n\n        return dataRowField;\n    }\n\n    onFooterStateChange(footerStateType: IPepFooterStateChangeEvent) {\n        this.footerState = footerStateType.state;\n    }\n\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent) { }\n\n    selectedRowsChanged(selectedRowsCount: number) { }\n\n    onListChanged(listChangeEvent: IPepListChooserOptionChangeEvent) { }\n\n    onSortingChanged(sortingChangeEvent: IPepListSortingOptionChangeEvent) { }\n\n    onViewChanged(viewChangeEvent: IListViewChangeEvent) {\n        // debugger;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-wrapper {\n    overflow: auto;\n    height: 250px;\n}\n\n.inline-top-bar-container {\n    margin-top: 1rem;\n}",
                    "styleUrl": "./inline-list-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataConvertorService",
                        "type": "PepDataConvertorService"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "dataConvertorService",
                        "type": "PepDataConvertorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<!-- <main> -->\n<div class=\"addon-page-container\">\n    <pep-top-bar (footerStateChange)=\"onFooterStateChange($event)\">\n        <div header-start-content>\n\n        </div>\n        <div *ngIf=\"footerState === 'hidden'\" header-end-content>\n            <pep-button [value]=\"'toggle menu'\" [classNames]=\"'pep-spacing-element'\" (click)=\"toggleMenu()\">\n            </pep-button>\n            <pep-button [value]=\"'test 1'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\"\n                [classNames]=\"'pep-spacing-element '\">\n            </pep-button>\n            <pep-button [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element '\" [value]=\"'Tomer test'\"\n                [iconName]=\"'system_bolt'\">\n            </pep-button>\n        </div>\n        <div footer-start-content>\n            <pep-button [value]=\"'test 1'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\"\n                [classNames]=\"'pep-spacing-element '\">\n            </pep-button>\n            <pep-button [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element '\" [value]=\"'Tomer test'\"\n                [iconName]=\"'system_bolt'\">\n            </pep-button>\n            <pep-button [value]=\"'toggle menu'\" [classNames]=\"'pep-spacing-element'\" (click)=\"toggleMenu()\">\n            </pep-button>\n        </div>\n        <div footer-end-content>\n\n        </div>\n        <pep-list-actions [actions]=\"menuActions\" (actionClick)=\"onMenuItemClicked($event)\"></pep-list-actions>\n        <pep-list-total [totalRows]=\"customList?.totalRows\"></pep-list-total>\n        <pep-list-chooser [options]=\"listOptions\" (change)=\"onListChanged($event)\"></pep-list-chooser>\n        <pep-list-sorting [options]=\"sortingOptions\" (change)=\"onSortingChanged($event)\">\n        </pep-list-sorting>\n        <pep-list-views [views]=\"views\" [displayType]=\"screenSize > PepScreenSizeType.SM ? 'menu' : 'buttons'\"\n            (change)=\"onViewChanged($event)\"></pep-list-views>\n    </pep-top-bar>\n    <div class=\"main-content \">\n        <div class=\"content\">\n            <div class=\"list-wrapper\" #listContainer id=\"listContainer\">\n                <pep-list [supportSorting]=\"false\" [supportResizing]=\"false\" [pagerType]=\"'pages'\" [pageSize]=\"10\"\n                    [pageIndex]=\"pageIndex\" [selectionTypeForActions]=\"'multi'\" [parentScroll]=\"listContainer\"\n                    (fieldClick)=\"onCustomizeFieldClick($event)\" (selectedItemsChange)=\"selectedRowsChanged($event)\">\n                </pep-list>\n            </div>\n\n            <div class=\"inline-top-bar-container\">\n                <pep-top-bar [title]=\"'inline top bar'\" [inline]=\"true\">\n                    <div header-end-content>\n                        <button class=\"pep-button weak sm pep-spacing-element\">\n                            button\n                        </button>\n                        <pep-button [value]=\"'test 1'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\"\n                            [classNames]=\"'pep-spacing-element '\"></pep-button>\n                        <pep-button [value]=\"'test 2'\" [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element '\"\n                            [iconName]=\"'system_settings'\">\n                        </pep-button>\n                    </div>\n                    <pep-list-actions [actions]=\"menuActions\" [sizeType]=\"'sm'\"></pep-list-actions>\n                    <pep-list-chooser [options]=\"listOptions\" [sizeType]=\"'sm'\"></pep-list-chooser>\n                    <pep-list-sorting [options]=\"sortingOptions\" [sizeType]=\"'sm'\" (change)=\"onSortingChanged($event)\">\n                    </pep-list-sorting>\n                </pep-top-bar>\n                <pep-textbox [key]=\"'Number'\" [label]=\"'Pepperi Number'\" [type]=\"'real'\" [xAlignment]=\"'left'\"\n                    [value]=\"'9399371'\" [required]=\"true\" [formattedValue]=\"'9,399,371'\">\n                </pep-textbox>\n                <pep-textbox [key]=\"'Email'\" [label]=\"'Pepperi Email'\" [type]=\"'email'\" [xAlignment]=\"'left'\"\n                    [value]=\"'email@pepperi.com'\">\n                </pep-textbox>\n            </div>\n\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "ListExampleComponent",
            "id": "component-ListExampleComponent-1d85030d93c4273fa78f5a003c63a066",
            "file": "projects/web-app/src/app/list-example/list-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./list-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customList",
                    "type": "PepListComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PepListComponent"
                        }
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "fields",
                    "type": "Array<IPepSmartFilterField>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "filters",
                    "type": "Array<IPepSmartFilterData>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "footerState",
                    "type": "PepFooterStateType",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "listOptions",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "menuActions",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "sortingOptions",
                    "type": "Array<IPepListSortingOption>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "views",
                    "type": "Array<IPepListView>",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "addFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177
                },
                {
                    "name": "convertToPepRowData",
                    "args": [
                        {
                            "name": "object",
                            "type": "any"
                        },
                        {
                            "name": "displayedColumns",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayedColumns",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<PepMenuItem>",
                    "typeParameters": [],
                    "line": 122
                },
                {
                    "name": "initDataRowField",
                    "args": [
                        {
                            "name": "object",
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepFieldData",
                    "typeParameters": [],
                    "line": 237,
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadlist",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadListChooser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadListSorting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadSmartFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadViews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "onAnimationStateChange",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFiltersChange",
                    "args": [
                        {
                            "name": "filtersData",
                            "type": "IPepSmartFilterData[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "jsdoctags": [
                        {
                            "name": "filtersData",
                            "type": "IPepSmartFilterData[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFooterStateChange",
                    "args": [
                        {
                            "name": "footerStateType",
                            "type": "IPepFooterStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "jsdoctags": [
                        {
                            "name": "footerStateType",
                            "type": "IPepFooterStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListChanged",
                    "args": [
                        {
                            "name": "listChangeEvent",
                            "type": "IPepListChooserOptionChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "jsdoctags": [
                        {
                            "name": "listChangeEvent",
                            "type": "IPepListChooserOptionChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortingChanged",
                    "args": [
                        {
                            "name": "sortingChangeEvent",
                            "type": "IPepListSortingOptionChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "jsdoctags": [
                        {
                            "name": "sortingChangeEvent",
                            "type": "IPepListSortingOptionChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewChanged",
                    "args": [
                        {
                            "name": "viewChangeEvent",
                            "type": "IListViewChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "jsdoctags": [
                        {
                            "name": "viewChangeEvent",
                            "type": "IListViewChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedRowsChanged",
                    "args": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "jsdoctags": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFilters",
                    "args": [
                        {
                            "name": "sideNav",
                            "type": "PepSideBarComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "jsdoctags": [
                        {
                            "name": "sideNav",
                            "type": "PepSideBarComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    AfterViewInit,\n    ViewChild,\n    Optional,\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepHttpService,\n    PepDataConvertorService,\n    PepLayoutService,\n    PepRowData,\n    PepFieldData,\n    FIELD_TYPE,\n    PepScreenSizeType,\n    PepGuid,\n} from '@pepperi-addons/ngx-lib';\nimport { IPepFormFieldClickEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    IPepListChooserOptionChangeEvent,\n    IPepListSortingOptionChangeEvent,\n    PepListComponent,\n    IPepListSortingOption,\n    IPepListView,\n    IListViewChangeEvent,\n} from '@pepperi-addons/ngx-lib/list';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport {\n    PepFooterStateType,\n    IPepFooterStateChangeEvent,\n} from '@pepperi-addons/ngx-lib/top-bar';\nimport {\n    IPepSmartFilterField,\n    // DateFilter,\n    // NumberFilter,\n    // BooleanFilter,\n    // MultiSelectFilter,\n    IPepSmartFilterData,\n    IPepSmartFilterFieldOption,\n    PepSmartFilterOperators\n    // PepSmartFilterWorker,\n    // Field\n} from '@pepperi-addons/ngx-lib/smart-filters';\nimport { FakeData } from './fake-data';\nimport { PepSideBarComponent } from '@pepperi-addons/ngx-lib/side-bar';\nimport { createSmartFilter, createSmartFilterField } from 'projects/ngx-lib/smart-filters/common/model/creator';\n\n@Component({\n    templateUrl: './list-example.component.html',\n    styleUrls: ['./list-example.component.scss'],\n})\nexport class ListExampleComponent implements OnInit, AfterViewInit {\n    @ViewChild(PepListComponent) customList: PepListComponent;\n    dataSource = [];\n\n    menuActions: Array<PepMenuItem>;\n    listOptions: Array<PepMenuItem>;\n    sortingOptions: Array<IPepListSortingOption>;\n    views: Array<IPepListView>;\n    fields: Array<IPepSmartFilterField>;\n    filters: Array<IPepSmartFilterData>;\n\n    footerState: PepFooterStateType;\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    constructor(\n        private dataConvertorService: PepDataConvertorService,\n        private layoutService: PepLayoutService,\n        // private httpService: PepHttpService,\n        private translate: TranslateService\n    ) {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n        });\n\n        // this.httpService.getPapiHttpCall('/meta_data/transactions/types')\n        //     .subscribe(\n        //         (res) => {\n        //             debugger;\n        //             console.log('')\n        //         },\n        //         (error) => {\n        //             debugger;\n        //             console.log(error);\n        //         },\n        //         () => {\n        //             debugger;\n        //         }\n        // );\n    }\n\n    ngOnInit() {\n        this.loadMenuItems();\n        this.loadListChooser();\n        this.loadListSorting();\n        this.loadViews();\n        this.loadSmartFilters();\n    }\n\n    ngAfterViewInit(): void {\n        // this.dataSource = FakeData.Addons;\n        // for (let index = 0; index < 10000; index++) {\n        //     this.dataSource.push(FakeData.Addons);\n        //     this.dataSource[index].UUID = PepGuid.newGuid();\n        // }\n\n        if (this.customList && this.dataSource) {\n            this.loadlist(this.dataSource);\n        }\n    }\n\n    private loadMenuItems(): void {\n        this.menuActions = this.getMenuActions();\n    }\n\n    getMenuActions(): Array<PepMenuItem> {\n        const menuActions: Array<PepMenuItem> = [\n            { key: 'test1', text: 'test 1' },\n            { key: 'test2', text: 'test 2', disabled: true },\n            { key: 'sep', type: 'splitter' },\n            { key: 'test3', text: 'test 3' },\n        ];\n\n        return menuActions;\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    private loadListChooser(): void {\n        this.listOptions = [\n            { key: 'accounts', text: 'accounts' },\n            { key: 'orders', text: 'orders' },\n        ];\n    }\n\n    private loadListSorting(): void {\n        this.sortingOptions = [\n            { sortBy: 'a-z', title: 'A -> Z', isAsc: true },\n            { sortBy: 'z-a', title: 'Z -> A', isAsc: false },\n            { sortBy: 'index', title: 'Index' },\n        ];\n    }\n\n    private loadViews(): void {\n        this.views = [\n            { key: 'table', title: 'table view', iconName: 'view_table' },\n            { key: 'line', title: 'line view', iconName: 'view_line' },\n            { key: 'card', title: 'card view', iconName: 'view_card_md' },\n        ];\n    }\n\n    private loadSmartFilters(): void {\n        const brandOptions: IPepSmartFilterFieldOption[] = [];\n        for (let index = 1; index <= 10000; index++) {\n            brandOptions.push({ value: `value ${index}`, count: index });\n        }\n\n        this.fields = [\n            createSmartFilterField({ id: 'filter1', name: 'Transaction Action Time' }, 'date-time'),\n            createSmartFilterField({ id: 'filter2', name: 'stock' }, 'int'),\n            createSmartFilterField({ id: 'filter3', name: 'Delivery Date', operators: ['dateRange'] }, 'date'),\n            createSmartFilterField({ id: 'filter4', name: 'Brand', options: brandOptions }, 'multi-select'),\n            createSmartFilterField({ id: 'filter5', name: 'Discout' }, 'boolean'),\n            createSmartFilterField({ id: 'filter6', name: 'Price' }, 'currency'),\n            createSmartFilterField({ id: 'filter7', name: 'Brand2', options: brandOptions }, 'multi-select'),\n        ];\n    }\n\n    addFilters(): void {\n        const selectedValues = ['value 1', 'value 5', 'value 10', 'value 11'];\n        this.filters = [\n            createSmartFilter('filter3', PepSmartFilterOperators.DateRange, '2020-1-1', '2021-1-1'),\n            createSmartFilter('filter4', PepSmartFilterOperators.In, selectedValues)\n        ];\n    }\n\n    toggleMenu(): void {\n        this.menuActions =\n            this.menuActions === null ? this.getMenuActions() : null;\n    }\n\n    toggleFilters(sideNav: PepSideBarComponent): void {\n        if (sideNav) {\n            sideNav.toggle();\n        }\n    }\n\n    loadlist(dataSource) {\n        if (this.customList && dataSource) {\n            const tableData = new Array<PepRowData>();\n            dataSource.forEach((rowData: any) => {\n                const displayedColumns = [\n                    'UUID',\n                    'Description',\n                    'Version',\n                    'Type',\n                    'AutomaticUpgrade',\n                ];\n                tableData.push(\n                    this.convertToPepRowData(rowData, displayedColumns)\n                );\n            });\n\n            const uiControl = this.dataConvertorService.getUiControl(\n                tableData[0]\n            );\n            const rows = this.dataConvertorService.convertListData(tableData);\n            this.customList.initListData(\n                uiControl,\n                rows.length,\n                rows,\n                'table',\n                '',\n                true\n            );\n        }\n    }\n\n    convertToPepRowData(object: any, displayedColumns = null) {\n        const row = new PepRowData();\n        row.Fields = [];\n        const keys = displayedColumns ? displayedColumns : Object.keys(object);\n        keys.forEach((key) =>\n            row.Fields.push(this.initDataRowField(object, key))\n        );\n        return row;\n    }\n\n    initDataRowField(object: any, key: any): PepFieldData {\n        const dataRowField: PepFieldData = {\n            ApiName: key,\n            Title: this.translate.instant(key),\n            XAlignment: 1,\n            FormattedValue: object[key] ? object[key].toString() : '',\n            Value: object[key] ? object[key].toString() : '',\n            ColumnWidth: 10,\n            AdditionalValue: '',\n            OptionalValues: [],\n            FieldType: FIELD_TYPE.TextBox,\n        };\n\n        switch (key) {\n            case 'Description':\n                dataRowField.ColumnWidth = 25;\n                break;\n            case 'Name':\n                dataRowField.ColumnWidth = 15;\n                break;\n            case 'Type':\n                dataRowField.ColumnWidth = 15;\n                dataRowField.FieldType = FIELD_TYPE.ComboBox;\n                dataRowField.OptionalValues = [\n                    {\n                        Key: 'UseExisting',\n                        Value: 'Use Existing',\n                    },\n                    {\n                        Key: 'OverwriteExisting',\n                        Value: 'Overwrite Existing',\n                    },\n                ];\n                break;\n            default:\n                dataRowField.FormattedValue = object[key]\n                    ? object[key].toString()\n                    : '';\n                break;\n        }\n\n        return dataRowField;\n    }\n\n    onFooterStateChange(footerStateType: IPepFooterStateChangeEvent) {\n        this.footerState = footerStateType.state;\n    }\n\n    onAnimationStateChange(state): void { }\n\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent) { }\n\n    selectedRowsChanged(selectedRowsCount: number) { }\n\n    onListChanged(listChangeEvent: IPepListChooserOptionChangeEvent) { }\n\n    onSortingChanged(sortingChangeEvent: IPepListSortingOptionChangeEvent) { }\n\n    onViewChanged(viewChangeEvent: IListViewChangeEvent) {\n        // debugger;\n        this.loadlist(this.dataSource);\n    }\n\n    onFiltersChange(filtersData: IPepSmartFilterData[]) {\n        // debugger;\n        console.log(JSON.stringify(filtersData))\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'ngx-lib/src/core/style/abstracts/mixins';\n@import 'ngx-lib/src/core/style/abstracts/variables';\n\n.addon-page-container {\n    .main-layout {\n        .content{\n            margin: 0;\n        }\n    }\n}\n\n\n",
                    "styleUrl": "./list-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataConvertorService",
                        "type": "PepDataConvertorService"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "dataConvertorService",
                        "type": "PepDataConvertorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<!-- <main> -->\n<div class=\"addon-page-container\">\n    <pep-top-bar (footerStateChange)=\"onFooterStateChange($event)\">\n        <div header-start-content>\n\n        </div>\n        <div *ngIf=\"footerState === 'hidden'\" header-end-content>\n            <pep-button [value]=\"'toggle menu'\" [classNames]=\"'pep-spacing-element'\" (click)=\"toggleMenu()\">\n            </pep-button>\n            <pep-button [classNames]=\"'pep-spacing-element '\" [value]=\"'Add filters'\" [iconName]=\"'system_bolt'\"\n                (click)=\"addFilters()\">\n            </pep-button>\n        </div>\n        <div footer-start-content>\n            <pep-button [value]=\"'filters'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\"\n                [classNames]=\"'pep-spacing-element '\" (click)=\"toggleFilters(sideNav)\">\n            </pep-button>\n            <pep-button [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element '\" [value]=\"'Add filters'\"\n                [iconName]=\"'system_bolt'\" (click)=\"addFilters()\">\n            </pep-button>\n            <pep-button [value]=\"'toggle menu'\" [classNames]=\"'pep-spacing-element'\" (click)=\"toggleMenu()\">\n            </pep-button>\n        </div>\n        <div footer-end-content>\n\n        </div>\n        <pep-list-actions [actions]=\"menuActions\" (actionClick)=\"onMenuItemClicked($event)\"></pep-list-actions>\n        <pep-list-total [totalRows]=\"customList?.totalRows\"></pep-list-total>\n        <pep-list-chooser [options]=\"listOptions\" (change)=\"onListChanged($event)\"></pep-list-chooser>\n        <pep-list-sorting [options]=\"sortingOptions\" (change)=\"onSortingChanged($event)\">\n        </pep-list-sorting>\n        <pep-list-views [views]=\"views\" [displayType]=\"screenSize > PepScreenSizeType.SM ? 'menu' : 'buttons'\"\n            (change)=\"onViewChanged($event)\"></pep-list-views>\n    </pep-top-bar>\n    <div class=\"main-content \">\n\n        <pep-side-bar #sideNav>\n            <pep-smart-filters [fields]=\"fields\" [filters]=\"filters\" (filtersChange)=\"onFiltersChange($event)\">\n            </pep-smart-filters>\n        </pep-side-bar>\n\n        <div class=\"main-layout pull-right flip\">\n            <div class=\"content\">\n                <div class=\"list-wrapper\" #listContainer>\n                    <pep-list [supportSorting]=\"false\" [supportResizing]=\"false\" [pagerType]=\"'pages'\" [pageSize]=\"2\"\n                        [selectionTypeForActions]=\"'multi'\" [parentScroll]=\"listContainer\"\n                        (fieldClick)=\"onCustomizeFieldClick($event)\"\n                        (selectedItemsChange)=\"selectedRowsChanged($event)\">\n                    </pep-list>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-a7305fed93010a71859f8fae00a25eb2",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"onLogout.emit($event)\"\n            (onLogin)=\"onLogin.emit($event)\"\n            (onCreateAccount)=\"onCreateAccount.emit($event)\"\n        ></storybook-header>\n        <section>\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a\n                    href=\"https://componentdriven.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and\n                review page states without needing to navigate to them in your\n                app. Here are some handy patterns for managing page data in\n                Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you\n                    compose such data from the \"args\" of child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You\n                    can mock these services out using Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a\n                    href=\"https://www.learnstorybook.com\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn Storybook\n                </a>\n                . Read more in the\n                <a\n                    href=\"https://storybook.js.org/docs\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    docs\n                </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with\n                the\n                <svg\n                    width=\"10\"\n                    height=\"10\"\n                    viewBox=\"0 0 12 12\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\"\n                        />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 85,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 94,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 88,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 91,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-page',\n    template: `<article>\n        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"onLogout.emit($event)\"\n            (onLogin)=\"onLogin.emit($event)\"\n            (onCreateAccount)=\"onCreateAccount.emit($event)\"\n        ></storybook-header>\n        <section>\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a\n                    href=\"https://componentdriven.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and\n                review page states without needing to navigate to them in your\n                app. Here are some handy patterns for managing page data in\n                Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you\n                    compose such data from the \"args\" of child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You\n                    can mock these services out using Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a\n                    href=\"https://www.learnstorybook.com\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn Storybook\n                </a>\n                . Read more in the\n                <a\n                    href=\"https://storybook.js.org/docs\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    docs\n                </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with\n                the\n                <svg\n                    width=\"10\"\n                    height=\"10\"\n                    viewBox=\"0 0 12 12\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\"\n                        />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>`,\n    styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n    @Input()\n    user: unknown = null;\n\n    @Output()\n    onLogin = new EventEmitter<Event>();\n\n    @Output()\n    onLogout = new EventEmitter<Event>();\n\n    @Output()\n    onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 24px;\n    padding: 48px 20px;\n    margin: 0 auto;\n    max-width: 600px;\n    color: #333;\n}\n\nh2 {\n    font-weight: 900;\n    font-size: 32px;\n    line-height: 1;\n    margin: 0 0 4px;\n    display: inline-block;\n    vertical-align: top;\n}\n\np {\n    margin: 1em 0;\n}\n\na {\n    text-decoration: none;\n    color: #1ea7fd;\n}\n\nul {\n    padding-left: 30px;\n    margin: 1em 0;\n}\n\nli {\n    margin-bottom: 8px;\n}\n\n.tip {\n    display: inline-block;\n    border-radius: 1em;\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 700;\n    background: #e7fdd8;\n    color: #66bf3c;\n    padding: 4px 12px;\n    margin-right: 10px;\n    vertical-align: top;\n}\n\n.tip-wrapper {\n    font-size: 13px;\n    line-height: 20px;\n    margin-top: 40px;\n    margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    margin-right: 4px;\n    vertical-align: top;\n    margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n    fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PepAddressComponent",
            "id": "component-PepAddressComponent-c76ec232adbc9a123e8e0bb46d9413f5",
            "file": "projects/ngx-lib/address/address.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-address",
            "styleUrls": [
                "./address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 33
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 39,
                    "type": "FormGroup"
                },
                {
                    "name": "formattedValue",
                    "defaultValue": "''",
                    "line": 30
                },
                {
                    "name": "groupFields",
                    "line": 37,
                    "type": "Array<any>"
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 31
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 40,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 34
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 32
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 36
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 35,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 43,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "any"
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    Renderer2,\n    ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-address',\n    templateUrl: './address.component.html',\n    styleUrls: ['./address.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepAddressComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() key = '';\n    // @Input() value = '';\n    @Input() formattedValue = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() groupFields: Array<any>;\n\n    @Input() form: FormGroup = null;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    constructor(private element: ElementRef, private renderer: Renderer2) {}\n\n    ngOnInit(): void {\n        this.renderer.addClass(this.element.nativeElement, 'pep-grouped-field');\n    }\n\n    ngOnChanges(changes): void {\n        // setTimeout(() => {\n        //     const focusedFieldParent = this.groupFields.filter(\n        //         (groupField) => groupField.lastFocusField\n        //     )[0];\n        //     if (focusedFieldParent) {\n        //         focusedFieldParent.lastFocusField.focus();\n        //     }\n        // }, 100);\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    // Not in use for material\n    onBlur(e: any, key: string): void {\n        const value = e.target ? e.target.value : e;\n        this.changeValue({ key, value }, e.relatedTarget);\n    }\n\n    onValueChange(e: any, key: string): void {\n        if (e.target) {\n            const input = e.target ? e.target.value : e;\n            this.changeValue({ key, value: input.value });\n        } else {\n            this.changeValue(e);\n        }\n    }\n\n    changeValue(field: any, lastFocusedField: any = null): void {\n        const currentGroupField = this.groupFields.filter(\n            (groupField) => groupField.key === field.key\n        )[0];\n\n        if (currentGroupField.value !== field.value) {\n            // Set the value in the form controls\n            if (this.form) {\n                const formCtrl = this.form.get(this.key);\n\n                if (formCtrl) {\n                    formCtrl.get(field.key).setValue(field.value);\n                }\n            }\n\n            this.valueChange.emit({\n                key: field.key,\n                value: field.value,\n                lastFocusedField,\n            });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n// :host {\n//     // display: grid;\n//     // height: 10rem;\n// }\n\n.header {\n    // margin-top: 0.45rem;\n    grid-column: 1 / span 3;\n}\n\n.pep-address-container {\n    // padding: 0.75rem 1rem 0.5rem 1rem;\n    padding: 0.875rem $spacing-md;\n    border-radius: $border-radius-md;\n    // margin-top: 0.5rem;\n    // margin-bottom: 0.5rem;\n    display: -ms-grid;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-column-gap: $spacing-md;\n    grid-row-gap: $spacing-md;\n\n    // .header {\n    //     margin-top: 0.45rem;\n    //     grid-column: 1 / span 3;\n    // }\n\n    // .columns-1 {\n    //     grid-column: 1fr;\n    // }\n\n    .columns-2 {\n        grid-column: 1 / span 2;\n    }\n\n    .columns-3 {\n        grid-column: 1 / span 3;\n    }\n}\n\n@media screen and (max-width: 630px) {\n    // .pep-address-container {\n    //     display: block;\n    // }\n}\n",
                    "styleUrl": "./address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" class=\"header\">\n        </pep-field-title>\n        <div [formGroupName]=\"key\" [id]=\"key\" class=\"pep-address-container\"\n            dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n            <div [ngSwitch]=\"groupField.controlType\" *ngFor=\"let groupField of groupFields; let i = index\"\n                class=\"pep-address-field columns-{{ groupField.colSpan }}\">\n                <pep-textbox *ngSwitchCase=\"'textbox'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\"\n                    [formattedValue]=\"groupField.formattedValue\" [label]=\"groupField.label\"\n                    [placeholder]=\"groupField.placeholder\" [type]=\"groupField.type\" [required]=\"groupField.required\"\n                    [disabled]=\"groupField.disabled\" [readonly]=\"groupField.readonly\"\n                    [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-textbox>\n\n                <pep-select *ngSwitchCase=\"'select'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\" [label]=\"groupField.label\"\n                    [type]=\"groupField.type\" [required]=\"groupField.required\" [disabled]=\"groupField.disabled\"\n                    [readonly]=\"groupField.readonly\" [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\"\n                    [options]=\"groupField.options\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-select>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <div class=\"pep-card-input \" title=\"{{ label }}&nbsp;{{ formattedValue }}\"\n            [ngClass]=\"['text-align-' + xAlignment]\">\n            <span *ngIf=\"label != ''\" class=\"body-xs title\">{{ label }}&nbsp;</span>\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <div class=\"pep-card-input \" title=\"{{ formattedValue }}\" [ngClass]=\"['text-align-' + xAlignment]\">\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepAttachmentComponent",
            "id": "component-PepAttachmentComponent-25ee9782552565df13c3a531e258839a",
            "file": "projects/ngx-lib/attachment/attachment.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-attachment",
            "styleUrls": [
                "./attachment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./attachment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 36
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 43,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 46
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 32
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 45,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 37
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 35
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 39
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 44
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "line": 33
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 38,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 51,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 49,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "acceptAttachmentType",
                    "defaultValue": "'application/pdf,application/json,text/csv,text/csv-schema,application/msword,application/vnd.ms-excel,text/plain,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/bmp,image/jpg, image/jpeg, image/png, image/tif, image/tiff, txt, json'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "controlType",
                    "defaultValue": "'attachment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dataURI",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onFileChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    ElementRef,\n    Renderer2,\n    OnDestroy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepFileService,\n    PepCustomizationService,\n    PepLayoutType,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepAttachmentField,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-attachment',\n    templateUrl: './attachment.component.html',\n    styleUrls: ['./attachment.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepAttachmentComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() key = '';\n    @Input() src = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'attachment';\n\n    @Input() form: FormGroup = null;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() isActive = false;\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    fieldHeight = '';\n    standAlone = false;\n    dataURI = null;\n\n    acceptAttachmentType =\n        'application/pdf,application/json,text/csv,text/csv-schema,application/msword,application/vnd.ms-excel,text/plain,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/bmp,image/jpg, image/jpeg, image/png, image/tif, image/tiff, txt, json';\n\n    constructor(\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        public element: ElementRef,\n        private fileService: PepFileService\n    ) {}\n\n    ngOnDestroy(): void {\n        // if (this.elementClick) {\n        //     this.elementClick.unsubscribe();\n        // }\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.src, this.required, this.readonly, this.disabled);\n            const pepField = new PepAttachmentField({\n                key: this.key,\n                value: this.src,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n    }\n\n    ngOnChanges(changes: any): void {\n        if (changes.src && changes.src.currentValue.length > 0) {\n            // Empty dataURI if there is change in the src.\n            this.dataURI = null;\n        }\n    }\n\n    onFileChanged(value: any): void {\n        this.dataURI = value.length > 0 ? JSON.parse(value) : null;\n        this.src = this.dataURI ? this.dataURI.fileStr : '';\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            this.dataURI ? this.dataURI.fileExt : ''\n        );\n        this.valueChange.emit({\n            key: this.key,\n            value,\n            controlType: this.controlType,\n        });\n    }\n\n    onFileClicked(event: IPepFieldClickEvent): void {\n        if (this.dataURI != null) {\n            const fileStrArr = this.dataURI.fileStr.split(';');\n            if (fileStrArr.length === 2) {\n                const win = window.open('', '_blank');\n                const contentType = fileStrArr[0].split(':')[1];\n                const base64 = fileStrArr[1].split(',')[1];\n                const blob = this.fileService.convertFromb64toBlob(\n                    base64,\n                    contentType\n                );\n                const url = URL.createObjectURL(blob);\n                win.location.href = url;\n            }\n        } else {\n            if (this.fileService.isValidUrl(this.src)) {\n                const win = window.open('', '_blank');\n                win.location.href = this.src;\n            }\n        }\n\n        this.elementClick.emit(event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: block;\n}\n",
                    "styleUrl": "./attachment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-template #pepTemplate>\n    <pep-files-uploader [key]=\"key\" [src]=\"src\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n        [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [controlType]=\"controlType\" [form]=\"form\"\n        [layoutType]=\"layoutType\" [standAlone]=\"standAlone\" (fileChange)=\"onFileChanged($event)\"\n        (elementClick)=\"onFileClicked($event)\" [acceptedExtensions]=\"acceptAttachmentType\">\n    </pep-files-uploader>\n</ng-template>\n\n<ng-template #pepReadonlyTemplate>\n    <ng-container *ngIf=\"src?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <div class=\"pep-file-container\">\n            <a [id]=\"key\" class=\"color-link body-sm pep-card-input \" *ngIf=\"src != null\" title=\"{{ src }}\"\n                target=\"_blank\" href=\"{{ src }}\">{{ src }}</a>\n        </div>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone }\">\n        <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>\n\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container one-row\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>"
        },
        {
            "name": "PepBooleanFilterComponent",
            "id": "component-PepBooleanFilterComponent-22be3d517176fc7dcdcfb75984caaef2",
            "file": "projects/ngx-lib/smart-filters/boolean-filter/boolean-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-boolean-filter",
            "styleUrls": [
                "./boolean-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./boolean-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDefaultOperator",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterOperator",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "getFilterValue",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterDataValue",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BaseFilterComponent } from '../common/model/base-filter-component';\nimport {\n    IPepSmartFilterOperator,\n    PepSmartFilterOperators,\n} from '../common/model/operator';\nimport { IPepSmartFilterDataValue } from '../common/model/filter';\n\n@Component({\n    selector: 'pep-boolean-filter',\n    templateUrl: './boolean-filter.component.html',\n    styleUrls: ['./boolean-filter.component.scss'],\n})\nexport class PepBooleanFilterComponent extends BaseFilterComponent {\n    // Override\n    getDefaultOperator(): IPepSmartFilterOperator {\n        return PepSmartFilterOperators.Equals;\n    }\n\n    // Override\n    getFilterValue(): IPepSmartFilterDataValue {\n        const filterValue = { first: this.firstControl.value || false };\n        return filterValue;\n    }\n\n    // // Override\n    // setFieldsStateAndValidators(): void {\n    //     this.secondControl.disable();\n    // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../src/core/style/abstracts/variables';\r\n@import '../../src/core/style/abstracts/mixins';\r\n\r\n.radio-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .pep-radio-button {\r\n        // margin: $spacing-xs 0;\r\n        \r\n        &.pep-input {\r\n            height: 2.25rem;\r\n            display: flex;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./boolean-filter.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFilterComponent",
            "templateData": "<div [formGroup]=\"form\">\n    <!-- <pep-checkbox [form]=\"form\" [key]=\"firstControlKey\" [value]=\"firstControl.value?.toString()\"\n        [label]=\"'SMART_FILTERS.IS_ON' | translate\" [renderTitle]=\"false\">\n    </pep-checkbox> -->\n    <mat-radio-group class=\"radio-group\" [formControlName]=\"firstControlKey\">\n        <mat-radio-button class=\"pep-radio-button md pep-input no-default-background\" value=\"true\">\n            {{ 'CHECKBOX.TRUE' | translate }}\n        </mat-radio-button>\n        <mat-radio-button class=\"pep-radio-button md pep-input no-default-background\" value=\"false\">\n            {{ 'CHECKBOX.FALSE' | translate }}\n        </mat-radio-button>\n    </mat-radio-group>\n</div>"
        },
        {
            "name": "PepBreadCrumbsComponent",
            "id": "component-PepBreadCrumbsComponent-83eeee983454bc859312e775e6534557",
            "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-bread-crumbs",
            "styleUrls": [
                "./bread-crumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bread-crumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addSpacing",
                    "defaultValue": "false",
                    "line": 46
                },
                {
                    "name": "displayType",
                    "line": 38,
                    "type": ""
                },
                {
                    "name": "items",
                    "line": 28,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter<IPepBreadCrumbItemClickEvent>()",
                    "line": 49,
                    "type": "EventEmitter<IPepBreadCrumbItemClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_displayType",
                    "defaultValue": "'label'",
                    "type": "PepBreadCrumbsDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "type": "Array<PepBreadCrumbItem>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "charSeparator",
                    "defaultValue": "' / '",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "iconSeparator",
                    "defaultValue": "pepIconArrowRight.name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "shrinkItems",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabelTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "PepBreadCrumbItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PepBreadCrumbItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupShrinkItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    OnInit,\n    Injectable,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepBreadCrumbItemClickEvent,\n    PepBreadCrumbItem,\n    PepBreadCrumbsDisplayType,\n} from './bread-crumbs.model';\nimport {\n    pepIconArrowLeft,\n    pepIconArrowRight,\n} from '@pepperi-addons/ngx-lib/icon';\n@Component({\n    selector: 'pep-bread-crumbs',\n    templateUrl: './bread-crumbs.component.html',\n    styleUrls: ['./bread-crumbs.component.scss'],\n})\n@Injectable()\nexport class PepBreadCrumbsComponent implements OnInit {\n    private _items: Array<PepBreadCrumbItem> = [];\n    @Input()\n    set items(value: Array<PepBreadCrumbItem>) {\n        this._items = value;\n        this.setupShrinkItems();\n    }\n    get items(): Array<PepBreadCrumbItem> {\n        return this._items;\n    }\n\n    private _displayType: PepBreadCrumbsDisplayType = 'label';\n    @Input()\n    set displayType(value: PepBreadCrumbsDisplayType) {\n        this._displayType = value;\n        this.setupShrinkItems();\n    }\n    get displayType(): PepBreadCrumbsDisplayType {\n        return this._displayType;\n    }\n\n    @Input() addSpacing = false;\n\n    @Output()\n    itemClick: EventEmitter<IPepBreadCrumbItemClickEvent> = new EventEmitter<IPepBreadCrumbItemClickEvent>();\n\n    charSeparator = ' / ';\n    iconSeparator: string = pepIconArrowRight.name;\n    shrinkItems = false;\n    screenSize: PepScreenSizeType;\n\n    constructor(private layoutService: PepLayoutService) {}\n\n    ngOnInit(): void {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n            this.setupShrinkItems();\n        });\n\n        if (this.layoutService.isRtl()) {\n            this.charSeparator = ' \\\\ ';\n            this.iconSeparator = pepIconArrowLeft.name;\n        }\n    }\n\n    private setupShrinkItems() {\n        if (this.displayType === 'items' && this.items.length > 1) {\n            this.shrinkItems = this.screenSize > PepScreenSizeType.SM;\n        }\n    }\n\n    getLabelTitle(): string {\n        let labelTitle = '';\n\n        if (this.items && this.items.length > 0) {\n            for (let index = 0; index < this.items.length; index++) {\n                if (index < this.items.length - 1) {\n                    if (index > 0) {\n                        labelTitle += this.charSeparator;\n                    }\n\n                    labelTitle += this.items[index].text;\n                }\n            }\n        }\n\n        return labelTitle;\n    }\n\n    onBreadCrumbItemClick(item: PepBreadCrumbItem): void {\n        this.itemClick.emit({ source: item });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n\n:host {\n    display: flex;\n}\n\n.bread-crumbs-label {\n    height: $top-bar-height-with-no-top;\n    display: flex;\n    flex-flow: wrap;\n    align-items: center;\n}\n\nul.bread-crumbs-items {\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n\n    li {\n        display: inline-flex;\n        \n        .seperator {\n            height: 1rem;\n            width: 1rem;\n        }\n\n        a {\n            text-decoration: unset;\n        }\n    }\n}",
                    "styleUrl": "./bread-crumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "Array<PepBreadCrumbItem>",
                        "line": 32
                    }
                },
                "displayType": {
                    "name": "displayType",
                    "setSignature": {
                        "name": "displayType",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "displayType",
                        "type": "",
                        "returnType": "PepBreadCrumbsDisplayType",
                        "line": 42
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"displayType === 'label'; then labelTemplate; else itemsTemplate\">\n</ng-container>\n<ng-template #labelTemplate>\n    <div *ngIf=\"items?.length > 0\" class=\"bread-crumbs-label ellipsis\" [ngClass]=\"{ 'pep-spacing-element': addSpacing }\"\n        [title]=\"getLabelTitle()\">\n        <div class=\"body-xs ellipsis\">\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <span *ngIf=\"!isFirst && !isLast\">&nbsp;{{ charSeparator }}&nbsp;</span>\n                <span *ngIf=\"!isLast\">{{ item.text }}</span>\n            </ng-container>\n        </div>\n        <div class=\" title-md ellipsis current full-screen\" title=\"{{ items[items.length - 1]?.text }}\">\n            <span>{{ items[items.length - 1]?.text }}</span>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #itemsTemplate>\n    <ul *ngIf=\"items?.length > 0\" class=\"bread-crumbs-items body-sm ellipsis\">\n        <ng-container *ngIf=\"shrinkItems; then shrinkTemplate; else regularTemplate\">\n        </ng-container>\n\n        <ng-template #shrinkTemplate>\n            <li>\n                <a class=\"color-link\" [matMenuTriggerFor]=\"menu\" href=\"javascript:void(0)\">...</a>\n                <mat-menu #menu=\"matMenu\">\n                    <ng-container *ngFor=\"let menuItem of items; let isLast = last\">\n                        <button mat-menu-item *ngIf=\"!isLast\" (click)=\"onBreadCrumbItemClick(menuItem)\"\n                            [title]=\"menuItem.title || menuItem.text\" [disabled]=\"menuItem.disabled\"\n                            [ngClass]=\"{ disabled: menuItem.disabled }\">\n                            <span>\n                                {{ menuItem.text }}\n                            </span>\n                        </button>\n                    </ng-container>\n                </mat-menu>\n            </li>\n            <li>\n                <mat-icon class=\"seperator pep-spacing-element\">\n                    <pep-icon [name]=\"iconSeparator\">\n                    </pep-icon>\n                </mat-icon>\n            </li>\n            <li>\n                <span [title]=\"items[items.length - 1]?.title || items[items.length - 1]?.text\">\n                    {{ items[items.length - 1]?.text }}\n                </span>\n            </li>\n        </ng-template>\n        <ng-template #regularTemplate>\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <li>\n                    <a *ngIf=\"!item.disabled\" [title]=\"item.title || item.text\" href=\"javascript:void(0)\"\n                        class=\" color-link\" (click)=\"onBreadCrumbItemClick(item)\">{{ item.text }}</a>\n                    <span *ngIf=\"item.disabled\" [title]=\"item.title || item.text\">{{ item.text }}</span>\n                </li>\n                <li *ngIf=\"!isLast\">\n                    <mat-icon class=\"seperator pep-spacing-element\">\n                        <pep-icon [name]=\"iconSeparator\">\n                        </pep-icon>\n                    </mat-icon>\n                </li>\n            </ng-container>\n        </ng-template>\n    </ul>\n</ng-template>"
        },
        {
            "name": "PepButtonComponent",
            "id": "component-PepButtonComponent-68a00aef1cb3219170d0b22c37b2d86e",
            "file": "projects/ngx-lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classNames",
                    "defaultValue": "''",
                    "line": 22
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 23
                },
                {
                    "name": "iconName",
                    "line": 24,
                    "type": "PepIconType"
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'end'",
                    "line": 25,
                    "type": "\"start\" | \"end\""
                },
                {
                    "name": "key",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 21,
                    "type": "PepSizeType"
                },
                {
                    "name": "styleType",
                    "defaultValue": "'weak'",
                    "line": 20,
                    "type": "PepStyleType"
                },
                {
                    "name": "value",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<IPepButtonClickEvent>()",
                    "line": 28,
                    "type": "EventEmitter<IPepButtonClickEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onButtonClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepStyleType, PepSizeType } from '@pepperi-addons/ngx-lib';\nimport { PepIconType } from '@pepperi-addons/ngx-lib/icon';\nimport { PepButton, IPepButtonClickEvent } from './button.model';\n\n@Component({\n    selector: 'pep-button',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss'],\n})\nexport class PepButtonComponent implements OnDestroy {\n    @Input() key: string;\n    @Input() value: string;\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n    @Input() disabled = false;\n    @Input() iconName: PepIconType;\n    @Input() iconPosition: 'start' | 'end' = 'end';\n\n    @Output()\n    buttonClick: EventEmitter<IPepButtonClickEvent> = new EventEmitter<IPepButtonClickEvent>();\n\n    ngOnDestroy(): void {\n        if (this.buttonClick) {\n            this.buttonClick.unsubscribe();\n        }\n    }\n\n    onButtonClicked(event: Event): void {\n        const button = new PepButton({\n            key: this.key,\n            value: this.value,\n            // callback: this.callback\n        });\n\n        const buttonClick = {\n            source: button,\n            event,\n        };\n\n        // if (this.callback) {\n        //     this.callback(buttonClick);\n        // } else {\n        this.buttonClick.emit(buttonClick);\n        // }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<button mat-button [pepDataQa]=\"key ? key : value\" class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n    [ngClass]=\"{ 'icon-button': iconName && !value }\" [disabled]=\"disabled\" (click)=\"onButtonClicked($event)\">\n    <mat-icon *ngIf=\"iconName && iconPosition === 'start'\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n    <span *ngIf=\"value\" class=\"ellipsis\" [ngClass]=\"{ 'button-title-with-icon': iconName }\" [title]=\"value\">\n        {{value}}\n    </span>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'end'\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n</button>"
        },
        {
            "name": "PepCarouselComponent",
            "id": "component-PepCarouselComponent-754a78a02a94dcbf6f59b4ac681b74a6",
            "file": "projects/ngx-lib/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-carousel",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                overflow: hidden;\n                display: block;\n            }\n            .carousel-content {\n                height: 100%;\n                overflow: auto;\n                white-space: nowrap;\n            }\n        "
            ],
            "template": "<div class=\"carousel-content\" #contentRef>\n    <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "description": "<p>Whether horizontally and vertically draging and scrolling is be disabled</p>\n",
                    "line": 180
                },
                {
                    "name": "dragDisabled",
                    "line": 221
                },
                {
                    "name": "scrollbarHidden",
                    "description": "<p>Whether the scrollbar is hidden</p>\n",
                    "line": 169
                },
                {
                    "name": "snapDisabled",
                    "line": 229
                },
                {
                    "name": "snapDuration",
                    "line": 245
                },
                {
                    "name": "snapOffset",
                    "line": 237
                },
                {
                    "name": "xDisabled",
                    "description": "<p>Whether horizontally dragging and scrolling is be disabled</p>\n",
                    "line": 191
                },
                {
                    "name": "xWheelEnabled",
                    "description": "<p>Whether scrolling horizontally with mouse wheel is enabled</p>\n",
                    "line": 213
                },
                {
                    "name": "yDisabled",
                    "description": "<p>Whether vertically dragging and scrolling events is disabled</p>\n",
                    "line": 202
                }
            ],
            "outputsClass": [
                {
                    "name": "dragEnd",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 163,
                    "type": "EventEmitter"
                },
                {
                    "name": "dragStart",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 161,
                    "type": "EventEmitter"
                },
                {
                    "name": "dsInitialized",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 151,
                    "type": "EventEmitter"
                },
                {
                    "name": "indexChanged",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 153,
                    "type": "EventEmitter"
                },
                {
                    "name": "reachesLeftBound",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 155,
                    "type": "EventEmitter"
                },
                {
                    "name": "reachesRightBound",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 157,
                    "type": "EventEmitter"
                },
                {
                    "name": "snapAnimationFinished",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 159,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_children",
                    "type": "QueryList<PepCarouselItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "PepCarouselItemDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "_contentRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>The carousel Element</p>\n",
                    "line": 124,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_dragDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_index",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isDragging",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onDragStartListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onMouseDownListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onMouseMoveListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onMouseUpListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onScrollListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_scrollbarHidden",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snapDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snapDuration",
                    "defaultValue": "500",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snapOffset",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_xDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_xWheelEnabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_yDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "displayType",
                    "defaultValue": "'block'",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "downX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The x coordinates on the element</p>\n",
                    "line": 102
                },
                {
                    "name": "downY",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The y coordinates on the element</p>\n",
                    "line": 107
                },
                {
                    "name": "elHeight",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "elWidth",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "indexBound",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "isAnimating",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "isPressed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Is the user currently pressing the element</p>\n",
                    "line": 81
                },
                {
                    "name": "isScrolling",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Is the user currently scrolling the element</p>\n",
                    "line": 86
                },
                {
                    "name": "parentNode",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "<p>The parentNode of carousel Element</p>\n",
                    "line": 118
                },
                {
                    "name": "prevChildrenLength",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "scrollbarWidth",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "scrollTimer",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "scrollToTimer",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "wrapper",
                    "type": "HTMLDivElement | null",
                    "optional": false,
                    "description": "",
                    "line": 131
                }
            ],
            "methodsClass": [
                {
                    "name": "_setIsDragging",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 565,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_startGlobalListening",
                    "args": [
                        {
                            "name": "isTouchEvent",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 574,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "isTouchEvent",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_stopGlobalListening",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 594,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "adjustMarginToLastChild",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1015,
                    "description": "<p>adds a margin right style to the last child element which will resolve the issue\nof last item gets cutoff.</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "checkNavStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 511
                },
                {
                    "name": "checkScrollbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 686,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentChildWidth",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "currentClildWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "nextChildrenWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "childrenWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                },
                                {
                                    "name": "breakFunc",
                                    "type": "function",
                                    "function": []
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 887,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "function": [
                                {
                                    "name": "currentClildWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "nextChildrenWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "childrenWidth",
                                    "type": "number"
                                },
                                {
                                    "name": "index",
                                    "type": "number"
                                },
                                {
                                    "name": "breakFunc",
                                    "type": "function",
                                    "function": []
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disableScroll",
                    "args": [
                        {
                            "name": "axis",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 604,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableScroll",
                    "args": [
                        {
                            "name": "axis",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 612,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScrollbarWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 729,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hideScrollbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 620,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isScrollReachesRightEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 1004,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "locateCarouselItem",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepCarouselItemDirective | null",
                    "typeParameters": [],
                    "line": 937,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "locateCurrentIndex",
                    "args": [
                        {
                            "name": "snap",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 828,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "snap",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markElDimension",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 950,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "maximumIndex",
                    "args": [
                        {
                            "name": "containerWidth",
                            "type": "number"
                        },
                        {
                            "name": "childrenElements",
                            "type": "PepCarouselItemDirective[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 972,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "containerWidth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "childrenElements",
                            "type": "PepCarouselItemDirective[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 458
                },
                {
                    "name": "moveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 470
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 489,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352
                },
                {
                    "name": "onMouseDownHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMoveHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUpHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 441,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScrollHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427
                },
                {
                    "name": "refreshWrapperDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 768,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollTo",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element"
                        },
                        {
                            "name": "to",
                            "type": "number"
                        },
                        {
                            "name": "duration",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 787,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setScrollBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 721,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "showScrollbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 664,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "toChildrenLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 928,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "style.pointer-events",
                    "defaultValue": "'auto'",
                    "line": 129
                }
            ],
            "hostListeners": [
                {
                    "name": "wheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 543
                },
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "line": 560
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    ElementRef,\n    Component,\n    Renderer2,\n    OnDestroy,\n    Input,\n    Output,\n    AfterViewInit,\n    OnChanges,\n    EventEmitter,\n    ViewChild,\n    ContentChildren,\n    AfterViewChecked,\n    QueryList,\n    Inject,\n    HostBinding,\n    HostListener,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { PepCarouselItemDirective } from './carousel-item.directive';\n\n@Component({\n    selector: 'pep-carousel',\n    template: `\n        <div class=\"carousel-content\" #contentRef>\n            <ng-content></ng-content>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                display: block;\n            }\n            .carousel-content {\n                height: 100%;\n                overflow: auto;\n                white-space: nowrap;\n            }\n        `,\n    ],\n})\nexport class PepCarouselComponent\n    implements OnDestroy, AfterViewInit, OnChanges, AfterViewChecked {\n    private _index = 0;\n\n    private _scrollbarHidden = false;\n\n    private _disabled = false;\n\n    private _xDisabled = false;\n\n    private _xWheelEnabled = false;\n\n    private _yDisabled = false;\n\n    private _dragDisabled = false;\n\n    private _snapDisabled = false;\n\n    private _snapOffset = 0;\n\n    private _snapDuration = 500;\n\n    private _isDragging = false;\n\n    private _onMouseMoveListener: () => any;\n\n    private _onMouseUpListener: () => any;\n\n    private _onMouseDownListener: () => any;\n\n    private _onScrollListener: () => any;\n\n    private _onDragStartListener: () => any;\n\n    /**\n     * Is the user currently pressing the element\n     */\n    isPressed = false;\n\n    /**\n     * Is the user currently scrolling the element\n     */\n    isScrolling = false;\n\n    scrollTimer: any; // | NodeJS.Timer = -1;\n\n    scrollToTimer: any; // | NodeJS.Timer = -1;\n\n    /**\n     * Is the user currently dragging the element\n     */\n    get isDragging(): boolean {\n        return this._isDragging;\n    }\n\n    /**\n     * The x coordinates on the element\n     */\n    downX = 0;\n\n    /**\n     * The y coordinates on the element\n     */\n    downY = 0;\n\n    displayType: string | null = 'block';\n\n    elWidth: string | null = null;\n\n    elHeight: string | null = null;\n\n    /**\n     * The parentNode of carousel Element\n     */\n    parentNode: HTMLElement;\n\n    /**\n     * The carousel Element\n     */\n\n    @ViewChild('contentRef', { static: true }) _contentRef: ElementRef;\n\n    @ContentChildren(PepCarouselItemDirective, { descendants: true })\n    _children: QueryList<PepCarouselItemDirective>;\n\n    @HostBinding('style.pointer-events') _pointerEvents = 'auto';\n\n    wrapper: HTMLDivElement | null;\n\n    scrollbarWidth: string | null = null;\n\n    get currIndex() {\n        return this._index;\n    }\n    set currIndex(value) {\n        if (value !== this._index) {\n            this._index = value;\n            this.indexChanged.emit(value);\n        }\n    }\n\n    isAnimating = false;\n\n    prevChildrenLength = 0;\n\n    indexBound = 0;\n\n    @Output() dsInitialized = new EventEmitter<void>();\n\n    @Output() indexChanged = new EventEmitter<number>();\n\n    @Output() reachesLeftBound = new EventEmitter<boolean>();\n\n    @Output() reachesRightBound = new EventEmitter<boolean>();\n\n    @Output() snapAnimationFinished = new EventEmitter<number>();\n\n    @Output() dragStart = new EventEmitter<void>();\n\n    @Output() dragEnd = new EventEmitter<void>();\n\n    /**\n     * Whether the scrollbar is hidden\n     */\n    @Input('scrollbarHidden')\n    get scrollbarHidden() {\n        return this._scrollbarHidden;\n    }\n    set scrollbarHidden(value: boolean) {\n        this._scrollbarHidden = value;\n    }\n\n    /**\n     * Whether horizontally and vertically draging and scrolling is be disabled\n     */\n    @Input('disabled')\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Whether horizontally dragging and scrolling is be disabled\n     */\n    @Input('xDisabled')\n    get xDisabled() {\n        return this._xDisabled;\n    }\n    set xDisabled(value: boolean) {\n        this._xDisabled = value;\n    }\n\n    /**\n     * Whether vertically dragging and scrolling events is disabled\n     */\n    @Input('yDisabled')\n    get yDisabled() {\n        return this._yDisabled;\n    }\n    set yDisabled(value: boolean) {\n        this._yDisabled = value;\n    }\n\n    /**\n     * Whether scrolling horizontally with mouse wheel is enabled\n     */\n    @Input('xWheelEnabled')\n    get xWheelEnabled() {\n        return this._xWheelEnabled;\n    }\n    set xWheelEnabled(value: boolean) {\n        this._xWheelEnabled = value;\n    }\n\n    @Input('dragDisabled')\n    get dragDisabled() {\n        return this._dragDisabled;\n    }\n    set dragDisabled(value: boolean) {\n        this._dragDisabled = value;\n    }\n\n    @Input('snapDisabled')\n    get snapDisabled() {\n        return this._snapDisabled;\n    }\n    set snapDisabled(value: boolean) {\n        this._snapDisabled = value;\n    }\n\n    @Input('snapOffset')\n    get snapOffset() {\n        return this._snapOffset;\n    }\n    set snapOffset(value: number) {\n        this._snapOffset = value;\n    }\n\n    @Input('snapDuration')\n    get snapDuration() {\n        return this._snapDuration;\n    }\n    set snapDuration(value: number) {\n        this._snapDuration = value;\n    }\n\n    constructor(\n        @Inject(ElementRef) private _elementRef: ElementRef,\n        @Inject(Renderer2) private _renderer: Renderer2,\n        @Inject(DOCUMENT) private _document: any\n    ) {\n        this.scrollbarWidth = `${this.getScrollbarWidth()}px`;\n    }\n\n    ngOnChanges() {\n        this.setScrollBar();\n\n        if (this.xDisabled || this.disabled || this._scrollbarHidden) {\n            this.disableScroll('x');\n        } else {\n            this.enableScroll('x');\n        }\n\n        if (this.yDisabled || this.disabled) {\n            this.disableScroll('y');\n        } else {\n            this.enableScroll('y');\n        }\n    }\n\n    ngAfterViewInit() {\n        // auto assign computed css\n        this._renderer.setAttribute(\n            this._contentRef.nativeElement,\n            'drag-scroll',\n            'true'\n        );\n\n        this.displayType =\n            typeof window !== 'undefined'\n                ? window.getComputedStyle(this._elementRef.nativeElement)\n                      .display\n                : 'block';\n\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            'display',\n            this.displayType\n        );\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            'whiteSpace',\n            'noWrap'\n        );\n\n        // store ele width height for later user\n        this.markElDimension();\n\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            'width',\n            this.elWidth\n        );\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            'height',\n            this.elHeight\n        );\n\n        if (this.wrapper) {\n            this.checkScrollbar();\n        }\n\n        this._onMouseDownListener = this._renderer.listen(\n            this._contentRef.nativeElement,\n            'mousedown',\n            this.onMouseDownHandler.bind(this)\n        );\n        this._onScrollListener = this._renderer.listen(\n            this._contentRef.nativeElement,\n            'scroll',\n            this.onScrollHandler.bind(this)\n        );\n        // prevent Firefox from dragging images\n        this._onDragStartListener = this._renderer.listen(\n            'document',\n            'dragstart',\n            (e) => {\n                e.preventDefault();\n            }\n        );\n        this.checkNavStatus();\n        this.dsInitialized.emit();\n        this.adjustMarginToLastChild();\n    }\n\n    ngAfterViewChecked() {\n        // avoid extra checks\n        if (this._children.length !== this.prevChildrenLength) {\n            this.markElDimension();\n            this.checkScrollbar();\n            this.prevChildrenLength = this._children.length;\n            this.checkNavStatus();\n        }\n    }\n\n    ngOnDestroy() {\n        this._renderer.setAttribute(\n            this._contentRef.nativeElement,\n            'drag-scroll',\n            'false'\n        );\n        if (this._onMouseDownListener) {\n            this._onMouseDownListener = this._onMouseDownListener();\n        }\n        if (this._onScrollListener) {\n            this._onScrollListener = this._onScrollListener();\n        }\n        if (this._onDragStartListener) {\n            this._onDragStartListener = this._onDragStartListener();\n        }\n    }\n\n    onMouseMoveHandler(event: MouseEvent) {\n        this.onMouseMove(event);\n    }\n\n    onMouseMove(event: MouseEvent) {\n        if (this.isPressed && !this.disabled) {\n            // Workaround for prevent scroll stuck if browser lost focus\n            // MouseEvent.buttons not support by Safari\n            // tslint:disable-next-line:deprecation\n            if (!event.buttons && !event.which) {\n                return this.onMouseUpHandler(event);\n            }\n\n            this._pointerEvents = 'none';\n            this._setIsDragging(true);\n\n            // Drag X\n            if (!this.xDisabled && !this.dragDisabled) {\n                const clientX = (event as MouseEvent).clientX;\n                this._contentRef.nativeElement.scrollLeft =\n                    this._contentRef.nativeElement.scrollLeft -\n                    clientX +\n                    this.downX;\n                this.downX = clientX;\n            }\n\n            // Drag Y\n            if (!this.yDisabled && !this.dragDisabled) {\n                const clientY = (event as MouseEvent).clientY;\n                this._contentRef.nativeElement.scrollTop =\n                    this._contentRef.nativeElement.scrollTop -\n                    clientY +\n                    this.downY;\n                this.downY = clientY;\n            }\n        }\n    }\n\n    onMouseDownHandler(event: MouseEvent) {\n        const carouselItem: PepCarouselItemDirective | null = this.locateCarouselItem(\n            event.target as Element\n        );\n        if (carouselItem && carouselItem.dragDisabled) {\n            return;\n        }\n\n        const isTouchEvent = event.type === 'touchstart';\n\n        this._startGlobalListening(isTouchEvent);\n        this.isPressed = true;\n\n        const mouseEvent = event as MouseEvent;\n        this.downX = mouseEvent.clientX;\n        this.downY = mouseEvent.clientY;\n\n        clearTimeout(this.scrollToTimer as number);\n    }\n\n    onScrollHandler() {\n        this.checkNavStatus();\n        if (!this.isPressed && !this.isAnimating && !this.snapDisabled) {\n            this.isScrolling = true;\n            clearTimeout(this.scrollTimer as number);\n            this.scrollTimer = setTimeout(() => {\n                this.isScrolling = false;\n                this.locateCurrentIndex(true);\n            }, 500);\n        } else {\n            this.locateCurrentIndex();\n        }\n    }\n\n    onMouseUpHandler(event: MouseEvent) {\n        if (this.isPressed) {\n            this.isPressed = false;\n            this._pointerEvents = 'auto';\n            this._setIsDragging(false);\n            if (!this.snapDisabled) {\n                this.locateCurrentIndex(true);\n            } else {\n                this.locateCurrentIndex();\n            }\n            this._stopGlobalListening();\n        }\n    }\n\n    /*\n     * Nav button\n     */\n    moveLeft() {\n        if (this.currIndex !== 0 || this.snapDisabled) {\n            this.currIndex--;\n            clearTimeout(this.scrollToTimer as number);\n            this.scrollTo(\n                this._contentRef.nativeElement,\n                this.toChildrenLocation(),\n                this.snapDuration\n            );\n        }\n    }\n\n    moveRight() {\n        const container = this.wrapper || this.parentNode;\n        const containerWidth = container ? container.clientWidth : 0;\n\n        if (\n            !this.isScrollReachesRightEnd() &&\n            this.currIndex <\n                this.maximumIndex(containerWidth, this._children.toArray())\n        ) {\n            this.currIndex++;\n            clearTimeout(this.scrollToTimer as number);\n            this.scrollTo(\n                this._contentRef.nativeElement,\n                this.toChildrenLocation(),\n                this.snapDuration\n            );\n        }\n    }\n\n    moveTo(index: number) {\n        const container = this.wrapper || this.parentNode;\n        const containerWidth = container ? container.clientWidth : 0;\n        if (\n            index >= 0 &&\n            index !== this.currIndex &&\n            this.currIndex <=\n                this.maximumIndex(containerWidth, this._children.toArray())\n        ) {\n            this.currIndex = Math.min(\n                index,\n                this.maximumIndex(containerWidth, this._children.toArray())\n            );\n            clearTimeout(this.scrollToTimer as number);\n            this.scrollTo(\n                this._contentRef.nativeElement,\n                this.toChildrenLocation(),\n                this.snapDuration\n            );\n        }\n    }\n\n    checkNavStatus() {\n        setTimeout(() => {\n            const onlyOneItem = Boolean(this._children.length <= 1);\n            const containerIsLargerThanContent = Boolean(\n                this._contentRef.nativeElement.scrollWidth <=\n                    this._contentRef.nativeElement.clientWidth\n            );\n            if (onlyOneItem || containerIsLargerThanContent) {\n                // only one element\n                this.reachesLeftBound.emit(true);\n                this.reachesRightBound.emit(true);\n            } else if (this.isScrollReachesRightEnd()) {\n                // reached right end\n                this.reachesLeftBound.emit(false);\n                this.reachesRightBound.emit(true);\n            } else if (\n                this._contentRef.nativeElement.scrollLeft === 0 &&\n                this._contentRef.nativeElement.scrollWidth >\n                    this._contentRef.nativeElement.clientWidth\n            ) {\n                // reached left end\n                this.reachesLeftBound.emit(true);\n                this.reachesRightBound.emit(false);\n            } else {\n                // in the middle\n                this.reachesLeftBound.emit(false);\n                this.reachesRightBound.emit(false);\n            }\n        }, 0);\n    }\n\n    @HostListener('wheel', ['$event'])\n    public onWheel(event: WheelEvent) {\n        if (this._xWheelEnabled) {\n            event.preventDefault();\n\n            if (this._snapDisabled) {\n                this._contentRef.nativeElement.scrollBy(event.deltaY, 0);\n            } else {\n                if (event.deltaY < 0) {\n                    this.moveLeft();\n                } else if (event.deltaY > 0) {\n                    this.moveRight();\n                }\n            }\n        }\n    }\n\n    @HostListener('window:resize')\n    public onWindowResize() {\n        this.refreshWrapperDimensions();\n        this.checkNavStatus();\n    }\n\n    private _setIsDragging(value: boolean) {\n        if (this._isDragging === value) {\n            return;\n        }\n\n        this._isDragging = value;\n        value ? this.dragStart.emit() : this.dragEnd.emit();\n    }\n\n    private _startGlobalListening(isTouchEvent: boolean) {\n        if (!this._onMouseMoveListener) {\n            const eventName = isTouchEvent ? 'touchmove' : 'mousemove';\n            this._onMouseMoveListener = this._renderer.listen(\n                'document',\n                eventName,\n                this.onMouseMoveHandler.bind(this)\n            );\n        }\n\n        if (!this._onMouseUpListener) {\n            const eventName = isTouchEvent ? 'touchend' : 'mouseup';\n            this._onMouseUpListener = this._renderer.listen(\n                'document',\n                eventName,\n                this.onMouseUpHandler.bind(this)\n            );\n        }\n    }\n\n    private _stopGlobalListening() {\n        if (this._onMouseMoveListener) {\n            this._onMouseMoveListener = this._onMouseMoveListener();\n        }\n\n        if (this._onMouseUpListener) {\n            this._onMouseUpListener = this._onMouseUpListener();\n        }\n    }\n\n    private disableScroll(axis: string): void {\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            `overflow-${axis}`,\n            'hidden'\n        );\n    }\n\n    private enableScroll(axis: string): void {\n        this._renderer.setStyle(\n            this._contentRef.nativeElement,\n            `overflow-${axis}`,\n            'auto'\n        );\n    }\n\n    private hideScrollbar(): void {\n        if (\n            this._contentRef.nativeElement.style.display !== 'none' &&\n            !this.wrapper\n        ) {\n            this.parentNode = this._contentRef.nativeElement.parentNode;\n\n            // create container element\n            this.wrapper = this._renderer.createElement('div');\n            this._renderer.addClass(this.wrapper, 'carousel-wrapper');\n            // this._renderer.setAttribute(this.wrapper, 'class', 'carousel-wrapper');\n            // this._renderer.addClass(this.wrapper, 'carousel-container');\n\n            this.refreshWrapperDimensions();\n\n            this._renderer.setStyle(this.wrapper, 'overflow', 'hidden');\n\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'width',\n                `calc(100% + ${this.scrollbarWidth})`\n            );\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'height',\n                `calc(100% + ${this.scrollbarWidth})`\n            );\n\n            // Append container element to component element.\n            this._renderer.appendChild(\n                this._elementRef.nativeElement,\n                this.wrapper\n            );\n\n            // Append content element to container element.\n            this._renderer.appendChild(\n                this.wrapper,\n                this._contentRef.nativeElement\n            );\n\n            this.adjustMarginToLastChild();\n        }\n    }\n\n    private showScrollbar(): void {\n        if (this.wrapper) {\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'width',\n                '100%'\n            );\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'height',\n                this.wrapper.style.height\n            );\n            if (this.parentNode !== null) {\n                this.parentNode.removeChild(this.wrapper);\n                this.parentNode.appendChild(this._contentRef.nativeElement);\n            }\n            this.wrapper = null;\n\n            this.adjustMarginToLastChild();\n        }\n    }\n\n    private checkScrollbar() {\n        if (\n            this._contentRef.nativeElement.scrollWidth <=\n            this._contentRef.nativeElement.clientWidth\n        ) {\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'height',\n                '100%'\n            );\n        } else {\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'height',\n                `calc(100% + ${this.scrollbarWidth})`\n            );\n        }\n        if (\n            this._contentRef.nativeElement.scrollHeight <=\n            this._contentRef.nativeElement.clientHeight\n        ) {\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'width',\n                '100%'\n            );\n        } else {\n            this._renderer.setStyle(\n                this._contentRef.nativeElement,\n                'width',\n                `calc(100% + ${this.scrollbarWidth})`\n            );\n        }\n    }\n\n    private setScrollBar(): void {\n        if (this.scrollbarHidden) {\n            this.hideScrollbar();\n        } else {\n            this.showScrollbar();\n        }\n    }\n\n    private getScrollbarWidth(): number {\n        /**\n         * Browser Scrollbar Widths (2016)\n         * OSX (Chrome, Safari, Firefox) - 15px\n         * Windows XP (IE7, Chrome, Firefox) - 17px\n         * Windows 7 (IE10, IE11, Chrome, Firefox) - 17px\n         * Windows 8.1 (IE11, Chrome, Firefox) - 17px\n         * Windows 10 (IE11, Chrome, Firefox) - 17px\n         * Windows 10 (Edge 12/13) - 12px\n         */\n        const outer = this._renderer.createElement('div');\n        this._renderer.setStyle(outer, 'visibility', 'hidden');\n        this._renderer.setStyle(outer, 'width', '100px');\n        this._renderer.setStyle(outer, 'msOverflowStyle', 'scrollbar'); // needed for WinJS apps\n        // document.body.appendChild(outer);\n        this._renderer.appendChild(this._document.body, outer);\n        // this._renderer.appendChild(this._renderer.selectRootElement('body'), outer);\n        const widthNoScroll = outer.offsetWidth;\n        // force scrollbars\n        this._renderer.setStyle(outer, 'overflow', 'scroll');\n\n        // add innerdiv\n        const inner = this._renderer.createElement('div');\n        this._renderer.setStyle(inner, 'width', '100%');\n        this._renderer.appendChild(outer, inner);\n\n        const widthWithScroll = inner.offsetWidth;\n\n        // remove divs\n        this._renderer.removeChild(this._document.body, outer);\n\n        /**\n         * Scrollbar width will be 0 on Mac OS with the\n         * default \"Only show scrollbars when scrolling\" setting (Yosemite and up).\n         * setting default width to 20;\n         */\n        return widthNoScroll - widthWithScroll || 20;\n    }\n\n    private refreshWrapperDimensions() {\n        if (this.wrapper) {\n            const height =\n                this._elementRef.nativeElement.style.height ||\n                this._elementRef.nativeElement.offsetHeight;\n\n            this._renderer.setStyle(this.wrapper, 'width', '100%');\n            this._renderer.setStyle(\n                this.wrapper,\n                'height',\n                height === 0 ? 'auto' : height + 'px'\n            );\n        }\n    }\n\n    /*\n     * The below solution is heavily inspired from\n     * https://gist.github.com/andjosh/6764939\n     */\n    private scrollTo(element: Element, to: number, duration: number) {\n        this.isAnimating = true;\n        const start = element.scrollLeft,\n            change = to - start - this.snapOffset,\n            increment = 20;\n        let currentTime = 0;\n\n        // t = current time\n        // b = start value\n        // c = change in value\n        // d = duration\n        const easeInOutQuad = (t: number, b: number, c: number, d: number) => {\n            t /= d / 2;\n            if (t < 1) {\n                return (c / 2) * t * t + b;\n            }\n            t--;\n            return (-c / 2) * (t * (t - 2) - 1) + b;\n        };\n\n        const animateScroll = () => {\n            currentTime += increment;\n            element.scrollLeft = easeInOutQuad(\n                currentTime,\n                start,\n                change,\n                duration\n            );\n            if (currentTime < duration) {\n                this.scrollToTimer = setTimeout(animateScroll, increment);\n            } else {\n                // run one more frame to make sure the animation is fully finished\n                setTimeout(() => {\n                    this.isAnimating = false;\n                    this.snapAnimationFinished.emit(this.currIndex);\n                }, increment);\n            }\n        };\n        animateScroll();\n    }\n\n    private locateCurrentIndex(snap?: boolean) {\n        this.currentChildWidth(\n            (\n                currentChildWidth,\n                nextChildrenWidth,\n                childrenWidth,\n                idx: number,\n                stop\n            ) => {\n                if (\n                    this._contentRef.nativeElement.scrollLeft >=\n                        childrenWidth &&\n                    this._contentRef.nativeElement.scrollLeft <=\n                        nextChildrenWidth\n                ) {\n                    if (\n                        nextChildrenWidth -\n                            this._contentRef.nativeElement.scrollLeft >\n                            currentChildWidth / 2 &&\n                        !this.isScrollReachesRightEnd()\n                    ) {\n                        // roll back scrolling\n                        if (!this.isAnimating) {\n                            this.currIndex = idx;\n                        }\n                        if (snap) {\n                            this.scrollTo(\n                                this._contentRef.nativeElement,\n                                childrenWidth,\n                                this.snapDuration\n                            );\n                        }\n                    } else if (\n                        this._contentRef.nativeElement.scrollLeft !== 0\n                    ) {\n                        // forward scrolling\n                        if (!this.isAnimating) {\n                            this.currIndex = idx + 1;\n                        }\n                        if (snap) {\n                            this.scrollTo(\n                                this._contentRef.nativeElement,\n                                childrenWidth + currentChildWidth,\n                                this.snapDuration\n                            );\n                        }\n                    }\n                    stop();\n                } else if (idx + 1 === this._children.length - 1) {\n                    // reaches last index\n                    if (!this.isAnimating) {\n                        this.currIndex = idx + 1;\n                    }\n                    stop();\n                }\n            }\n        );\n    }\n\n    private currentChildWidth(\n        cb: (\n            currentClildWidth: number,\n            nextChildrenWidth: number,\n            childrenWidth: number,\n            index: number,\n            breakFunc: () => void\n        ) => void\n    ) {\n        let childrenWidth = 0;\n        let shouldBreak = false;\n        const breakFunc = function () {\n            shouldBreak = true;\n        };\n        const childrenArr = this._children.toArray();\n\n        for (let i = 0; i < childrenArr.length; i++) {\n            if (i === childrenArr.length - 1) {\n                break;\n            }\n            if (shouldBreak) {\n                break;\n            }\n\n            const nextChildrenWidth =\n                childrenWidth +\n                childrenArr[i + 1]._elementRef.nativeElement.clientWidth;\n            const currentClildWidth =\n                childrenArr[i]._elementRef.nativeElement.clientWidth;\n            cb(\n                currentClildWidth,\n                nextChildrenWidth,\n                childrenWidth,\n                i,\n                breakFunc\n            );\n\n            childrenWidth += currentClildWidth;\n        }\n    }\n\n    private toChildrenLocation(): number {\n        let to = 0;\n        const childrenArr = this._children.toArray();\n        for (let i = 0; i < this.currIndex; i++) {\n            to += childrenArr[i]._elementRef.nativeElement.clientWidth;\n        }\n        return to;\n    }\n\n    private locateCarouselItem(\n        element: Element\n    ): PepCarouselItemDirective | null {\n        let item: PepCarouselItemDirective | null = null;\n        const childrenArr = this._children.toArray();\n        for (let i = 0; i < childrenArr.length; i++) {\n            if (element === childrenArr[i]._elementRef.nativeElement) {\n                item = childrenArr[i];\n            }\n        }\n        return item;\n    }\n\n    private markElDimension() {\n        if (this.wrapper) {\n            this.elWidth = this.wrapper.style.width;\n            this.elHeight = this.wrapper.style.height;\n        } else {\n            this.elWidth =\n                this._elementRef.nativeElement.style.width ||\n                this._elementRef.nativeElement.offsetWidth + 'px';\n            this.elHeight =\n                this._elementRef.nativeElement.style.height ||\n                this._elementRef.nativeElement.offsetHeight + 'px';\n        }\n        const container = this.wrapper || this.parentNode;\n        const containerWidth = container ? container.clientWidth : 0;\n        if (this._children.length > 1) {\n            this.indexBound = this.maximumIndex(\n                containerWidth,\n                this._children.toArray()\n            );\n        }\n    }\n\n    private maximumIndex(\n        containerWidth: number,\n        childrenElements: PepCarouselItemDirective[]\n    ): number {\n        let count = 0;\n        let childrenWidth = 0;\n        for (let i = 0; i <= childrenElements.length; i++) {\n            // last N element\n            const carouselItemDirective: PepCarouselItemDirective =\n                childrenElements[childrenElements.length - 1 - i];\n            if (!carouselItemDirective) {\n                break;\n            } else {\n                const nativeElement =\n                    carouselItemDirective._elementRef.nativeElement;\n                let itemWidth = nativeElement.clientWidth;\n                if (itemWidth === 0 && nativeElement.firstElementChild) {\n                    itemWidth =\n                        carouselItemDirective._elementRef.nativeElement\n                            .firstElementChild.clientWidth;\n                }\n                childrenWidth += itemWidth;\n                if (childrenWidth < containerWidth) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n        }\n        return childrenElements.length - count;\n    }\n\n    private isScrollReachesRightEnd(): boolean {\n        const scrollLeftPos =\n            this._contentRef.nativeElement.scrollLeft +\n            this._contentRef.nativeElement.offsetWidth;\n        return scrollLeftPos >= this._contentRef.nativeElement.scrollWidth;\n    }\n\n    /**\n     * adds a margin right style to the last child element which will resolve the issue\n     * of last item gets cutoff.\n     */\n    private adjustMarginToLastChild(): void {\n        // if (this._children && this._children.length > 0 && this.hideScrollbar) {\n        //     const childrenArr = this._children.toArray();\n        //     const lastItem = childrenArr[childrenArr.length - 1]._elementRef.nativeElement;\n        //     if (this.wrapper && childrenArr.length > 1) {\n        //         this._renderer.setStyle(lastItem, 'margin-right', this.scrollbarWidth);\n        //     } else {\n        //         this._renderer.setStyle(lastItem, 'margin-right', 0);\n        //     }\n        // }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                overflow: hidden;\n                display: block;\n            }\n            .carousel-content {\n                height: 100%;\n                overflow: auto;\n                white-space: nowrap;\n            }\n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_document",
                        "type": "any"
                    }
                ],
                "line": 250,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "AfterViewInit",
                "OnChanges",
                "AfterViewChecked"
            ],
            "accessors": {
                "isDragging": {
                    "name": "isDragging",
                    "getSignature": {
                        "name": "isDragging",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 95,
                        "description": "<p>Is the user currently dragging the element</p>\n"
                    }
                },
                "currIndex": {
                    "name": "currIndex",
                    "setSignature": {
                        "name": "currIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 138,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currIndex",
                        "type": "",
                        "returnType": "",
                        "line": 135
                    }
                },
                "scrollbarHidden": {
                    "name": "scrollbarHidden",
                    "setSignature": {
                        "name": "scrollbarHidden",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 172,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 183,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "xDisabled": {
                    "name": "xDisabled",
                    "setSignature": {
                        "name": "xDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 194,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "yDisabled": {
                    "name": "yDisabled",
                    "setSignature": {
                        "name": "yDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 205,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "xWheelEnabled": {
                    "name": "xWheelEnabled",
                    "setSignature": {
                        "name": "xWheelEnabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 216,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dragDisabled": {
                    "name": "dragDisabled",
                    "setSignature": {
                        "name": "dragDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 224,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "snapDisabled": {
                    "name": "snapDisabled",
                    "setSignature": {
                        "name": "snapDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 232,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "snapOffset": {
                    "name": "snapOffset",
                    "setSignature": {
                        "name": "snapOffset",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 240,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "snapDuration": {
                    "name": "snapDuration",
                    "setSignature": {
                        "name": "snapDuration",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 248,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PepCheckboxComponent",
            "id": "component-PepCheckboxComponent-4dc8449b5d3a052382bfa7ffcf402d32",
            "file": "projects/ngx-lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "additionalValue",
                    "line": 42,
                    "type": "any"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 38
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 46,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 47
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 33
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 50,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 39
                },
                {
                    "name": "renderTitle",
                    "defaultValue": "true",
                    "line": 49
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 37
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 41
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 48
                },
                {
                    "name": "type",
                    "defaultValue": "'checkbox'",
                    "line": 36,
                    "type": "PepCheckboxFieldType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 40,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 53,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "additionalValueObject",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "controlType",
                    "defaultValue": "'checkbox'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "jsonLib",
                    "defaultValue": "JSON",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "onMaterialChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MatCheckboxChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleChecked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    Renderer2,\n    ElementRef,\n    Optional,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepCustomizationService,\n    PepLayoutType,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepCheckboxFieldType,\n    PepCheckboxField,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-checkbox',\n    templateUrl: './checkbox.component.html',\n    styleUrls: ['./checkbox.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepCheckboxComponent implements OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() type: PepCheckboxFieldType = 'checkbox'; // || 'booleanText'\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() additionalValue: any;\n\n    controlType = 'checkbox';\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() renderTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    standAlone = false;\n\n    additionalValueObject: any;\n    public jsonLib = JSON;\n\n    constructor(\n        private renderer: Renderer2,\n        private customizationService: PepCustomizationService,\n        private element: ElementRef,\n        private translate: TranslateService\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled, 0, null, true);\n            const pepField = new PepCheckboxField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        if (this.type === 'booleanText') {\n            try {\n                if (typeof this.additionalValue === 'string') {\n                    this.additionalValueObject = JSON.parse(\n                        this.additionalValue\n                    );\n                } else {\n                    this.additionalValueObject = this.additionalValue;\n                }\n            } catch {\n                this.additionalValueObject = {\n                    CheckedText: this.translate.instant('CHECKBOX.TRUE'),\n                    UncheckedText: this.translate.instant('CHECKBOX.FALSE'),\n                };\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    onMaterialChange(e: MatCheckboxChange): void {\n        this.changeValue(e.checked);\n    }\n\n    toggleChecked(event: Event): void {\n        if (!this.disabled) {\n            const isChecked: boolean =\n                this.value === 'true' || this.value === '1' ? true : false;\n            const newValue = !isChecked;\n            this.value = newValue.toString();\n            this.changeValue(newValue);\n        }\n    }\n\n    changeValue(value: any): void {\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            value\n        );\n        this.valueChange.emit({ key: this.key, value: value.toString() });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <div class=\"pep-checkbox-container pep-input\" [ngClass]=\"{\n                'disable': disabled,\n                'pep-report-checkbox': layoutType === 'table' && !isActive,\n                'pep-card-checkbox': layoutType === 'card',\n                'one-row': rowSpan === 1,\n                'no-title': label.length == 0,\n                'right-alignment pull-right flip': xAlignment == 'right',\n                'center-alignment': xAlignment == 'center'\n            }\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\">\n            <!--\n                This is cause a bug that when click on the pep-input area and after on the checkbox\n                the value is updated only for the second time.\n                (click)=\"toggleChecked($event)\" \n            -->\n            <ng-container *ngIf=\"type == 'booleanText'; then booleanTextTemplate; else regularTemplate\"></ng-container>\n            <ng-template #booleanTextTemplate>\n                <div class=\"mat-checkbox-layout body-sm\" (click)=\"toggleChecked($event)\"\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + ((value | lowercase) == 'true' || value == '1' ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\">\n                    <button [id]=\"key\" class=\"emoji-icon pull-left flip\">\n                        {{ value.toLowerCase() == 'true' || value == '1' ? additionalValueObject.CheckedText :\n                        additionalValueObject.UncheckedText }}\n                    </button>\n                    <span *ngIf=\"label.length > 0 && layoutType !== 'table'\" class=\"mat-checkbox-label emoji-title\">{{\n                        label }}</span>\n                </div>\n            </ng-template>\n            <ng-template #regularTemplate>\n                <mat-checkbox [name]=\"key\" class=\"body-sm ellipsis\" type=\"checkbox\" (change)=\"onMaterialChange($event)\"\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + ((value | lowercase) == 'true' || value == '1' ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\"\n                    [checked]=\"(value | lowercase) == 'true' || value == '1' ? true : false\" [disabled]=\"disabled\">\n                    <span *ngIf=\"label.length > 0 && layoutType !== 'table'\">{{ label }}</span>\n                </mat-checkbox>\n            </ng-template>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"renderTitle\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"false\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"key === 'ItemHasActiveCampaign'; then itemCampaignBlock; else checkboxBlock\">\n        </ng-container>\n        <ng-template #itemCampaignBlock>\n            <ng-container *ngIf=\"(value | lowercase) == 'true' || value == '1'; then trueTemplate; else falseTemplate\">\n            </ng-container>\n            <ng-template #trueTemplate>\n                <mat-icon class=\"has-active-campaign\" title=\"{{ 'CHECKBOX.TRUE' | translate }}\">\n                    <pep-icon name=\"system_bolt\">\n                    </pep-icon>\n                </mat-icon>\n            </ng-template>\n            <ng-template #falseTemplate>\n                <span>&nbsp;</span>\n            </ng-template>\n        </ng-template>\n        <ng-template #checkboxBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepColorComponent",
            "id": "component-PepColorComponent-eb0b83df2d1bc1764b7b756e708deedc",
            "file": "projects/ngx-lib/color/color.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-color",
            "styleUrls": [
                "./color.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 32
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 29
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 31
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 40,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 33
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 35
                },
                {
                    "name": "showAAComplient",
                    "defaultValue": "true",
                    "line": 39
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 38
                },
                {
                    "name": "type",
                    "defaultValue": "'any'",
                    "line": 36,
                    "type": "PepColorType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 30
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 34,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 43,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeColor",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    Renderer2,\n    ElementRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n} from '@angular/core';\nimport {\n    PepCustomizationService,\n    PepLayoutType,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n} from '@pepperi-addons/ngx-lib';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepColorPickerComponent } from './color-picker.component';\nimport { PepColorType } from './color.model';\n\n@Component({\n    selector: 'pep-color',\n    templateUrl: './color.component.html',\n    styleUrls: ['./color.component.scss'],\n})\nexport class PepColorComponent implements OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() type: PepColorType = 'any';\n\n    @Input() showTitle = true;\n    @Input() showAAComplient = true;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    constructor(\n        private dialogService: PepDialogService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        this.renderer.addClass(\n            this.element.nativeElement,\n            PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n        );\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    changeColor(value: any): void {\n        this.value = value;\n        this.valueChange.emit({ key: this.key, value });\n    }\n\n    chooseColor(): void {\n        const dialogRef = this.dialogService.openDialog(\n            PepColorPickerComponent,\n            {\n                value: this.value,\n                type: this.type,\n                showAAComplient: this.showAAComplient,\n            }\n        );\n\n        dialogRef.afterClosed().subscribe((value) => {\n            if (value !== undefined && value !== null) {\n                this.changeColor(value);\n            }\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n:host {\n    display: grid;\n}\n.pepperi-color-container, .pep-color-container {\n    .pepperi-color, .pep-color {\n        padding: 0;\n        display: grid;\n\n        .btn-edit {\n            width: $form-field-button-size;\n            min-width: unset;\n            padding: 0;\n            margin: 0 $spacing-md;\n            justify-self: end;\n            align-self: center;\n        }\n    }\n\n    &.right-alignment {\n        .pepperi-color, .pep-color {\n            .btn-edit {\n                justify-self: start;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./color.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<pep-field-title [label]=\"label\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n</pep-field-title>\n<div [id]=\"key\" class=\"pep-color-container\" [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n    <div pepRtlDirection (click)=\"chooseColor()\" class=\"pep-color pep-input\"\n        [ngClass]=\"{disable: disabled, 'one-row': rowSpan === 1}\"\n        [ngStyle]=\"{ 'background':  value ? value : 'transparent' }\">\n        <button *ngIf=\"!disabled\" class=\"pep-button icon-button xs weak invert mat-button btn-edit\" tabindex=\"-1\"\n            pepButtonBlur mat-button>\n            <mat-icon>\n                <pep-icon name=\"system_edit\"></pep-icon>\n            </mat-icon>\n        </button>\n    </div>\n</div>"
        },
        {
            "name": "PepColorPickerComponent",
            "id": "component-PepColorPickerComponent-d621f34d160302890bf554169573fe38",
            "file": "projects/ngx-lib/color/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./color-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkAAComplient",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "complientColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "CURRENT_HUE",
                    "defaultValue": "'--pep-color-picker-current-hue'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "currentHue",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "currentHueMax",
                    "defaultValue": "360",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "currentHueMin",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "currentLightness",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "currentLightnessMax",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "currentLightnessMin",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "currentSaturation",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "currentSaturationMax",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "currentSaturationMin",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "data",
                    "type": "IPepColorPickerDialogData",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isUserChooseAAComplientColor",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "convertColorToValueString",
                    "args": [
                        {
                            "name": "hslColor",
                            "type": "IPepHslColor"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "hslColor",
                            "type": "IPepHslColor",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertValueStringToColor",
                    "args": [
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initVars",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "onColorValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLightnessChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaturationChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSave",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentHueInCss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    hex2hsl,\n    hslString2hsl,\n    rgbString2hsl,\n    IPepHslColor,\n    findClosestAccessibleColor,\n    hsl2hex,\n    convertHslToStringHsl,\n} from './color-utils';\nimport { PepColorType } from './color.model';\n\nenum PepContrastRatioType {\n    AA = 4.5,\n    AAA = 7,\n}\n\ninterface IPepColorPickerDialogData {\n    value: string;\n    type: PepColorType;\n    showAAComplient: boolean;\n    textColor: string;\n    contrastRatio: PepContrastRatioType;\n}\n\n@Component({\n    templateUrl: './color-picker.component.html',\n    styleUrls: ['./color-picker.component.scss'],\n})\nexport class PepColorPickerComponent implements OnInit {\n    static CURRENT_HUE = '--pep-color-picker-current-hue';\n\n    checkAAComplient = true;\n\n    constructor(\n        private dialogRef: MatDialogRef<PepColorPickerComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: IPepColorPickerDialogData\n    ) {\n        this.data.type = data ? data.type : 'any';\n        this.data.showAAComplient = !data\n            ? false\n            : data.showAAComplient ?? true;\n        this.data.textColor = data && data.textColor ? data.textColor : '#fff';\n        this.data.contrastRatio =\n            data && data.contrastRatio\n                ? data.contrastRatio\n                : PepContrastRatioType.AA;\n    }\n\n    currentHue = 100;\n    currentHueMin = 0;\n    currentHueMax = 360;\n\n    currentSaturation = 50;\n    currentSaturationMin = 0;\n    currentSaturationMax = 100;\n\n    currentLightness = 50;\n    currentLightnessMin = 0;\n    currentLightnessMax = 100;\n\n    complientColor: string;\n    isUserChooseAAComplientColor: boolean;\n\n    ngOnInit(): void {\n        this.initVars();\n        this.checkAAComplient = this.data.showAAComplient;\n        this.convertValueStringToColor(this.data.value);\n    }\n\n    initVars(): void {\n        if (this.data.type === 'main') {\n            this.currentLightnessMax = 10;\n            this.currentLightness = 5;\n        } else if (this.data.type === 'success') {\n            this.currentHueMin = 70;\n            this.currentHueMax = 150;\n            this.currentHue = 100;\n\n            this.currentSaturationMin = 50;\n            this.currentSaturationMax = 100;\n            this.currentSaturation = 50;\n\n            this.currentLightnessMin = 10;\n            this.currentLightnessMax = 65;\n            this.currentLightness = 50;\n        } else if (this.data.type === 'caution') {\n            this.currentHueMin = -20;\n            this.currentHueMax = 20;\n            this.currentHue = 10;\n\n            this.currentSaturationMin = 75;\n            this.currentSaturationMax = 100;\n            this.currentSaturation = 75;\n\n            this.currentLightnessMin = 25;\n            this.currentLightnessMax = 75;\n            this.currentLightness = 50;\n        }\n    }\n\n    setCurrentHueInCss(): void {\n        document.documentElement.style.setProperty(\n            PepColorPickerComponent.CURRENT_HUE,\n            this.currentHue.toString()\n        );\n    }\n\n    convertValueStringToColor(color): void {\n        if (color.indexOf('hsl') === 0) {\n            const hsl = hslString2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else if (color.indexOf('rgb') === 0) {\n            const hsl = rgbString2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else if (color.indexOf('#') === 0) {\n            const hsl = hex2hsl(color);\n            this.convertColorToValueString(hsl);\n        } else {\n            // Handle other colors.\n        }\n\n        this.setCurrentHueInCss();\n    }\n\n    convertColorToValueString(hslColor: IPepHslColor): void {\n        // Regular hue\n        if (\n            hslColor.h >= this.currentHueMin &&\n            hslColor.h <= this.currentHueMax\n        ) {\n            this.currentHue = hslColor.h;\n        } else if (\n            this.currentHueMin < 0 &&\n            hslColor.h >= 0 &&\n            hslColor.h <= 360\n        ) {\n            // For min with - (change to the other side of the circle)\n            hslColor.h = hslColor.h - 360;\n\n            if (\n                hslColor.h >= this.currentHueMin &&\n                hslColor.h <= this.currentHueMax\n            ) {\n                this.currentHue = hslColor.h;\n            }\n        }\n\n        this.currentSaturation =\n            hslColor.s >= this.currentSaturationMin &&\n            hslColor.s <= this.currentSaturationMax\n                ? hslColor.s\n                : this.currentSaturation;\n\n        this.currentLightness =\n            hslColor.l >= this.currentLightnessMin &&\n            hslColor.l <= this.currentLightnessMax\n                ? hslColor.l\n                : this.currentLightness;\n\n        // Write the value (if hue is changed to the other side of the circle return it back).\n        const hsl = {\n            h: this.currentHue,\n            s: this.currentSaturation,\n            l: this.currentLightness,\n        };\n        this.data.value = convertHslToStringHsl(hsl);\n\n        // Check the contrast ratio - set the closest accessible color to complientColor\n        // and update isUserChooseAAComplientColor.\n        const adjustableColor = hsl2hex(hsl);\n        const closestHex = findClosestAccessibleColor(\n            adjustableColor,\n            this.data.textColor,\n            this.data.contrastRatio\n        );\n\n        this.isUserChooseAAComplientColor = adjustableColor === closestHex;\n        this.complientColor = convertHslToStringHsl(hex2hsl(closestHex));\n    }\n\n    onHueChange(event): void {\n        this.convertColorToValueString({ h: event.value });\n        this.setCurrentHueInCss();\n    }\n\n    onSaturationChange(event): void {\n        // this.currentSaturation = event.value;\n        this.convertColorToValueString({ s: event.value });\n    }\n\n    onLightnessChange(event): void {\n        // this.currentLightness = event.value;\n        this.convertColorToValueString({\n            l:\n                this.currentLightnessMax -\n                event.value +\n                this.currentLightnessMin,\n        });\n    }\n\n    onColorValueChange(event): void {\n        this.convertValueStringToColor(event.value);\n    }\n\n    onSave(event): void {\n        const color = this.checkAAComplient\n            ? this.complientColor\n            : this.data.value;\n\n        // this.notify.emit({ key: this.key, value: color });\n        this.dialogRef.close(color);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n\n.mat-slider-track-background {\n    // height: 0 !important;\n    display: none;\n}\n.mat-slider-horizontal .mat-slider-track-fill {\n    // height: 0 !important;\n    display: none;\n}\n\n.pepperi-color-picker-container, .pep-color-picker-container {\n\n    $color-width: 9.25rem;\n\n    ::ng-deep.mat-dialog-content {\n        // padding-left: $spacing-sm;\n        // padding-right: $spacing-sm;\n        // padding-bottom: $spacing-sm;\n        padding: $spacing-sm $spacing-sm 0;\n    }\n\n    .color-chooser-content {\n        display: -ms-grid;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        grid-template-rows: repeat(3, 1fr);\n        grid-column-gap: $spacing-xl;\n        grid-row-gap: $spacing-sm;\n        margin-top: $spacing-sm;\n\n        .current-color {\n            grid-row: 1 / span 3;\n            grid-column: 6 / span 4;\n            border-radius: $border-radius-md;\n            width: $color-width;\n            height: $color-width;\n        }\n\n        .slider-box {\n            // grid-row: 1 / span 3;\n            grid-column: 1 / span 5;\n        }\n    }\n\n    .color-value-content {\n        display: -ms-grid;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        grid-template-rows: repeat(1, 1fr);\n        grid-column-gap: $spacing-xl;\n        grid-row-gap: $spacing-sm;\n        margin-top: 1.5rem;\n\n        .color-value {\n            grid-row: 1 / span 1;\n            grid-column: 1 / span 9;\n\n            &.with-complient {\n                grid-column: 1 / span 5;\n            }\n        }\n\n        .color-complient-container {\n            grid-column: 6 / span 4;\n\n            .color-complient {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                border-radius: $border-radius-md;\n                height: var(--pep-form-field-height, 2.5rem);\n                width: $color-width;\n            }\n        }\n    }\n\n\n    ::ng-deep.mat-dialog-actions {\n        display: block;\n\n        .color-actions {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n    }\n}\n\n",
                    "styleUrl": "./color-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PepColorPickerComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IPepColorPickerDialogData"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PepColorPickerComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IPepColorPickerDialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pep-color-picker-container\">\n    <pep-dialog [title]=\"'COLOR.DIALOG_TITLE' | translate\">\n        <ng-container pep-dialog-content>\n            <div class=\"color-chooser-content\">\n                <div class=\"current-color\" [ngStyle]=\"{ 'background': data?.value ? data.value : 'transparent' }\"></div>\n\n                <div class=\"slider-box\">\n                    <mat-label class=\"body-xs \">{{ 'COLOR.CHANGE_HUE' | translate}}</mat-label>\n                    <div class=\"current-hue\" [class]=\"data?.type\">\n                        <mat-slider [min]=\"currentHueMin\" [max]=\"currentHueMax\" step=\"1\" [value]=\"currentHue\"\n                            (change)=\"onHueChange($event)\"></mat-slider>\n                    </div>\n                </div>\n                <div class=\"slider-box\">\n                    <mat-label class=\"body-xs \">{{ 'COLOR.CHANGE_SATURATION' | translate}}</mat-label>\n                    <div class=\"current-saturation\" [class]=\"data?.type\">\n                        <mat-slider [min]=\"currentSaturationMin\" [max]=\"currentSaturationMax\" step=\"1\"\n                            [value]=\"currentSaturation\" (change)=\"onSaturationChange($event)\"></mat-slider>\n                    </div>\n                </div>\n                <div class=\"slider-box\">\n                    <mat-label class=\"body-xs \">{{ 'COLOR.CHANGE_LIGHTNESS' | translate}}</mat-label>\n                    <div class=\"current-lightness\" [class]=\"data?.type\">\n                        <mat-slider [min]=\"currentLightnessMin\" [max]=\"currentLightnessMax\" step=\"1\"\n                            [value]=\"currentLightnessMax - currentLightness + currentLightnessMin\"\n                            (change)=\"onLightnessChange($event)\"></mat-slider>\n                    </div>\n                </div>\n            </div>\n            <div class=\"color-value-content\">\n                <div class=\"color-value\" [ngClass]=\"{ 'with-complient': checkAAComplient }\">\n                    <pep-textbox [key]=\"'colorValue'\" [label]=\"'COLOR.ADD_VALUE_HERE' | translate \"\n                        [formattedValue]=\"data?.value\" [value]=\"data?.value\" (valueChange)=\"onColorValueChange($event)\">\n                    </pep-textbox>\n                </div>\n                <div *ngIf=\"checkAAComplient\" class=\"color-complient-container\">\n                    <pep-field-title [label]=\"'COLOR.AA_COMPLIENT' | translate \">\n                    </pep-field-title>\n                    <div class=\"color-complient\" [ngStyle]=\"{ 'background': complientColor }\">\n                        <mat-icon *ngIf=\"isUserChooseAAComplientColor\">\n                            <pep-icon name=\"system_ok\">\n                            </pep-icon>\n                        </mat-icon>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-container pep-dialog-actions>\n            <div class=\"color-actions pep-spacing-element-negative\">\n                <mat-checkbox *ngIf=\"data.showAAComplient\" class=\"pep-spacing-element\" type=\"checkbox\"\n                    id=\"checkAAComplient\" (change)=\"checkAAComplient = !checkAAComplient\" [checked]=\"checkAAComplient\">\n                    <span class=\"body-xs ellipsis\">{{ 'COLOR.AA_COMPLIENT' | translate }}</span>\n                </mat-checkbox>\n                <div>\n                    <button mat-button [mat-dialog-close]=\"null\" class=\"pep-spacing-element pep-button md weak\">\n                        {{'ACTIONS.CANCEL' | translate}}\n                    </button>\n                    <button mat-button class=\"pep-spacing-element pep-button md strong\" (click)=\"onSave($event)\">\n                        {{'ACTIONS.OK' | translate}}\n                    </button>\n                </div>\n            </div>\n        </ng-container>\n    </pep-dialog>\n</div>"
        },
        {
            "name": "PepDateComponent",
            "id": "component-PepDateComponent-c9d522b1eb980064774b3c50bd8f59d5",
            "file": "projects/ngx-lib/date/date.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-date",
            "styleUrls": [
                "./date.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 69
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 105,
                    "type": "FormGroup"
                },
                {
                    "name": "formattedValue",
                    "defaultValue": "''",
                    "line": 56
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 106
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 44
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 57
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 111,
                    "type": "PepLayoutType"
                },
                {
                    "name": "maxDateValue",
                    "line": 99,
                    "type": "string"
                },
                {
                    "name": "maxValue",
                    "line": 85,
                    "type": "number"
                },
                {
                    "name": "minDateValue",
                    "line": 93,
                    "type": "string"
                },
                {
                    "name": "minValue",
                    "line": 77,
                    "type": "number"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 70
                },
                {
                    "name": "renderError",
                    "defaultValue": "true",
                    "line": 109
                },
                {
                    "name": "renderSymbol",
                    "defaultValue": "true",
                    "line": 110
                },
                {
                    "name": "renderTitle",
                    "defaultValue": "true",
                    "line": 108
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 68
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 73
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 107
                },
                {
                    "name": "textColor",
                    "defaultValue": "''",
                    "line": 71
                },
                {
                    "name": "type",
                    "line": 61,
                    "type": ""
                },
                {
                    "name": "value",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 72,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 114,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_type",
                    "defaultValue": "'date'",
                    "type": "PepDateFieldType",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "controlType",
                    "defaultValue": "'date'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "dateModel",
                    "type": "moment.Moment",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "datetimePicker",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'datetimePicker'"
                        }
                    ]
                },
                {
                    "name": "input",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "isInEditMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "maxDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "minDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "showDatepicker",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "showTime",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "methodsClass": [
                {
                    "name": "cardTemplateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatDatetimepickerInputEvent<moment.Moment>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatDatetimepickerInputEvent<moment.Moment>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDatetimePicker",
                    "args": [
                        {
                            "name": "datetimePicker",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "jsdoctags": [
                        {
                            "name": "datetimePicker",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDateModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setFormattedValueFromModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ElementRef,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Renderer2,\n    OnDestroy,\n    OnChanges,\n    Optional,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport {\n    DatetimeAdapter,\n    MatDatetimepickerInputEvent,\n    MAT_DATETIME_FORMATS,\n} from '@mat-datetimepicker/core';\n// import { MomentDateAdapter } from '@angular/material-moment-adapter';\n// import { MomentDatetimeAdapter } from '@mat-datetimepicker/moment';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepUtilitiesService,\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepDateFieldType,\n    PepDateField,\n} from '@pepperi-addons/ngx-lib';\nimport moment, { Moment } from 'moment';\n\n@Component({\n    selector: 'pep-date',\n    templateUrl: './date.component.html',\n    styleUrls: ['./date.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepDateComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() key = '';\n\n    private _value = '';\n    @Input()\n    set value(value: string) {\n        this._value = value;\n        this.setDateModel();\n    }\n    get value() {\n        return this._value;\n    }\n\n    @Input() formattedValue = '';\n    @Input() label = '';\n\n    private _type: PepDateFieldType = 'date';\n    @Input()\n    set type(type: PepDateFieldType) {\n        this._type = type;\n    }\n    get type(): PepDateFieldType {\n        return this._type;\n    }\n\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() textColor = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    // Minimum in thicks\n    @Input()\n    set minValue(value: number) {\n        if (value > 0) {\n            this.minDate = new Date(value * 1000 * 60 * 60 * 24);\n        }\n    }\n\n    // Maximum in thicks\n    @Input()\n    set maxValue(value: number) {\n        if (value > 0) {\n            this.maxDate = new Date(value * 1000 * 60 * 60 * 24);\n        }\n    }\n\n    // Minimum in date\n    @Input()\n    set minDateValue(date: string) {\n        this.minDate = date ? new Date(date) : null;\n    }\n\n    // Maximum in date\n    @Input()\n    set maxDateValue(date: string) {\n        this.maxDate = date ? new Date(date) : null;\n    }\n\n    controlType = 'date';\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() renderTitle = true;\n    @Input() renderError = true;\n    @Input() renderSymbol = true;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @ViewChild('datetimePicker') datetimePicker: any;\n\n    @ViewChild('input') input: ElementRef;\n\n    standAlone = false;\n    isInEditMode = false;\n    dateModel: moment.Moment;\n    minDate: Date;\n    maxDate: Date;\n    showDatepicker = false;\n    showTime = false;\n\n    constructor(\n        private element: ElementRef,\n        private utilitiesService: PepUtilitiesService,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled);\n            const pepField = new PepDateField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            // this.formattedValue = this.formattedValue || this.value;\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.showTime = this.type === 'datetime';\n\n        this.setDateModel();\n    }\n\n    ngOnChanges(changes: any): void {\n        // if (this.standAlone) {\n        //     this.formattedValue = this.formattedValue || this.value;\n        // }\n        // if (changes.value) {\n        //     this.setDateModel();\n        // }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    private setFormattedValueFromModel(): void {\n        if (this.dateModel === null) {\n            this.formattedValue = '';\n        } else {\n            this.formattedValue = this.showTime\n                ? this.dateModel.toDate().toLocaleString()\n                : this.dateModel.toDate().toLocaleDateString();\n        }\n    }\n\n    private setDateModel(): void {\n        if (\n            this.value === null ||\n            this.value === '' ||\n            this.value.indexOf('1900-1-1') >= 0 ||\n            this.value.indexOf('1900-01-01') >= 0 ||\n            this.value.indexOf('1970-1-1') >= 0 ||\n            this.value.indexOf('1970-01-01') >= 0\n        ) {\n            this._value = '';\n            this.dateModel = null;\n        } else {\n            this.dateModel = moment(\n                this.utilitiesService.parseDate(this.value, this.showTime)\n            );\n        }\n\n        this.setFormattedValueFromModel();\n    }\n\n    openDatetimePicker(datetimePicker): void {\n        datetimePicker.opened = false;\n        datetimePicker.open();\n    }\n\n    onBlur(event: any): void {\n        // Don't remove the timeout cause a bug DI-17819.\n        setTimeout(() => {\n            if (this.isInEditMode && !this.datetimePicker.opened) {\n                this.isInEditMode = false;\n            }\n        }, 0);\n    }\n\n    onDateChange(event: MatDatetimepickerInputEvent<moment.Moment>): void {\n        let value = '';\n        if (event.value != null) {\n            const date: Date = event.value.toDate();\n\n            value = this.utilitiesService.stringifyDate(date, this.showTime);\n\n            // Update the formatted value.\n            this.setFormattedValueFromModel();\n        }\n\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            value\n        );\n\n        this.valueChange.emit({ key: this.key, value });\n\n        setTimeout(() => {\n            if (this.isInEditMode) {\n                this.isInEditMode = false;\n            }\n        }, 0);\n    }\n\n    cardTemplateClicked(event): void {\n        this.isInEditMode = true;\n\n        setTimeout(() => {\n            this.input.nativeElement.focus();\n            this.openDatetimePicker(this.datetimePicker);\n        }, 0);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}",
                    "styleUrl": "./date.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 125,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "args": [
                            {
                                "name": "type",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "type",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "PepDateFieldType",
                        "line": 64
                    }
                },
                "minValue": {
                    "name": "minValue",
                    "setSignature": {
                        "name": "minValue",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "maxValue": {
                    "name": "maxValue",
                    "setSignature": {
                        "name": "maxValue",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "minDateValue": {
                    "name": "minDateValue",
                    "setSignature": {
                        "name": "minDateValue",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 93,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "maxDateValue": {
                    "name": "maxDateValue",
                    "setSignature": {
                        "name": "maxDateValue",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-showIcon=\"showIcon\">\n        <mat-form-field appearance=\"outline\">\n            <input #input [id]=\"key\" title=\"{{ formattedValue }}\" matInput class=\"body-sm\" autocomplete=\"false\"\n                [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'center' ? 'center' : xAlignment == 'right' ? 'right' : 'left'}\"\n                [(ngModel)]=\"dateModel\" [ngModelOptions]=\"{standalone: true}\" [matDatetimepicker]=\"datetimePicker\"\n                [min]=\"minDate\" [max]=\"maxDate\" [required]=\"required\" [disabled]=\"disabled\"\n                (dateChange)=\"onDateChange($event)\" (click)=\"openDatetimePicker(datetimePicker)\"\n                (blur)=\"onBlur($event)\" />\n            <mat-error *ngIf=\"renderError\"><span class=\"body-xs\"\n                    [title]=\"required && formattedValue.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: {field: label})\"\n                    [innerText]=\"required && formattedValue.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: {field: label})\"></span>\n            </mat-error>\n            <pep-textbox-icon *ngIf=\"renderSymbol && showIcon && xAlignment == 'right'\" matPrefix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\" (iconClick)=\"openDatetimePicker(datetimePicker)\">\n            </pep-textbox-icon>\n            <pep-textbox-icon *ngIf=\"renderSymbol && showIcon && xAlignment == 'left'\" matSuffix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\" (iconClick)=\"openDatetimePicker(datetimePicker)\">\n            </pep-textbox-icon>\n            <mat-datetimepicker #datetimePicker [type]=\"showTime ? 'datetime' : 'date'\" [openOnFocus]=\"false\"\n                [touchUi]=\"true\" [timeInterval]=\"1\"></mat-datetimepicker>\n        </mat-form-field>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"renderTitle\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: true}\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\n                <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: false}\"></ng-container>\n            </div>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-card-input card-flex-container\"\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled}\"\n                [ngStyle]=\"{ color: textColor }\" [class]=\"'text-align-' + xAlignment\"\n                (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm value\">{{ formattedValue }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: true}\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <ng-container [ngSwitch]=\"type\">\n                    <ng-container *ngSwitchDefault>\n                        <span [id]=\"key\" class=\"body-sm pep-report-input\" [ngStyle]=\"{ color: textColor }\"\n                            [ngClass]=\"{readonly: disabled}\" title=\"{{ formattedValue }}\">{{ formattedValue }}</span>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span [id]=\"key\">&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepDateFilterComponent",
            "id": "component-PepDateFilterComponent-7d8010377c0594427d2fe52da4fc4b0c",
            "file": "projects/ngx-lib/smart-filters/date-filter/date-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-date-filter",
            "styleUrls": [
                "./date-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chooseTimeOptions",
                    "defaultValue": "[]",
                    "type": "Array<IPepOption>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "chooseTimeUnitOptions",
                    "defaultValue": "[]",
                    "type": "Array<IPepOption>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "PepSmartFilterOperators",
                    "defaultValue": "PepSmartFilterOperators",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultOperator",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterOperator",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "getDefaultOperatorUnit",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterOperatorUnit",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "getFilterValue",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterDataValue",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "loadOperatorsOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onOperatorChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTimeUnitChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldsStateAndValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BaseFilterComponent } from '../common/model/base-filter-component';\nimport {\n    IPepSmartFilterOperator,\n    IPepSmartFilterOperatorUnit,\n    PepSmartFilterOperators,\n    PepSmartFilterOperatorUnits,\n} from '../common/model/operator';\nimport { IPepSmartFilterDataValue } from '../common/model/filter';\nimport { Validators } from '@angular/forms';\nimport { IPepFieldValueChangeEvent, IPepOption } from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-date-filter',\n    templateUrl: './date-filter.component.html',\n    styleUrls: ['./date-filter.component.scss'],\n})\nexport class PepDateFilterComponent extends BaseFilterComponent {\n    PepSmartFilterOperators = PepSmartFilterOperators;\n    chooseTimeOptions: Array<IPepOption> = [];\n    chooseTimeUnitOptions: Array<IPepOption> = [];\n\n    // Override\n    getDefaultOperator(): IPepSmartFilterOperator {\n        return PepSmartFilterOperators.InTheLast;\n    }\n\n    // Override\n    getDefaultOperatorUnit(): IPepSmartFilterOperatorUnit {\n        return PepSmartFilterOperatorUnits.Months;\n    }\n\n    // Override\n    getFilterValue(): IPepSmartFilterDataValue {\n        const filterValue = {\n            first: this.firstControl.value,\n        };\n\n        if (this.operator === PepSmartFilterOperators.DateRange) {\n            filterValue['second'] = this.secondControl.value;\n        }\n\n        return filterValue;\n    }\n\n    // Override\n    loadOperatorsOptions() {\n        this.chooseTimeOptions = this.operators.map((operator) => {\n            return {\n                key: operator.id,\n                value: this.translate.instant(\n                    `${this.OPERATORS_TRANSLATION_PREFIX}.${operator.name}`\n                ),\n            };\n        });\n\n        this.chooseTimeUnitOptions = this.operatorUnits.map((operatorUnit) => {\n            return {\n                key: operatorUnit.id,\n                value: this.translate.instant(\n                    `${this.OPERATOR_UNITS_TRANSLATION_PREFIX}.${operatorUnit.name}`\n                ),\n            };\n        });\n    }\n\n    // Override\n    setFieldsStateAndValidators(): void {\n        this.firstControl.enable();\n\n        if (this.operator === PepSmartFilterOperators.DateRange) {\n            this.firstControl.setValidators(Validators.required);\n            this.secondControl.enable();\n            this.secondControl.setValidators(Validators.required);\n        } else if (\n            this.operator === PepSmartFilterOperators.InTheLast ||\n            this.operator === PepSmartFilterOperators.NotInTheLast ||\n            this.operator === PepSmartFilterOperators.DueIn ||\n            this.operator === PepSmartFilterOperators.NotDueIn\n        ) {\n            this.firstControl.setValidators([\n                Validators.required,\n                this.validator.numberValidator(),\n            ]);\n            this.secondControl.disable();\n        } else {\n            // Disable 'first' field.\n            if (\n                this.operator === PepSmartFilterOperators.Today ||\n                this.operator === PepSmartFilterOperators.ThisWeek ||\n                this.operator === PepSmartFilterOperators.ThisMonth ||\n                this.operator === PepSmartFilterOperators.IsEmpty ||\n                this.operator === PepSmartFilterOperators.IsNotEmpty\n            ) {\n                this.firstControl.disable();\n            }\n\n            // Default disable 'second' field.\n            super.setFieldsStateAndValidators();\n        }\n    }\n\n    onOperatorChanged(event: IPepFieldValueChangeEvent) {\n        const operator = Object.values(PepSmartFilterOperators).find(\n            (operator) => operator.id === event.value\n        );\n        this.operator = operator;\n    }\n\n    onTimeUnitChanged(event: IPepFieldValueChangeEvent) {\n        const operatorUnit = Object.values(PepSmartFilterOperatorUnits).find(\n            (operatorUnit) => operatorUnit.id === event.value\n        );\n        this.operatorUnit = operatorUnit;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-filter.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFilterComponent",
            "templateData": "<div [formGroup]=\"form\">\n    <ng-container>\n        <pep-select [key]=\"'timeOperator'\" [value]=\"operator.id\" [label]=\"'SMART_FILTERS.CHOOSE_TIME' | translate\"\n            [emptyOption]=\"false\" [options]=\"chooseTimeOptions\" (valueChange)=\"onOperatorChanged($event)\">\n        </pep-select>\n    </ng-container>\n\n    <div *ngIf=\"operator === PepSmartFilterOperators.InTheLast ||\n                operator === PepSmartFilterOperators.NotInTheLast ||\n                operator === PepSmartFilterOperators.DueIn ||\n                operator === PepSmartFilterOperators.NotDueIn\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutGap=\"1rem\">\n        <!-- Amount -->\n        <pep-textbox [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.AMOUNT' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"'int'\" [formattedValue]=\"firstControl.value\"\n            [value]=\"firstControl.value\">\n        </pep-textbox>\n        <!-- Time unit -->\n        <pep-select [form]=\"form\" [key]=\"'timeUnit'\" [value]=\"operatorUnit.id\"\n            [label]=\"'SMART_FILTERS.TIME_UNIT' | translate\" fxFlex=\"50%\" [emptyOption]=\"false\"\n            [options]=\"chooseTimeUnitOptions\" (valueChange)=\"onTimeUnitChanged($event)\">\n        </pep-select>\n    </div>\n    <div *ngIf=\"operator === PepSmartFilterOperators.DateRange\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutGap=\"1rem\">\n        <!-- Start date -->\n        <pep-date [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.START_DATE' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\"\n            [value]=\"firstControl.value\" [maxDateValue]=\"secondControl.value\">\n        </pep-date>\n        <!-- End date -->\n        <pep-date [form]=\"form\" [key]=\"secondControlKey\" [label]=\"'SMART_FILTERS.END_DATE' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\"\n            [value]=\"secondControl.value\" [minDateValue]=\"firstControl.value\">\n        </pep-date>\n    </div>\n    <ng-container *ngIf=\"operator === PepSmartFilterOperators.On\">\n        <!-- Choose a date -->\n        <pep-date [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.CHOOSE_DATE' | translate\"\n            [renderError]=\"false\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\" [value]=\"firstControl.value\">\n        </pep-date>\n    </ng-container>\n</div>"
        },
        {
            "name": "PepDefaultDialogComponent",
            "id": "component-PepDefaultDialogComponent-907589671c85a19d812991d25b3702e4",
            "file": "projects/ngx-lib/dialog/default-dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./default-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "PepDialogData",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionButtonClicked",
                    "args": [
                        {
                            "name": "button",
                            "type": "PepDialogActionButton"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "PepDialogActionButton",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PepDialogData, PepDialogActionButton } from './dialog.model';\n\n@Component({\n    templateUrl: './default-dialog.component.html',\n    styleUrls: ['./default-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class PepDefaultDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public data: PepDialogData,\n        public dialogRef: MatDialogRef<any>\n    ) {}\n\n    onActionButtonClicked(button: PepDialogActionButton): void {\n        this.dialogRef.close(true);\n        this.dialogRef.afterClosed().subscribe((isActionButtonClicked) => {\n            if (isActionButtonClicked && button?.callback) {\n                button.callback();\n            }\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./default-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "PepDialogData"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "PepDialogData",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<pep-dialog [showClose]=\"data?.showClose\" [showHeader]=\"data?.showHeader\" [showFooter]=\"data?.showFooter\"\n    [title]=\"data?.title\">\n    <div pep-dialog-content [innerHtml]=\"data?.content | pepSafeHtml\"></div>\n    <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n        <ng-container [ngSwitch]=\"data?.type\">\n            <ng-container *ngSwitchCase=\"'close'\">\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CLOSE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-continue'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.CONTINUE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-ok'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.OK' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-delete'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong caution\">\n                    {{ 'ACTIONS.DELETE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'custom'\">\n                <ng-container *ngFor=\"let btn of data?.actionButtons\">\n                    <!-- [mat-dialog-close]=\"btn?.callback ? btn.callback : null\" -->\n                    <button mat-button (click)=\"onActionButtonClicked(btn)\" class=\"pep-spacing-element pep-button md\"\n                        [ngClass]=\"btn?.className != '' ? btn?.className : 'weak'\">\n                        {{ btn?.title }}\n                    </button>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</pep-dialog>"
        },
        {
            "name": "PepDialogComponent",
            "id": "component-PepDialogComponent-2ae35952a4c65929bab05827083034ce",
            "file": "projects/ngx-lib/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showClose",
                    "defaultValue": "true",
                    "line": 10
                },
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "line": 12
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "line": 11
                },
                {
                    "name": "title",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'pep-dialog',\n    styleUrls: ['./dialog.component.scss'],\n    templateUrl: './dialog.component.html',\n})\nexport class PepDialogComponent {\n    @Input() title: string;\n    @Input() showClose = true;\n    @Input() showHeader = true;\n    @Input() showFooter = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div mat-dialog-title *ngIf=\"showHeader\" class=\"dialog-header-container\">\n    <span class=\"dialog-title\" *ngIf=\"title?.length\">\n        {{ title }}\n    </span>\n    <button mat-button *ngIf=\"showClose\" [mat-dialog-close]=\"null\" class=\"pep-button icon-button md weak dialog-close\">\n        <mat-icon>\n            <pep-icon name=\"system_close\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n</div>\n<div mat-dialog-content>\n    <ng-content select=\"[pep-dialog-content]\"></ng-content>\n</div>\n<div mat-dialog-actions *ngIf=\"showFooter\" class=\"pep-border-top\">\n    <ng-content select=\"[pep-dialog-actions]\"></ng-content>\n</div>"
        },
        {
            "name": "PepFieldGeneratorComponent",
            "id": "component-PepFieldGeneratorComponent-ae8aa77630c5aece60dbd12e3c39bfaf",
            "file": "projects/ngx-lib/form/field-generator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-field-generator",
            "styleUrls": [
                "./field-generator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field-generator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkForChanges",
                    "defaultValue": "null",
                    "line": 33,
                    "type": "any"
                },
                {
                    "name": "field",
                    "line": 26,
                    "type": "any"
                },
                {
                    "name": "form",
                    "line": 29,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 30,
                    "type": "PepLayoutType"
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 31
                },
                {
                    "name": "uid",
                    "defaultValue": "null",
                    "line": 28,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "childChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 36,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "childClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 41,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 40,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 38,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 35,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "onChildChanged",
                    "args": [
                        {
                            "name": "childChange",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "childChange",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChildClick",
                    "args": [
                        {
                            "name": "childClick",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "childClick",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "fieldClicked",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "fieldClicked",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormValidationChanged",
                    "args": [
                        {
                            "name": "formValidationChange",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "formValidationChange",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "valueChange",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "valueChange",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    OnDestroy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-field-generator',\n    templateUrl: './field-generator.component.html',\n    styleUrls: ['./field-generator.component.scss'],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepFieldGeneratorComponent implements OnChanges, OnDestroy {\n    @Input() field: any;\n    @Input() isActive = false;\n    @Input() uid: any = null;\n    @Input() form: FormGroup;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() showTitle = true;\n\n    @Input() checkForChanges: any = null;\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output() childChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n    @Output() childClick: EventEmitter<any> = new EventEmitter<any>();\n\n    get isValid(): boolean {\n        if (this.field.readonly || this.field.disabled) {\n            return true;\n        } else {\n            const formControl = this.form && this.form.get(this.field.key);\n\n            if (formControl) {\n                return formControl.valid;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    get isTouched(): boolean {\n        const formControl = this.form && this.form.get(this.field.key);\n        return formControl ? formControl.touched : false;\n    }\n\n    get isDirty(): boolean {\n        const formControl = this.form && this.form.get(this.field.key);\n        return formControl ? formControl.dirty : false;\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n        // if (this.childChange) {\n        //     this.childChange.unsubscribe();\n        // }\n        // if (this.elementClick) {\n        //     this.elementClick.unsubscribe();\n        // }\n        // if (this.childClick) {\n        //     this.childClick.unsubscribe();\n        // }\n    }\n\n    onValueChanged(valueChange: IPepFieldValueChangeEvent): void {\n        this.valueChange.emit(valueChange);\n    }\n\n    onChildChanged(childChange: any): void {\n        this.childChange.emit(childChange);\n    }\n\n    onFormValidationChanged(formValidationChange: any): void {\n        this.formValidationChange.emit(formValidationChange);\n    }\n\n    onClick(fieldClicked: any): void {\n        this.elementClick.emit(fieldClicked);\n    }\n\n    onChildClick(childClick: any): void {\n        this.childClick.emit(childClick);\n    }\n\n    ngOnChanges(changes: any): void {\n        // debugger;\n        // For testing.\n        // this.field.disabled = this.field.readonly = false;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    width: 100%;\n    height: 100%;\n}\n",
                    "styleUrl": "./field-generator.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 43
                    }
                },
                "isTouched": {
                    "name": "isTouched",
                    "getSignature": {
                        "name": "isTouched",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 62
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"field.controlType\" [formGroup]=\"form\">\n\n    <pep-address *ngSwitchCase=\"'address'\" [form]=\"form\" [key]=\"field.key\" [formattedValue]=\"field.formattedValue\"\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [groupFields]=\"field.groupFields\"\n        [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\">\n    </pep-address>\n\n    <pep-attachment *ngSwitchCase=\"'attachment'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [showTitle]=\"showTitle\"\n        [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\" (valueChange)=\"onValueChanged($event)\">\n    </pep-attachment>\n\n    <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [additionalValue]=\"field.additionalValue\"\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\" [isActive]=\"isActive\">\n    </pep-checkbox>\n\n    <pep-date *ngSwitchCase=\"'date'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [minValue]=\"field.minValue\"\n        [maxValue]=\"field.maxValue\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\n        (valueChange)=\"onValueChanged($event)\" [isActive]=\"isActive\">\n    </pep-date>\n\n    <pep-images-filmstrip *ngSwitchCase=\"'images'\" [uid]=\"uid\" [form]=\"form\" [key]=\"field.key\" [label]=\"field.label\"\n        [showTitle]=\"showTitle\" [rowSpan]=\"field.rowSpan\" [value]=\"field.value\" [layoutType]=\"layoutType\">\n    </pep-images-filmstrip>\n\n    <pep-image *ngSwitchCase=\"'image'\" [uid]=\"uid\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.formattedValue\"\n        [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\" [required]=\"field.required\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [indicatorsField]=\"field.indicatorsField\" [menuField]=\"field.menuField\"\n        [hasCampaignField]=\"field.hasCampaignField\" [sizeLimitMB]=\"field.sizeLimitMB\" [isActive]=\"isActive\"\n        [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\" (valueChange)=\"onValueChanged($event)\">\n    </pep-image>\n\n    <pep-quantity-selector *ngSwitchCase=\"'qs'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [alowDecimal]=\"field.alowDecimal\"\n        [additionalValue]=\"field.additionalValue\" [notificationInfo]=\"field.notificationInfo\" [isActive]=\"isActive\"\n        [layoutType]=\"layoutType\" [showTitle]=\"showTitle\" (valueChange)=\"onValueChanged($event)\"\n        (formValidationChange)=\"onFormValidationChanged($event)\" (elementClick)=\"onClick($event)\">\n    </pep-quantity-selector>\n\n    <pep-rich-html-textarea *ngSwitchCase=\"'richhtmltextarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\" [isActive]=\"isActive\">\n    </pep-rich-html-textarea>\n\n    <pep-select *ngSwitchCase=\"'select'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [options]=\"field.options\" [showTitle]=\"showTitle\"\n        [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\"\n        (formValidationChange)=\"onFormValidationChanged($event)\" [isActive]=\"isActive\">\n    </pep-select>\n\n    <pep-separator *ngSwitchCase=\"'separator'\" [form]=\"form\" [key]=\"field.key\" [label]=\"field.label\"\n        [xAlignment]=\"field.xAlignment\" [layoutType]=\"layoutType\">\n    </pep-separator>\n\n    <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\" [label]=\"field.label\"\n        [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [layoutType]=\"layoutType\"\n        (valueChange)=\"onValueChanged($event)\">\n    </pep-signature>\n\n    <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\n        [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\n        (valueChange)=\"onValueChanged($event)\" [isActive]=\"isActive\">\n    </pep-textarea>\n\n    <pep-textbox *ngSwitchCase=\"'textbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [placeholder]=\"field.placeholder\"\n        [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\n        (valueChange)=\"onValueChanged($event)\" (formValidationChange)=\"onFormValidationChanged($event)\"\n        [isActive]=\"isActive\">\n    </pep-textbox>\n\n    <pep-indicators *ngSwitchCase=\"'indicators'\" [key]=\"field.key\" [value]=\"field.value\" [layoutType]=\"layoutType\">\n    </pep-indicators>\n    <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\"\n        [referenceObjectInternalType]=\"field.referenceObjectInternalType\" [type]=\"field.type\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n        [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\" (valueChange)=\"onValueChanged($event)\">\n    </pep-internal-button>\n    <pep-internal-menu *ngSwitchCase=\"'menu'\" [key]=\"field.key\" [label]=\"field.label\" [disabled]=\"field.disabled\"\n        [xAlignment]=\"field.xAlignment\" [options]=\"field.options\" [layoutType]=\"layoutType\"\n        (elementClick)=\"onClick($event)\">\n    </pep-internal-menu>\n    <pep-internal-page *ngSwitchCase=\"'internalPage'\" [field]=\"field\" [layoutType]=\"layoutType\"\n        (childClick)=\"onChildClick($event)\" (childChange)=\"onChildChanged($event)\">\n    </pep-internal-page>\n\n    <ng-container *ngSwitchCase=\"'placeholder'\">\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepFieldTitleComponent",
            "id": "component-PepFieldTitleComponent-899bba7fb5c5895cab715111e16d26c6",
            "file": "projects/ngx-lib/field-title/field-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-field-title",
            "styleUrls": [
                "./field-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 15
                },
                {
                    "name": "inputLength",
                    "defaultValue": "0",
                    "line": 20
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 13
                },
                {
                    "name": "maxFieldCharacters",
                    "defaultValue": "0",
                    "line": 16
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 14
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 19
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 17,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport {\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-field-title',\n    templateUrl: './field-title.component.html',\n    styleUrls: ['./field-title.component.scss'],\n})\nexport class PepFieldTitleComponent {\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() maxFieldCharacters = 0;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n\n    @Input() showTitle = true;\n    @Input() inputLength = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: grid;\n    width: inherit;\n}\n",
                    "styleUrl": "./field-title.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"mat-form-title\" [ngClass]=\"{disable: disabled}\" [ngStyle]=\"{'text-align': xAlignment }\">\n    <ng-container *ngIf=\"xAlignment == 'right' then rightTemplate else leftTemplate\">\n    </ng-container>\n    <ng-template #rightTemplate>\n        <ng-container *ngTemplateOutlet=\"maxFieldCharactersTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"titleTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"requiredTemplate\"></ng-container>\n    </ng-template>\n    <ng-template #leftTemplate>\n        <ng-container *ngTemplateOutlet=\"requiredTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"titleTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"maxFieldCharactersTemplate\"></ng-container>\n    </ng-template>\n\n    <ng-template #requiredTemplate>\n        <mat-icon *ngIf=\"required\" class=\"pep-spacing-element\">\n            <pep-icon name=\"system_must\"></pep-icon>\n        </mat-icon>\n        <!-- For the grid template () -->\n        <span *ngIf=\"!required\"></span>\n    </ng-template>\n    <ng-template #titleTemplate>\n        <mat-label *ngIf=\"showTitle\" [title]=\"label\" class=\"body-xs\">\n            {{ label }}\n        </mat-label>\n        <!-- For the grid template () -->\n        <span *ngIf=\"!showTitle\"></span>\n    </ng-template>\n    <ng-template #maxFieldCharactersTemplate>\n        <span *ngIf=\"maxFieldCharacters > 0\" class=\"body-xs\">\n            &nbsp;{{ inputLength || 0 }}/{{ maxFieldCharacters }}\n        </span>\n        <!-- For the grid template () -->\n        <span *ngIf=\"maxFieldCharacters === 0\"></span>\n    </ng-template>\n</div>"
        },
        {
            "name": "PepFilesUploaderComponent",
            "id": "component-PepFilesUploaderComponent-7c4a1a430cfeadd6f119708ee23155c8",
            "file": "projects/ngx-lib/files-uploader/files-uploader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-files-uploader",
            "styleUrls": [
                "./files-uploader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./files-uploader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acceptedExtensions",
                    "defaultValue": "'bmp,jpg,jpeg,png,gif,ico,svg,html,css'",
                    "line": 51
                },
                {
                    "name": "controlType",
                    "defaultValue": "''",
                    "line": 46
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 43
                },
                {
                    "name": "form",
                    "line": 49,
                    "type": "FormGroup"
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 39
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 41
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 52,
                    "type": "PepLayoutType"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 42
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 45
                },
                {
                    "name": "sizeLimitMB",
                    "defaultValue": "5",
                    "line": 47
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "line": 40
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "line": 50
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 44,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 56,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "fileChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 54,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "fileInput",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ]
                },
                {
                    "name": "imagePreview",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imagePreview'"
                        }
                    ]
                },
                {
                    "name": "intervalID",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "uploader",
                    "type": "FileUploader",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBase64FileSize",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidFile",
                    "args": [
                        {
                            "name": "fileStr",
                            "type": ""
                        },
                        {
                            "name": "fileExtension",
                            "type": ""
                        },
                        {
                            "name": "acceptedExtensions",
                            "type": ""
                        },
                        {
                            "name": "sizeLimitMB",
                            "type": "number",
                            "defaultValue": "5"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "fileStr",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileExtension",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "acceptedExtensions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sizeLimitMB",
                            "type": "number",
                            "defaultValue": "5",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "onClick_ChooseFile",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onElementClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyPress_ChooseFile",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIntervalX",
                    "args": [
                        {
                            "name": "delay",
                            "type": ""
                        },
                        {
                            "name": "repetitions",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repetitions",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProgress",
                    "args": [
                        {
                            "name": "progress",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "progress",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\nimport {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Optional,\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepFileService,\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldClickEvent,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-files-uploader',\n    templateUrl: './files-uploader.component.html',\n    styleUrls: ['./files-uploader.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\n@Injectable()\nexport class PepFilesUploaderComponent implements OnInit {\n    @Input() key = '';\n    @Input() src = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() controlType = '';\n    @Input() sizeLimitMB = 5;\n\n    @Input() form: FormGroup;\n    @Input() standAlone = false;\n    @Input() acceptedExtensions = 'bmp,jpg,jpeg,png,gif,ico,svg,html,css';\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output() fileChange: EventEmitter<string> = new EventEmitter<string>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    @ViewChild('fileInput') fileInput: any;\n    @ViewChild('imagePreview') imagePreview: any;\n\n    fieldHeight = '';\n\n    // multiple = false;\n    uploader: FileUploader;\n    progress = 0;\n    // response: string;\n    intervalID: any = null;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fileService: PepFileService,\n        private translate: TranslateService\n    ) {\n        this.uploader = new FileUploader({ removeAfterUpload: true });\n\n        this.uploader.onAfterAddingFile = (item) => {\n            if (this.fileInput?.nativeElement) {\n                this.fileInput.nativeElement.value = '';\n            }\n            const reader = new FileReader();\n\n            reader.onload = (event: any) => {\n                const fileExt = item._file.name.split('.').pop();\n                const target = event.target || event.srcElement;\n                const fileStr = target.result;\n                const errorMsg = this.isValidFile(\n                    fileStr,\n                    fileExt,\n                    this.acceptedExtensions,\n                    this.sizeLimitMB\n                );\n                if (errorMsg === '') {\n                    this.src = fileStr;\n                    this.setIntervalX(25, 75);\n                    this.setProgress(5);\n                    this.fileChange.emit(\n                        JSON.stringify({\n                            acceptedExtensions: this.acceptedExtensions,\n                            fileStr,\n                            fileExt,\n                        })\n                    );\n                } else {\n                    const title = this.translate.instant(\n                        'MESSAGES.TITLE_NOTICE'\n                    );\n                    const data = new PepDialogData({\n                        title,\n                        content: errorMsg,\n                    });\n                    this.dialogService.openDefaultDialog(data);\n                }\n            };\n            reader.readAsDataURL(item._file);\n        };\n    }\n\n    ngOnInit(): void {\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n\n        /*this.uploader.onCompleteAll = () => {\n            this.fileInput.nativeElement.value = '';\n        }*/\n    }\n\n    isValidFile(\n        fileStr,\n        fileExtension,\n        acceptedExtensions,\n        sizeLimitMB = 5\n    ): string {\n        const file: any = fileStr;\n        let fileSize = 0;\n        let content = '';\n        // check if got file as Base64\n        if (typeof fileStr === 'string' && fileStr.indexOf('data:') > -1) {\n            fileSize = this.getBase64FileSize(fileStr);\n        } else {\n            fileSize = file.size;\n        }\n        // check the size and the extension\n        const sizeOK: boolean =\n            fileSize !== -1 && file != null && fileSize < sizeLimitMB * 1048576;\n        const extensionOK =\n            acceptedExtensions === '' ||\n            acceptedExtensions.indexOf(fileExtension.toLowerCase()) !== -1;\n        if (!extensionOK) {\n            content = this.translate.instant(\n                'MESSAGES.ERROR_FAILD_TO_LOAD_EXTENSION',\n                {\n                    fileExtension:\n                        \"<label class='uppercase bold'>\" +\n                        fileExtension +\n                        '</label>',\n                }\n            );\n        } else if (!sizeOK) {\n            content = this.translate.instant(\n                'MESSAGES.ERROR_FAILD_TO_LOAD_SIZE',\n                {\n                    fileSize:\n                        \"<label class='uppercase bold'>\" +\n                        sizeLimitMB.toString() +\n                        '</label>',\n                }\n            );\n        }\n        return content;\n    }\n\n    getBase64FileSize(base64String: string): number {\n        let fileSize: number;\n\n        try {\n            base64String = base64String.substr(base64String.indexOf(',') + 1);\n            fileSize = atob(base64String).length;\n        } catch (e) {\n            fileSize = -1;\n        }\n\n        return fileSize; // return size in bytes;\n    }\n\n    setIntervalX(delay, repetitions): void {\n        let x = 0;\n        this.intervalID = window.setInterval(() => {\n            // this.setProgress(this.progress + 5);\n            if (++x === repetitions || this.uploader.progress >= 100) {\n                window.clearInterval(this.intervalID);\n            }\n        }, delay);\n    }\n\n    errorHandler(event): void {\n        event.target.src = this.fileService.getSvgAsImageSrc(\n            pepIconNoImage2.data\n        );\n        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');\n    }\n\n    private setProgress(progress): void {\n        this.progress = progress;\n        this.uploader.progress = progress;\n    }\n\n    deleteFile(): void {\n        this.uploader.clearQueue();\n        window.clearInterval(this.intervalID);\n        this.setProgress(0);\n\n        const value = '';\n        this.src = value;\n        this.fileChange.emit(value);\n    }\n\n    onElementClicked(event): void {\n        this.elementClick.emit({\n            key: this.key,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n    }\n\n    onClick_ChooseFile(event): void {\n        if (this.fileInput?.nativeElement) {\n            this.fileInput.nativeElement.click();\n        }\n    }\n\n    onKeyPress_ChooseFile(event): void {\n        const e = event as KeyboardEvent;\n\n        if ([13, 32].indexOf(e.which) !== -1) {\n            if (this.fileInput?.nativeElement) {\n                this.fileInput.nativeElement.click();\n            }\n        }\n        e.preventDefault();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '../src/core/style/abstracts/mixins';\n\n:host {\n    display: grid;\n    height: inherit; \n}",
                    "styleUrl": "./files-uploader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "﻿<ng-template #pepTemplate>\n    <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n        <div class=\"pep-file-wrapper\">\n            <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{\n                    'one-row': rowSpan == 1,\n                    disable: disabled\n                }\">\n                <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                <ng-template #withImg>\n                    <button *ngIf=\"!disabled\" mat-button (click)=\"deleteFile()\"\n                        class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                        [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                        <mat-icon>\n                            <pep-icon name=\"system_bin\"></pep-icon>\n                        </mat-icon>\n                    </button>\n                    <div class=\"pep-file-preview\" (click)=\"onElementClicked($event)\">\n                        <img *ngIf=\"controlType === 'image'\" #imagePreview [src]=\"src\" class=\"pep-file-preview-img\"\n                            [style.max-height]=\"fieldHeight\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                            [ngClass]=\"['text-align-' + xAlignment]\" />\n                        <div *ngIf=\"controlType === 'attachment'\" class=\"ellipsis pep-file-message\">\n                            <a *ngIf=\"src != ''\" href=\"javascript:void(0)\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_attach\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">{{ 'FILE.SEE_ORIGINAL' | translate }}</span>\n                            </a>\n                        </div>\n                    </div>\n                </ng-template>\n                <ng-template #noImg>\n                    <div class=\"ellipsis pep-file-message\">\n                        <mat-icon *ngIf=\"controlType === 'attachment'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_attach\"></pep-icon>\n                        </mat-icon>\n                        <mat-icon *ngIf=\"controlType === 'image'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_file_upload_cloud\"></pep-icon>\n                        </mat-icon>\n                        <span class=\"body-sm ellipsis\" *ngIf=\"progress == 0\">\n                            {{ (disabled ? (controlType === 'image' ? 'MESSAGES.INFO_MISSING_IMAGE' :\n                            'MESSAGES.INFO_MISSING_FILE') : 'FILE.HINT') | translate }}\n                        </span>\n                        <!-- <p *ngIf=\"progress != 0\" class=\"pull-left flip\"\n                            [ngClass]=\"{ 'pull-left flip': rowSpan == 1, image: controlType == 'image', attachment: controlType == 'attachment' }\">\n                            {{ 'FILE.UPLOADING_FILE' | translate }}\n                        </p> -->\n                    </div>\n                    <ng-container *ngIf=\"!disabled\">\n                        <input #fileInput id=\"pep-file-{{ key }}\" tabindex=\"-1\" type=\"file\" accept=\"acceptedExtensions\"\n                            ng2FileSelect [uploader]=\"uploader\" autocomplete=\"off\" />\n                        <button *ngIf=\"progress != 0\" mat-button class=\"pep-button icon-button weak md delete\"\n                            [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                            <mat-icon>\n                                <pep-icon name=\"system_processing\" [spin]=\"true\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                    </ng-container>\n                </ng-template>\n            </div>\n            <input [id]=\"key\" matInput [name]=\"key\" [formControlName]=\"key\" class=\"hidden-input\" type=\"text\"\n                [value]=\"src\" (click)=\"onClick_ChooseFile($event)\" (keypress)=\"onKeyPress_ChooseFile($event)\"\n                autocomplete=\"off\" />\n        </div>\n\n        <mat-error><span class=\"body-xs\"\n                [title]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                [innerText]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n        </mat-error>\n    </mat-form-field>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>"
        },
        {
            "name": "PepFilterActionsComponent",
            "id": "component-PepFilterActionsComponent-1873db86c164f42ce9c85714a542279e",
            "file": "projects/ngx-lib/smart-filters/common/filter-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-filter-actions",
            "styleUrls": [
                "./filter-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "line": 10,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "applyClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 13,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "clearClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 12,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'pep-filter-actions',\n    templateUrl: './filter-actions.component.html',\n    styleUrls: ['./filter-actions.component.scss'],\n})\nexport class PepFilterActionsComponent {\n    @Input() form: FormGroup;\n\n    @Output() clearClick: EventEmitter<void> = new EventEmitter<void>();\n    @Output() applyClick: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    clear() {\n        this.clearClick.emit();\n    }\n\n    apply() {\n        this.applyClick.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../src/core/style/abstracts/variables';\r\n@import '../../src/core/style/abstracts/mixins';\r\n\r\n.filter-actions {\r\n    margin: $content-margin 0 calc(#{$content-margin} / 2);\r\n    display: flex;\r\n    justify-content: flex-end;\r\n}",
                    "styleUrl": "./filter-actions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [formGroup]=\"form\" class=\"filter-actions pep-spacing-element-negative\">\n    <button mat-button class=\"pep-spacing-element pep-button sm weak\" (click)=\"clear()\">\n        {{ 'ACTIONS.CLEAR' | translate }}\n    </button>\n    <button mat-button class=\"pep-spacing-element pep-button sm strong\" (click)=\"apply()\" [disabled]=\"form.invalid\">\n        {{ 'ACTIONS.APPLY' | translate }}\n    </button>\n</div>"
        },
        {
            "name": "PepFormComponent",
            "id": "component-PepFormComponent-6422191efd62d3a6e27dee104ecfe385",
            "file": "projects/ngx-lib/form/form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canEditObject",
                    "defaultValue": "true",
                    "line": 94
                },
                {
                    "name": "checkForChanges",
                    "defaultValue": "null",
                    "line": 122,
                    "type": "any"
                },
                {
                    "name": "data",
                    "line": 98,
                    "type": ""
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "line": 121
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 114
                },
                {
                    "name": "isReport",
                    "defaultValue": "false",
                    "line": 91
                },
                {
                    "name": "layout",
                    "line": 92,
                    "type": "UIControl"
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'card'",
                    "line": 115,
                    "type": "PepLayoutType"
                },
                {
                    "name": "listType",
                    "defaultValue": "''",
                    "line": 116
                },
                {
                    "name": "lockEvents",
                    "defaultValue": "false",
                    "line": 93
                },
                {
                    "name": "objectId",
                    "defaultValue": "'0'",
                    "line": 117
                },
                {
                    "name": "pageType",
                    "defaultValue": "''",
                    "line": 123
                },
                {
                    "name": "parentId",
                    "defaultValue": "'0'",
                    "line": 118
                },
                {
                    "name": "searchCode",
                    "defaultValue": "'0'",
                    "line": 119
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 120
                }
            ],
            "outputsClass": [
                {
                    "name": "childChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 130,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "childClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 129,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "line": 132,
                    "type": "EventEmitter<IPepFormFieldClickEvent>"
                },
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 128,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "line": 126,
                    "type": "EventEmitter<IPepFormFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_data",
                    "defaultValue": "null",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_shouldReloadForm",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cardGutterSize",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "columns",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "differ",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "type": "PepFieldBase[]",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "formGutterSize",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "hasCampaignDataField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hasCampaignField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hasMenuFloatingOnOtherField",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "indicatorsDataField",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "indicatorsField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isLocked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "menuDataField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "menuField",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rowHeight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "type": "Array<PepFieldBase[]>",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "convertAddressFields",
                    "args": [
                        {
                            "name": "controlField",
                            "type": "UIControlField"
                        },
                        {
                            "name": "addressFields",
                            "type": "Array<ObjectsDataRowCell>"
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepFieldBase[]",
                    "typeParameters": [],
                    "line": 226,
                    "jsdoctags": [
                        {
                            "name": "controlField",
                            "type": "UIControlField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addressFields",
                            "type": "Array<ObjectsDataRowCell>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertCustomFields",
                    "args": [
                        {
                            "name": "controlFields",
                            "type": "Array<any>"
                        },
                        {
                            "name": "dataFields",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepFieldBase[]",
                    "typeParameters": [],
                    "line": 1350,
                    "jsdoctags": [
                        {
                            "name": "controlFields",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataFields",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertOptionalValues",
                    "args": [
                        {
                            "name": "optionalValues",
                            "type": "Array<KeyValuePair<string>>"
                        }
                    ],
                    "optional": false,
                    "returnType": "IPepOption[]",
                    "typeParameters": [],
                    "line": 214,
                    "jsdoctags": [
                        {
                            "name": "optionalValues",
                            "type": "Array<KeyValuePair<string>>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToCustomField",
                    "args": [
                        {
                            "name": "controlField",
                            "type": "UIControlField"
                        },
                        {
                            "name": "dataField",
                            "type": "any"
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean"
                        },
                        {
                            "name": "menuField",
                            "type": "any"
                        },
                        {
                            "name": "hasCampaignField",
                            "type": "any"
                        },
                        {
                            "name": "indicatorsField",
                            "type": "any"
                        },
                        {
                            "name": "objectId",
                            "type": "any"
                        },
                        {
                            "name": "parentId",
                            "type": "any"
                        },
                        {
                            "name": "searchCode",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepFieldBase",
                    "typeParameters": [],
                    "line": 436,
                    "jsdoctags": [
                        {
                            "name": "controlField",
                            "type": "UIControlField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasCampaignField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indicatorsField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "objectId",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchCode",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertXAlignToHorizontalAlign",
                    "args": [
                        {
                            "name": "xAlign",
                            "type": "X_ALIGNMENT_TYPE"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepHorizontalAlignment",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "xAlign",
                            "type": "X_ALIGNMENT_TYPE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertYAlignToVerticalAlign",
                    "args": [
                        {
                            "name": "yAlign",
                            "type": "Y_ALIGNMENT_TYPE"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepVerticalAlignment",
                    "typeParameters": [],
                    "line": 195,
                    "jsdoctags": [
                        {
                            "name": "yAlign",
                            "type": "Y_ALIGNMENT_TYPE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doesFieldHavaFloatingField",
                    "args": [
                        {
                            "name": "controlField",
                            "type": "UIControlField"
                        },
                        {
                            "name": "floatingField",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 371,
                    "jsdoctags": [
                        {
                            "name": "controlField",
                            "type": "UIControlField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "floatingField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldFormattedValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "PepFieldBase"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 730,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "PepFieldBase",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControlById",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 1269,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInternalLinkHref",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 1585
                },
                {
                    "name": "getOptionsForCustomField",
                    "args": [
                        {
                            "name": "controlField",
                            "type": "UIControlField"
                        },
                        {
                            "name": "dataField",
                            "type": "any"
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 390,
                    "jsdoctags": [
                        {
                            "name": "controlField",
                            "type": "UIControlField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataField",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canEditObject",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUiControlFields",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<UIControlField>",
                    "typeParameters": [],
                    "line": 918
                },
                {
                    "name": "initFieldsStructure",
                    "args": [
                        {
                            "name": "fields",
                            "type": "PepFieldBase[]"
                        },
                        {
                            "name": "maxRow",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 922,
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "PepFieldBase[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxRow",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1148
                },
                {
                    "name": "isMatrixField",
                    "args": [
                        {
                            "name": "apiNameToCheck",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 367,
                    "jsdoctags": [
                        {
                            "name": "apiNameToCheck",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 874
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 882,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 900
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 858
                },
                {
                    "name": "onChildChanged",
                    "args": [
                        {
                            "name": "childChange",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1516,
                    "jsdoctags": [
                        {
                            "name": "childChange",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChildClicked",
                    "args": [
                        {
                            "name": "childClick",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1512,
                    "jsdoctags": [
                        {
                            "name": "childClick",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1526,
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormValidationChanged",
                    "args": [
                        {
                            "name": "formValidationChange",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1520,
                    "jsdoctags": [
                        {
                            "name": "formValidationChange",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1481,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ReloadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1258,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setForm",
                    "args": [
                        {
                            "name": "isForUpdate",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1078,
                    "jsdoctags": [
                        {
                            "name": "isForUpdate",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSpecialFields",
                    "args": [
                        {
                            "name": "controlFields",
                            "type": "Array<any>"
                        },
                        {
                            "name": "dataFields",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1291,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlFields",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataFields",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showFormValidationMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 805,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toControlGroup",
                    "args": [
                        {
                            "name": "fields",
                            "type": "PepFieldBase[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 747,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "PepFieldBase[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "customField",
                            "type": "PepFieldBase"
                        },
                        {
                            "name": "updatedField",
                            "type": "ObjectsDataRowCell"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1171,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "customField",
                            "type": "PepFieldBase",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updatedField",
                            "type": "ObjectsDataRowCell",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateForm",
                    "args": [
                        {
                            "name": "cleanLastFocusedField",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1210,
                    "jsdoctags": [
                        {
                            "name": "cleanLastFocusedField",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ChangeDetectionStrategy,\n    OnInit,\n    OnDestroy,\n    Input,\n    KeyValueDiffers,\n    Output,\n    EventEmitter,\n    OnChanges,\n    DoCheck,\n    Optional,\n} from '@angular/core';\nimport {\n    FormGroup,\n    FormBuilder,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { Subscription } from 'rxjs';\nimport {\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepLayoutType,\n    FIELD_TYPE,\n    PepCustomizationService,\n    UIControl,\n    UIControlField,\n    ObjectsDataRow,\n    ObjectsDataRowCell,\n    PepFieldBase,\n    PepTextboxField,\n    PepSelectField,\n    PepInternalMenuField,\n    PepQuantitySelectorField,\n    PepAddressField,\n    PepIndicatorsField,\n    PepInternalPageField,\n    PepInternalButtonField,\n    PepAttachmentField,\n    PepSignatureField,\n    PepImageField,\n    PepImagesField,\n    PepTextareaField,\n    PepRichHtmlTextareaField,\n    PepDateField,\n    PepCheckboxField,\n    PepSeparatorField,\n    PepPlaceholderField,\n    PepHorizontalAlignment,\n    PepVerticalAlignment,\n    X_ALIGNMENT_TYPE,\n    Y_ALIGNMENT_TYPE,\n    DEFAULT_VERTICAL_ALIGNMENT,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    KeyValuePair,\n    IPepOption,\n} from '@pepperi-addons/ngx-lib';\n\nexport interface IPepFormFieldValueChangeEvent {\n    id: string;\n    key: string;\n    value: string;\n    controlType?: string;\n}\nexport interface IPepFormFieldClickEvent {\n    id: string;\n    key: string;\n    value: any;\n    controlType: string;\n    fieldType?: FIELD_TYPE;\n    idType?: string;\n    which?: any;\n    editable?: boolean;\n    otherData?: any;\n}\n\n// tslint:disable-next-line: no-conflicting-lifecycle\n@Component({\n    selector: 'pep-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepFormComponent implements OnInit, DoCheck, OnChanges, OnDestroy {\n    @Input() isReport = false;\n    @Input() layout: UIControl;\n    @Input() lockEvents = false;\n    @Input() canEditObject = true;\n\n    private _data: ObjectsDataRow = null;\n    @Input()\n    set data(value: ObjectsDataRow) {\n        const shouldReload = this.shouldReloadForm || !this._data;\n        this._data = value;\n\n        if (shouldReload) {\n            this._shouldReloadForm = false;\n            this.initForm();\n        } else {\n            this.updateForm();\n        }\n    }\n\n    get data(): ObjectsDataRow {\n        return this._data;\n    }\n\n    @Input() isActive = false;\n    @Input() layoutType: PepLayoutType = 'card';\n    @Input() listType = '';\n    @Input() objectId = '0';\n    @Input() parentId = '0';\n    @Input() searchCode = '0';\n    @Input() showTitle = true;\n    @Input() firstFieldAsLink = false;\n    @Input() checkForChanges: any = null;\n    @Input() pageType = '';\n\n    @Output()\n    valueChange: EventEmitter<IPepFormFieldValueChangeEvent> = new EventEmitter<IPepFormFieldValueChangeEvent>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n    @Output() childClick: EventEmitter<any> = new EventEmitter<any>();\n    @Output() childChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output()\n    fieldClick: EventEmitter<IPepFormFieldClickEvent> = new EventEmitter<IPepFormFieldClickEvent>();\n\n    isLocked = false;\n    formGutterSize;\n    cardGutterSize;\n    rowHeight;\n    // private lastFocusedField: any = null;\n    // private matrixIsLast = false;\n    // lastUpdatedFieldApiName: string = '';\n    form: FormGroup;\n    differ: any;\n\n    // payLoad = '';\n    private rows: Array<PepFieldBase[]> = [];\n    fields: PepFieldBase[] = [];\n    columns = 1;\n\n    private hasMenuFloatingOnOtherField = false;\n    private menuField: any;\n    private menuDataField: any;\n    private hasCampaignField: any;\n    private hasCampaignDataField: any;\n    private indicatorsField: any;\n    private indicatorsDataField: any = null;\n\n    private _shouldReloadForm = false;\n    get shouldReloadForm(): boolean {\n        return this._shouldReloadForm;\n    }\n\n    // eventServiceSub: Subscription;\n    // public jsonLib = JSON;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fb: FormBuilder,\n        differs: KeyValueDiffers,\n        private translate: TranslateService\n    ) {\n        // store the initial value to compare with\n        this.differ = differs.find({}).create();\n    }\n\n    convertXAlignToHorizontalAlign(\n        xAlign: X_ALIGNMENT_TYPE\n    ): PepHorizontalAlignment {\n        let res = DEFAULT_HORIZONTAL_ALIGNMENT;\n\n        if (\n            xAlign === X_ALIGNMENT_TYPE.None ||\n            xAlign === X_ALIGNMENT_TYPE.Left\n        ) {\n            res = 'left';\n        } else if (xAlign === X_ALIGNMENT_TYPE.Right) {\n            res = 'right';\n        } else {\n            res = 'center';\n        }\n\n        return res;\n    }\n\n    convertYAlignToVerticalAlign(\n        yAlign: Y_ALIGNMENT_TYPE\n    ): PepVerticalAlignment {\n        let res = DEFAULT_VERTICAL_ALIGNMENT;\n\n        if (\n            yAlign === Y_ALIGNMENT_TYPE.None ||\n            yAlign === Y_ALIGNMENT_TYPE.Top\n        ) {\n            res = 'top';\n        } else if (yAlign === Y_ALIGNMENT_TYPE.Bottom) {\n            res = 'bottom';\n        } else {\n            res = 'middle';\n        }\n\n        return res;\n    }\n\n    convertOptionalValues(\n        optionalValues: Array<KeyValuePair<string>>\n    ): IPepOption[] {\n        if (optionalValues && optionalValues.length > 0) {\n            return optionalValues.map((ov) => {\n                return { key: ov.Key, value: ov.Value };\n            });\n        } else {\n            return [];\n        }\n    }\n\n    convertAddressFields(\n        controlField: UIControlField,\n        addressFields: Array<ObjectsDataRowCell>,\n        canEditObject: boolean\n    ): PepFieldBase[] {\n        const fields: PepFieldBase[] = [];\n\n        addressFields.forEach((field) => {\n            let customField: PepFieldBase;\n            const placeholder = field.ApiName;\n\n            if (field.ApiName.toLowerCase().indexOf('street') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 2,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 0,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 0,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 1,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 0,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 2,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {\n                customField = new PepTextboxField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    type: 'text',\n                    placeholder,\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 1,\n                    rowSpan: 1,\n                    col: 1,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 3,\n                });\n            } else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {\n                customField = new PepSelectField({\n                    key: field.ApiName,\n                    label: field.ApiName,\n                    placeholder,\n                    options: this.convertOptionalValues(field.OptionalValues),\n                    readonly: !canEditObject,\n                    disabled: !field.Enabled || !canEditObject,\n                    hidden: false,\n                    required: false,\n                    value: field.Value,\n                    formattedValue: field.FormattedValue,\n                    row: 2,\n                    rowSpan: 1,\n                    col: 2,\n                    colSpan: 1,\n                    xAlignment: this.convertXAlignToHorizontalAlign(\n                        controlField.Layout.XAlignment\n                    ),\n                    yAlignment: this.convertYAlignToVerticalAlign(\n                        controlField.Layout.YAlignment\n                    ),\n                    order: 4,\n                });\n            }\n\n            fields.push(customField);\n        });\n\n        return fields.sort((n1, n2) =>\n            n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0\n        );\n    }\n\n    isMatrixField(apiNameToCheck: string): boolean {\n        return apiNameToCheck.indexOf('Matrix') >= 0;\n    }\n\n    doesFieldHavaFloatingField(\n        controlField: UIControlField,\n        floatingField: any\n    ): boolean {\n        let hasFloatingField = false;\n        if (\n            floatingField.Layout.Y >= controlField.Layout.Y &&\n            floatingField.Layout.Y <\n                controlField.Layout.Y + controlField.Layout.Height &&\n            floatingField.Layout.X >= controlField.Layout.X &&\n            floatingField.Layout.X <\n                controlField.Layout.X + controlField.Layout.Width\n        ) {\n            hasFloatingField = true;\n        }\n\n        return hasFloatingField;\n    }\n\n    getOptionsForCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean\n    ): any {\n        if (!controlField || !dataField) {\n            return;\n        }\n\n        const placeholder =\n            controlField.ReadOnly || !canEditObject ? '' : controlField.Title;\n\n        return {\n            key: controlField.ApiName,\n            label: controlField.Title,\n            accessory: dataField.Accessory,\n            placeholder,\n            readonly: controlField.ReadOnly || !canEditObject,\n            disabled: !dataField.Enabled || !canEditObject,\n            hidden: controlField.Hidden,\n            required: controlField.Mandatory,\n            value: dataField.Value,\n            formattedValue: dataField.FormattedValue,\n            additionalValue: dataField.AdditionalValue,\n            row: controlField.Layout.Y,\n            rowSpan: controlField.Layout.Height,\n            col: controlField.Layout.X,\n            colSpan: controlField.Layout.Width,\n            xAlignment: this.convertXAlignToHorizontalAlign(\n                controlField.Layout.XAlignment\n            ),\n            yAlignment: this.convertYAlignToVerticalAlign(\n                controlField.Layout.YAlignment\n            ),\n            options: this.convertOptionalValues(dataField.OptionalValues),\n            groupFields: undefined,\n            maxFieldCharacters: controlField.MaxFieldCharacters,\n            minValue: controlField.MinValue,\n            maxValue: controlField.MaxValue,\n            // hasMenu: hasMenu,\n            // hasCampaign: hasCampaign,\n            // hasIndicators: hasIndicators,\n            textColor: dataField.TextColor,\n        };\n    }\n\n    convertToCustomField(\n        controlField: UIControlField,\n        dataField: any,\n        canEditObject: boolean,\n        menuField: any,\n        hasCampaignField: any,\n        indicatorsField: any,\n        objectId: any,\n        parentId: any,\n        searchCode: any\n    ): PepFieldBase {\n        let customField: PepFieldBase;\n        const options = this.getOptionsForCustomField(\n            controlField,\n            dataField,\n            canEditObject\n        );\n\n        if (controlField.ApiName === 'ObjectMenu') {\n            options.type = 'menu';\n            customField = new PepInternalMenuField(options);\n        } else if (\n            controlField.ApiName === 'QuantitySelector' ||\n            controlField.ApiName === 'UnitsQuantity' ||\n            controlField.ApiName.indexOf('size_') === 0\n        ) {\n            if (dataField.FieldType === FIELD_TYPE.InternalLink) {\n                options.type = 'button';\n            } else if (dataField.FieldType === FIELD_TYPE.Package) {\n                options.type = 'packageButton';\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberReal\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = true;\n            } else if (\n                dataField.FieldType ===\n                    FIELD_TYPE.NumberIntegerQuantitySelector ||\n                dataField.FieldType === FIELD_TYPE.NumberInteger\n            ) {\n                options.type = 'qs';\n                options.alowDecimal = false;\n            } else if (\n                dataField.FieldType === FIELD_TYPE.NumberIntegerForMatrix\n            ) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = false;\n            } else if (dataField.FieldType === FIELD_TYPE.NumberRealForMatrix) {\n                options.type = 'qsForMatrix';\n                options.alowDecimal = true;\n            }\n\n            options.notificationInfo = dataField.NotificationInfo;\n            customField = new PepQuantitySelectorField(options);\n        } else {\n            // Hack need to remove this..\n            if (\n                dataField.FieldType === FIELD_TYPE.Indicators &&\n                this.isMatrixField(dataField.ApiName)\n            ) {\n                dataField.FieldType = FIELD_TYPE.InternalPage;\n            }\n\n            switch (dataField.FieldType) {\n                case FIELD_TYPE.Address: {\n                    const canEditGroupObject = controlField.ReadOnly\n                        ? false\n                        : canEditObject;\n                    options.groupFields = this.convertAddressFields(\n                        controlField,\n                        dataField.GroupFields,\n                        canEditGroupObject\n                    );\n                    customField = new PepAddressField(options);\n                    break;\n                }\n                case FIELD_TYPE.Indicators: {\n                    // options['type'] = 'indicators'; // Not needed this is PepIndicatorsField.\n                    customField = new PepIndicatorsField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalPage: {\n                    if (this.isMatrixField(controlField.ApiName)) {\n                        options.rowSpan = controlField.Layout.Height;\n                        options.objectId = objectId;\n                        options.parentId = parentId;\n                        options.searchCode = searchCode;\n\n                        customField = new PepInternalPageField(options);\n                    } else {\n                        // Not supported\n                    }\n                    break;\n                }\n                case FIELD_TYPE.Link: {\n                    options.type = 'link';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.InternalLink:\n                case FIELD_TYPE.Button: {\n                    options.type = 'button';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Attachment: {\n                    // options.type = 'attachment';\n                    customField = new PepAttachmentField(options);\n                    break;\n                }\n                case FIELD_TYPE.Signature: {\n                    // options.type = 'signature';\n                    customField = new PepSignatureField(options);\n                    break;\n                }\n                case FIELD_TYPE.Image:\n                case FIELD_TYPE.ImageURL: {\n                    // options.type = 'image';\n                    options.menuField =\n                        menuField &&\n                        this.doesFieldHavaFloatingField(controlField, menuField)\n                            ? menuField\n                            : null;\n                    options.hasCampaignField =\n                        hasCampaignField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            hasCampaignField\n                        )\n                            ? hasCampaignField\n                            : null;\n                    options.indicatorsField =\n                        indicatorsField &&\n                        this.doesFieldHavaFloatingField(\n                            controlField,\n                            indicatorsField\n                        )\n                            ? indicatorsField\n                            : null;\n\n                    customField = new PepImageField(options);\n                    break;\n                }\n                case FIELD_TYPE.Images: {\n                    // options.type = 'images';\n                    customField = new PepImagesField(options);\n                    break;\n                }\n                case FIELD_TYPE.Email: {\n                    options.type = 'email';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Phone: {\n                    options.type = 'phone';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Duration: {\n                    options.type = 'duration';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Default:\n                case FIELD_TYPE.TextBox:\n                case FIELD_TYPE.LimitedLengthTextBox:\n                case FIELD_TYPE.TextHeader:\n                case FIELD_TYPE.CalculatedString:\n                case FIELD_TYPE.MapDataString: {\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.TextArea: {\n                    customField = new PepTextareaField(options);\n                    break;\n                }\n\n                case FIELD_TYPE.RichTextHTML: {\n                    customField = new PepRichHtmlTextareaField(options);\n                    break;\n                }\n                case FIELD_TYPE.Date:\n                case FIELD_TYPE.LimitedDate:\n                case FIELD_TYPE.CalculatedDate:\n                case FIELD_TYPE.DateAndTime: {\n                    options.type =\n                        dataField.FieldType === FIELD_TYPE.DateAndTime\n                            ? 'datetime'\n                            : 'date';\n                    customField = new PepDateField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberInteger:\n                case FIELD_TYPE.CalculatedInt:\n                case FIELD_TYPE.MapDataInt: {\n                    options.type = 'int';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Percentage: {\n                    options.type = 'percentage';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Currency: {\n                    options.type = 'currency';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.NumberReal:\n                case FIELD_TYPE.CalculatedReal:\n                case FIELD_TYPE.MapDataReal:\n                case FIELD_TYPE.Sum:\n                case FIELD_TYPE.Totals: {\n                    options.type = 'real';\n                    customField = new PepTextboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.Boolean:\n                case FIELD_TYPE.CalculatedBool: {\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.BooleanText: {\n                    options.type = 'booleanText';\n                    customField = new PepCheckboxField(options);\n                    break;\n                }\n                case FIELD_TYPE.ComboBox:\n                case FIELD_TYPE.EmptyComboBox:\n                case FIELD_TYPE.MapDataDropDown: {\n                    // options.type = 'select';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.MultiTickBox:\n                case FIELD_TYPE.MultiTickBoxToComboBox:\n                case FIELD_TYPE.EmptyMultiTickBox: {\n                    options.type = 'multi';\n                    customField = new PepSelectField(options);\n                    break;\n                }\n                case FIELD_TYPE.GuidReferenceType: {\n                    options.type = 'reference';\n                    options.referenceObjectType = dataField.ReferenceObjectType;\n                    options.referenceObjectSubType =\n                        dataField.ReferenceObjectSubType;\n                    options.referenceObjectInternalType =\n                        dataField.ReferenceObjectInternalType;\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.ListOfObjects: {\n                    options.type = 'listofobjects';\n                    customField = new PepInternalButtonField(options);\n                    break;\n                }\n                case FIELD_TYPE.Separator: {\n                    customField = new PepSeparatorField(options);\n                    break;\n                }\n                /*\n                    case FIELD_TYPE.Images: return that.field(value);\n                */\n                case FIELD_TYPE.NumberRealQuantitySelector:\n                case FIELD_TYPE.NumberIntegerQuantitySelector: {\n                    options.type = 'qs';\n                    options.alowDecimal =\n                        dataField.FieldType ===\n                        FIELD_TYPE.NumberRealQuantitySelector;\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n                case FIELD_TYPE.Package: {\n                    options.type = 'packageButton';\n                    options.notificationInfo = dataField.NotificationInfo;\n\n                    customField = new PepQuantitySelectorField(options);\n                    break;\n                }\n            }\n        }\n\n        if (!customField) {\n            options.label = controlField.ApiName + ' is not supported!!!';\n            customField = new PepSeparatorField(options);\n        }\n\n        return customField;\n    }\n\n    getFieldFormattedValue(field: PepFieldBase): string {\n        let fieldFormattedValue = field.formattedValue;\n\n        // Fix for the custom check box component.\n        if (field.controlType === 'checkbox') {\n            fieldFormattedValue = fieldFormattedValue === 'true';\n        }\n\n        // Fix for the custom button component.\n        if (field.controlType === 'button') {\n            fieldFormattedValue =\n                fieldFormattedValue === '0' ? '' : fieldFormattedValue;\n        }\n\n        return fieldFormattedValue;\n    }\n\n    private toControlGroup(fields: PepFieldBase[]): FormGroup {\n        const group = {};\n        if (fields && fields.length > 0) {\n            fields.forEach((field) => {\n                if (field.groupFields && field.groupFields.length > 0) {\n                    const subGroup = {};\n\n                    field.groupFields.forEach((groupField) => {\n                        if (\n                            groupField.required &&\n                            !field.readonly &&\n                            !field.disabled\n                        ) {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.required],\n                            ];\n                        } else {\n                            subGroup[groupField.key] = [\n                                {\n                                    value: groupField.formattedValue || '',\n                                    disabled:\n                                        field.readonly ||\n                                        field.disabled ||\n                                        groupField.disabled,\n                                },\n                                [Validators.nullValidator],\n                            ];\n                        }\n                    });\n\n                    group[field.key] = this.fb.group(subGroup);\n                } else {\n                    const validators = field.getValidators();\n                    const fieldFormattedValue = this.getFieldFormattedValue(\n                        field\n                    );\n\n                    group[field.key] = [\n                        {\n                            value: fieldFormattedValue || '',\n                            disabled: field.disabled,\n                        },\n                        validators,\n                    ];\n                }\n            });\n        }\n\n        return this.fb.group(group);\n    }\n\n    public showFormValidationMessage(): void {\n        const fields: PepFieldBase[] = this.fields;\n        let emptyMandatoryFieldsMsg = '';\n        let notValidFieldsMsg = '';\n\n        // for (let i: number = 0; i < fields.length; i++) {\n        //     let field = fields[i];\n        for (const field of fields) {\n            const formControl = this.form && this.form.get(field.key);\n\n            if (formControl) {\n                // Mandatory is empty.\n                if (\n                    field.required &&\n                    formControl.value.toString().trim().length === 0\n                ) {\n                    emptyMandatoryFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                } else if (!field.disabled && !formControl.valid) {\n                    notValidFieldsMsg +=\n                        '<li><small>' + field.label + '</small></li>';\n                }\n            }\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (emptyMandatoryFieldsMsg.length > 0) {\n            emptyMandatoryFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                emptyMandatoryFieldsMsg +\n                '</ul><br/>';\n        }\n\n        // Add the header message of the empty mandatory fields\n        if (notValidFieldsMsg.length > 0) {\n            notValidFieldsMsg =\n                '<div>' +\n                this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +\n                \"</div><ul style='padding: 0 20px;'>\" +\n                notValidFieldsMsg +\n                '</ul>';\n        }\n\n        const title = this.translate.instant('MESSAGES.TITLE_NOTICE');\n        const data = new PepDialogData({\n            title,\n            content: emptyMandatoryFieldsMsg + notValidFieldsMsg,\n        });\n        this.dialogService.openDefaultDialog(data);\n    }\n\n    ngOnInit(): void {\n        const themeVars = this.customizationService.getThemeVariables();\n        // convert rem to pixel\n        const RemToPixel = 16;\n        this.formGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_SPACEING_KEY\n            ) * RemToPixel;\n        this.cardGutterSize =\n            this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_SPACEING_KEY\n            ) * RemToPixel;\n    }\n\n    ngDoCheck(): void {\n        const changes = this.differ.diff(this.data); // check for changes\n        if (changes) {\n            this.updateForm(true);\n            this.checkForChanges = new Date();\n        }\n    }\n\n    ngOnChanges(changes): void {\n        // if (changes.data && changes.data.currentValue) {\n        //     // Load changes\n        //     if (!this.shouldReloadForm && changes.data.previousValue) {\n        //         this.data = changes.data.currentValue;\n        //         this.updateForm();\n        //     } else {\n        //         this._shouldReloadForm = false;\n        //         this.initForm();\n        //     }\n        // }\n        // if (this.shouldReloadForm || !changes?.data?.previousValue) {\n        //     this._shouldReloadForm = false;\n        //     this.initForm();\n        //     this.checkForChanges = new Date();\n        // }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n        // if (this.childClick) {\n        //     this.childClick.unsubscribe();\n        // }\n        // if (this.childChange) {\n        //     this.childChange.unsubscribe();\n        // }\n        // if (this.fieldClick) {\n        //     this.fieldClick.unsubscribe();\n        // }\n    }\n\n    getUiControlFields(): Array<UIControlField> {\n        return this.layout ? this.layout.ControlFields : [];\n    }\n\n    initFieldsStructure(fields: PepFieldBase[], maxRow: number): void {\n        const themeVars = this.customizationService.getThemeVariables();\n\n        // Set form row height.\n        if (this.layoutType === 'card') {\n            const cardFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.CARD_FIELD_HEIGHT_KEY\n            );\n            this.rowHeight = cardFieldHeight;\n        } else {\n            const rowFieldHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_HEIGHT_KEY\n            );\n            const rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(\n                themeVars,\n                PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY\n            );\n            this.rowHeight = rowFieldHeight + rowFieldTitleHeight;\n        }\n\n        // Create the fields structure (the fields must be sorted!!!).\n        if (fields.length > 0) {\n            // Init the layout.\n            if (\n                // this.layoutType === 'form' ||\n                this.layoutType === 'table'\n            ) {\n                this.fields = fields;\n                this.rows = [];\n\n                for (let i = 0; i <= maxRow; i++) {\n                    this.rows[i] = [];\n                }\n\n                // for (let i = 0; i < fields.length; i++) {\n                // const field = fields[i]\n                for (const field of fields) {\n                    this.rows[field.row].push(field);\n                }\n            } else {\n                const doesfieldExistIn: boolean[][] = new Array(maxRow);\n\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    doesfieldExistIn[i] = new Array(this.columns);\n\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        doesfieldExistIn[i][j] = false;\n                    }\n                }\n\n                // Run in squere (row - colspan, col - rowspan) and put true where it should.\n                // for (let index = 0; index < fields.length; index++) {\n                //     const currentField = fields[index];\n                for (const currentField of fields) {\n                    if (currentField.rowSpan > 1) {\n                        for (\n                            let row: number = currentField.row;\n                            row < currentField.row + currentField.rowSpan;\n                            row++\n                        ) {\n                            if (currentField.colSpan > 1) {\n                                for (\n                                    let col: number = currentField.col;\n                                    col <\n                                    currentField.col + currentField.colSpan;\n                                    col++\n                                ) {\n                                    if (\n                                        doesfieldExistIn.length > row &&\n                                        doesfieldExistIn[0].length > col\n                                    ) {\n                                        doesfieldExistIn[row][col] = true;\n                                    }\n                                }\n                            } else {\n                                if (\n                                    doesfieldExistIn.length > row &&\n                                    doesfieldExistIn[0].length >\n                                        currentField.col\n                                ) {\n                                    doesfieldExistIn[row][\n                                        currentField.col\n                                    ] = true;\n                                }\n                            }\n                        }\n                    } else if (currentField.colSpan > 1) {\n                        for (\n                            let col: number = currentField.col;\n                            col < currentField.col + currentField.colSpan;\n                            col++\n                        ) {\n                            if (\n                                doesfieldExistIn.length > currentField.row &&\n                                doesfieldExistIn[0].length > col\n                            ) {\n                                doesfieldExistIn[currentField.row][col] = true;\n                            }\n                        }\n                    } else {\n                        if (\n                            doesfieldExistIn.length > currentField.row &&\n                            doesfieldExistIn[0].length > currentField.col\n                        ) {\n                            doesfieldExistIn[currentField.row][\n                                currentField.col\n                            ] = true;\n                        }\n                    }\n                }\n\n                // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).\n                for (let i = 0; i < doesfieldExistIn.length; i++) {\n                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {\n                        if (!doesfieldExistIn[i][j]) {\n                            // Create empty field and add it to the fields list.\n                            fields.push(\n                                new PepPlaceholderField({\n                                    key: i + '_' + j,\n                                    label: '',\n                                    placeholder: '',\n                                    readonly: false,\n                                    disabled: false,\n                                    hidden: false,\n                                    required: false,\n                                    value: '',\n                                    formattedValue: '',\n                                    row: i,\n                                    rowSpan: 1,\n                                    col: j,\n                                    colSpan: 1,\n                                    order: 1,\n                                })\n                            );\n                        }\n                    }\n                }\n\n                // Sort the fields again.\n                this.fields = fields.sort((f1, f2) =>\n                    f1.row > f2.row\n                        ? 1\n                        : f1.row < f2.row\n                        ? -1\n                        : f1.col > f2.col\n                        ? 1\n                        : f1.col < f2.col\n                        ? -1\n                        : 0\n                );\n            }\n        }\n    }\n\n    setForm(isForUpdate = false): void {\n        let allFieldsAreReadOnly = true;\n\n        if (!isForUpdate) {\n            const fields = [];\n            for (const currentField of this.fields) {\n                // Add all fields except 'internalPage' type (for children).\n                if (currentField.controlType !== 'internalPage') {\n                    fields.push(currentField);\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n\n            this.form = this.toControlGroup(fields);\n        } else {\n            // Update form values if changed by calculated fields.\n            for (const currentField of this.fields) {\n                if (currentField.controlType !== 'internalPage') {\n                    if (\n                        currentField.groupFields &&\n                        currentField.groupFields.length > 0\n                    ) {\n                        // for (let j = 0; j < currentField.groupFields.length; j++) {\n                        //     let currentGroupField = currentField.groupFields[j];\n                        for (const currentGroupField of currentField.groupFields) {\n                            const fieldFormattedValue = this.getFieldFormattedValue(\n                                currentGroupField\n                            );\n                            this.customizationService.updateFormField(\n                                this.form,\n                                currentGroupField,\n                                fieldFormattedValue,\n                                currentField\n                            );\n                        }\n                    } else {\n                        const fieldFormattedValue = this.getFieldFormattedValue(\n                            currentField\n                        );\n                        // this.form.controls[currentField.key].setValue(fieldFormattedValue);\n                        this.customizationService.updateFormField(\n                            this.form,\n                            currentField,\n                            fieldFormattedValue\n                        );\n                    }\n                }\n\n                if (!currentField.readonly) {\n                    allFieldsAreReadOnly = false;\n                }\n            }\n        }\n\n        let isFormValid = this.form?.valid;\n\n        // Change validation to true if all fields are read only.\n        if (!isFormValid && allFieldsAreReadOnly) {\n            isFormValid = true;\n        }\n\n        this.onFormValidationChanged(isFormValid);\n\n        // Set it to false to enable all fields.\n        this.isLocked = false;\n    }\n\n    initForm(): void {\n        if (this.data && this.data.Fields) {\n            const fields: PepFieldBase[] = this.convertCustomFields(\n                this.getUiControlFields(),\n                this.data.Fields\n            );\n\n            const maxRow = Math.max(\n                ...fields.map((f) => {\n                    return f.row + f.rowSpan;\n                })\n            );\n            this.columns = Math.max(\n                ...fields.map((f) => {\n                    return f.col + f.colSpan;\n                })\n            );\n\n            this.initFieldsStructure(fields, maxRow);\n            this.setForm();\n        }\n    }\n\n    private updateField(\n        customField: PepFieldBase,\n        updatedField: ObjectsDataRowCell\n    ): void {\n        const options: any = {\n            disabled: !updatedField.Enabled || !this.canEditObject,\n            readonly: !updatedField.Enabled || !this.canEditObject,\n            value: updatedField.Value,\n            additionalValue: updatedField.AdditionalValue,\n            formattedValue: updatedField.FormattedValue,\n            textColor: updatedField.TextColor,\n        };\n\n        if (customField instanceof PepQuantitySelectorField) {\n            const notificationInfo = updatedField.NotificationInfo;\n            options.notificationInfo = notificationInfo;\n        } else if (customField instanceof PepSelectField) {\n            options.options = this.convertOptionalValues(\n                updatedField.OptionalValues\n            );\n\n            if (!options.options || options.options.length === 0) {\n                options.options.push({\n                    key: options.value,\n                    value: options.formattedValue,\n                });\n            }\n        }\n\n        customField.update(options);\n\n        // if (this.lastFocusedField && this.lastFocusedField.id === customField.key) {\n        //     setTimeout(() => {\n        //         this.lastFocusedField.focus();\n        //         this.lastFocusedField = null;\n        //     }, 100);\n        // }\n    }\n\n    updateForm(cleanLastFocusedField = false): void {\n        if (this.data && this.data.Fields) {\n            for (const currentField of this.data.Fields) {\n                const customField = this.fields.filter(\n                    (f) => f.key === currentField.ApiName\n                )[0];\n                // Update all fields except 'internalPage' type (for children).\n                if (customField && customField.controlType !== 'internalPage') {\n                    // const hasFocus = this.lastFocusedField && this.lastFocusedField.id === customField.key;\n                    // customField.updateField(currentField, this.canEditObject, hasFocus ? this.lastFocusedField : null);\n                    this.updateField(customField, currentField);\n\n                    // Update the group fields.\n                    if (\n                        customField.controlType === 'address' &&\n                        currentField.GroupFields\n                    ) {\n                        // for (let j = 0; j < currentField.GroupFields.length; j++) {\n                        // let currentGroupField = currentField.GroupFields[j];\n                        for (const currentGroupField of currentField.GroupFields) {\n                            currentGroupField.Enabled = !currentField.Enabled\n                                ? false\n                                : currentGroupField.Enabled;\n\n                            const customGroupField = customField.groupFields.filter(\n                                (f) => f.key === currentGroupField.ApiName\n                            )[0];\n                            // const hasGroupFocus = this.lastFocusedField && this.lastFocusedField.id === customGroupField.key;\n                            // customGroupField.updateField(currentGroupField, this.canEditObject, hasGroupFocus ? this.lastFocusedField : null);\n                            this.updateField(\n                                customGroupField,\n                                currentGroupField\n                            );\n                        }\n                    }\n                }\n            }\n\n            this.setForm(true);\n\n            // if (cleanLastFocusedField) {\n            //     // Clean the last focused field.\n            //     this.lastFocusedField = null;\n            //     console.log(this.lastFocusedField);\n            // }\n        }\n    }\n\n    public ReloadForm(): void {\n        this._shouldReloadForm = true;\n    }\n\n    // onSubmit() {\n    //     if (this.form.valid) {\n    //         this.payLoad = JSON.stringify(this.form.value);\n    //         //this.submitted.emit(this.form.value);\n    //     }\n    // }\n\n    private getFormControlById(key: string): AbstractControl | null {\n        let formControl = null;\n\n        this.fields.forEach((field) => {\n            if (field.key === key) {\n                formControl = this.form.get(field.key);\n                return;\n            } else if (field.groupFields && field.groupFields.length > 0) {\n                field.groupFields.forEach((groupField) => {\n                    if (groupField.key === key) {\n                        formControl = this.form.get(\n                            field.key + '.' + groupField.key\n                        );\n                        return;\n                    }\n                });\n            }\n        });\n\n        return formControl;\n    }\n\n    private setSpecialFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): void {\n        // let cf;\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (cf.ApiName === 'ObjectMenu') {\n                this.menuField = cf;\n            } else if (cf.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignField = cf;\n            } else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsField = cf;\n            }\n        }\n\n        // let df;\n        // for (let index = 0; index < dataFields.length; index++) {\n        //     df = dataFields[index];\n        for (const df of dataFields) {\n            if (df.ApiName === 'ObjectMenu') {\n                this.menuDataField = df;\n            } else if (df.ApiName === 'ItemHasActiveCampaign') {\n                this.hasCampaignDataField = df;\n            } else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {\n                this.indicatorsDataField = df;\n            }\n        }\n\n        if (this.menuField && this.menuDataField) {\n            this.menuDataField.Layout = this.menuField.Layout;\n        }\n\n        if (this.hasCampaignField && this.hasCampaignDataField) {\n            this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;\n        }\n\n        if (this.indicatorsField && this.indicatorsDataField) {\n            this.indicatorsDataField.Layout = this.indicatorsField.Layout;\n        }\n\n        // Check if menu is floating on other field.\n        // for (let index = 0; index < controlFields.length; index++) {\n        //     cf = controlFields[index];\n        for (const cf of controlFields) {\n            if (this.menuField && cf.ApiName !== 'ObjectMenu') {\n                this.hasMenuFloatingOnOtherField = this.doesFieldHavaFloatingField(\n                    cf,\n                    this.menuField\n                );\n\n                if (this.hasMenuFloatingOnOtherField) {\n                    break;\n                }\n            }\n        }\n    }\n\n    convertCustomFields(\n        controlFields: Array<any>,\n        dataFields: Array<any>\n    ): PepFieldBase[] {\n        if (this.layoutType !== 'table') {\n            this.setSpecialFields(controlFields, dataFields);\n        } else {\n            // Hack: convert to center alignment if table view & special fields)\n            controlFields.forEach((field, index) => {\n                if (\n                    field.ApiName === 'UnitsQuantity' ||\n                    field.ApiName === 'QuantitySelector' ||\n                    field.ApiName === 'ObjectMenu' ||\n                    field.FieldType === FIELD_TYPE.Image ||\n                    field.FieldType === FIELD_TYPE.ImageURL ||\n                    field.FieldType === FIELD_TYPE.Indicators ||\n                    field.FieldType === FIELD_TYPE.Boolean ||\n                    field.FieldType === FIELD_TYPE.CalculatedBool ||\n                    field.FieldType === FIELD_TYPE.Signature ||\n                    field.FieldType ===\n                        FIELD_TYPE.NumberIntegerQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                    field.FieldType === FIELD_TYPE.Package ||\n                    field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                    field.FieldType === FIELD_TYPE.NumberRealForMatrix\n                ) {\n                    field.Layout.XAlignment = X_ALIGNMENT_TYPE.Center;\n                }\n            });\n        }\n\n        const fields: PepFieldBase[] = [];\n\n        // const matrixFields = controlFields.filter((cf) =>\n        //     this.isMatrixField(cf.ApiName)\n        // ).length;\n        // let matrixAlreadyPlaced = false;\n\n        controlFields.forEach((field, index) => {\n            const dataField = dataFields.filter(\n                (df) => df.ApiName === field.ApiName\n            )[0];\n\n            if (!dataField) {\n                return;\n            }\n\n            // If current view is not table view and those fields are special.\n            if (\n                this.layoutType !== 'table' &&\n                ((this.hasMenuFloatingOnOtherField &&\n                    this.menuField &&\n                    this.menuField.ApiName === field.ApiName) ||\n                    (this.indicatorsField &&\n                        this.indicatorsField.ApiName === field.ApiName) ||\n                    (this.hasCampaignField &&\n                        this.hasCampaignField.ApiName === field.ApiName))\n            ) {\n                return;\n            }\n\n            // Remove this. (fix two matrix into one)\n            // if (matrixFields > 0 && this.isMatrixField(field.ApiName)) {\n            //     if (matrixFields > 1 && matrixAlreadyPlaced) {\n            //         return;\n            //     }\n\n            //     matrixAlreadyPlaced = true;\n\n            //     if (matrixFields > 1) {\n            //         this.matrixIsLast =\n            //             controlFields.length >= 2\n            //                 ? controlFields[controlFields.length - 2]\n            //                     .ApiName === field.ApiName\n            //                 : false;\n            //     } else {\n            //         this.matrixIsLast =\n            //             controlFields[controlFields.length - 1].ApiName ===\n            //             field.ApiName;\n            //     }\n            // }\n\n            // Set type to link\n            if (this.firstFieldAsLink && index === 0) {\n                dataField.FieldType = FIELD_TYPE.InternalLink;\n                dataField.Value = this.getInternalLinkHref();\n            } else if (\n                dataField.Value.length > 0 &&\n                (field.FieldType === FIELD_TYPE.ReferenceType ||\n                    field.FieldType === FIELD_TYPE.GuidReferenceType)\n            ) {\n                const transactionUrl =\n                    this.data.MainAction === '2'\n                        ? 'transactions/scope_items/'\n                        : 'transactions/cart/';\n                dataField.Value = transactionUrl + dataField.Value;\n            }\n\n            if (field.ApiName === 'ObjectMenu') {\n                dataField.Enabled = true;\n                // HACK : Until \"Enabled\" returns from the server, we set PepMenu to be\n                //        Disabled in cart on regular items and not campign items.\n            }\n            const customField: PepFieldBase = this.convertToCustomField(\n                field,\n                dataField,\n                this.canEditObject,\n                this.menuDataField,\n                this.hasCampaignDataField,\n                this.indicatorsDataField,\n                this.objectId,\n                this.parentId,\n                this.searchCode\n            );\n\n            fields.push(customField);\n        });\n\n        return fields.sort((f1, f2) =>\n            f1.row > f2.row\n                ? 1\n                : f1.row < f2.row\n                ? -1\n                : f1.col > f2.col\n                ? 1\n                : f1.col < f2.col\n                ? -1\n                : 0\n        );\n    }\n\n    onValueChanged(event: IPepFieldValueChangeEvent): void {\n        this.onFormValidationChanged(this.form.valid);\n\n        const formControl = this.getFormControlById(event.key);\n\n        const isValid = formControl ? formControl.valid : true;\n        // const isValid = true;\n\n        if (isValid) {\n            // Set it to false to disable all fields.\n            if (this.layoutType === 'form') {\n                this.isLocked = true;\n            }\n\n            // Update the current field value.\n            const currentField = this.fields.find((f) => f.key === event.key);\n            if (currentField) {\n                currentField.formattedValue = currentField.value = event.value;\n            }\n\n            // this.lastFocusedField = event.lastFocusedField;\n\n            this.valueChange.emit({\n                id: this.data.UID.toString(),\n                key: event.key,\n                value: event.value,\n                controlType: event.controlType,\n            });\n        }\n    }\n\n    onChildClicked(childClick: any): void {\n        this.childClick.emit(childClick);\n    }\n\n    onChildChanged(childChange: any): void {\n        this.childChange.emit(childChange);\n    }\n\n    onFormValidationChanged(formValidationChange: any): void {\n        // if (this.layoutType === 'form' || this.layoutType === 'card') {\n        this.formValidationChange.emit(formValidationChange);\n        // }\n    }\n\n    onClick(fieldClickEvent: IPepFieldClickEvent): void {\n        const clickedUiControlField = this.data.Fields.filter(\n            (f) => f.ApiName === fieldClickEvent.key\n        )[0];\n        const idType = this.data.Type ? this.data.Type.toString() : '';\n\n        if (clickedUiControlField) {\n            if (\n                clickedUiControlField.FieldType === FIELD_TYPE.GuidReferenceType\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else if (\n                clickedUiControlField.FieldType === FIELD_TYPE.ListOfObjects\n            ) {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            } else {\n                this.fieldClick.emit({\n                    id: this.data.UID.toString(),\n                    key: fieldClickEvent.key,\n                    idType,\n                    which: fieldClickEvent.eventWhich,\n                    value: fieldClickEvent.value,\n                    controlType: fieldClickEvent.controlType,\n                    fieldType: clickedUiControlField.FieldType,\n                    otherData: fieldClickEvent.otherData,\n                });\n            }\n        } else {\n            // For other api names (like enter children etc).\n            this.fieldClick.emit({\n                id: this.data.UID.toString(),\n                key: fieldClickEvent.key,\n                idType,\n                which: fieldClickEvent.eventWhich,\n                value: fieldClickEvent.value,\n                controlType: fieldClickEvent.controlType,\n                otherData: fieldClickEvent.otherData,\n            });\n        }\n    }\n\n    getInternalLinkHref(): string {\n        let hrefStr = '';\n        const uid = this.data.UID;\n        const transactionUrl =\n            this.data.MainAction === '2'\n                ? 'transactions/scope_items/'\n                : 'transactions/cart/';\n        // let isBuyer = sessionStorage.getItem('userRole') == 'Buyer' ? true : false;\n\n        if (this.listType === 'all_activities') {\n            hrefStr =\n                this.data.Type === 0\n                    ? transactionUrl + uid\n                    : 'activities/details/' + uid;\n        } else if (this.listType === 'accounts') {\n            hrefStr = 'accounts/home_page/' + uid;\n        }\n\n        return hrefStr;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: grid;\n}\n",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 160,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "DoCheck",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "ObjectsDataRow",
                        "line": 110
                    }
                },
                "shouldReloadForm": {
                    "name": "shouldReloadForm",
                    "getSignature": {
                        "name": "shouldReloadForm",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 158
                    }
                }
            },
            "templateData": "<fieldset *ngIf=\"form\" [formGroup]=\"form\" [disabled]=\"isLocked\" class=\"pep-form\"\n    [ngStyle]=\"{ 'background-color': layoutType == 'card' && data?.BackgroundColor }\">\n    <!-- New Form -->\n    <mat-grid-list *ngIf=\"layoutType == 'form'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"formGutterSize\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [checkForChanges]=\"checkForChanges\" [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\"\n                (valueChange)=\"onValueChanged($event)\" (childClick)=\"onChildClicked($event)\"\n                (childChange)=\"onChildChanged($event)\" (elementClick)=\"onClick($event)\"\n                (formValidationChange)=\"onFormValidationChanged($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <!-- Thumbnails -->\n    <mat-grid-list *ngIf=\"layoutType == 'card'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"cardGutterSize\" class=\"card-spacing\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\"\n            [ngStyle]=\"{ overflow: field.type == 'qs' ? 'unset' : 'hidden' }\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [ngClass]=\"{ 'lock-events': lockEvents }\" [isActive]=\"isActive\" [checkForChanges]=\"checkForChanges\"\n                [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\" (valueChange)=\"onValueChanged($event)\"\n                (childClick)=\"onChildClicked($event)\" (childChange)=\"onChildChanged($event)\"\n                (elementClick)=\"onClick($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <ng-container *ngIf=\"layoutType == 'table'\">\n        <ng-container *ngIf=\"isReport; then reportBlock; else notReportBlock\"></ng-container>\n        <ng-template #reportBlock>\n            <ng-container *ngTemplateOutlet=\"report\"></ng-container>\n        </ng-template>\n        <ng-template #notReportBlock>\n            <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip table-cell \"\n                [ngClass]=\"['text-align-' + field.xAlignment]\" style=\"height: 100%\"\n                [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString}\">\n                <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [checkForChanges]=\"checkForChanges\"\n                    [uid]=\"data?.UID\" [field]=\"field\" (valueChange)=\"onValueChanged($event)\"\n                    (elementClick)=\"onClick($event)\" [form]=\"form\" [layoutType]=\"layoutType\" [showTitle]=\"false\"\n                    [isActive]=\"isActive\">\n                </pep-field-generator>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <!------- For testing ------------\n    {{ form.value | json }}\n    {{ form.valid }}\n    ---------------------------------->\n</fieldset>\n\n<ng-template #report>\n    <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip pep-report-fields\"\n        [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString }\"\n        [ngClass]=\"['text-align-' + field.xAlignment]\">\n        <ng-container [ngSwitch]=\"field.controlType\">\n            <pep-image *ngSwitchCase=\"'image'\" [uid]=\"data?.UID\" [form]=\"form\" [key]=\"field.key\"\n                [src]=\"field.formattedValue\" [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\"\n                [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [layoutType]=\"layoutType\"\n                (elementClick)=\"onClick($event)\">\n            </pep-image>\n\n            <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\n                [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-signature>\n\n            <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [label]=\"field.label\" [type]=\"field.type\" [required]=\"field.required\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [additionalValue]=\"field.additionalValue\" [layoutType]=\"layoutType\">\n            </pep-checkbox>\n\n            <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n                [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\">\n            </pep-internal-button>\n\n            <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [label]=\"field.label\" [required]=\"field.required\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [maxFieldCharacters]=\"field.maxFieldCharacters\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-textarea>\n\n            <pep-quantity-selector *ngSwitchCase=\"'qs'\" [id]=\"field.key\" [form]=\"form\" [key]=\"field.key\"\n                [value]=\"field.value\" [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [required]=\"field.required\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\" (elementClick)=\"onClick($event)\">\n            </pep-quantity-selector>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"field.formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\">\n                </ng-container>\n                <ng-template #notEmptyBlock>\n                    <ng-container\n                        *ngIf=\"field.controlType === 'attachment' || field.type === 'link'; then linkBlock; else notLinkBlock\">\n                    </ng-container>\n                    <ng-template #linkBlock>\n                        <a [id]=\"field.key\" class=\"color-link body-sm pep-report-input readonly\"\n                            *ngIf=\"field.formattedValue != null\" title=\"{{ field.formattedValue }}\" target=\"_blank\"\n                            href=\"{{ field.value }}\">{{ field.formattedValue }}</a>\n                    </ng-template>\n                    <ng-template #notLinkBlock>\n                        <span [id]=\"field.key\" class=\"body-sm pep-report-input readonly\"\n                            title=\"{{ field.formattedValue }}\" [ngStyle]=\"{ color: field.textColor }\">{{\n                            field.formattedValue }}</span>\n                    </ng-template>\n                </ng-template>\n                <ng-template #emptyBlock>\n                    <span>&nbsp;</span>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </div>\n</ng-template>"
        },
        {
            "name": "PepGroupButtonsComponent",
            "id": "component-PepGroupButtonsComponent-a2de6423fa6151efb0e4b1890d72dcfe",
            "file": "projects/ngx-lib/group-buttons/group-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-group-buttons",
            "styleUrls": [
                "./group-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttons",
                    "line": 25,
                    "type": "Array<PepButton>"
                },
                {
                    "name": "buttonsClass",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "buttonsDisabled",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "viewType",
                    "defaultValue": "'regular'",
                    "line": 24,
                    "type": "PepGroupButtonsViewType"
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter<IPepButtonClickEvent>()",
                    "line": 30,
                    "type": "EventEmitter<IPepButtonClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onButtonClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "button",
                            "type": "PepButton"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "button",
                            "type": "PepButton",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepButton,\n    IPepButtonClickEvent,\n} from '@pepperi-addons/ngx-lib/button';\n\nexport type PepGroupButtonsViewType = 'regular' | 'dropdown' | 'split';\n@Component({\n    selector: 'pep-group-buttons',\n    templateUrl: './group-buttons.component.html',\n    styleUrls: ['./group-buttons.component.scss'],\n})\nexport class PepGroupButtonsComponent implements OnDestroy {\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    @Input() viewType: PepGroupButtonsViewType = 'regular';\n    @Input() buttons: Array<PepButton>;\n    @Input() buttonsClass: string;\n    @Input() buttonsDisabled: string;\n\n    @Output()\n    buttonClick: EventEmitter<IPepButtonClickEvent> = new EventEmitter<IPepButtonClickEvent>();\n\n    constructor(public layoutService: PepLayoutService) {\n        this.layoutService.onResize$.subscribe((size) => {\n            this.screenSize = size;\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.buttonClick) {\n            this.buttonClick.unsubscribe();\n        }\n    }\n\n    onButtonClicked(event: Event, button: PepButton): void {\n        const buttonClick = {\n            source: button,\n            event,\n        };\n\n        if (button?.callback) {\n            button.callback(buttonClick);\n        } else {\n            this.buttonClick.emit(buttonClick);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n.group-buttons-container {\n    display: flex; // inline-flex;\n    border-radius: $border-radius-md;\n\n    .dropdown-buttons,\n    .split-buttons {\n        // margin-top: $spacing-xs;\n\n        .first-button {\n            // This is only for .dropdown-buttons override in .split-buttons class\n            margin-right: 1px;\n        }\n\n        .first-button,\n        .first-button:after {\n            border-radius: $border-radius-md 0 0 $border-radius-md;\n        }\n\n        .last-button,\n        .last-button:after {\n            border-radius: 0 $border-radius-md $border-radius-md 0;\n        }\n\n        .pepperi-button, .pep-button {\n            margin-top: 0 !important; // override material defaults.\n\n            &.cdk-focused {\n                z-index: $z-index-lowest + 1;\n            }\n        }\n\n        @media (max-width: $screen-max-size-xs) {\n            &.dropup {\n                .first-button {\n                    // @include calc(max-width, '75vw - 4rem'); //we have a variants for it !!!\n                    max-width: 200px;\n                    padding: 0 0.25rem;\n                }\n\n                .last-button {\n                    padding: 0;\n                }\n            }\n        }\n    }\n\n    .split-buttons {\n        display: grid;\n        grid-template-columns: auto auto;\n        max-width: 100%;\n\n        .first-button {\n            margin-right: -1px;\n            max-width: unset;\n        }\n\n        .middle-button {\n            border-radius: 0;\n        }\n    }\n\n    &[dir='rtl'] {\n        .split-buttons,\n        .dropdown-buttons {\n            .first-button {\n                margin-right: unset;\n                margin-left: 1px;\n            }\n\n            .first-button,\n            .first-button:after {\n                border-radius: 0 $border-radius-md $border-radius-md 0;\n            }\n\n            .last-button,\n            .last-button:after {\n                border-radius: $border-radius-md 0 0 $border-radius-md;\n            }\n        }\n\n        .split-buttons {\n            .first-button {\n                margin-left: -1px;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./group-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"group-buttons-container\" pepRtlDirection>\n    <ng-container *ngIf=\"viewType == 'regular'\">\n        <button *ngFor=\"let button of buttons\" [pepDataQa]=\"button.value\"\n            class=\"pep-button pep-spacing-element pull-left flip first-button mat-button {{ buttonsClass }}\"\n            [disabled]=\"buttonsDisabled\" mat-button (click)=\"onButtonClicked($event, button)\">\n            <span [title]=\"button?.value\">{{ button?.value }}</span>\n        </button>\n    </ng-container>\n\n    <div *ngIf=\"viewType == 'dropdown'\" class=\"dropdown-buttons pep-spacing-element\"\n        [ngClass]=\"{dropup: screenSize >= PepScreenSizeType.MD}\">\n        <button [pepDataQa]=\"buttons[0].value\"\n            class=\"pep-button pull-left flip first-button mat-button {{ buttonsClass }}\"\n            (click)=\"onButtonClicked($event, buttons[0])\" [disabled]=\"buttonsDisabled\" mat-button>\n            <span class=\"ellipsis\" [title]=\"buttons[0]?.value\">{{ buttons[0]?.value }}</span>\n        </button>\n        <button class=\"pep-button icon-button pull-right flip last-button mat-button {{ buttonsClass }}\"\n            [matMenuTriggerFor]=\"actionsMenu\" [disabled]=\"buttonsDisabled\" pepMenuBlur mat-button>\n            <mat-icon>\n                <pep-icon name=\"{{ screenSize < PepScreenSizeType.MD ? 'arrow_down' : 'arrow_up' }}\">\n                </pep-icon>\n            </mat-icon>\n        </button>\n\n        <mat-menu #actionsMenu=\"matMenu\" xPosition=\"before\">\n            <ng-container *ngFor=\"let button of buttons; let i = index; first as isFirst\">\n                <button *ngIf=\"!isFirst\" mat-menu-item [pepDataQa]=\"button.value\"\n                    (click)=\"onButtonClicked($event, button)\">\n                    <span [title]=\"button?.value\">{{ button?.value }}</span>\n                </button>\n            </ng-container>\n        </mat-menu>\n    </div>\n    <div *ngIf=\"viewType == 'split'\" class=\"split-buttons\">\n        <button *ngFor=\"let button of buttons; let index; let isFirst = first; let isLast = last\"\n            [pepDataQa]=\"button.value\"\n            class=\"pep-button split-button mat-button {{ buttonsClass }} {{ button?.class }} pull-left flip\"\n            [ngClass]=\"{'first-button': isFirst, 'middle-button': !isFirst && !isLast, 'last-button': isLast, 'icon-button': button?.icon}\"\n            [disabled]=\"buttonsDisabled\" mat-button (click)=\"onButtonClicked($event, button)\">\n            <mat-icon *ngIf=\"button?.icon\">\n                <pep-icon name=\"{{button?.icon}}\">\n                </pep-icon>\n            </mat-icon>\n            <span *ngIf=\"button?.value\" class=\"ellipsis\" [title]=\"button?.value\">{{ button?.value }}</span>\n        </button>\n    </div>\n</div>"
        },
        {
            "name": "PepIconComponent",
            "id": "component-PepIconComponent-0d75de74bce3e641a440b9815491a9f1",
            "file": "projects/ngx-lib/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: flex;\n                align-items: center;\n                justify-items: center;\n                width: inherit;\n                height: inherit;\n                align-content: center;\n                justify-content: center;\n            }\n\n            :host::ng-deep svg {\n                width: inherit;\n                height: inherit;\n            }\n\n            :host::ng-deep svg.spin {\n                animation: rotation 2s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: rotate(0deg);\n                }\n                to {\n                    transform: rotate(359deg);\n                }\n            }\n        "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "line": 81,
                    "type": "string"
                },
                {
                    "name": "name",
                    "line": 64,
                    "type": ""
                },
                {
                    "name": "spin",
                    "line": 57,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_fill",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "svgIcon",
                    "type": "SVGElement",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setFill",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    Optional,\n    ViewEncapsulation,\n    Renderer2,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { PepUtilitiesService } from '@pepperi-addons/ngx-lib';\nimport { PepIconRegistry } from './icon-registry.service';\nimport { PepIconType } from './icon-generated.model';\n\n@Component({\n    selector: 'pep-icon',\n    template: ` <ng-content></ng-content> `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-items: center;\n                width: inherit;\n                height: inherit;\n                align-content: center;\n                justify-content: center;\n            }\n\n            :host::ng-deep svg {\n                width: inherit;\n                height: inherit;\n            }\n\n            :host::ng-deep svg.spin {\n                animation: rotation 2s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: rotate(0deg);\n                }\n                to {\n                    transform: rotate(359deg);\n                }\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepIconComponent {\n    private svgIcon: SVGElement;\n\n    @Input()\n    set spin(spin: boolean) {\n        if (spin) {\n            this.renderer.addClass(this.svgIcon, 'spin');\n        }\n    }\n\n    @Input()\n    set name(iconName: PepIconType) {\n        if (this.svgIcon) {\n            this.element.nativeElement.removeChild(this.svgIcon);\n        }\n        const svgData = this.iconRegistry.getIcon(iconName);\n        this.svgIcon = this.utilitiesService.getSvgElementFromString(\n            this.document,\n            svgData\n        );\n        this.element.nativeElement.appendChild(this.svgIcon);\n        this.renderer.addClass(this.svgIcon, 'svg-icon');\n\n        this.setFill();\n    }\n\n    private _fill = null;\n    @Input()\n    set fill(value: string) {\n        this._fill = value;\n        this.setFill();\n    }\n\n    constructor(\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private utilitiesService: PepUtilitiesService,\n        private iconRegistry: PepIconRegistry,\n        @Optional() @Inject(DOCUMENT) private document: any\n    ) {}\n\n    private setFill(): void {\n        if (this.svgIcon && this._fill) {\n            this.renderer.setStyle(this.svgIcon, 'fill', this._fill);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: flex;\n                align-items: center;\n                justify-items: center;\n                width: inherit;\n                height: inherit;\n                align-content: center;\n                justify-content: center;\n            }\n\n            :host::ng-deep svg {\n                width: inherit;\n                height: inherit;\n            }\n\n            :host::ng-deep svg.spin {\n                animation: rotation 2s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: rotate(0deg);\n                }\n                to {\n                    transform: rotate(359deg);\n                }\n            }\n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService"
                    },
                    {
                        "name": "iconRegistry",
                        "type": "PepIconRegistry"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "PepUtilitiesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconRegistry",
                        "type": "PepIconRegistry",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "spin": {
                    "name": "spin",
                    "setSignature": {
                        "name": "spin",
                        "type": "void",
                        "args": [
                            {
                                "name": "spin",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "spin",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "iconName",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "iconName",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fill": {
                    "name": "fill",
                    "setSignature": {
                        "name": "fill",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PepImageComponent",
            "id": "component-PepImageComponent-be5994de1359c12a3fb9deda8bd4a662",
            "file": "projects/ngx-lib/image/image.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acceptImagesType",
                    "defaultValue": "'bmp,jpg,jpeg,png,gif'",
                    "line": 65
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 49
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 59,
                    "type": "FormGroup"
                },
                {
                    "name": "hasCampaignField",
                    "defaultValue": "null",
                    "line": 55,
                    "type": "any"
                },
                {
                    "name": "indicatorsField",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "any"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 63
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 42
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 46
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 62,
                    "type": "PepLayoutType"
                },
                {
                    "name": "menuField",
                    "defaultValue": "null",
                    "line": 54,
                    "type": "any"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 45,
                    "type": "IPepOption[]"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 50
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 48
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 52
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 61
                },
                {
                    "name": "sizeLimitMB",
                    "defaultValue": "5",
                    "line": 64
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "line": 44
                },
                {
                    "name": "srcLarge",
                    "defaultValue": "''",
                    "line": 43
                },
                {
                    "name": "uid",
                    "defaultValue": "''",
                    "line": 60
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 51,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 70,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 68,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'image'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "dataURI",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "MENU_CLICKED",
                    "defaultValue": "'[MenuClicked]'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemImageClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "objectIdIsNotEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 175
                },
                {
                    "name": "onFileChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onImageLoad",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openImageModal",
                    "args": [
                        {
                            "name": "hasParentImage",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "jsdoctags": [
                        {
                            "name": "hasParentImage",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ElementRef,\n    OnDestroy,\n    Renderer2,\n    Optional,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepFileService,\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    IPepOption,\n    PepImageField,\n} from '@pepperi-addons/ngx-lib';\n\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepImagesFilmstripComponent } from '@pepperi-addons/ngx-lib/images-filmstrip';\nimport { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-image',\n    templateUrl: './image.component.html',\n    styleUrls: ['./image.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepImageComponent implements OnChanges, OnInit, OnDestroy {\n    public static MENU_CLICKED = '[MenuClicked]';\n\n    @Input() key = '';\n    @Input() srcLarge = '';\n    @Input() src = '';\n    @Input() options: IPepOption[] = [];\n    @Input() label = '';\n    // @Input() type = 'image';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() indicatorsField: any = null;\n    @Input() menuField: any = null;\n    @Input() hasCampaignField: any = null;\n\n    controlType = 'image';\n\n    @Input() form: FormGroup = null;\n    @Input() uid = '';\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() isActive = false;\n    @Input() sizeLimitMB = 5;\n    @Input() acceptImagesType = 'bmp,jpg,jpeg,png,gif'; // \"image/bmp, image/jpg, image/jpeg, image/png, image/tif, image/tiff\";\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    fieldHeight = '';\n    standAlone = false;\n    dataURI = null;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fileService: PepFileService,\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private translate: TranslateService\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n\n            // this.form = this.customizationService.getDefaultFromGroup(\n            //     this.key,\n            //     this.src,\n            //     this.required,\n            //     this.readonly,\n            //     this.disabled\n            // );\n            const pepField = new PepImageField({\n                key: this.key,\n                value: this.src,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n    }\n\n    ngOnChanges(changes: any): void {\n        if (changes.src?.currentValue?.length > 0) {\n            // Empty dataURI if there is change in the src.\n            this.dataURI = null;\n        }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.elementClick) {\n        //     this.elementClick.unsubscribe();\n        // }\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    errorHandler(event: any): void {\n        event.target.src = this.fileService.getSvgAsImageSrc(\n            pepIconNoImage2.data\n        );\n        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');\n    }\n\n    onImageLoad(event: any): void {\n        event.target.style.visibility = 'visible';\n        event.target.title =\n            event.target.title.length === 0\n                ? this.translate.instant('IMAGE.CLICK_TO_ENLARGE')\n                : event.target.title;\n    }\n\n    onMenuClick(event: any): void {\n        this.elementClick.emit({\n            key: this.key,\n            value: PepImageComponent.MENU_CLICKED,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n    }\n\n    onFileChanged(value: any): void {\n        this.dataURI = value.length > 0 ? JSON.parse(value) : null;\n        this.src = this.srcLarge =\n            this.standAlone && this.dataURI ? this.dataURI.fileStr : '';\n\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            this.dataURI ? this.dataURI.fileExt : ''\n        );\n        this.valueChange.emit({\n            key: this.key,\n            value,\n            controlType: this.controlType,\n        });\n    }\n\n    objectIdIsNotEmpty(): boolean {\n        return this.uid?.length > 0 && this.uid !== '0';\n    }\n\n    onFileClicked(event: IPepFieldClickEvent): void {\n        let hasParentImage = true;\n        if (\n            // this.objectIdIsNotEmpty() &&\n            this.src &&\n            this.src.indexOf('no-image') > -1\n        ) {\n            hasParentImage = false;\n        }\n\n        this.openImageModal(hasParentImage);\n        this.elementClick.emit(event);\n    }\n\n    itemImageClick(event: any): void {\n        let hasParentImage = true;\n        const elemTarget = event.target || event.srcElement;\n        const nextElement = elemTarget.nextElementSibling || null;\n        const imageSRC = elemTarget.src || null;\n        const nextElementSRC =\n            nextElement && nextElement.src ? nextElement.src : null;\n\n        if (\n            (imageSRC && imageSRC.indexOf('no-image') > -1) ||\n            (nextElementSRC && nextElementSRC.src.indexOf('no-image') > -1)\n        ) {\n            hasParentImage = false;\n        }\n\n        this.openImageModal(hasParentImage);\n    }\n\n    openImageModal(hasParentImage: boolean): void {\n        if (this.dataURI) {\n            const fileStrArr = this.dataURI.fileStr.split(';');\n            if (fileStrArr.length === 2) {\n                const win = window.open('', '_blank');\n                const contentType = fileStrArr[0].split(':')[1];\n                const base64 = fileStrArr[1].split(',')[1];\n                const blob = this.fileService.convertFromb64toBlob(\n                    base64,\n                    contentType\n                );\n                const url = URL.createObjectURL(blob);\n                win.location.href = url;\n            }\n        } else {\n            const arr = [this.srcLarge || this.src].concat(\n                (this.options || []).map((opt) => opt.value)\n            );\n            const imagesValue = arr.join(';');\n\n            // Show image in modal.\n            const config = this.dialogService.getDialogConfig({}, 'inline');\n            config.maxWidth = '75vw';\n            config.height = '95vh';\n\n            this.dialogService.openDialog(\n                PepImagesFilmstripComponent,\n                {\n                    currIndex: 0,\n                    key: this.key,\n                    value: imagesValue,\n                    label: this.label,\n                    uid: this.uid,\n                    showThumbnails: arr.length > 1,\n                },\n                config\n            );\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/mixins';\n@import '../src/core/style/abstracts/variables';\n\n:host {\n    width: 100%;\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * {\n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.img-wrapper {\n    display: flex;\n    align-items: center;\n    height: 100%;\n    max-width: 100%;\n\n    &.left-alignment {\n        justify-content: flex-start;\n    }\n    &.center-alignment {\n        justify-content: center;\n    }\n    &.right-alignment {\n        justify-content: flex-end;\n    }\n\n    img {\n        max-width: 100%;\n        height: 100%;\n        // width: 100%;\n        object-fit: contain;\n    }\n}\n\n.pepperi-file-container, .pep-file-container {\n    height: 100%;\n\n    .img-wrapper {\n        @include calc(height, '100% - 1.5rem');\n    }\n\n    img {\n        cursor: pointer;\n    }\n}\n\n.indicators-container {\n    padding: 0 !important;\n\n    mat-icon {\n        height: 100%;\n        width: 100%;\n        padding: 0.4rem;\n\n        pep-icon {\n            height: 0.75rem !important;\n            width: 0.75rem !important;\n            margin: 0.05rem;\n        }\n    }\n}\n\n.floating-field {\n    width: 2.5rem;\n    height: 2.5rem;\n    border-radius: $border-radius-md;\n    padding: 0.5rem;\n    // margin: 0.5rem 0;\n    cursor: pointer;\n    position: absolute !important;\n}\n\n.top {\n    top: 0;\n}\n\n.bottom {\n    bottom: 0;\n}\n\n.left {\n    left: 0;\n}\n\n.right {\n    right: 0;\n}\n",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #readonlyTemplate>\n            <div class=\"img-wrapper\" [ngClass]=\"{\n                'left-alignment': xAlignment == 'left',\n                'right-alignment': xAlignment == 'right',\n                'center-alignment': xAlignment == 'center'\n            }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <ng-container *ngIf=\"disabled || readonly; then disabledTemplate; else editableTemplate\"></ng-container>\n            <ng-template #disabledTemplate>\n                <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #editableTemplate>\n                <div class=\"pep-file-container image-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <pep-files-uploader [id]=\"key\" [key]=\"key\" [layoutType]=\"layoutType\" [standAlone]=\"standAlone\"\n                        [src]=\"srcLarge || src\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n                        [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [controlType]=\"controlType\" [form]=\"form\"\n                        [acceptedExtensions]=\"acceptImagesType\" (fileChange)=\"onFileChanged($event)\"\n                        (elementClick)=\"onFileClicked($event)\" [sizeLimitMB]=\"sizeLimitMB\">\n                    </pep-files-uploader>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\"\n                [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" />\n            </div> -->\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\" [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file pep-report-img\"\n                    [ngClass]=\"['text-align-' + xAlignment]\" [alt]=\"label\" [src]=\"src\" (click)=\"itemImageClick($event)\"\n                    (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div> -->\n        </ng-container>\n    </ng-container>\n\n    <!-- Menu -->\n    <ng-container *ngIf=\"menuField\">\n        <button [id]=\"key\" (click)=\"onMenuClick($event)\" class=\"floating-field pep-button icon-button weak invert\"\n            [ngClass]=\"{\n                bottom: menuField?.Layout?.YAlignment == '2',\n                top: menuField?.Layout?.YAlignment == '1',\n                left: menuField?.Layout?.XAlignment == '1',\n                right: menuField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <pep-icon name=\"system_menu\"></pep-icon>\n            </mat-icon>\n        </button>\n    </ng-container>\n\n    <!-- Campaign -->\n    <ng-container *ngIf=\"hasCampaignField && hasCampaignField?.FormattedValue\">\n        <span [id]=\"key\" class=\"campaign floating-field\" title=\"{{ hasCampaignField?.FormattedValue }}\" [ngClass]=\"{\n                bottom: hasCampaignField?.Layout?.YAlignment == '2',\n                top: hasCampaignField?.Layout?.YAlignment == '1',\n                left: hasCampaignField?.Layout?.XAlignment == '1',\n                right: hasCampaignField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon class=\"has-active-campaign\">\n                <pep-icon name=\"system_bolt\"></pep-icon>\n            </mat-icon>\n        </span>\n    </ng-container>\n\n    <!-- Indicators -->\n    <ng-container *ngIf=\"indicatorsField && indicatorsField?.FormattedValue != ''\">\n        <span [id]=\"key\" class=\"indicators-container floating-field\" [ngClass]=\"{\n                bottom: indicatorsField?.Layout?.YAlignment == '2',\n                top: indicatorsField?.Layout?.YAlignment == '1',\n                left: indicatorsField?.Layout?.XAlignment == '1',\n                right: indicatorsField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <ng-container *ngFor=\"let value of indicatorsField?.FormattedValue?.split(';')\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\" [fill]=\"value\"></pep-icon>\n                </ng-container>\n                <ng-container *ngIf=\"indicatorsField?.FormattedValue?.split(';').length < 4\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\"></pep-icon>\n                </ng-container>\n            </mat-icon>\n        </span>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepImagesFilmstripComponent",
            "id": "component-PepImagesFilmstripComponent-550c25c05a2019716e1972c470887a52",
            "file": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: IMAGEVIEWER_CONFIG, useFactory: createViewerConfig, deps: [TranslateService],\n}"
                }
            ],
            "selector": "pep-images-filmstrip",
            "styleUrls": [
                "./images-filmstrip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./images-filmstrip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currIndex",
                    "defaultValue": "0",
                    "line": 165
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 161,
                    "type": "FormGroup"
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 154
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 155
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 164,
                    "type": "PepLayoutType"
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 157
                },
                {
                    "name": "showThumbnails",
                    "defaultValue": "false",
                    "line": 166
                },
                {
                    "name": "showTitle",
                    "defaultValue": "false",
                    "line": 163
                },
                {
                    "name": "uid",
                    "defaultValue": "'0'",
                    "line": 162
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 153
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 156,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "type": "GalleryConfig",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "controlType",
                    "defaultValue": "'images'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "dialogGalleryRef",
                    "type": "GalleryRef",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "galleryCont",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'galleryCont'"
                        }
                    ]
                },
                {
                    "name": "galleryDialogCont",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'galleryDialogCont'"
                        }
                    ]
                },
                {
                    "name": "galleryDialogTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'galleryDialogTemplate', {read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "galleryHeight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "galleryRef",
                    "type": "GalleryRef",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "galleryWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "inDialog",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "isVertical",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "items",
                    "defaultValue": "null",
                    "type": "GalleryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 181
                }
            ],
            "methodsClass": [
                {
                    "name": "afterDialogOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369
                },
                {
                    "name": "enlargeImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "indexChange",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 420,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initGalleryStyle",
                    "args": [
                        {
                            "name": "galleryContainer",
                            "type": ""
                        },
                        {
                            "name": "galleryRef",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "jsdoctags": [
                        {
                            "name": "galleryContainer",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "galleryRef",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240
                },
                {
                    "name": "onError",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setThumbnailDimension",
                    "args": [
                        {
                            "name": "galleryContainer",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "jsdoctags": [
                        {
                            "name": "galleryContainer",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ViewChild,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    Input,\n    TemplateRef,\n    Renderer2,\n    ChangeDetectorRef,\n    Inject,\n    Optional,\n    ViewContainerRef,\n} from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    transition,\n    animate,\n} from '@angular/animations';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    Gallery,\n    GalleryConfig,\n    LoadingStrategy,\n    SlidingDirection,\n    ThumbnailsPosition,\n    GalleryItem,\n    ImageItem,\n    GalleryRef,\n} from 'ng-gallery';\nimport {\n    PepCustomizationService,\n    PepLayoutType,\n    PepLayoutService,\n    PepFileService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    PepImagesField,\n} from '@pepperi-addons/ngx-lib';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { pepIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';\nimport { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';\n\nimport 'hammerjs';\n\ninterface IPepImagesFilmstripDialogData {\n    currIndex: number;\n    key: string;\n    value: string;\n    label: string;\n    uid: string;\n    showThumbnails: boolean;\n}\n\n// export const slideInAnimation = trigger('slideAnimation', [\n//     state('in', style({ transform: 'translateY(0)', opacity: 1 })),\n//     transition(':enter', [\n//         style({ transform: 'translateY(-100%)', opacity: 0 }),\n//         animate(400)\n//     ]),\n//     transition(':leave', [\n//         animate(400, style({ transform: 'translateY(-100%)', opacity: 0 }))\n//     ])\n// ]);\n\nimport {\n    IMAGEVIEWER_CONFIG,\n    ImageViewerConfig,\n    createButtonConfig,\n} from '@hallysonh/ngx-imageviewer';\n\nexport function createViewerConfig(\n    translate: TranslateService\n): ImageViewerConfig {\n    return {\n        // width: 850,\n        // height: 150,\n        bgStyle: '#FFF', // component background style\n        // scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)\n        // rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees\n        loadingMessage: translate.instant('MESSAGES.INFO_LOADING_FILE'), // 'Loading...',\n        // buttonStyle: {\n        //     iconFontFamily: 'Material Icons', // font used to render the button icons\n        //     alpha: 0.5, // buttons' transparence value\n        //     hoverAlpha: 0.7, // buttons' transparence value when mouse is over\n        //     bgStyle: '#000000', //  buttons' background style\n        //     iconStyle: '#ffffff', // buttons' icon colors\n        //     borderStyle: '#000000', // buttons' border style\n        //     borderWidth: 0, // buttons' border width (0 == disabled)\n        // },\n        // tooltips: {\n        //     enabled: true, // enable or disable tooltips for buttons\n        //     bgStyle: '#000000', // tooltip background style\n        //     bgAlpha: 0.5, // tooltip background transparence\n        //     textStyle: '#ffffff', // tooltip's text style\n        //     textAlpha: 0.9, // tooltip's text transparence\n        //     padding: 15, // tooltip padding\n        //     radius: 20, // tooltip border radius\n        // },\n        // shorter button configuration style\n        nextPageButton: createButtonConfig(\n            'navigate_next',\n            'Next page',\n            0,\n            false\n        ),\n        beforePageButton: createButtonConfig(\n            'navigate_before',\n            'Previous page',\n            1,\n            false\n        ),\n        zoomOutButton: createButtonConfig('zoom_out', 'Zoom out', 0, false),\n        zoomInButton: createButtonConfig('zoom_in', 'Zoom in', 1, false),\n        rotateLeftButton: createButtonConfig(\n            'rotate_left',\n            'Rotate left',\n            2,\n            false\n        ),\n        rotateRightButton: createButtonConfig(\n            'rotate_right',\n            'Rotate right',\n            3,\n            false\n        ),\n        resetButton: createButtonConfig('autorenew', 'Reset', 4, false),\n    };\n}\n\n@Component({\n    selector: 'pep-images-filmstrip',\n    templateUrl: './images-filmstrip.component.html',\n    styleUrls: ['./images-filmstrip.component.scss'],\n    // animations: [slideInAnimation],\n    providers: [\n        {\n            provide: IMAGEVIEWER_CONFIG,\n            // useValue: IMAGEVIEWER_CONFIG_DEFAULT,\n            useFactory: createViewerConfig,\n            deps: [TranslateService],\n        },\n    ],\n})\nexport class PepImagesFilmstripComponent\n    implements OnInit, AfterViewInit, OnDestroy {\n    // @ViewChild('ngxViewerImage') ngxViewerImage: any; // TODO: Check if we need to use this??\n    @Input() value = '';\n    @Input() key = '';\n    @Input() label = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'images';\n\n    @Input() form: FormGroup = null;\n    @Input() uid = '0';\n    @Input() showTitle = false;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() currIndex = 0;\n    @Input() showThumbnails = false;\n\n    @ViewChild('galleryCont') galleryCont: ElementRef;\n    @ViewChild('galleryDialogTemplate', { read: TemplateRef })\n    galleryDialogTemplate: TemplateRef<any>;\n    @ViewChild('galleryDialogCont') galleryDialogCont: ElementRef;\n\n    config: GalleryConfig;\n    items: GalleryItem[] = null;\n    inDialog = false;\n\n    required = false;\n    readonly = false;\n    disabled = false;\n    fieldHeight = '';\n    standAlone = false;\n\n    galleryWidth = 0;\n    galleryHeight;\n    isVertical = false;\n    galleryRef: GalleryRef;\n    dialogGalleryRef: GalleryRef;\n\n    constructor(\n        private customizationService: PepCustomizationService,\n        private dialogService: PepDialogService,\n        private layoutService: PepLayoutService,\n        private fileService: PepFileService,\n        private gallery: Gallery,\n        private renderer: Renderer2,\n        private element: ElementRef,\n        private cd: ChangeDetectorRef,\n        @Optional()\n        private dialogRef: MatDialogRef<PepImagesFilmstripComponent>,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        private data: IPepImagesFilmstripDialogData\n    ) {\n        // If data exist copy all data properties into this.\n        if (dialogRef && data) {\n            this.inDialog = true;\n\n            Object.keys(data).forEach((key) => {\n                if (key in this) {\n                    this[key] = data[key];\n                }\n            });\n        }\n\n        this.config = {\n            // nav: false, // Show navigation buttons\n            navIcon: pepIconArrowRightAlt.data,\n            // loop: true,\n            // zoomOut: 0,\n            // dots: false,\n            // dotsPosition: 'bottom',\n            // counterPosition: 'top',\n            // thumb: true,\n            counter: false, // Show counter\n            gestures: true, // Use touch events (requires hammer.js)\n            // autoPlay: false,\n            // thumbWidth: 120,\n            // thumbHeight: 90,\n            imageSize: 'contain',\n            // panSensitivity: 25,\n            // disableThumb: false,\n            // playerInterval: 3000,\n            // thumbMode: ThumbnailsMode.Free,\n            // thumbPosition: ThumbnailsPosition.Bottom,\n            loadingStrategy: LoadingStrategy.Default,\n            // slidingDirection: SlidingDirection.Horizontal,\n        };\n    }\n\n    ngOnInit(): void {\n        if (!this.inDialog) {\n            if (this.form === null) {\n                this.standAlone = true;\n                // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required,\n                //     this.readonly, this.disabled);\n                const pepField = new PepImagesField({\n                    key: this.key,\n                    value: this.value,\n                    required: this.required,\n                    readonly: this.readonly,\n                    disabled: this.disabled,\n                });\n                this.form = this.customizationService.getDefaultFromGroup(\n                    pepField\n                );\n\n                this.renderer.addClass(\n                    this.element.nativeElement,\n                    PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n                );\n            }\n            this.fieldHeight = this.customizationService.calculateFieldHeight(\n                this.layoutType,\n                this.rowSpan,\n                this.standAlone\n            );\n        }\n\n        if (this.items === null) {\n            const imgArr = this.value ? this.value.split(';') : [];\n            // add No image image when there is no images\n            if (imgArr.length === 0) {\n                const noImageSrc = this.fileService.getSvgAsImageSrc(\n                    pepIconNoImage2.data\n                );\n                imgArr.push(noImageSrc);\n            }\n\n            this.items = imgArr.map(\n                (img) => new ImageItem({ src: img, thumb: img })\n            );\n        }\n\n        this.config.dots = this.config.nav = this.items.length > 1;\n        this.config.thumb =\n            (this.key === 'ItemFilmstripImages' || this.showThumbnails) &&\n            this.items.length > 1\n                ? true\n                : false;\n        this.currIndex =\n            this.key === 'ItemFilmstripImages' &&\n            this.currIndex === 0 &&\n            this.items.length > 1\n                ? Math.floor(this.items.length / 2) - 1\n                : this.currIndex;\n    }\n\n    ngAfterViewInit(): void {\n        if (this.inDialog) {\n            this.afterDialogOpened();\n        } else {\n            this.galleryRef = this.gallery.ref(\n                `${this.key}-${this.uid}-gallery`\n            );\n            this.initGalleryStyle(this.galleryCont, this.galleryRef);\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.galleryRef) {\n            this.galleryRef.destroy();\n        }\n        if (this.dialogGalleryRef) {\n            this.dialogGalleryRef.destroy();\n        }\n        // if (this.myPinch) { this.myPinch.destroy(); }\n    }\n\n    initGalleryStyle(galleryContainer, galleryRef): void {\n        setTimeout(() => {\n            // Set thumbnails position and sliding direction\n            this.setThumbnailDimension(galleryContainer);\n            galleryRef.setConfig(this.config);\n        }, 0);\n\n        const currentIndex = this.currIndex;\n        if (currentIndex > 0) {\n            setTimeout(() => {\n                galleryRef.load(this.items);\n                galleryRef.set(currentIndex);\n            }, 0);\n            // galleryRef.set(currentIndex);\n        } else {\n            galleryRef.load(this.items);\n        }\n    }\n\n    onError(e): void {\n        const noImageSrc = this.fileService.getSvgAsImageSrc(\n            pepIconNoImage2.data\n        );\n        const noimg = new ImageItem({ src: noImageSrc, thumb: noImageSrc });\n        this.items.splice(e.itemIndex, 1, noimg);\n    }\n\n    enlargeImage(event: any): void {\n        const config = this.dialogService.getDialogConfig({}, 'inline');\n        config.maxWidth = '75vw';\n        config.height = '95vh';\n\n        const dialogRef = this.dialogService.openDialog(\n            this.galleryDialogTemplate,\n            {\n                currIndex: this.currIndex,\n            },\n            config\n        );\n\n        dialogRef.afterOpened().subscribe(() => {\n            this.afterDialogOpened();\n        });\n\n        // Update currentIndex in galleryRef\n        // dialogRef.afterClosed().subscribe(value => {\n        //     this.galleryRef.set(this.currIndex);\n        // });\n    }\n\n    afterDialogOpened(): void {\n        this.dialogGalleryRef = this.gallery.ref(\n            `${this.key}-${this.uid}-dlgGallery`\n        );\n        this.initGalleryStyle(this.galleryDialogCont, this.dialogGalleryRef);\n    }\n\n    setThumbnailDimension(galleryContainer): void {\n        this.galleryWidth = galleryContainer.nativeElement.clientWidth;\n        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32; // TODO - TALK WITH TOMER\n        this.galleryHeight = this.inDialog\n            ? galleryContainer.nativeElement.clientHeight - 32\n            : galleryContainer.nativeElement.clientHeight;\n        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32;\n        this.cd.detectChanges();\n\n        this.isVertical = this.galleryWidth < this.galleryHeight;\n        this.cd.detectChanges();\n        if (this.isVertical) {\n            let width =\n                (this.galleryWidth - (this.items.length - 1) * 16) /\n                this.items.length;\n            width = Math.min(Math.max(width, 24), 96);\n\n            this.config.thumbHeight = width;\n            this.config.thumbWidth = width + 16;\n        } else {\n            let height =\n                (this.galleryHeight - (this.items.length - 1) * 16) /\n                this.items.length;\n            height = Math.min(Math.max(height, 24), 96);\n\n            this.config.thumbHeight = height + 16;\n            this.config.thumbWidth = height;\n        }\n\n        this.config.thumbPosition = this.isVertical\n            ? ThumbnailsPosition.Bottom\n            : this.layoutService.isRtl()\n            ? ThumbnailsPosition.Right\n            : ThumbnailsPosition.Left;\n        this.config.slidingDirection =\n            this.key !== 'ItemFilmstripImages'\n                ? SlidingDirection.Horizontal\n                : this.isVertical\n                ? SlidingDirection.Horizontal\n                : SlidingDirection.Vertical;\n\n        this.config.imageSize = 'contain';\n    }\n\n    indexChange(item: any): void {\n        this.currIndex = item.currIndex;\n        // if (this.ngxViewerImage && this.ngxViewerImage.scale) {\n        //     this.ngxViewerImage.scale = 1;\n        //     this.updateStyle();\n        // }\n    }\n\n    // scrollFunction(e: any): boolean {\n    //     e.deltaY > 0 ? this.zoomOut() : this.zoomIn();\n    //     return false;\n    // }\n\n    // zoomIn(): void {\n    //     if (this.ngxViewerImage.scale < 2) {\n    //         this.ngxViewerImage.scale *= (1 + this.ngxViewerImage.config.zoomFactor);\n    //     } else {\n    //         this.ngxViewerImage.scale = 2;\n    //     }\n    //     this.updateStyle();\n    // }\n\n    // zoomOut(): void {\n    //     if (this.ngxViewerImage.scale > this.ngxViewerImage.config.zoomFactor) {\n    //         this.ngxViewerImage.scale /= (1 + this.ngxViewerImage.config.zoomFactor);\n    //     }\n    //     this.updateStyle();\n    // }\n\n    // private updateStyle(): void {\n    //     this.ngxViewerImage.style.transform = `translate(${this.ngxViewerImage.translateX}px,\n    //         ${this.ngxViewerImage.translateY}px) rotate(${this.ngxViewerImage.rotation}deg) scale(${this.ngxViewerImage.scale})`;\n\n    //     this.cd.detectChanges();\n    // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    width: 100%;\n    height: inherit;\n    display: block;\n    // align-items: center;\n}\n:host > * {\n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.gallery-dialog {\n    // display: grid;\n    // grid-template-rows: $dialog-header-height auto;\n    height: inherit;\n}\n\n.images-filmstrip-container {\n    height: 100%;\n\n    .img-wrapper {\n        height: 100%;\n        // @include calc(height, '100% - 1.5rem');\n    }\n}\n\ngallery {\n   // Don't remove the direction - the gallery don't work on RTL cultures\n    direction: ltr;\n    height: 100%;\n    min-height: 100%;\n\n}\n\n.gallery-dialog-content {\n    // min-height: 80vh;\n    // max-height: 100% !important;\n    // height: 100% !important;\n    // padding-bottom: 0 !important;\n\n    gallery {\n        // @include calc(min-height, '100% - 50px' );\n        min-width:  65vw;\n        // height: 427px;\n    }\n\n    ::ng-deep gallery-item {\n        gallery-image {\n            .g-image-item {\n                background-size: content !important;\n                // background-image: unset !important;\n            }\n        }\n\n        .g-item-template {\n            ngx-imageviewer {\n                canvas{\n                    max-width: 100% !important;\n                    max-height: 100% !important;\n                }\n            }\n\n        }\n    }\n}\n\n::ng-deep gallery-thumbs {\n    margin: 0 $spacing-lg 0 $spacing-sm;\n\n    gallery-thumb {\n        padding: 0 !important;\n        border-radius: $border-radius-md;\n        margin: $spacing-sm 0;\n\n        .g-image-item {\n            background-size: cover !important;\n        }\n    }\n}\n\n::ng-deep gallery-item {\n    gallery-image {\n        .g-image-item {\n            border-radius: $border-radius-lg;\n        }\n    }\n\n    &:hover{\n        cursor: pointer;\n    }\n}\n\n::ng-deep gallery-dots {\n    position: absolute !important;\n    border-radius: $border-radius-md;\n\n    &.pepperi-button, &.pep-button {\n        display: flex !important;\n    }\n}\n\n::ng-deep .img-container {\n    display: flex;\n    align-items: center;\n}\n\n::ng-deep .g-nav-prev,\n::ng-deep .g-nav-next {\n    width: 2rem !important;\n    height: 2rem !important;\n    padding: 0.25rem;\n    border-radius: $border-radius-md;\n\n    .mat-icon {\n        display: inline-block !important;\n    }\n}\n\n::ng-deep .g-nav-prev {\n    -webkit-transform: translateY(-50%) perspective(1px) scale(-1,1) !important;\n    transform: translateY(-50%) perspective(1px) scale(-1,1) !important;\n}\n\n.vertical-gallery {\n    ::ng-deep gallery-thumbs {\n        margin: $spacing-lg 0 $spacing-sm 0; /* todo set on horizental mode */\n\n        gallery-thumb {\n            margin: 0 $spacing-sm;\n        }\n    }\n}\n",
                    "styleUrl": "./images-filmstrip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "gallery",
                        "type": "Gallery"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PepImagesFilmstripComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IPepImagesFilmstripDialogData"
                    }
                ],
                "line": 187,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gallery",
                        "type": "Gallery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<PepImagesFilmstripComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IPepImagesFilmstripDialogData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"inDialog; then galleryDialogTemplate; else regularTemplate\"></ng-container>\n<ng-template #regularTemplate>\n    <ng-container [formGroup]=\"form\">\n        <div class=\"images-filmstrip-container\">\n            <pep-field-title [label]=\"label\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <div #galleryCont class=\"img-wrapper\" [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\"\n                [style.height]=\"fieldHeight\">\n                <gallery id=\"{{key}}-{{uid}}-gallery\" (itemClick)=\"enlargeImage($event);\" [imageSize]=\"'contain'\"\n                    (indexChange)=\"indexChange($event)\" (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </div>\n    </ng-container>\n</ng-template>\n\n<ng-template #galleryDialogTemplate>\n    <div class=\"gallery-dialog\">\n        <pep-dialog [title]=\"label\" [showFooter]=\"false\">\n            <div pep-dialog-content #galleryDialogCont class=\"gallery-dialog-content\"\n                [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\">\n                <gallery id=\"{{key}}-{{uid}}-dlgGallery\" [imageSize]=\"'contain'\" (indexChange)=\"indexChange($event)\"\n                    (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </pep-dialog>\n    </div>\n</ng-template>\n\n<!-- Add custom template to image items -->\n<ng-template #itemTemplate let-index=\"index\" let-type=\"type\" let-data=\"data\" let-currIndex=\"currIndex\">\n    <ng-container *ngIf=\"index === currIndex\">\n        <ngx-imageviewer [src]=\"data.src\">\n        </ngx-imageviewer>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "PepIndicatorsComponent",
            "id": "component-PepIndicatorsComponent-0a3936dd564d3446546f3a02fbab60a7",
            "file": "projects/ngx-lib/form/indicators.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-indicators",
            "styleUrls": [
                "./indicators.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./indicators.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "key",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'table'",
                    "line": 16,
                    "type": "PepLayoutType"
                },
                {
                    "name": "value",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'indicators'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { PepLayoutType } from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-indicators',\n    templateUrl: './indicators.component.html',\n    styleUrls: ['./indicators.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepIndicatorsComponent {\n    @Input() key: string;\n    @Input() value: string;\n\n    controlType = 'indicators';\n\n    @Input() layoutType: PepLayoutType = 'table';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.indicators-container {\n    height: 2.5rem;\n    \n    pep-icon {\n        height: 1rem;\n        width: 1rem;\n        margin: 0.05rem;\n    }\n\n    &.is-inside-table {\n        height: 1rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n}\n",
                    "styleUrl": "./indicators.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"indicators-container\" [ngClass]=\"{ 'is-inside-table': layoutType === 'table' }\">\n    <ng-container *ngFor=\"let value of value?.split(';')\">\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\" [fill]=\"value\"></pep-icon>\n    </ng-container>\n    <ng-container *ngIf=\"key != 'ItemIndicatorsWithoutCampaign' && value?.split(';').length < 4\">\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\"></pep-icon>\n    </ng-container>\n</div>"
        },
        {
            "name": "PepInternalButtonComponent",
            "id": "component-PepInternalButtonComponent-99aff6a67a899931b27b5cd1959c8054",
            "file": "projects/ngx-lib/form/internal-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-internal-button",
            "styleUrls": [
                "./internal-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./internal-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 45
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 52,
                    "type": "FormGroup"
                },
                {
                    "name": "formattedValue",
                    "defaultValue": "''",
                    "line": 40
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 38
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 41
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 54,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 46
                },
                {
                    "name": "referenceObjectInternalType",
                    "line": 42,
                    "type": "any"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 44
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 48
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 53
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "line": 43,
                    "type": "PepInternalButtonFieldType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 39
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 47,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 57,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 59,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'button'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "createNewReference",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "referenceButtons",
                    "defaultValue": "[\n        {\n            key: 'action',\n            callback: (action: IPepButtonClickEvent) =>\n                this.onButtonClicked(action.event),\n        },\n        {\n            key: 'delete',\n            callback: (action: IPepButtonClickEvent) => this.remove(),\n            class: 'caution',\n            icon: pepIconSystemBin.name,\n        },\n    ]",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "hrefFunction",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "onButtonClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openReferenceObjectInternal",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    Renderer2,\n    ElementRef,\n    OnDestroy,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepInternalButtonFieldType,\n    PepInternalButtonField,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepButton,\n    IPepButtonClickEvent,\n} from '@pepperi-addons/ngx-lib/button';\nimport { pepIconSystemBin } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-internal-button',\n    templateUrl: './internal-button.component.html',\n    styleUrls: ['./internal-button.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepInternalButtonComponent\n    implements OnInit, OnChanges, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() formattedValue = '';\n    @Input() label = '';\n    @Input() referenceObjectInternalType: any;\n    @Input() type: PepInternalButtonFieldType = 'button';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'button';\n\n    @Input() form: FormGroup = null;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    standAlone = false;\n    createNewReference = false;\n    referenceButtons: Array<PepButton> = [\n        {\n            key: 'action',\n            callback: (action: IPepButtonClickEvent) =>\n                this.onButtonClicked(action.event),\n        },\n        {\n            key: 'delete',\n            callback: (action: IPepButtonClickEvent) => this.remove(),\n            class: 'caution',\n            icon: pepIconSystemBin.name,\n        },\n    ];\n\n    constructor(\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled);\n            const pepField = new PepInternalButtonField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.formattedValue = this.formattedValue || this.value;\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n    }\n\n    ngOnChanges(changes: any): void {\n        if (this.type === 'reference') {\n            this.createNewReference = this.value.length === 0;\n            this.referenceButtons[0].value = this.formattedValue;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.elementClick) {\n            this.elementClick.unsubscribe();\n        }\n    }\n\n    // groupButtonClicked(action: IPepButtonClickEvent): void {\n    //     if (action.source.key === 'action') {\n    //         this.onButtonClicked(action.event);\n    //     } else if (action.source.key === 'delete') {\n    //         this.remove();\n    //     }\n    // }\n\n    onButtonClicked(event): void {\n        if (this.type === 'reference') {\n            const valueArr = this.value.split('/');\n\n            this.elementClick.emit({\n                key: this.key,\n                value: valueArr[valueArr.length - 1], // .replace(/[^a-zA-Z0-9 ]/g, ''),\n                controlType: this.controlType,\n                eventWhich: event.which,\n                otherData: this.referenceObjectInternalType,\n            });\n        } else if (this.type === 'button' && true) {\n            this.elementClick.emit({\n                key: this.key,\n                value: this.value, // should contain the program name\n                controlType: this.controlType,\n                eventWhich: event.which,\n            });\n        } else {\n            this.elementClick.emit({\n                key: this.key,\n                controlType: this.controlType,\n                eventWhich: event.which,\n            });\n        }\n    }\n\n    hrefFunction(event): void {\n        if (event.which === 1 /*|| event.which === 2*/) {\n            this.onButtonClicked(event);\n        }\n    }\n\n    openReferenceObjectInternal(event): void {\n        this.elementClick.emit({\n            key: this.key,\n            value: this.value,\n            controlType: this.controlType,\n            eventWhich: event.which,\n            otherData: this.referenceObjectInternalType,\n        });\n    }\n\n    remove(): void {\n        this.value = '';\n        this.valueChange.emit({ key: this.key, value: this.value });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n\n:host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * {\n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.pepperi-button-container, .pep-button-container {\n    //display: grid;\n    height: fit-content;\n    // margin-bottom: 1rem;\n\n    .center-alignment {\n        position: absolute;\n        left: 50%;\n        transform: translate(-50%, 0);\n    }\n\n    &.reference-button {\n        ::ng-deep.split-buttons,\n        .split-buttons {\n            float: left;\n\n            button:last-of-type {\n                width: 1.5rem;\n                padding: 0;\n            }\n        }\n\n        .pepperi-button, .pep-button,\n        ::ng-deep .pepperi-button, ::ng-deep .pep-button {\n            .mat-button-wrapper {\n                display: grid !important;\n                grid-auto-flow: column;\n                grid-template-rows: auto;\n            }\n\n            mat-icon {\n                margin-left: $spacing-md;\n\n                &.rtl {\n                    margin-left: unset;\n                    margin-right: $spacing-md;\n                }\n            }\n\n            &.last-button {\n                mat-icon {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./internal-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-container [ngSwitch]=\"type\">\n    <ng-container *ngSwitchCase=\"'reference'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <div class=\"pep-button-container reference-button\">\n                <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngIf=\"createNewReference; then newBlock; else existingBlock\"></ng-container>\n                <ng-template #newBlock>\n                    <button mat-button [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-button md regular\"\n                        (click)=\"onButtonClicked($event)\" [ngClass]=\"{\n                            disabled: disabled,\n                            'pull-left': xAlignment == 'left',\n                            'pull-right': xAlignment == 'right',\n                            'center-alignment': xAlignment == 'center'\n                        }\">\n                        <span class=\"ellipsis pull-left flip button-title-with-icon\">{{ 'ACTIONS.CREATE_NEW' | translate\n                            }}</span>\n                        <mat-icon class=\"pull-right flip\" pepRtlClass>\n                            <pep-icon name=\"number_plus\" (click)=\"onButtonClicked($event)\">\n                            </pep-icon>\n                        </mat-icon>\n                    </button>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <pep-group-buttons [buttons]=\"referenceButtons\" [buttonsClass]=\"'md regular'\"\n                        [buttonsDisabled]=\"false\" [viewType]=\"'split'\">\n                    </pep-group-buttons>\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'listofobjects'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'button'\">\n        <ng-container [ngSwitch]=\"key\">\n            <ng-container *ngSwitchCase=\"'ObjectMenu'\">\n                <span (click)=\"onButtonClicked($event)\" title=\"{{ key }}\">\n                    <mat-icon>\n                        <pep-icon *ngIf=\"key == 'ObjectMenu'\" name=\"system_menu\">\n                        </pep-icon>\n                    </mat-icon>\n                </span>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"'Agents' || 'ContactPersons' || 'Buyers'\">\n                <ng-container *ngIf=\"layoutType === 'table'; then tableBlock; else nonTableBlock\">\n                </ng-container>\n                <ng-template #nonTableBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n                </ng-template>\n                <ng-template #tableBlock>\n                    <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-report-input readonly body-sm\">{{\n                        formattedValue }}</span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"layoutType === 'form'; then buttonBlock; else linkBlock\">\n                </ng-container>\n\n                <ng-template #buttonBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: false}\"></ng-container>\n                </ng-template>\n                <ng-template #linkBlock>\n                    <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-container>\n\n<ng-template #buttonTemplate let-internal=\"internal\">\n    <div class=\"pep-button-container\">\n        <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n\n        <ng-container *ngIf=\"internal; then internalButtonTemplate; else regularButtonTemplate\"></ng-container>\n        <ng-template #regularButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"onButtonClicked($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                {{ formattedValue }}\n            </button>\n        </ng-template>\n\n        <ng-template #internalButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"openReferenceObjectInternal($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                <ng-container *ngIf=\"formattedValue == '0' || formattedValue == ''; then newBlock; else existingBlock\">\n                </ng-container>\n                <ng-template #newBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ 'LIST.SELECT' | translate }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"number_plus\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ formattedValue }}&nbsp;{{ 'LIST.SELECTED' |\n                        translate\n                        }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n            </button>\n        </ng-template>\n    </div>\n</ng-template>\n\n<ng-template #linkTemplate>\n    <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <a href=\"{{ value }}\" (mousedown)=\"hrefFunction($event)\" class=\"color-link\">\n            <span *ngIf=\"layoutType === 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\"\n                class=\"body-sm pep-report-input readonly\">\n                {{ formattedValue }}\n            </span>\n            <span *ngIf=\"layoutType !== 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm pep-card-input\"\n                style=\"display: block;\">\n                {{ formattedValue }}\n            </span>\n        </a>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>"
        },
        {
            "name": "PepInternalListComponent",
            "id": "component-PepInternalListComponent-d67b54dc828295bb8a0221734b9ef2f7",
            "file": "projects/ngx-lib/form/internal-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-internal-list",
            "styleUrls": [
                "./internal-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./internal-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentListTypeTranslation",
                    "defaultValue": "''",
                    "line": 39
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 52
                },
                {
                    "name": "disableEvents",
                    "defaultValue": "false",
                    "line": 53
                },
                {
                    "name": "disableSelectionItems",
                    "defaultValue": "false",
                    "line": 54
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "line": 49
                },
                {
                    "name": "hideAllSelectionInMulti",
                    "defaultValue": "false",
                    "line": 41
                },
                {
                    "name": "layoutType",
                    "defaultValue": "null",
                    "line": 55,
                    "type": "PepLayoutType"
                },
                {
                    "name": "listType",
                    "defaultValue": "''",
                    "line": 44
                },
                {
                    "name": "noDataFoundMsg",
                    "defaultValue": "'Items not found'",
                    "line": 40
                },
                {
                    "name": "objectId",
                    "defaultValue": "'0'",
                    "line": 45
                },
                {
                    "name": "pageType",
                    "defaultValue": "''",
                    "line": 56
                },
                {
                    "name": "parentId",
                    "defaultValue": "'0'",
                    "line": 46
                },
                {
                    "name": "parentScroll",
                    "defaultValue": "null",
                    "line": 51,
                    "type": "Element | Window"
                },
                {
                    "name": "searchCode",
                    "defaultValue": "'0'",
                    "line": 47
                },
                {
                    "name": "supportResizing",
                    "defaultValue": "true",
                    "line": 50
                },
                {
                    "name": "top",
                    "defaultValue": "-1",
                    "line": 43
                },
                {
                    "name": "totalsRow",
                    "defaultValue": "[]",
                    "line": 57
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "line": 62,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "line": 64,
                    "type": "EventEmitter<IPepFormFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_items",
                    "defaultValue": "null",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "calculatedObjectHeight",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "checkForChanges",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "containerWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deviceHasMouse",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "hasColumnWidthOfTypePercentage",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hoveredItemId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "isTable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isUserSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "itemClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "itemsCounter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "lockEvents",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nativeWindow",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "noVirtualScrollCont",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'noVirtualScrollCont'"
                        }
                    ]
                },
                {
                    "name": "pressedColumn",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "scrollItems",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "selectAllCB",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectAllCB'"
                        }
                    ]
                },
                {
                    "name": "selectedItemId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "SEPARATOR",
                    "defaultValue": "','",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showItems",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "startWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "startX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "tableHeader",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableHeader'"
                        }
                    ]
                },
                {
                    "name": "tableStartWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "totalRows",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uiControl",
                    "defaultValue": "null",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "useVirtualScroll",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "viewType",
                    "type": "PepListViewType",
                    "optional": false,
                    "description": "",
                    "line": 84
                }
            ],
            "methodsClass": [
                {
                    "name": "calcColumnsWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cleanItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 589
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175
                },
                {
                    "name": "getIsDisabled",
                    "args": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 484,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsItemEditable",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 650,
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsItemSelected",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 494,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemDataByID",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRow",
                    "typeParameters": [],
                    "line": 659,
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParent",
                    "args": [
                        {
                            "name": "el",
                            "type": ""
                        },
                        {
                            "name": "parentSelector",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 392,
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentSelector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParentContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "Element | Window",
                    "typeParameters": [],
                    "line": 462
                },
                {
                    "name": "getThumbnailsLayout",
                    "args": [],
                    "optional": false,
                    "returnType": "PepLayoutType",
                    "typeParameters": [],
                    "line": 575
                },
                {
                    "name": "getUIControl",
                    "args": [],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 597
                },
                {
                    "name": "getUniqItemId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initListData",
                    "args": [
                        {
                            "name": "uiControl",
                            "type": "UIControl"
                        },
                        {
                            "name": "totalRows",
                            "type": "number"
                        },
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        },
                        {
                            "name": "viewType",
                            "type": "PepListViewType",
                            "defaultValue": "'table'"
                        },
                        {
                            "name": "itemClass",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 601,
                    "jsdoctags": [
                        {
                            "name": "uiControl",
                            "type": "UIControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalRows",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewType",
                            "type": "PepListViewType",
                            "defaultValue": "'table'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemClass",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initResizeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "itemClicked",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "onCardMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 562,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCardMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 571,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "customizeFieldClickedData",
                            "type": "IPepFormFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 474,
                    "jsdoctags": [
                        {
                            "name": "customizeFieldClickedData",
                            "type": "IPepFormFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 440,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListHeaderMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 430,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListHeaderMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 434,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListResize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListResizeEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 415,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListResizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "columnKey",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnKey",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTableRowMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 549,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTableRowMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 558,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "valueChange",
                            "type": "IPepFormFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "jsdoctags": [
                        {
                            "name": "valueChange",
                            "type": "IPepFormFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setContainerWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "setItemClicked",
                    "args": [
                        {
                            "name": "itemId",
                            "type": ""
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 503,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLayout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193
                },
                {
                    "name": "toggleItems",
                    "args": [
                        {
                            "name": "isVisible",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "isVisible",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFunc",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 585,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 632,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 627,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScrollItems",
                    "args": [
                        {
                            "name": "startIndex",
                            "type": ""
                        },
                        {
                            "name": "endIndex",
                            "type": ""
                        },
                        {
                            "name": "loadInChunks",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "startIndex",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endIndex",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadInChunks",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "winResize",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 580,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnInit,\n    Renderer2,\n    ViewChild,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    OnChanges,\n} from '@angular/core';\nimport { delay } from 'rxjs/operators';\nimport {\n    PepLayoutType,\n    PepLayoutService,\n    UIControl,\n    UIControlField,\n    FIELD_TYPE,\n    ObjectsDataRow,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    IPepFormFieldClickEvent,\n    IPepFormFieldValueChangeEvent,\n} from './form.component';\n\nexport type PepListViewType = 'cards' | 'lines' | 'table';\n\n@Component({\n    selector: 'pep-internal-list',\n    templateUrl: './internal-list.component.html',\n    styleUrls: ['./internal-list.component.scss'],\n    host: {\n        '(window:resize)': 'winResize($event)',\n    },\n})\nexport class PepInternalListComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() currentListTypeTranslation = '';\n    @Input() noDataFoundMsg = 'Items not found';\n    @Input() hideAllSelectionInMulti = false;\n\n    @Input() top = -1;\n    @Input() listType = '';\n    @Input() objectId = '0';\n    @Input() parentId = '0';\n    @Input() searchCode = '0';\n    // @Input() showTopBorder = false;\n    @Input() firstFieldAsLink = false;\n    @Input() supportResizing = true;\n    @Input() parentScroll: Element | Window = null;\n    @Input() disabled = false;\n    @Input() disableEvents = false;\n    @Input() disableSelectionItems = false;\n    @Input() layoutType: PepLayoutType = null;\n    @Input() pageType = '';\n    @Input() totalsRow = [];\n\n    // @Output()\n    // itemClick: EventEmitter<IPepListItemClickEvent> = new EventEmitter<IPepListItemClickEvent>();\n    @Output()\n    fieldClick: EventEmitter<any> = new EventEmitter<IPepFormFieldClickEvent>();\n    @Output()\n    valueChange: EventEmitter<IPepFormFieldValueChangeEvent> = new EventEmitter<IPepFormFieldValueChangeEvent>();\n\n    @ViewChild('noVirtualScrollCont') noVirtualScrollCont: ElementRef;\n    @ViewChild('tableHeader') tableHeader: ElementRef;\n    @ViewChild('selectAllCB') selectAllCB: any;\n\n    public uiControl: UIControl = null;\n    public totalRows = -1;\n    itemClass: string;\n    isTable = false;\n    private hasColumnWidthOfTypePercentage = true;\n\n    private _items: Array<ObjectsDataRow> = null;\n    get items(): Array<ObjectsDataRow> {\n        return this._items;\n    }\n\n    // isCardView = false;\n    private itemsCounter = 0;\n    showItems = true;\n    viewType: PepListViewType;\n    scrollItems: Array<ObjectsDataRow>;\n\n    public SEPARATOR = ',';\n\n    nativeWindow: any = null;\n\n    selectedItemId = '';\n    hoveredItemId = '';\n\n    private lockEvents = false;\n    private containerWidth = 0;\n\n    deviceHasMouse = false;\n\n    // headerIsInFocus = false;\n\n    // For resize\n    pressedColumn = '';\n    startX = 0;\n    startWidth = 0;\n    tableStartWidth = 0;\n\n    isUserSelected = false;\n    checkForChanges: any = null;\n    useVirtualScroll = true;\n    calculatedObjectHeight: string;\n\n    constructor(\n        private element: ElementRef,\n        private layoutService: PepLayoutService,\n        private cd: ChangeDetectorRef,\n        private renderer: Renderer2\n    ) {\n        this.nativeWindow = window;\n        this.deviceHasMouse = this.layoutService.getDeviceHasMouse();\n        this.layoutService.onMouseOver$.subscribe((deviceHasMouse) => {\n            this.deviceHasMouse = deviceHasMouse;\n        });\n    }\n\n    ngOnInit(): void {\n        this.containerWidth = 0;\n    }\n\n    ngOnChanges(changes): void {\n        if (this.containerWidth <= 0) {\n            this.setContainerWidth();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.itemClick) {\n        //     this.itemClick.unsubscribe();\n        // }\n        // if (this.fieldClick) {\n        //     this.fieldClick.unsubscribe();\n        // }\n    }\n\n    setContainerWidth(): void {\n        const selectionCheckBoxWidth = 0;\n\n        const rowHeight = 40; // the table row height (2.5rem * 16font-size).\n        const style = window.getComputedStyle(\n            this.element.nativeElement.parentElement\n        );\n        // The container-fluid class padding left + right + border\n        const containerFluidSpacing =\n            parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n\n        const parentContainer =\n            this.element.nativeElement.parentElement.parentElement > 0\n                ? this.element.nativeElement.parentElement.parentElement\n                : this.element.nativeElement.parentElement;\n\n        // Calculate if vertical scroll should appear, if so set the scroll width. (this.totalRows + 1) + 1 is for the header row.\n        const scrollWidth =\n            parentContainer.clientHeight < rowHeight * (this.totalRows + 1)\n                ? 18\n                : 0; // 18 is the default scroll width.\n\n        // The selectionCheckBoxWidth width + containerFluidSpacing + scrollWidth.\n        const rowHeaderWidthToSub =\n            containerFluidSpacing + selectionCheckBoxWidth + scrollWidth;\n        this.containerWidth = parentContainer.offsetWidth - rowHeaderWidthToSub;\n    }\n\n    clear(): void {\n        this.cleanItems();\n        this.uiControl = null;\n    }\n\n    private toggleItems(isVisible: boolean): void {\n        this.showItems = isVisible;\n        this.lockEvents = !isVisible;\n    }\n\n    private updateScrollItems(startIndex, endIndex, loadInChunks = true): void {\n        this.scrollItems = this.items.slice(startIndex, endIndex);\n    }\n\n    getUniqItemId(itemId: string, itemType = ''): string {\n        return itemId + this.SEPARATOR + itemType;\n    }\n\n    setLayout(): void {\n        if (\n            this.totalRows === 0 ||\n            !this.uiControl ||\n            !this.uiControl.ControlFields ||\n            this.uiControl.ControlFields.length === 0\n        ) {\n            return;\n        }\n\n        this.uiControl.ControlFields.forEach((cf) => {\n            if (cf.ColumnWidth === 0) {\n                cf.ColumnWidth = 10;\n            }\n\n            if (\n                this.isTable &&\n                (cf.FieldType === FIELD_TYPE.Image ||\n                    // cf.FieldType === FIELD_TYPE.Indicators || ???\n                    cf.FieldType === FIELD_TYPE.Signature ||\n                    cf.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\n                    cf.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                    cf.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                    cf.FieldType === FIELD_TYPE.NumberRealForMatrix ||\n                    cf.FieldType === FIELD_TYPE.Package ||\n                    cf.ApiName === 'UnitsQuantity' ||\n                    cf.ApiName === 'QuantitySelector')\n            ) {\n                cf.Layout.XAlignment = 3;\n            }\n        });\n\n        if (!this.cd['destroyed']) {\n            this.cd.detectChanges();\n        }\n\n        // Set the columns width.\n        if (this.containerWidth <= 0) {\n            this.setContainerWidth();\n        }\n\n        this.calcColumnsWidth();\n        this.checkForChanges = new Date().getTime();\n    }\n\n    private calcColumnsWidth(): void {\n        const fixedMultiple = 3.78; // for converting em to pixel.\n        const length = this.uiControl.ControlFields.length;\n        const selectionCheckBoxWidth = 0;\n\n        // Is table AND there is at least one column of width type of percentage.\n        if (this.isTable) {\n            if (this.uiControl && this.uiControl.ControlFields) {\n                this.hasColumnWidthOfTypePercentage =\n                    this.uiControl.ControlFields.filter(\n                        (cf) => cf.ColumnWidthType === 1\n                    ).length === 0;\n            }\n        }\n\n        // If the columns size is fixed and the total is small then the container change it to percentage.\n        if (!this.hasColumnWidthOfTypePercentage) {\n            const totalFixedColsWidth = this.uiControl.ControlFields.map(\n                (cf) => cf.ColumnWidth * fixedMultiple\n            ).reduce((sum, current) => sum + current);\n\n            if (window.innerWidth > totalFixedColsWidth) {\n                this.hasColumnWidthOfTypePercentage = true;\n            }\n        }\n\n        let totalCalcColsWidth = 0;\n\n        // Calc by percentage\n        if (this.hasColumnWidthOfTypePercentage) {\n            const totalColsWidth: number = this.uiControl.ControlFields.map(\n                (cf) => cf.ColumnWidth\n            ).reduce((sum, current) => sum + current);\n\n            for (let index = 0; index < length; index++) {\n                const uiControlField: UIControlField = this.uiControl\n                    .ControlFields[index];\n                const calcColumnWidthPercentage =\n                    (100 / totalColsWidth) * uiControlField.ColumnWidth;\n\n                uiControlField.calcColumnWidth = Math.floor(\n                    (this.containerWidth * calcColumnWidthPercentage) / 100\n                );\n\n                if (index === length - 1) {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\n                } else {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        uiControlField.calcColumnWidth + 'px';\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\n                }\n            }\n\n            this.renderer.setStyle(\n                this.element.nativeElement,\n                'width',\n                'inherit'\n            );\n        } else {\n            for (let index = 0; index < length; index++) {\n                const uiControlField: UIControlField = this.uiControl\n                    .ControlFields[index];\n                const currentFixedWidth = Math.floor(\n                    uiControlField.ColumnWidth * fixedMultiple\n                );\n\n                if (index === length - 1) {\n                    uiControlField.calcTitleColumnWidthString =\n                        currentFixedWidth + 'px';\n                    uiControlField.calcColumnWidthString =\n                        currentFixedWidth - 4 + 'px'; // -4 for the row padding.\n                } else {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        currentFixedWidth + 'px';\n                }\n\n                totalCalcColsWidth += currentFixedWidth;\n            }\n\n            this.renderer.setStyle(\n                this.element.nativeElement,\n                'width',\n                totalCalcColsWidth + selectionCheckBoxWidth + 'px'\n            );\n        }\n    }\n\n    private initResizeData(): void {\n        this.startX = 0;\n        this.startWidth = 0;\n        this.tableStartWidth = 0;\n        this.pressedColumn = '';\n    }\n\n    onListResizeStart(event, columnKey): void {\n        this.pressedColumn = columnKey;\n        this.startX = event.x;\n        this.startWidth = event.target.closest('.header-column').offsetWidth;\n        // Set the tableStartWidth to the container offsetWidth\n        this.tableStartWidth = this.noVirtualScrollCont.nativeElement.offsetWidth;\n    }\n\n    onListResize(event): void {\n        if (this.pressedColumn.length > 0) {\n            const widthToAdd = this.layoutService.isRtl()\n                ? this.startX - event.x\n                : event.x - this.startX;\n\n            // Set the width of the column and the container of the whole columns.\n            if (this.startWidth + widthToAdd >= 48 || widthToAdd > 0) {\n                const length = this.uiControl.ControlFields.length;\n                let totalCalcColsWidth = 0;\n\n                for (let index = 0; index < length; index++) {\n                    const uiControlField: UIControlField = this.uiControl\n                        .ControlFields[index];\n\n                    if (index === length - 1) {\n                        // Calc the last column only in percentage type.\n                        if (this.hasColumnWidthOfTypePercentage) {\n                            uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                                'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\n                        } else {\n                            if (uiControlField.ApiName === this.pressedColumn) {\n                                uiControlField.calcColumnWidth =\n                                    this.startWidth + widthToAdd;\n                                uiControlField.calcTitleColumnWidthString =\n                                    uiControlField.calcColumnWidth + 'px';\n                                uiControlField.calcColumnWidthString =\n                                    uiControlField.calcColumnWidth - 4 + 'px';\n                            }\n                        }\n                    } else if (uiControlField.ApiName === this.pressedColumn) {\n                        uiControlField.calcColumnWidth =\n                            this.startWidth + widthToAdd;\n                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                            uiControlField.calcColumnWidth + 'px';\n                    }\n\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\n                }\n\n                this.renderer.setStyle(\n                    this.element.nativeElement,\n                    'width',\n                    this.tableStartWidth + widthToAdd + 'px'\n                );\n            }\n\n            this.checkForChanges = new Date().getTime();\n        }\n    }\n\n    getParent(el, parentSelector): any {\n        // If no parentSelector defined will bubble up all the way to *document*\n        if (parentSelector === undefined) {\n            parentSelector = document;\n        }\n        const parent = [];\n        let p = el.parentNode;\n\n        while (\n            p &&\n            p.className !== '' &&\n            p.className.indexOf(parentSelector) === -1 &&\n            parentSelector !== document\n        ) {\n            const o = p;\n            p = o.parentNode;\n        }\n        if (p.className.indexOf(parentSelector) > -1) {\n            parent.push(p); // Push that parentSelector you wanted to stop at\n        }\n        return parent;\n    }\n\n    onListResizeEnd(event): void {\n        if (this.pressedColumn.length > 0) {\n            if (\n                event &&\n                this.getParent(event.srcElement, 'resize-box').length > 0\n            ) {\n                this.initResizeData();\n            } else {\n                setTimeout(() => {\n                    this.initResizeData();\n                }, 0);\n            }\n        }\n    }\n\n    onListHeaderMouseEnter(event): void {\n        // this.headerIsInFocus = true;\n    }\n\n    onListHeaderMouseLeave(event): void {\n        // this.headerIsInFocus = false;\n        this.onListResizeEnd(event);\n        this.initResizeData();\n    }\n\n    onListChange(event: any): void {\n        if (this.disableEvents) {\n            return;\n        }\n\n        // For other events do nothing.\n        if (\n            typeof event.start === 'undefined' ||\n            typeof event.end === 'undefined'\n        ) {\n            return;\n        }\n\n        this.calculatedObjectHeight = event.calculatedChildHeight + 'px';\n\n        if (!this.lockEvents) {\n            this.toggleItems(false);\n            this.updateScrollItems(event.start, event.end, false);\n            this.toggleItems(true);\n        }\n    }\n\n    getParentContainer(): Element | Window {\n        return this.parentScroll ? this.parentScroll : window;\n    }\n\n    onValueChanged(valueChange: IPepFormFieldValueChangeEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.valueChange.emit(valueChange);\n    }\n\n    onCustomizeFieldClick(\n        customizeFieldClickedData: IPepFormFieldClickEvent\n    ): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.fieldClick.emit(customizeFieldClickedData);\n    }\n\n    getIsDisabled(item: ObjectsDataRow): boolean {\n        if (this.disableSelectionItems) {\n            return true;\n        } else {\n            const IsNotSelectableForActions =\n                item && !item.IsSelectableForActions;\n            return IsNotSelectableForActions;\n        }\n    }\n\n    getIsItemSelected(itemId: string, itemType = ''): boolean {\n        let isSelected = false;\n\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n        isSelected = uniqItemId === this.selectedItemId;\n\n        return isSelected;\n    }\n\n    private setItemClicked(\n        itemId,\n        isSelectableForActions: boolean,\n        itemType: string,\n        isChecked: boolean\n    ): void {\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n\n        // select the selected item.\n        if (isChecked) {\n            // Set seleted item\n            this.selectedItemId = uniqItemId;\n        } else {\n            if (this.selectedItemId === uniqItemId) {\n                this.selectedItemId = '';\n            }\n        }\n    }\n\n    itemClicked(e: any, item: ObjectsDataRow): void {\n        // Set seleted item\n        const itemId = item.UID.toString();\n        const itemType = item.Type.toString();\n        let isChecked = false;\n\n        if (item && item.IsSelectableForActions) {\n            this.selectedItemId = this.getUniqItemId(itemId, itemType);\n            isChecked = true;\n        }\n\n        if (this.isTable) {\n            this.setItemClicked(\n                itemId,\n                item.IsSelectableForActions,\n                itemType,\n                true\n            );\n        } else {\n            if (this.disabled) {\n                return;\n            }\n        }\n\n        // this.itemClick.emit({ source: item, viewType: this.viewType });\n    }\n\n    onTableRowMouseEnter(event: any, itemId: string, itemType: string): void {\n        if (!this.deviceHasMouse) {\n            return;\n        }\n\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n        this.hoveredItemId = uniqItemId;\n    }\n\n    onTableRowMouseLeave(event: any, itemId: string, itemType: string): void {\n        this.hoveredItemId = '';\n    }\n\n    onCardMouseEnter(event: any, itemId: string, itemType: string): void {\n        if (!this.deviceHasMouse) {\n            return;\n        }\n\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n        this.hoveredItemId = uniqItemId;\n    }\n\n    onCardMouseLeave(event: any, itemId: string, itemType: string): void {\n        this.hoveredItemId = '';\n    }\n\n    getThumbnailsLayout(): PepLayoutType {\n        return this.layoutType == null ? 'card' : this.layoutType;\n    }\n\n    // call this function after resize + animation end\n    winResize(e): void {\n        this.containerWidth = 0;\n        this.setLayout();\n    }\n\n    trackByFunc(index: number, item: ObjectsDataRow): any {\n        return item && item.UID ? item.UID : index;\n    }\n\n    cleanItems(): void {\n        this.itemsCounter = 0;\n        this._items =\n            this.totalRows > 0 ? Array<ObjectsDataRow>(this.totalRows) : [];\n        this.scrollItems = [];\n        this.calculatedObjectHeight = '';\n    }\n\n    getUIControl(): UIControl {\n        return this.uiControl;\n    }\n\n    initListData(\n        uiControl: UIControl,\n        totalRows: number,\n        items: ObjectsDataRow[],\n        viewType: PepListViewType = 'table',\n        itemClass = ''\n    ): void {\n        this.viewType = viewType;\n        this.isTable = viewType === 'table';\n        // this.isCardView = viewType === 'cards';\n        this.uiControl = uiControl;\n        this.itemClass = itemClass;\n        this.selectedItemId = '';\n        this.totalRows = totalRows;\n\n        // fix bug for the scrollTo that doesn't work on edge div , not window\n        // const scrollingElement = this.getParentContainer();\n        // scrollingElement.scrollTo(0, 0);\n\n        this.cleanItems();\n\n        this.updateItems(items);\n\n        this.setLayout();\n    }\n\n    private updateItems(items: ObjectsDataRow[]): void {\n        this.scrollItems = this._items = items;\n        this.itemsCounter = items.length;\n    }\n\n    updateItem(data: any): void {\n        let index = 0;\n\n        // Update items list\n        index = this.items.findIndex((i) => i && i.UID === data.UID);\n        if (index >= 0 && index < this.items.length) {\n            this.items[index] = data;\n        }\n\n        // Update scrollItems list\n        index = this.scrollItems.findIndex((i) => i && i.UID === data.UID);\n\n        if (index >= 0 && index < this.scrollItems.length) {\n            this.scrollItems[index] = data;\n            this.checkForChanges = new Date().getTime();\n        }\n    }\n\n    getIsItemEditable(uid: string): boolean {\n        const item = this.items.filter((x) => x.UID.toString() === uid);\n        if (item.length > 0) {\n            return item[0].IsEditable;\n        } else {\n            return false;\n        }\n    }\n\n    getItemDataByID(uid: string): ObjectsDataRow {\n        return this.items.find((item) => item.UID.toString() === uid);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    height: inherit;\n    display: grid;\n}\n\n.no-data {\n    margin: $spacing-2xl 0;\n}\n\n.no-data-suggestions {\n    .suggestions-title {\n        margin: $spacing-lg 0 $spacing-sm;\n    }\n\n    .suggestions-list {\n        margin: 0;\n        padding: 0;\n        padding-inline-start: $spacing-2xl;\n    }\n}\n\n.table-header {\n    top:0;\n}\n",
                    "styleUrl": "./internal-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 110,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "Array<ObjectsDataRow>",
                        "line": 77
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"totalRows == 0\">\n    <div class=\"pep-border-bottom\">\n        <p class=\"title-xl no-data\">\n            {{ (noDataFoundMsg ? noDataFoundMsg : 'LIST.NO_DATA_FOUND') | translate}}\n        </p>\n    </div>\n    <div class=\"no-data-suggestions\">\n        <p class=\"suggestions-title title-lg\">\n            {{ 'LIST.NO_DATA_FOUND_SUGGESTIONS_TITLE' | translate}}\n        </p>\n        <ul class=\"suggestions-list body-lg\" [innerHtml]=\"'LIST.NO_DATA_FOUND_SUGGESTIONS_LIST' | translate\"></ul>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"totalRows > 0\">\n    <div *ngIf=\"isTable\" #tableHeader class=\"table-header\" (mouseup)=\"onListResizeEnd($event)\"\n        (mouseenter)=\"onListHeaderMouseEnter($event)\" (mouseleave)=\"onListHeaderMouseLeave($event)\"\n        (mousemove)=\"onListResize($event)\">\n\n        <div class=\"table-header-padding-top\"></div>\n        <fieldset class=\"table-header-fieldset\">\n            <fieldset>\n                <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"header-column pull-left flip\"\n                    [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\" [ngClass]=\"{\n                            'is-resizing': field.ApiName === pressedColumn,\n                            'is-first': j === 0,\n                            'is-last': j === uiControl?.ControlFields?.length - 1\n                        }\">\n                    <label *ngIf=\"field.Title != ''\" id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip text-align-{{ field.Layout.XAlignment }}\"\n                        title=\"{{ field.Title }}\">\n                        {{ field.Title }}\n                    </label>\n                    <label *ngIf=\"field.Title == ''\" id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip\">&nbsp;</label>\n\n                    <div *ngIf=\"supportResizing\" class=\"resize-box pull-right flip\"\n                        (mousedown)=\"onListResizeStart($event, field.ApiName)\">\n                        <div class=\"splitter\"></div>\n                    </div>\n                </div>\n            </fieldset>\n        </fieldset>\n    </div>\n\n    <div #noVirtualScrollCont [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable }\">\n        <ng-container *ngTemplateOutlet=\"listData\"></ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"listTotals\"></ng-container>\n</ng-container>\n\n<ng-template #listData>\n    <ng-container *ngFor=\"let item of scrollItems; let i = index; let isFirst = first; trackBy: trackByFunc\">\n        <ng-container *ngIf=\"isTable\">\n            <div class=\"table-row\" (mouseenter)=\"onTableRowMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onTableRowMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId\n                    }\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <fieldset class=\"table-row-fieldset\" [ngStyle]=\"{ 'background-color': item?.BackgroundColor }\">\n                    <!-- [canEditObject]=\"!disabled && item?.IsEditable\" -->\n                    <pep-form [checkForChanges]=\"checkForChanges\" [layout]=\"uiControl\"\n                        [firstFieldAsLink]=\"firstFieldAsLink\" [data]=\"item\" [canEditObject]=\"!disabled\"\n                        [objectId]=\"objectId\" [parentId]=\"parentId\" [searchCode]=\"searchCode\"\n                        [lockEvents]=\"disableSelectionItems\" [layoutType]=\"'table'\" [listType]=\"listType\" [isActive]=\"\n                                (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                                item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                            \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                        (click)=\"itemClicked($event, item)\" [pageType]=\"pageType\">\n                    </pep-form>\n                </fieldset>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isTable\">\n            <div [class]=\"itemClass\" (mouseenter)=\"onCardMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onCardMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId,\n                        'card-view': viewType === 'cards',\n                        'line-view': viewType === 'lines'\n                    }\" class=\"pull-left flip\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <!-- [canEditObject]=\"!disabled && item?.IsEditable\" -->\n                <pep-form [checkForChanges]=\"checkForChanges\" [layout]=\"uiControl\" [data]=\"item\"\n                    [canEditObject]=\"!disabled\" [objectId]=\" objectId\" [parentId]=\"parentId\" [searchCode]=\"searchCode\"\n                    [lockEvents]=\"disableSelectionItems\" [layoutType]=\"getThumbnailsLayout()\" [listType]=\"listType\"\n                    [isActive]=\"\n                            (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                            item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                        \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                    (click)=\"itemClicked($event, item)\" [pageType]=\"pageType\">\n                </pep-form>\n            </div>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<ng-template #listTotals>\n    <div *ngIf=\"totalsRow?.length > 0 && totalsRow.length <= uiControl?.ControlFields.length\" class=\"table-total\">\n        <fieldset class=\"table-header-fieldset\">\n            <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"total-column pull-left flip\"\n                [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\">\n                <label class=\"total-label body-sm text-align-{{ field.Layout.XAlignment }}\">\n                    {{ totalsRow[j] }}\n                </label>\n            </div>\n        </fieldset>\n    </div>\n</ng-template>"
        },
        {
            "name": "PepInternalMenuComponent",
            "id": "component-PepInternalMenuComponent-6d3a7db3c13b982118cd7f427a5fd867",
            "file": "projects/ngx-lib/form/internal-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-internal-menu",
            "styleUrls": [
                "./internal-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./internal-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "invertClass",
                    "defaultValue": "true",
                    "line": 31
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 25
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 26
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 35,
                    "type": "PepLayoutType"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 30,
                    "type": "IPepOption[]"
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 28,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 37,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'menu'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "menuClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuItemClicked",
                    "args": [
                        {
                            "name": "itemKey",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "itemKey",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    OnDestroy,\n} from '@angular/core';\nimport {\n    PepLayoutType,\n    IPepOption,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldClickEvent,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-internal-menu',\n    templateUrl: './internal-menu.component.html',\n    styleUrls: ['./internal-menu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepInternalMenuComponent implements OnDestroy {\n    @Input() key = '';\n    @Input() label = '';\n    @Input() disabled = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    // @Input() hasSubMenu = false;\n    @Input() options: IPepOption[] = [];\n    @Input() invertClass = true;\n\n    controlType = 'menu';\n\n    @Input() layoutType: PepLayoutType = 'form';\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n    // @Output() menuItemClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    ngOnDestroy(): void {\n        if (this.elementClick) {\n            this.elementClick.unsubscribe();\n        }\n\n        // if (this.menuItemClick) {\n        //     this.menuItemClick.unsubscribe();\n        // }\n    }\n\n    menuClicked(event: any): void {\n        this.elementClick.emit({\n            key: this.key,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n    }\n\n    menuItemClicked(itemKey: any): void {\n        // Not in use comment in version 16.55 for webapp.\n        // this.menuItemClick.emit({ key: itemKey });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * {\n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.pepperi-button, .pep-button {\n    cursor: pointer;\n\n    &.left-alignment {\n        justify-self: flex-start;\n    }\n\n    &.center-alignment {\n        justify-self: center;\n    }\n\n    &.right-alignment {\n        justify-self: flex-end;\n    }\n}\n",
                    "styleUrl": "./internal-menu.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"options?.length > 0; then subMenuBlock; else noSubMenuBlock\"></ng-container>\n<ng-template #noSubMenuBlock>\n    <button (click)=\"menuClicked($event)\" title=\"{{ label }}\" mat-button\n        class=\"pep-button icon-button weak {{ layoutType === 'table' ? 'sm' : 'md' }}\" [ngClass]=\"{\n            'lock-events': disabled,\n            'left-alignment': xAlignment == 'left',\n            'right-alignment': xAlignment == 'right',\n            'center-alignment': xAlignment == 'center',\n            'invert': invertClass\n        }\">\n        <mat-icon>\n            <pep-icon name=\"system_menu\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n</ng-template>\n\n<ng-template #subMenuBlock>\n    <button mat-button [matMenuTriggerFor]=\"menu\" menu-blur\n        class=\"pep-button icon-button weak {{ layoutType === 'table' ? 'sm' : 'md' }}\" [ngClass]=\"{\n            'left-alignment': xAlignment == 'left',\n            'right-alignment': xAlignment == 'right',\n            'center-alignment': xAlignment == 'center',\n            'invert': invertClass\n        }\" title=\"{{ label }}\">\n        <mat-icon>\n            <pep-icon name=\"system_menu\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n\n    <mat-menu #menu=\"matMenu\" xPosition=\"{{xAlignment == 'right' ? 'after' : 'before'}}\"\n        [ngClass]=\"{ rtlMenu: xAlignment == 'right' }\">\n        <button *ngFor=\"let option of options\" mat-menu-item (click)=\"menuItemClicked(option.key)\">\n            <span>{{ option.value | translate }}</span>\n        </button>\n    </mat-menu>\n\n</ng-template>"
        },
        {
            "name": "PepInternalPageComponent",
            "id": "component-PepInternalPageComponent-09635a901c01c1e96586fa4af22e6e78",
            "file": "projects/ngx-lib/form/internal-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PepInternalPageService"
                }
            ],
            "selector": "pep-internal-page",
            "styleUrls": [
                "./internal-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./internal-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "line": 53,
                    "type": "any"
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 54,
                    "type": "PepLayoutType"
                }
            ],
            "outputsClass": [
                {
                    "name": "childChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 55,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "childClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "line": 57,
                    "type": "EventEmitter<IPepFormFieldClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "additionalApiNames",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "checkForChanges",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "childData",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "childViewTypes",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "columnWidth",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "controlType",
                    "defaultValue": "'internalPage'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "coverChildTable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "CURRENT_ADDITIONAL_API_NAME",
                    "defaultValue": "'item_details_currentAdditionalApiName'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "currentAdditionalApiName",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "currentViewType",
                    "defaultValue": "null",
                    "type": "KeyValuePair<string>",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "currentViewTypeTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "customizationService",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customList",
                    "type": "PepInternalListComponent",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PepInternalListComponent"
                        }
                    ]
                },
                {
                    "name": "defaultRowSpan",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "dialogCont",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dialogCont', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "displayQSbtns",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "emptyForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "fieldIdWithFocus",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "focusedQS",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "lineViewRows",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "mainViewCont",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mainViewCont'"
                        }
                    ]
                },
                {
                    "name": "matrixDialogTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'matrixDialogTemplate', {read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "matrixTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'matrixTemplate'"
                        }
                    ]
                },
                {
                    "name": "my1mm",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'my1mm'"
                        }
                    ]
                },
                {
                    "name": "orgCont",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'orgCont', {read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "resize",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "rows",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "selectedApiName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "showSort",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "sumOfMinColWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "totalRowsWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "totalsRow",
                    "defaultValue": "[]",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "uiControl",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "viewHeight",
                    "defaultValue": "'auto'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "viewWidth",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "changeAdditionalApiName",
                    "args": [
                        {
                            "name": "additionalApiName",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 410,
                    "jsdoctags": [
                        {
                            "name": "additionalApiName",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeChildrenViewType",
                    "args": [
                        {
                            "name": "viewTypeKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "jsdoctags": [
                        {
                            "name": "viewTypeKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillChildData",
                    "args": [
                        {
                            "name": "res",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillData",
                    "args": [
                        {
                            "name": "isInDialog",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "isInDialog",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFlatMatrixView",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 251,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isMatrixView",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 244,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isTableView",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 258
                },
                {
                    "name": "loadLastAdditionalApiName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 385
                },
                {
                    "name": "mmToPx",
                    "args": [
                        {
                            "name": "mm",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 239,
                    "jsdoctags": [
                        {
                            "name": "mm",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 557,
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeObjectChanged",
                    "args": [
                        {
                            "name": "customizeObjectChangedData",
                            "type": "IPepFormFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "jsdoctags": [
                        {
                            "name": "customizeObjectChangedData",
                            "type": "IPepFormFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTotalsRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 433
                },
                {
                    "name": "setValueCallback",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        },
                        {
                            "name": "res",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 487,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "res",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setViewCover",
                    "args": [
                        {
                            "name": "rows",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMatrixDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319
                },
                {
                    "name": "updateChanges",
                    "args": [
                        {
                            "name": "elementToUpdate",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "jsdoctags": [
                        {
                            "name": "elementToUpdate",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    ViewContainerRef,\n    TemplateRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n} from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { PepInternalPageService } from './internal-page.service';\n\nimport {\n    PepLayoutType,\n    UIControl,\n    KeyValuePair,\n    PepCustomizationService,\n    UIControlField,\n    ObjectsData,\n    FIELD_TYPE,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepInternalListComponent,\n    PepListViewType,\n} from './internal-list.component';\nimport {\n    IPepFormFieldClickEvent,\n    IPepFormFieldValueChangeEvent,\n} from './form.component';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { PepQuantitySelectorComponent } from '@pepperi-addons/ngx-lib/quantity-selector';\n\n@Component({\n    selector: 'pep-internal-page',\n    templateUrl: './internal-page.component.html',\n    styleUrls: ['./internal-page.component.scss'],\n    providers: [PepInternalPageService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepInternalPageComponent implements OnInit, OnDestroy {\n    static CURRENT_ADDITIONAL_API_NAME =\n        'item_details_currentAdditionalApiName';\n\n    controlType = 'internalPage';\n\n    @Input() field: any;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Output() childChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output()\n    childClick: EventEmitter<IPepFormFieldClickEvent> = new EventEmitter<IPepFormFieldClickEvent>();\n\n    @ViewChild('my1mm') my1mm: ElementRef;\n    @ViewChild('mainViewCont') mainViewCont: ElementRef;\n\n    @ViewChild('orgCont', { read: ViewContainerRef }) orgCont: ViewContainerRef;\n    @ViewChild('dialogCont', { read: ViewContainerRef })\n    dialogCont: ViewContainerRef;\n    @ViewChild('matrixTemplate') matrixTemplate: TemplateRef<any>;\n    @ViewChild('matrixDialogTemplate', { read: TemplateRef })\n    matrixDialogTemplate: TemplateRef<any>;\n\n    @ViewChild(PepInternalListComponent)\n    customList: PepInternalListComponent;\n\n    resize: any;\n    checkForChanges: any = null;\n\n    childData: any = null;\n\n    emptyForm: FormGroup;\n    uiControl: UIControl;\n    rows: any;\n    lineViewRows: any;\n    totalsRow: any = [];\n    additionalApiNames: any = null;\n    currentAdditionalApiName: any = null;\n    focusedQS = false;\n    fieldIdWithFocus = '';\n    columnWidth = 100;\n    coverChildTable = false;\n    childViewTypes: Array<KeyValuePair<string>>;\n    currentViewType: KeyValuePair<string> = null;\n    currentViewTypeTitle: string;\n    sumOfMinColWidth = 0;\n    totalRowsWidth = 0;\n    viewWidth = '100%';\n    viewHeight = 'auto';\n    displayQSbtns = true;\n    selectedApiName = '';\n    showSort = false;\n    defaultRowSpan = -1;\n\n    constructor(\n        protected fb: FormBuilder,\n        private dialogService: PepDialogService,\n        private internalPageService: PepInternalPageService,\n        public customizationService: PepCustomizationService,\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    private fillData(isInDialog = false): void {\n        const view = this.matrixTemplate.createEmbeddedView(null);\n\n        this.customList?.clear();\n        this.orgCont?.clear();\n\n        if (isInDialog) {\n            this.dialogCont?.clear();\n            this.dialogCont?.insert(view);\n        } else {\n            this.orgCont?.insert(view);\n        }\n\n        setTimeout(() => {\n            // const buffer = [];\n\n            // if (this.childData.Rows) {\n            //     // for (let i = 0; i < this.childData.Rows.length; i++) {\n            //     for (const childDataRow of this.childData.Rows) {\n            //         const osd = new ObjectSingleData(\n            //             this.uiControl,\n            //             childDataRow\n            //         );\n            //         osd.IsEditable = true;\n            //         buffer.push(osd);\n            //     }\n            // }\n\n            const viewType: PepListViewType = this.isTableView()\n                ? 'table'\n                : 'lines';\n            this.customList.initListData(\n                this.uiControl,\n                this.childData.TotalRows,\n                this.childData.Rows,\n                viewType\n            );\n            this.setTotalsRow();\n\n            // if (!this.childModal.isShown) {\n            const childrenCount = this.childData.Rows\n                ? this.childData.Rows.length\n                : 0;\n            const isEven = childrenCount % 2 === 0;\n            // 3 for matrix & flat matrix because the header + total is 2 more rows.\n            const rowsToAdd =\n                this.isMatrixView() || this.isFlatMatrixView()\n                    ? isEven\n                        ? 3\n                        : 4\n                    : 1;\n\n            const formRowHeight =\n                this.customizationService.calculateFormFieldHeight() * 16; // convert rem to pixel\n\n            // Set the default only if not set yet.\n            if (this.defaultRowSpan === -1) {\n                this.defaultRowSpan = this.field.rowSpan;\n            }\n\n            this.sumOfMinColWidth = 0;\n            this.totalRowsWidth = 0;\n\n            this.childData.UIControl.ControlFields.forEach(\n                (uiControlField: UIControlField) => {\n                    this.totalRowsWidth += uiControlField.ColumnWidth;\n                    uiControlField.minFieldWidth = this.mmToPx(12); // NEED TO GET THIS PARAM FROM CUSTOMIZATION;\n                    this.sumOfMinColWidth += 12;\n                }\n            );\n\n            this.setViewCover(this.childData.Rows);\n\n            if (this.coverChildTable) {\n                this.field.rowSpan = this.defaultRowSpan;\n            } else {\n                // For line view Add the height of the line (form height).\n                if (this.currentViewType.Key === 'OrderCenterFlatMatrixLine') {\n                    const maxRow = Math.max(\n                        ...this.uiControl.ControlFields.map((f) => {\n                            return f.Layout.Y + f.Layout.Height;\n                        })\n                    );\n\n                    // * 16 convert rem to pixel\n                    const cardRowsHeight =\n                        this.customizationService.calculateCardRowsHeight(\n                            maxRow\n                        ) * 16;\n\n                    // maxRow * 24 + 60 - 24 for each row in card + 60 for the padding of each card.\n                    // const rowSpanToAdd = Math.floor(childrenCount * ((cardRowsHeight + 56) / formRowHeight) + rowsToAdd);\n                    // + 16 is the 1rem margin outside card.\n                    const rowSpanToAdd =\n                        (childrenCount * (cardRowsHeight + 16)) /\n                            formRowHeight +\n                        rowsToAdd;\n                    this.field.rowSpan = rowSpanToAdd;\n                } else {\n                    // const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;\n                    // this.field.rowSpan = Math.ceil((tableRowsHeight + (rowsToAdd * 40)) / formRowHeight);\n                    // * 16 convert rem to pixel\n                    const rowsToAddHeight =\n                        this.customizationService.calculateTableRowsHeight(\n                            rowsToAdd,\n                            false\n                        ) * 16;\n                    const tableRowsHeight =\n                        this.customizationService.calculateTableRowsHeight(\n                            childrenCount\n                        ) * 16;\n                    this.field.rowSpan =\n                        (rowsToAddHeight + tableRowsHeight) / formRowHeight;\n                }\n            }\n        }, 0);\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private fillChildData(res: any): void {\n        // TODO: ??\n        // this.userService.setOptionalValuesDic(res.Rows);\n        this.childData = res;\n        this.uiControl = res.UIControl;\n        this.additionalApiNames = res.AdditionalApiNames;\n\n        this.fillData();\n    }\n\n    mmToPx(mm): number {\n        const height = this.my1mm.nativeElement.clientHeight;\n        return Math.floor(mm * height); // returns sizes in PX\n    }\n\n    private isMatrixView(): boolean {\n        return (\n            this.currentViewType &&\n            this.currentViewType.Key === 'OrderCenterMatrix'\n        );\n    }\n\n    private isFlatMatrixView(): boolean {\n        return (\n            this.currentViewType &&\n            this.currentViewType.Key === 'OrderCenterFlatMatrixGrid'\n        );\n    }\n\n    isTableView(): boolean {\n        return this.isMatrixView() || this.isFlatMatrixView();\n    }\n\n    // private getItemClass(): string {\n    //     let res = '';\n\n    //     if (!this.isTableView()) {\n    //         res = 'line-view';\n    //     }\n\n    //     return res;\n    // }\n\n    changeChildrenViewType(viewTypeKey: string): void {\n        this.rows = [];\n        this.uiControl = null;\n\n        for (const vt of this.childViewTypes) {\n            if (vt.Key === viewTypeKey) {\n                this.currentViewType = vt;\n                break;\n            }\n        }\n        // check if view type changed\n        // if (this.currentViewType.Key != viewTypeKey) {\n\n        // window.scroll(0, 0); //or document.body.scrollTop = 0; or document.querySelector('body').scrollTo(0,0)\n\n        this.currentViewTypeTitle = this.currentViewType.Value;\n\n        this.internalPageService.changeChildrenViewType(\n            this.currentViewType.Key,\n            (res: ObjectsData) => {\n                if (res.Rows) {\n                    this.fillChildData(res);\n                }\n            }\n        );\n    }\n\n    setViewCover(rows): void {\n        if (!rows) {\n            return;\n        }\n\n        const matrixCont = this.mainViewCont.nativeElement;\n        const viewWidth = matrixCont.clientWidth;\n\n        this.viewWidth = viewWidth ? viewWidth.toString() : '100%';\n\n        // if the matrix located on the bottom / there is nothing under the matrix we dont need to check the height\n        if (parseInt(viewWidth, 10) < this.mmToPx(this.sumOfMinColWidth)) {\n            this.coverChildTable = true;\n        } else {\n            this.coverChildTable = false;\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    showMatrixDialog(): void {\n        const config = this.dialogService.getDialogConfig(\n            {\n                disableClose: false,\n                // minWidth: '50vw',\n                // maxWidth: '90vw',\n                // maxHeight: '90vh',\n            },\n            'large'\n        );\n\n        const dialogRef = this.dialogService.openDialog(\n            this.matrixDialogTemplate,\n            {},\n            config\n        );\n\n        dialogRef.afterOpened().subscribe(() => {\n            this.fillData(true);\n        });\n\n        dialogRef.afterClosed().subscribe((value) => {\n            this.fillData(false);\n        });\n    }\n\n    ngOnInit(): void {\n        // let field = this.field as PepInternalPageField;\n\n        this.internalPageService.initDetails(\n            this.field.objectId,\n            this.field.parentId,\n            this.field.searchCode,\n            (resViewTypes: any) => {\n                // my code DI-7134\n                resViewTypes.Rows = resViewTypes.Rows.filter(\n                    (item) => item.Key !== 'OrderCenterView1'\n                );\n\n                if (resViewTypes.Rows && resViewTypes.Rows.length > 0) {\n                    if (!resViewTypes.Default) {\n                        resViewTypes.Default = resViewTypes.Rows[0].Key;\n                    }\n                    this.childViewTypes = resViewTypes.Rows;\n                    this.currentViewType = resViewTypes.Rows[0];\n\n                    // for (var i = 0; i < resViewTypes.Rows.length; i++) {\n                    for (const viewTypeRow of resViewTypes.Rows) {\n                        if (viewTypeRow.Value === resViewTypes.Default) {\n                            this.currentViewType = viewTypeRow;\n                        }\n                    }\n\n                    this.loadLastAdditionalApiName();\n                    this.changeChildrenViewType(this.currentViewType.Key);\n                }\n            }\n        );\n\n        this.resize = fromEvent(window, 'resize')\n            .pipe(debounceTime(10))\n            .subscribe((event) => {\n                this.setViewCover(this.rows);\n            });\n    }\n\n    loadLastAdditionalApiName(): void {\n        const daa = sessionStorage.getItem(\n            PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME\n        );\n        if (daa && daa.length > 0) {\n            const additionalApiName = JSON.parse(daa);\n            this.currentAdditionalApiName = additionalApiName;\n            this.internalPageService.additionalApiName = additionalApiName?.Key;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.childChange) {\n            this.childChange.unsubscribe();\n        }\n\n        if (this.childClick) {\n            this.childClick.unsubscribe();\n        }\n\n        if (this.resize) {\n            this.resize.unsubscribe();\n        }\n    }\n\n    changeAdditionalApiName(additionalApiName): void {\n        this.internalPageService.changeAdditionalApiName(\n            additionalApiName ? additionalApiName.Key : '',\n            (res: any) => {\n                // for (let index = 0; index < res.Rows.length; index++) {\n                for (const row of res.Rows) {\n                    this.updateChanges(row);\n                }\n\n                this.changeDetectorRef.markForCheck();\n            }\n        );\n\n        sessionStorage.setItem(\n            PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME,\n            JSON.stringify(additionalApiName)\n        );\n\n        setTimeout(() => {\n            this.currentAdditionalApiName = additionalApiName;\n        }, 0);\n    }\n\n    setTotalsRow(): void {\n        this.totalsRow = [];\n\n        if (this.isMatrixView() || this.isFlatMatrixView()) {\n            let totalCol = 0;\n\n            const items = this.customList.items;\n            if (items) {\n                for (let col = 0; col < items[0].Fields.length; col++) {\n                    const field = items[0].Fields[col];\n                    if (\n                        field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                        field.FieldType ===\n                            FIELD_TYPE.NumberIntegerQuantitySelector ||\n                        field.FieldType === FIELD_TYPE.NumberRealForMatrix ||\n                        field.FieldType ===\n                            FIELD_TYPE.NumberRealQuantitySelector ||\n                        field.FieldType === FIELD_TYPE.CalculatedInt ||\n                        field.FieldType === FIELD_TYPE.NumberInteger ||\n                        field.FieldType === FIELD_TYPE.CalculatedReal ||\n                        field.FieldType === FIELD_TYPE.NumberReal\n                    ) {\n                        totalCol = 0;\n                        for (const listItem of items) {\n                            if (\n                                listItem.Fields[col] &&\n                                listItem.Fields[col].Value\n                            ) {\n                                const num = parseFloat(\n                                    listItem.Fields[col].Value\n                                );\n                                totalCol += isNaN(num) ? 0 : num;\n                            }\n                        }\n                        this.totalsRow.push(totalCol);\n                    } else {\n                        this.totalsRow.push('');\n                    }\n                }\n            }\n        }\n    }\n\n    updateChanges(elementToUpdate: any): void {\n        this.customList.updateItem(elementToUpdate);\n\n        // Update memory data\n        for (let index = 0; index < this.childData.Rows.length; index++) {\n            if (this.childData.Rows[index].UID === elementToUpdate.UID) {\n                this.childData.Rows[index] = elementToUpdate;\n            }\n        }\n    }\n\n    setValueCallback(id: any, res: any): void {\n        if (res.Rows.length === 1) {\n            this.updateChanges(res.Rows[0]);\n        }\n\n        this.setTotalsRow();\n        this.checkForChanges = new Date();\n\n        // DI-15985\n        this.childChange.emit(res);\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onCustomizeObjectChanged(\n        customizeObjectChangedData: IPepFormFieldValueChangeEvent\n    ): void {\n        this.internalPageService.childValueChanged(\n            customizeObjectChangedData.id,\n            customizeObjectChangedData.key,\n            customizeObjectChangedData.value,\n            (res: any) => {\n                this.setValueCallback(customizeObjectChangedData.id, res);\n            }\n        );\n\n        // let handledEvent = false;\n        // const boundSetValueCallback = this.setValueCallback.bind(this); // .bind() to have this in the bound function.\n\n        // // For the new custom form, the plus and minus events transform in the IPepFormFieldValueChangeEvent\n        // if (customizeObjectChangedData.controlType === 'qs') {\n        //     if (customizeObjectChangedData.value === '+') {\n        //         handledEvent = true;\n        //         this.internalPageService.childPlusClick(\n        //             customizeObjectChangedData.id,\n        //             customizeObjectChangedData.key,\n        //             (res: any) => {\n        //                 boundSetValueCallback(\n        //                     customizeObjectChangedData.id,\n        //                     res\n        //                 );\n        //             }\n        //         );\n        //     } else if (customizeObjectChangedData.value === '-') {\n        //         handledEvent = true;\n        //         this.internalPageService.childMinusClick(\n        //             customizeObjectChangedData.id,\n        //             customizeObjectChangedData.key,\n        //             (res: any) => {\n        //                 boundSetValueCallback(\n        //                     customizeObjectChangedData.id,\n        //                     res\n        //                 );\n        //             }\n        //         );\n        //     }\n        // }\n\n        // if (!handledEvent) {\n        //     this.internalPageService.childValueChanged(\n        //         customizeObjectChangedData.id,\n        //         customizeObjectChangedData.key,\n        //         customizeObjectChangedData.value,\n        //         (res: any) => {\n        //             boundSetValueCallback(customizeObjectChangedData.id, res);\n        //         }\n        //     );\n        // }\n    }\n\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent): void {\n        let handledEvent = false;\n\n        // For the new custom form, the plus and minus events transform in the IPepFormFieldValueChangeEvent\n        if (fieldClickEvent.controlType === 'qs') {\n            if (fieldClickEvent.value === PepQuantitySelectorComponent.PLUS) {\n                handledEvent = true;\n                this.internalPageService.childPlusClick(\n                    fieldClickEvent.id,\n                    fieldClickEvent.key,\n                    (res: any) => {\n                        this.setValueCallback(fieldClickEvent.id, res);\n                    }\n                );\n            } else if (\n                fieldClickEvent.value === PepQuantitySelectorComponent.MINUS\n            ) {\n                handledEvent = true;\n                this.internalPageService.childMinusClick(\n                    fieldClickEvent.id,\n                    fieldClickEvent.key,\n                    (res: any) => {\n                        this.setValueCallback(fieldClickEvent.id, res);\n                    }\n                );\n            }\n        }\n\n        if (!handledEvent) {\n            this.childClick.emit(fieldClickEvent);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    display: grid;\n    width: inherit;\n    height: inherit;\n}\n\n.matrix-title-container {\n    //width: 100%;\n    padding: 0;\n    height: $form-field-height;\n    display: flex;\n    align-items: flex-end;\n\n    .block-with-text {\n        width: 100%;\n        max-height: inherit;\n        font-weight: $font-weight-bold;\n        display: block;\n        @include ellipsis();\n    }\n\n    .buttons-container {\n        display: flex;\n        align-self: center;\n\n        .pepperi-button, .pep-button {\n            width: max-content;\n        }\n    }\n}\n\n#mainViewCont {\n    width: 100%;\n    height: inherit;\n    overflow: hidden;\n    padding: 0 $spacing-xs;\n    // margin-bottom: 1.5rem;\n\n    .table-cover {\n        background-color: #fff;\n        z-index: $z-index-medium - 2;\n        position: absolute;\n        top: 0;\n        width: 100%;\n        // height: calc(100% + #{$form-field-height});\n        height: inherit;\n        opacity: 0.5;\n        //cursor: pointer;\n    }\n\n    .table-cover-button {\n        position: absolute;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        top: calc(50% + #{$form-field-height});\n        z-index: $z-index-medium - 1;\n\n        &.lineview-btn{\n            top: calc(2 * #{$form-field-height});\n            transform: translate(-50%, 0);\n        }\n    }\n\n    .underCover {\n        max-height: inherit;\n        overflow: hidden;\n    }\n\n    ::ng-deep.table-header {\n        top: unset !important;\n    }\n}\n\n// .modal-dialog {\n//     position: relative;\n//     margin: 0.5rem 0;\n\n//     .matrix-dialog-body {\n//         height: 100%;\n//         padding: 0.5rem;\n//         overflow: auto;\n\n//         ::ng-deep.table-header {\n//             top: unset !important;\n//         }\n//     }\n// }\n\n",
                    "styleUrl": "./internal-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "internalPageService",
                        "type": "PepInternalPageService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "internalPageService",
                        "type": "PepInternalPageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-template #matrixHeaderTemplate>\n    <div class=\"matrix-title-container pep-border-bottom align-{{\n            field.xAlignment\n        }}\" title=\"{{ field.label }}\">\n        <span class=\"block-with-text body-md\">{{ field.label }}</span>\n\n        <div class=\"buttons-container pep-spacing-element-negative pull-right flip\">\n            <ng-container *ngIf=\"\n                    currentViewType?.Key == 'OrderCenterMatrix' &&\n                    additionalApiNames &&\n                    additionalApiNames.length > 0\n                \">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button [matMenuTriggerFor]=\"menu\"\n                    menu-blur>\n                    <span class=\"pull-left flip\" *ngIf=\"currentAdditionalApiName\">&nbsp;{{\n                        currentAdditionalApiName?.Value }}&nbsp;</span>\n\n                    <mat-icon [ngClass]=\"{'pull-left flip': currentAdditionalApiName}\">\n                        <pep-icon name=\"system_info\"></pep-icon>\n                    </mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentAdditionalApiName === null\n                        }\" (click)=\"changeAdditionalApiName(null)\">\n                        <span>{{ \"LIST.NONE\" | translate }}</span>\n                    </button>\n                    <button mat-menu-item [ngClass]=\"{\n                            selected:\n                                currentAdditionalApiName?.Key ==\n                                additionalApiName?.Key\n                        }\" *ngFor=\"let additionalApiName of additionalApiNames\"\n                        (click)=\"changeAdditionalApiName(additionalApiName)\">\n                        <span>{{ additionalApiName.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n            <ng-container *ngIf=\"childViewTypes && childViewTypes.length > 1\">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button\n                    [matMenuTriggerFor]=\"viewsMenu\" menu-blur>\n                    <mat-icon>\n                        <pep-icon name=\"view_card_md\"></pep-icon>\n                    </mat-icon>\n                </button>\n\n                <mat-menu #viewsMenu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentViewType?.Key == viewType?.Key\n                        }\" *ngFor=\"let viewType of childViewTypes\" (click)=\"changeChildrenViewType(viewType?.Key)\">\n                        <mat-icon [ngSwitch]=\"viewType?.Key\">\n                            <pep-icon *ngSwitchCase=\"'OrderCenterMatrix'\" name=\"view_matrix\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixGrid'\" name=\"view_table\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixLine'\" name=\"view_line\"></pep-icon>\n                        </mat-icon>\n                        <span>{{ viewType?.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n        </div>\n    </div>\n\n</ng-template>\n\n<ng-template #matrixTemplate>\n    <div #matrixContainer class=\"matrix-container\">\n        <pep-internal-list (valueChange)=\"onCustomizeObjectChanged($event)\" [parentScroll]=\"matrixContainer\"\n            (fieldClick)=\"onCustomizeFieldClick($event)\" [totalsRow]=\"totalsRow\"></pep-internal-list>\n    </div>\n</ng-template>\n\n<div #mainViewCont id=\"mainViewCont\" [ngStyle]=\"{ 'max-width': viewWidth, 'max-height': viewHeight }\">\n    <div #my1mm id=\"my1_mm\" style=\"height:1mm;width:1mm;visibility: hidden;\"></div>\n    <ng-container *ngIf=\"coverChildTable && uiControl != null\">\n        <div class=\"table-cover\"></div>\n        <button (click)=\"showMatrixDialog()\" class=\"pep-button strong sm table-cover-button\"\n            [ngClass]=\"{ 'lineview-btn': currentViewType?.Key == 'OrderCenterFlatMatrixLine'}\">\n            {{ \"INTERNAL_PAGE.CLICK_TO_ORDER\" | translate }}\n        </button>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    <ng-container #orgCont></ng-container>\n</div>\n\n<ng-template #matrixDialogTemplate>\n\n    <div mat-dialog-title>\n        <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    </div>\n\n    <div mat-dialog-content>\n        <ng-container #dialogCont></ng-container>\n    </div>\n</ng-template>\n\n<!-- <div id=\"childGridModal\" bsModal (onShown)=\"onShown()\" (onHidden)=\"onHidden()\" #childModal=\"bs-modal\" class=\"modal\"\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-body matrix-dialog-body\">\n                <ng-container #modalCont></ng-container>\n            </div>\n        </div>\n    </div>\n</div> -->"
        },
        {
            "name": "PepListActionsComponent",
            "id": "component-PepListActionsComponent-d4255ea2a45765aa754021990ae49dc0",
            "file": "projects/ngx-lib/list/list-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-actions",
            "styleUrls": [
                "./list-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "null",
                    "line": 22,
                    "type": "Array<PepMenuItem>"
                },
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "line": 25
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 23,
                    "type": "PepSizeType"
                },
                {
                    "name": "xPosition",
                    "defaultValue": "'before'",
                    "line": 24,
                    "type": "\"before\" | \"after\""
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClick",
                    "defaultValue": "new EventEmitter<IPepMenuItemClickEvent>()",
                    "line": 28,
                    "type": "EventEmitter<IPepMenuItemClickEvent>"
                },
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 32,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<IPepMenuStateChangeEvent>()",
                    "line": 30,
                    "type": "EventEmitter<IPepMenuStateChangeEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStateChanged",
                    "args": [
                        {
                            "name": "menuStateChangeEvent",
                            "type": "IPepMenuStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "menuStateChangeEvent",
                            "type": "IPepMenuStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuStateChangeEvent,\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\n@Component({\n    selector: 'pep-list-actions',\n    templateUrl: './list-actions.component.html',\n    styleUrls: ['./list-actions.component.scss'],\n})\n@Injectable()\nexport class PepListActionsComponent {\n    @Input() actions: Array<PepMenuItem> = null;\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() xPosition: 'before' | 'after' = 'before';\n    @Input() hidden = false;\n\n    @Output()\n    actionClick: EventEmitter<IPepMenuItemClickEvent> = new EventEmitter<IPepMenuItemClickEvent>();\n    @Output()\n    stateChange: EventEmitter<IPepMenuStateChangeEvent> = new EventEmitter<IPepMenuStateChangeEvent>();\n    @Output()\n    menuClick: EventEmitter<void> = new EventEmitter<void>();\n\n    onActionClicked(action): void {\n        this.actionClick.emit(action);\n    }\n\n    onStateChanged(menuStateChangeEvent: IPepMenuStateChangeEvent): void {\n        this.stateChange.emit(menuStateChangeEvent);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-actions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "﻿<pep-menu [xPosition]=\"xPosition\" [styleType]=\"'strong'\" [sizeType]=\"sizeType\" [items]=\"!hidden ? actions : null\"\n    [hideOnEmptyItems]=\"true\" [iconName]=\"'system_edit'\" (menuItemClick)=\"onActionClicked($event)\"\n    (stateChange)=\"onStateChanged($event)\" (menuClick)=\"menuClick.emit();\">\n</pep-menu>\n"
        },
        {
            "name": "PepListCarouselComponent",
            "id": "component-PepListCarouselComponent-1bc660d1df38f7ae696a41dd5b2515ca",
            "file": "projects/ngx-lib/list/list-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-carousel",
            "styleUrls": [
                "./list-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "duration",
                    "defaultValue": "1000",
                    "line": 35
                },
                {
                    "name": "hideArrowsInSmallScreen",
                    "defaultValue": "true",
                    "line": 39
                },
                {
                    "name": "items",
                    "line": 43,
                    "type": ""
                },
                {
                    "name": "itemSize",
                    "line": 53,
                    "type": ""
                },
                {
                    "name": "itemsToMove",
                    "defaultValue": "3",
                    "line": 37
                },
                {
                    "name": "layout",
                    "defaultValue": "null",
                    "line": 36,
                    "type": "UIControl"
                },
                {
                    "name": "lockItemInnerEvents",
                    "defaultValue": "true",
                    "line": 38
                }
            ],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter<IPepListCarouselItemClickEvent>()",
                    "line": 62,
                    "type": "EventEmitter<IPepListCarouselItemClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_items",
                    "defaultValue": "null",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_itemSize",
                    "defaultValue": "'xs'",
                    "type": "PepListCarouselSizeType",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "carousel",
                    "type": "PepCarouselComponent",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel', {read: PepCarouselComponent}"
                        }
                    ]
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nextDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "prevDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "itemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "moveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "onReachesLeftBound",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReachesRightBound",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    Renderer2,\n    ChangeDetectorRef,\n    OnDestroy,\n    AfterViewInit,\n} from '@angular/core';\nimport {\n    ObjectsDataRow,\n    UIControl,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { PepCarouselComponent } from '@pepperi-addons/ngx-lib/carousel';\n\nexport type PepListCarouselSizeType = 'xs' | 'sm' | 'md';\n\nexport interface IPepListCarouselItemClickEvent {\n    source: ObjectsDataRow;\n}\n\n@Component({\n    selector: 'pep-list-carousel',\n    templateUrl: './list-carousel.component.html',\n    styleUrls: ['./list-carousel.component.scss'],\n})\n@Injectable()\nexport class PepListCarouselComponent implements AfterViewInit, OnDestroy {\n    @Input() duration = 1000;\n    @Input() layout: UIControl = null;\n    @Input() itemsToMove = 3;\n    @Input() lockItemInnerEvents = true;\n    @Input() hideArrowsInSmallScreen = true;\n\n    private _items: Array<ObjectsDataRow> = null;\n    @Input()\n    set items(value: Array<ObjectsDataRow>) {\n        this._items = value;\n        this.moveTo(0);\n    }\n    get items() {\n        return this._items;\n    }\n\n    private _itemSize: PepListCarouselSizeType = 'xs';\n    @Input()\n    set itemSize(value: PepListCarouselSizeType) {\n        this._itemSize = value;\n        this.moveTo(0);\n    }\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    @Output()\n    itemClick: EventEmitter<IPepListCarouselItemClickEvent> = new EventEmitter<IPepListCarouselItemClickEvent>();\n\n    @ViewChild('carousel', { read: PepCarouselComponent })\n    carousel: PepCarouselComponent;\n\n    prevDisabled = false;\n    nextDisabled = false;\n    screenSize: PepScreenSizeType;\n    PepScreenSizeType = PepScreenSizeType;\n    // deviceHasMouse = false;\n\n    constructor(public layoutService: PepLayoutService) {\n        // this.deviceHasMouse = this.layoutService.getDeviceHasMouse();\n    }\n\n    ngAfterViewInit(): void {\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n\n        // this.layoutService.onMouseOver$.subscribe((deviceHasMouse: boolean) => {\n        //     this.deviceHasMouse = deviceHasMouse;\n        // });\n    }\n\n    ngOnDestroy(): void {\n        if (this.itemClick) {\n            this.itemClick.unsubscribe();\n        }\n    }\n\n    itemClicked(item: ObjectsDataRow): void {\n        this.itemClick.emit({ source: item });\n    }\n\n    moveLeft() {\n        // this.carousel.moveLeft();\n        const indexToMove = Math.max(\n            this.carousel.currIndex - this.itemsToMove,\n            0\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveRight() {\n        // this.carousel.moveRight();\n        const indexToMove = Math.min(\n            this.carousel.currIndex + this.itemsToMove,\n            this.items.length\n        );\n        this.moveTo(indexToMove);\n    }\n\n    moveTo(index: number) {\n        if (this.carousel) {\n            this.carousel.moveTo(index);\n        }\n    }\n\n    onReachesLeftBound(event: boolean) {\n        this.prevDisabled = event;\n    }\n\n    onReachesRightBound(event: boolean) {\n        this.nextDisabled = event;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\r\n@import '../src/core/style/abstracts/mixins';\r\n\r\n.carousel-container {\r\n    position: relative;\r\n    margin: 0 calc(#{$spacing-sm} * -1);\r\n    display: grid;\r\n    \r\n    .carousel-arrow {\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translate(0%, -50%);\r\n        z-index: $z-index-lowest;\r\n\r\n        &.start-arrow { \r\n            left: 0;\r\n            // left: -0.5rem;\r\n        }\r\n        \r\n        &.end-arrow {\r\n            right: 0;\r\n            // right: -0.5rem;\r\n        }\r\n    }\r\n\r\n    ::ng-deep.carousel-content {\r\n        .card-view {\r\n            padding: $spacing-sm 0 !important;\r\n            \r\n            &:first-child {\r\n                padding-inline-start: $spacing-sm !important;\r\n            }\r\n            &:last-child {\r\n                padding-inline-end: $spacing-sm !important;\r\n            }\r\n        }\r\n    }\r\n\r\n}",
                    "styleUrl": "./list-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "itemSize": {
                    "name": "itemSize",
                    "setSignature": {
                        "name": "itemSize",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "itemSize",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            },
            "templateData": "﻿<div class=\"carousel-container\">\n    <ng-container *ngIf=\"items?.length > 0; then carouselBlock; else emptyBlock\"></ng-container>\n    <ng-template #emptyBlock>\n        <!-- No items -->\n    </ng-template>\n    <ng-template #carouselBlock>\n        <pep-button *ngIf=\"!(hideArrowsInSmallScreen && screenSize > PepScreenSizeType.SM)\"\n            [iconName]=\"'arrow_left_alt'\" [styleType]=\"'regular'\" [disabled]=\"prevDisabled\" (click)=\"moveLeft()\"\n            class=\"carousel-arrow start-arrow\">\n        </pep-button>\n        <pep-carousel #carousel [xWheelEnabled]=\"false\" [snapDuration]=\"duration\"\n            (reachesLeftBound)=\"onReachesLeftBound($event)\" (reachesRightBound)=\"onReachesRightBound($event)\">\n            <ng-container *ngFor=\"let item of items\">\n                <pep-form pepCarouselItem [layout]=\"layout\" [data]=\"item\" [layoutType]=\"'card'\"\n                    (click)=\"itemClicked(item)\" class=\"card-view \" [lockEvents]=\"lockItemInnerEvents\"\n                    [ngClass]=\"{ 'x-small-card': itemSize === 'xs', 'small-card': itemSize === 'sm'}\">\n                </pep-form>\n            </ng-container>\n        </pep-carousel>\n        <pep-button *ngIf=\"!(hideArrowsInSmallScreen && screenSize > PepScreenSizeType.SM)\"\n            [iconName]=\"'arrow_right_alt'\" [styleType]=\"'regular'\" [disabled]=\"nextDisabled\" (click)=\"moveRight()\"\n            class=\"carousel-arrow end-arrow\">\n        </pep-button>\n    </ng-template>\n</div>"
        },
        {
            "name": "PepListChooserComponent",
            "id": "component-PepListChooserComponent-948821535414856bdc617f6f19df7002",
            "file": "projects/ngx-lib/list/list-chooser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-chooser",
            "styleUrls": [
                "./list-chooser.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-chooser.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentList",
                    "line": 56,
                    "type": ""
                },
                {
                    "name": "options",
                    "line": 33,
                    "type": ""
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 64,
                    "type": "PepSizeType"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<IPepListChooserOptionChangeEvent>()",
                    "line": 67,
                    "type": "EventEmitter<IPepListChooserOptionChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentList",
                    "defaultValue": "null",
                    "type": "IPepListChooserOption",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "null",
                    "type": "Array<IPepListChooserOption>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "null",
                    "type": "Array<PepBreadCrumbItem>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { PepBreadCrumbItem } from '@pepperi-addons/ngx-lib/bread-crumbs';\n\nexport class IPepListChooserOption {\n    key: string;\n    text: string;\n}\n\nexport interface IPepListChooserOptionChangeEvent {\n    source: IPepListChooserOption;\n}\n\n@Component({\n    selector: 'pep-list-chooser',\n    templateUrl: './list-chooser.component.html',\n    styleUrls: ['./list-chooser.component.scss'],\n})\n@Injectable()\nexport class PepListChooserComponent {\n    private _options: Array<IPepListChooserOption> = null;\n    @Input()\n    set options(value: Array<IPepListChooserOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.text };\n        });\n\n        if (this.menuItems?.length === 1) {\n            this.breadCrumbsItems = [];\n            this.breadCrumbsItems.push(\n                new PepBreadCrumbItem({\n                    key: this.menuItems[0].key,\n                    text: this.menuItems[0].text,\n                })\n            );\n        }\n    }\n    get options(): Array<IPepListChooserOption> {\n        return this._options;\n    }\n\n    private _currentList: IPepListChooserOption = null;\n    @Input()\n    set currentList(value: IPepListChooserOption) {\n        this._currentList = value;\n        this.currentItem = { key: value.key, text: value.text };\n    }\n    get currentList(): IPepListChooserOption {\n        return this._currentList;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n\n    @Output()\n    change: EventEmitter<IPepListChooserOptionChangeEvent> = new EventEmitter<IPepListChooserOptionChangeEvent>();\n\n    breadCrumbsItems: Array<PepBreadCrumbItem> = null;\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        const currentList = this.options.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: currentList });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-chooser.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<IPepListChooserOption>",
                        "line": 50
                    }
                },
                "currentList": {
                    "name": "currentList",
                    "setSignature": {
                        "name": "currentList",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentList",
                        "type": "",
                        "returnType": "IPepListChooserOption",
                        "line": 60
                    }
                }
            },
            "templateData": "﻿<ng-container *ngIf=\"menuItems?.length > 1\">\n    <pep-menu [type]=\"'select'\" [sizeType]=\"sizeType\" [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"'arrow_down'\" (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</ng-container>\n<ng-container *ngIf=\"menuItems?.length == 1\">\n    <pep-bread-crumbs [items]=\"breadCrumbsItems\" [addSpacing]=\"true\"></pep-bread-crumbs>\n</ng-container>"
        },
        {
            "name": "PepListComponent",
            "id": "component-PepListComponent-ee832b866858b411b793eeba845fbc39",
            "file": "projects/ngx-lib/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentListTypeTranslation",
                    "defaultValue": "''",
                    "line": 81
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 95
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "line": 91
                },
                {
                    "name": "hideAllSelectionInMulti",
                    "defaultValue": "false",
                    "line": 84
                },
                {
                    "name": "isReport",
                    "defaultValue": "false",
                    "line": 98
                },
                {
                    "name": "layoutType",
                    "defaultValue": "null",
                    "line": 99,
                    "type": "PepLayoutType"
                },
                {
                    "name": "listType",
                    "defaultValue": "''",
                    "line": 87
                },
                {
                    "name": "lockEvents",
                    "defaultValue": "false",
                    "line": 96
                },
                {
                    "name": "lockItemInnerEvents",
                    "defaultValue": "false",
                    "line": 97
                },
                {
                    "name": "noDataFoundMsg",
                    "defaultValue": "null",
                    "line": 82,
                    "type": "string"
                },
                {
                    "name": "objectId",
                    "defaultValue": "'0'",
                    "line": 88
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "line": 104
                },
                {
                    "name": "pagerType",
                    "defaultValue": "'scroll'",
                    "line": 102,
                    "type": "PepListPagerType"
                },
                {
                    "name": "pageSize",
                    "defaultValue": "DEFAULT_PAGE_SIZE",
                    "line": 103,
                    "type": "number"
                },
                {
                    "name": "pageType",
                    "defaultValue": "''",
                    "line": 100
                },
                {
                    "name": "parentId",
                    "defaultValue": "'0'",
                    "line": 89
                },
                {
                    "name": "parentScroll",
                    "defaultValue": "null",
                    "line": 94,
                    "type": "Element | Window"
                },
                {
                    "name": "scrollAnimationTime",
                    "defaultValue": "500",
                    "line": 105
                },
                {
                    "name": "searchCode",
                    "defaultValue": "'0'",
                    "line": 90
                },
                {
                    "name": "selectionTypeForActions",
                    "defaultValue": "'multi'",
                    "line": 83,
                    "type": "PepListSelectionType"
                },
                {
                    "name": "supportResizing",
                    "defaultValue": "true",
                    "line": 93
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "true",
                    "line": 92
                },
                {
                    "name": "top",
                    "defaultValue": "-1",
                    "line": 86
                },
                {
                    "name": "totalsRow",
                    "defaultValue": "[]",
                    "line": 101
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "line": 110,
                    "type": "EventEmitter<IPepFormFieldClickEvent>"
                },
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter<IPepListItemClickEvent>()",
                    "line": 108,
                    "type": "EventEmitter<IPepListItemClickEvent>"
                },
                {
                    "name": "listLoad",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 121,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "loadItems",
                    "defaultValue": "new EventEmitter<IPepListLoadItemsEvent>()",
                    "line": 123,
                    "type": "EventEmitter<IPepListLoadItemsEvent>"
                },
                {
                    "name": "loadPage",
                    "defaultValue": "new EventEmitter<IPepListLoadPageEvent>()",
                    "line": 125,
                    "type": "EventEmitter<IPepListLoadPageEvent>"
                },
                {
                    "name": "selectAllClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 118,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "selectedItemsChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 117,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "singleActionClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 119,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sortingChange",
                    "defaultValue": "new EventEmitter<IPepListSortingChangeEvent>()",
                    "line": 114,
                    "type": "EventEmitter<IPepListSortingChangeEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "line": 112,
                    "type": "EventEmitter<IPepFormFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_items",
                    "defaultValue": "null",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_layout",
                    "defaultValue": "null",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showItems",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_useVirtualScroll",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ALL_SELECTED_STATE_KEY",
                    "defaultValue": "'AllSelected'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ASCENDING_STATE_KEY",
                    "defaultValue": "'IsAscending'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "calculatedObjectHeight",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "checkForChanges",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 193
                },
                {
                    "name": "containerWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentTween",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 166,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deviceHasMouse",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "hasColumnWidthOfTypePercentage",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hoveredItemId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "isAllSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "isAsc",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "isTable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "isUserSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 192
                },
                {
                    "name": "itemClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "itemsCounter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "listPager",
                    "type": "PepListPagerComponent",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PepListPagerComponent"
                        }
                    ]
                },
                {
                    "name": "MINIMUM_COLUMN_WIDTH",
                    "defaultValue": "48",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "nativeWindow",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "noVirtualScrollContnainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'noVirtualScrollContnainer'"
                        }
                    ]
                },
                {
                    "name": "pressedColumn",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "scrollItems",
                    "type": "Array<ObjectsDataRow>",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "selectAllCB",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectAllCB'"
                        }
                    ]
                },
                {
                    "name": "SELECTED_ITEMS_STATE_KEY",
                    "defaultValue": "'SelectedItems'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "selectedItemId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "new Map<string, string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "SEPARATOR",
                    "defaultValue": "','",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "showCardSelection",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "SORT_BY_STATE_KEY",
                    "defaultValue": "'SortBy'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "sortBy",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "startWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "startX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "tableStartWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "TOP_ITEMS_ARRAY",
                    "defaultValue": "2500",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_ITEMS_DEFAULT",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_ITEMS_TABLE",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "TOP_ITEMS_THUMBNAILS",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "totalRows",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "UN_SELECTED_ITEMS_STATE_KEY",
                    "defaultValue": "'UnSelectedItems'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "unSelectedItems",
                    "defaultValue": "new Map<string, string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "viewType",
                    "type": "PepListViewType",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "virtualScroll",
                    "type": "PepVirtualScrollComponent",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PepVirtualScrollComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calcColumnsWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 504,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cleanItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 627,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1026
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 792,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getIsAllSelected",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<ObjectsDataRow>"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 713,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<ObjectsDataRow>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsAllSelectedForActions",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 811
                },
                {
                    "name": "getIsDisabled",
                    "args": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 805,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsItemEditable",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 1316,
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsItemSelected",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean"
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 904,
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemDataByID",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRow",
                    "typeParameters": [],
                    "line": 1325,
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumberOfStartItems",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 730,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getParent",
                    "args": [
                        {
                            "name": "el",
                            "type": ""
                        },
                        {
                            "name": "parentSelector",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 600,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentSelector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParentContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "Element | Window",
                    "typeParameters": [],
                    "line": 623,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getSelectedItemsData",
                    "args": [
                        {
                            "name": "isForEdit",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "PepSelectionData",
                    "typeParameters": [],
                    "line": 1245,
                    "jsdoctags": [
                        {
                            "name": "isForEdit",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getThumbnailsLayout",
                    "args": [],
                    "optional": false,
                    "returnType": "PepLayoutType",
                    "typeParameters": [],
                    "line": 1008
                },
                {
                    "name": "getTopItems",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 368,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getUniqItemId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 455,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initListData",
                    "args": [
                        {
                            "name": "layout",
                            "type": "UIControl"
                        },
                        {
                            "name": "totalRows",
                            "type": "number"
                        },
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        },
                        {
                            "name": "viewType",
                            "type": "PepListViewType",
                            "defaultValue": "''"
                        },
                        {
                            "name": "itemClass",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "showCardSelection",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1083,
                    "jsdoctags": [
                        {
                            "name": "layout",
                            "type": "UIControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalRows",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewType",
                            "type": "PepListViewType",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemClass",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showCardSelection",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initResizeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 593,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initVariablesFromSession",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 635,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemClicked",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 945,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "onCardMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 995,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCardMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1004,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "customizeFieldClickedData",
                            "type": "IPepFormFieldClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1570,
                    "jsdoctags": [
                        {
                            "name": "customizeFieldClickedData",
                            "type": "IPepFormFieldClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListHeaderMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1452,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListHeaderMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1456,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1558
                },
                {
                    "name": "onListResize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1364,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListResizeEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1419,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListResizeStart",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "columnKey",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1352,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnKey",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListSortingChange",
                    "args": [
                        {
                            "name": "sortBy",
                            "type": "string"
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean"
                        },
                        {
                            "name": "event",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1435,
                    "jsdoctags": [
                        {
                            "name": "sortBy",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1332,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPagerChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListPagerChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1462,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListPagerChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScrollChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepVirtualScrollChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1501,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepVirtualScrollChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTableRowMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 982,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTableRowMouseLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 991,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "valueChange",
                            "type": "IPepFormFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1562,
                    "jsdoctags": [
                        {
                            "name": "valueChange",
                            "type": "IPepFormFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWinResize",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1343,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveSortingToSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectAllItemsForActions",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 848,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItemForActions",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean"
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 929,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setContainerWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setIsAllSelected",
                    "args": [
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 838,
                    "jsdoctags": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemClicked",
                    "args": [
                        {
                            "name": "itemId",
                            "type": ""
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean"
                        },
                        {
                            "name": "itemType",
                            "type": "string"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 749,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelectableForActions",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLayout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setSelectedIds",
                    "args": [
                        {
                            "name": "selectedIds",
                            "type": "string[]"
                        },
                        {
                            "name": "items",
                            "type": "null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1031,
                    "jsdoctags": [
                        {
                            "name": "selectedIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectionDataInSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1062
                },
                {
                    "name": "setSelectionItems",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string"
                        },
                        {
                            "name": "uniqItemId",
                            "type": "string"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 430,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uniqItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleItems",
                    "args": [
                        {
                            "name": "isVisible",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "isVisible",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "data",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1216,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItemProperties",
                    "args": [
                        {
                            "name": "itemToUpdate",
                            "type": "ObjectsDataRow"
                        },
                        {
                            "name": "data",
                            "type": "ObjectsDataRow"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1235,
                    "jsdoctags": [
                        {
                            "name": "itemToUpdate",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ObjectsDataRow",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        },
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1151,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePage",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]"
                        },
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1187,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScrollItems",
                    "args": [
                        {
                            "name": "startIndex",
                            "type": ""
                        },
                        {
                            "name": "endIndex",
                            "type": ""
                        },
                        {
                            "name": "loadInChunks",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "startIndex",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endIndex",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadInChunks",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnInit,\n    Renderer2,\n    ViewChild,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    OnChanges,\n    NgZone,\n} from '@angular/core';\nimport { delay } from 'rxjs/operators';\nimport {\n    PepLayoutType,\n    PepLayoutService,\n    PepScrollToService,\n    PepWindowScrollingService,\n    PepScreenSizeType,\n    PepSessionService,\n    UIControl,\n    UIControlField,\n    FIELD_TYPE,\n    ObjectsDataRow,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    IPepFormFieldValueChangeEvent,\n    IPepFormFieldClickEvent,\n} from '@pepperi-addons/ngx-lib/form';\nimport {\n    PepVirtualScrollComponent,\n    IPepVirtualScrollChangeEvent,\n} from './virtual-scroll.component';\nimport {\n    IPepListLoadItemsEvent,\n    IPepListSortingChangeEvent,\n    IPepListItemClickEvent,\n    PepListSelectionType,\n    PepListViewType,\n    PepSelectionData,\n    PepListPagerType,\n    IPepListLoadPageEvent,\n    DEFAULT_PAGE_SIZE,\n} from './list.model';\nimport {\n    IPepListPagerChangeEvent,\n    PepListPagerComponent,\n} from './list-pager.component';\n\nimport * as tween from '@tweenjs/tween.js';\n\n@Component({\n    selector: 'pep-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n    host: {\n        // '[style.width]': \"'inherit'\",\n        '(document:mousedown)': 'onMouseDown($event)',\n        '(window:resize)': 'onWinResize($event)',\n        // '(window:mouseup)': 'onListResizeEnd($event)',\n        // '(window:mousemove)': 'onListResize($event)'\n    },\n    // changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PepListComponent implements OnInit, OnChanges, OnDestroy {\n    static TOP_ITEMS_DEFAULT = 100;\n    static TOP_ITEMS_TABLE = 100;\n    static TOP_ITEMS_THUMBNAILS = 100;\n    static TOP_ITEMS_ARRAY = 2500;\n\n    static SELECTED_ITEMS_STATE_KEY = 'SelectedItems';\n    static UN_SELECTED_ITEMS_STATE_KEY = 'UnSelectedItems';\n    static ALL_SELECTED_STATE_KEY = 'AllSelected';\n    static SORT_BY_STATE_KEY = 'SortBy';\n    static ASCENDING_STATE_KEY = 'IsAscending';\n\n    static MINIMUM_COLUMN_WIDTH = 48;\n\n    @Input() currentListTypeTranslation = '';\n    @Input() noDataFoundMsg: string = null;\n    @Input() selectionTypeForActions: PepListSelectionType = 'multi';\n    @Input() hideAllSelectionInMulti = false;\n\n    @Input() top = -1;\n    @Input() listType = '';\n    @Input() objectId = '0';\n    @Input() parentId = '0';\n    @Input() searchCode = '0';\n    @Input() firstFieldAsLink = false;\n    @Input() supportSorting = true;\n    @Input() supportResizing = true;\n    @Input() parentScroll: Element | Window = null;\n    @Input() disabled = false;\n    @Input() lockEvents = false;\n    @Input() lockItemInnerEvents = false;\n    @Input() isReport = false;\n    @Input() layoutType: PepLayoutType = null;\n    @Input() pageType = '';\n    @Input() totalsRow = [];\n    @Input() pagerType: PepListPagerType = 'scroll';\n    @Input() pageSize: number = DEFAULT_PAGE_SIZE;\n    @Input() pageIndex = 0;\n    @Input() scrollAnimationTime = 500;\n\n    @Output()\n    itemClick: EventEmitter<IPepListItemClickEvent> = new EventEmitter<IPepListItemClickEvent>();\n    @Output()\n    fieldClick: EventEmitter<IPepFormFieldClickEvent> = new EventEmitter<IPepFormFieldClickEvent>();\n    @Output()\n    valueChange: EventEmitter<IPepFormFieldValueChangeEvent> = new EventEmitter<IPepFormFieldValueChangeEvent>();\n    @Output()\n    sortingChange: EventEmitter<IPepListSortingChangeEvent> = new EventEmitter<IPepListSortingChangeEvent>();\n\n    @Output()\n    selectedItemsChange: EventEmitter<number> = new EventEmitter<number>();\n    @Output() selectAllClick: EventEmitter<any> = new EventEmitter<any>();\n    @Output() singleActionClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() listLoad: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    loadItems: EventEmitter<IPepListLoadItemsEvent> = new EventEmitter<IPepListLoadItemsEvent>();\n    @Output()\n    loadPage: EventEmitter<IPepListLoadPageEvent> = new EventEmitter<IPepListLoadPageEvent>();\n\n    @ViewChild(PepVirtualScrollComponent)\n    virtualScroll: PepVirtualScrollComponent;\n    @ViewChild(PepListPagerComponent) listPager: PepListPagerComponent;\n    @ViewChild('noVirtualScrollContnainer')\n    noVirtualScrollContnainer: ElementRef;\n    @ViewChild('selectAllCB') selectAllCB: any;\n\n    private _layout: UIControl = null;\n    get layout(): UIControl {\n        return this._layout;\n    }\n\n    totalRows = -1;\n    itemClass: string;\n    isTable = false;\n    private hasColumnWidthOfTypePercentage = true;\n\n    private _items: Array<ObjectsDataRow> = null;\n    get items(): Array<ObjectsDataRow> {\n        return this._items;\n    }\n\n    private _useVirtualScroll = true;\n    get useVirtualScroll(): boolean {\n        return this._useVirtualScroll;\n    }\n\n    private itemsCounter = 0;\n    showCardSelection = false;\n\n    viewType: PepListViewType;\n    scrollItems: Array<ObjectsDataRow>;\n\n    SEPARATOR = ',';\n    isAllSelected = false;\n    selectedItems = new Map<string, string>();\n    unSelectedItems = new Map<string, string>();\n\n    nativeWindow: any = null;\n    private currentTween: any;\n\n    selectedItemId = '';\n    hoveredItemId = '';\n\n    private containerWidth = 0;\n\n    private _showItems = true;\n    get showItems() {\n        return this._showItems;\n    }\n\n    screenSize: PepScreenSizeType;\n    deviceHasMouse = false;\n\n    // headerIsInFocus = false;\n\n    // For resize\n    pressedColumn = '';\n    startX = 0;\n    startWidth = 0;\n    tableStartWidth = 0;\n\n    // For sorting\n    isAsc = true;\n    sortBy = '';\n    isUserSelected = false;\n    checkForChanges: any = null;\n    calculatedObjectHeight: string;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService,\n        private sessionService: PepSessionService,\n        private scrollToService: PepScrollToService,\n        private windowScrollingService: PepWindowScrollingService,\n        private cd: ChangeDetectorRef,\n        private renderer: Renderer2,\n        private zone: NgZone\n    ) {\n        this.exportFunctionsOnHostElement();\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n\n        this.nativeWindow = window;\n        this.deviceHasMouse = this.layoutService.getDeviceHasMouse();\n        this.layoutService.onMouseOver$.subscribe((deviceHasMouse: boolean) => {\n            this.deviceHasMouse = deviceHasMouse;\n        });\n    }\n\n    ngOnInit(): void {\n        this.containerWidth = 0;\n    }\n\n    ngOnChanges(changes): void {\n        if (this.containerWidth <= 0) {\n            this.setContainerWidth();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n\n        // if (this.loadItems) {\n        //     this.loadItems.unsubscribe();\n        // }\n\n        // if (this.loadPage) {\n        //     this.loadPage.unsubscribe();\n        // }\n\n        // if (this.sortingChange) {\n        //     this.sortingChange.unsubscribe();\n        // }\n\n        // if (this.fieldClick) {\n        //     this.fieldClick.unsubscribe();\n        // }\n\n        // if (this.itemClick) {\n        //     this.itemClick.unsubscribe();\n        // }\n\n        // if (this.listLoad) {\n        //     this.listLoad.unsubscribe();\n        // }\n\n        this.saveSortingToSession();\n    }\n\n    private scrollToTop() {\n        const scrollingElement = this.getParentContainer();\n        if (scrollingElement) {\n            // if (this.useVirtualScroll && typeof this.virtualScroll !== 'undefined') {\n            //     this.virtualScroll.scrollInto(0);\n            // } else {\n            // this.scrollToService.scrollElementTo(this.renderer, scrollingElement, 1000);\n            // }\n\n            let animationRequest;\n            const scrollTop = 0;\n            const isWindow = scrollingElement instanceof Window;\n            const currentScrollTop =\n                scrollingElement instanceof Window\n                    ? window.pageYOffset\n                    : scrollingElement.scrollTop;\n\n            if (this.currentTween !== undefined) {\n                this.currentTween.stop();\n            }\n\n            // totally disable animate\n            if (this.scrollAnimationTime === 0) {\n                if (scrollingElement instanceof Window) {\n                    window.scrollTo(0, scrollTop);\n                } else {\n                    scrollingElement.scrollTop = scrollTop;\n                }\n                return;\n            }\n\n            this.currentTween = new tween.Tween({ scrollTop: currentScrollTop })\n                .to({ scrollTop }, this.scrollAnimationTime)\n                .easing(tween.Easing.Quadratic.Out)\n                .onUpdate((data) => {\n                    if (isNaN(data.scrollTop)) {\n                        return;\n                    }\n\n                    if (isWindow) {\n                        window.scrollTo(0, data.scrollTop);\n                    } else {\n                        this.renderer.setProperty(\n                            scrollingElement,\n                            'scrollTop',\n                            data.scrollTop\n                        );\n                    }\n                })\n                .onStop(() => {\n                    cancelAnimationFrame(animationRequest);\n                })\n                .start();\n\n            const animate = (time?) => {\n                this.currentTween.update(time);\n                if (this.currentTween._object.scrollTop !== scrollTop) {\n                    this.zone.runOutsideAngular(() => {\n                        animationRequest = requestAnimationFrame(animate);\n                    });\n                }\n            };\n\n            animate();\n        }\n    }\n\n    private setContainerWidth(): void {\n        const selectionCheckBoxWidth =\n            this.selectionTypeForActions === 'multi' ? 44 : 0;\n\n        const rowHeight = 40; // the table row height (2.5rem * 16font-size).\n        const style = window.getComputedStyle(\n            this.hostElement.nativeElement.parentElement\n        );\n        // The container-fluid class padding left + right + border\n        const containerFluidSpacing =\n            parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n\n        const parentContainer =\n            this.hostElement.nativeElement.parentElement.parentElement > 0\n                ? this.hostElement.nativeElement.parentElement.parentElement\n                : this.hostElement.nativeElement.parentElement;\n\n        // Calculate if vertical scroll should appear, if so set the scroll width. (this.totalRows + 1) + 1 is for the header row.\n        const scrollWidth =\n            parentContainer.clientHeight < rowHeight * (this.totalRows + 1)\n                ? 18\n                : 0; // 18 is the default scroll width.\n\n        // The selectionCheckBoxWidth width + containerFluidSpacing + scrollWidth.\n        const rowHeaderWidthToSub =\n            containerFluidSpacing + selectionCheckBoxWidth + scrollWidth;\n        this.containerWidth = parentContainer.offsetWidth - rowHeaderWidthToSub;\n    }\n\n    private saveSortingToSession(): void {\n        this.sessionService.setObject(\n            PepListComponent.SORT_BY_STATE_KEY,\n            this.sortBy\n        );\n        this.sessionService.setObject(\n            PepListComponent.ASCENDING_STATE_KEY,\n            this.isAsc\n        );\n    }\n\n    private getTopItems(): number {\n        return this.isTable\n            ? PepListComponent.TOP_ITEMS_TABLE\n            : PepListComponent.TOP_ITEMS_THUMBNAILS;\n    }\n\n    private toggleItems(isVisible: boolean): void {\n        this._showItems = isVisible;\n\n        // TODO: Maybe we need to check the disable scrolling just on the container.\n        // if (this._useVirtualScroll) {\n        //     // if (isVisible) {\n        //     //     this.windowScrollingService.disable();\n        //     // } else {\n        //     //     this.windowScrollingService.enable();\n        //     // }\n        // }\n    }\n\n    private updateScrollItems(\n        startIndex,\n        endIndex,\n        loadInChunks = false\n    ): void {\n        if (!loadInChunks) {\n            this.scrollItems = this.items.slice(startIndex, endIndex);\n        } else {\n            // Insert the first for the UI calculation.\n            this.scrollItems = this.items.slice(startIndex, startIndex + 1);\n\n            const ITEMS_RENDERED_AT_ONCE = 1; //this.isTable ? 10 : 5;\n            const INTERVAL_IN_MS = 1;\n\n            let currentIndex = 0;\n            const tmp = this.items.slice(startIndex, endIndex);\n\n            const interval = setInterval(() => {\n                const nextIndex = currentIndex + ITEMS_RENDERED_AT_ONCE;\n\n                for (let i = currentIndex; i < nextIndex; i++) {\n                    if (i >= tmp.length) {\n                        clearInterval(interval);\n                        break;\n                    }\n\n                    if (this.scrollItems[i]) {\n                        this.scrollItems[i] = tmp[i];\n                    } else {\n                        this.scrollItems.push(tmp[i]);\n                    }\n                }\n\n                currentIndex += ITEMS_RENDERED_AT_ONCE;\n            }, INTERVAL_IN_MS);\n\n            // Remove the rest of the prev items - fit the current count\n            while (this.scrollItems.length > tmp.length) {\n                this.scrollItems.pop();\n            }\n        }\n    }\n\n    private setSelectionItems(\n        itemId: string,\n        uniqItemId: string,\n        isChecked: boolean\n    ): void {\n        // Set selected item checkbox\n        if (this.isAllSelected) {\n            if (isChecked) {\n                this.unSelectedItems.delete(itemId);\n                this.selectedItems.set(itemId, uniqItemId);\n            } else {\n                this.selectedItems.delete(itemId);\n                this.unSelectedItems.set(itemId, uniqItemId);\n            }\n        } else {\n            if (isChecked) {\n                this.unSelectedItems.delete(itemId);\n                this.selectedItems.set(itemId, uniqItemId);\n            } else {\n                this.selectedItems.delete(itemId);\n                this.unSelectedItems.set(itemId, uniqItemId);\n            }\n        }\n    }\n\n    private getUniqItemId(itemId: string, itemType = ''): string {\n        return itemId + this.SEPARATOR + itemType;\n    }\n\n    private setLayout(): void {\n        if (\n            this.totalRows === 0 ||\n            !this._layout ||\n            !this._layout.ControlFields ||\n            this._layout.ControlFields.length === 0\n        ) {\n            return;\n        }\n\n        this._layout.ControlFields.forEach((cf) => {\n            if (cf.ColumnWidth === 0) {\n                cf.ColumnWidth = 10;\n            }\n\n            if (\n                this.isTable &&\n                (cf.FieldType === FIELD_TYPE.Image ||\n                    // cf.FieldType === FIELD_TYPE.Indicators || ???\n                    cf.FieldType === FIELD_TYPE.Signature ||\n                    cf.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||\n                    cf.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||\n                    cf.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||\n                    cf.FieldType === FIELD_TYPE.NumberRealForMatrix ||\n                    cf.FieldType === FIELD_TYPE.Package ||\n                    cf.ApiName === 'UnitsQuantity' ||\n                    cf.ApiName === 'QuantitySelector')\n            ) {\n                cf.Layout.XAlignment = 3;\n            }\n        });\n\n        if (!this.cd['destroyed']) {\n            this.cd.detectChanges();\n        }\n\n        // Set the columns width.\n        if (this.containerWidth <= 0) {\n            this.setContainerWidth();\n        }\n\n        this.calcColumnsWidth();\n        this.checkForChanges = new Date().getTime();\n    }\n\n    private calcColumnsWidth(): void {\n        const fixedMultiple = 3.78; // for converting em to pixel.\n        const length = this._layout.ControlFields.length;\n        const selectionCheckBoxWidth =\n            this.selectionTypeForActions === 'multi' ? 44 : 0;\n\n        // Is table AND there is at least one column of width type of percentage.\n        if (this.isTable) {\n            if (this._layout && this._layout.ControlFields) {\n                this.hasColumnWidthOfTypePercentage =\n                    this._layout.ControlFields.filter(\n                        (cf) => cf.ColumnWidthType === 1\n                    ).length === 0;\n            }\n        }\n\n        // If the columns size is fixed and the total is small then the container change it to percentage.\n        if (!this.hasColumnWidthOfTypePercentage) {\n            const totalFixedColsWidth = this._layout.ControlFields.map(\n                (cf) => cf.ColumnWidth * fixedMultiple\n            ).reduce((sum, current) => sum + current);\n\n            if (window.innerWidth > totalFixedColsWidth) {\n                this.hasColumnWidthOfTypePercentage = true;\n            }\n        }\n\n        let totalCalcColsWidth = 0;\n\n        // Calc by percentage\n        if (this.hasColumnWidthOfTypePercentage) {\n            const totalColsWidth: number = this._layout.ControlFields.map(\n                (cf) => cf.ColumnWidth\n            ).reduce((sum, current) => sum + current);\n\n            for (let index = 0; index < length; index++) {\n                const uiControlField: UIControlField = this._layout\n                    .ControlFields[index];\n                const calcColumnWidthPercentage =\n                    (100 / totalColsWidth) * uiControlField.ColumnWidth;\n\n                uiControlField.calcColumnWidth = Math.floor(\n                    (this.containerWidth * calcColumnWidthPercentage) / 100\n                );\n\n                if (index === length - 1) {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\n                } else {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        uiControlField.calcColumnWidth + 'px';\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\n                }\n            }\n\n            this.renderer.setStyle(\n                this.hostElement.nativeElement,\n                'width',\n                'inherit'\n            );\n        } else {\n            for (let index = 0; index < length; index++) {\n                const uiControlField: UIControlField = this._layout\n                    .ControlFields[index];\n                const currentFixedWidth = Math.floor(\n                    uiControlField.ColumnWidth * fixedMultiple\n                );\n\n                if (index === length - 1) {\n                    uiControlField.calcTitleColumnWidthString =\n                        currentFixedWidth + 'px';\n                    uiControlField.calcColumnWidthString =\n                        currentFixedWidth - 4 + 'px'; // -4 for the row padding.\n                } else {\n                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                        currentFixedWidth + 'px';\n                }\n\n                totalCalcColsWidth += currentFixedWidth;\n            }\n\n            this.renderer.setStyle(\n                this.hostElement.nativeElement,\n                'width',\n                totalCalcColsWidth + selectionCheckBoxWidth + 'px'\n            );\n        }\n    }\n\n    private initResizeData(): void {\n        this.startX = 0;\n        this.startWidth = 0;\n        this.tableStartWidth = 0;\n        this.pressedColumn = '';\n    }\n\n    private getParent(el, parentSelector): any {\n        // If no parentSelector defined will bubble up all the way to *document*\n        if (parentSelector === undefined) {\n            parentSelector = document;\n        }\n        const parent = [];\n        let p = el.parentNode;\n\n        while (\n            p &&\n            p.className !== '' &&\n            p.className.indexOf(parentSelector) === -1 &&\n            parentSelector !== document\n        ) {\n            const o = p;\n            p = o.parentNode;\n        }\n        if (p.className.indexOf(parentSelector) > -1) {\n            parent.push(p); // Push that parentSelector you wanted to stop at\n        }\n        return parent;\n    }\n\n    private getParentContainer(): Element | Window {\n        return this.parentScroll ? this.parentScroll : window;\n    }\n\n    private cleanItems(): void {\n        this.itemsCounter = 0;\n        this._items =\n            this.totalRows > 0 ? Array<ObjectsDataRow>(this.totalRows) : [];\n        this.scrollItems = [];\n        this.calculatedObjectHeight = '';\n    }\n\n    private initVariablesFromSession(items: ObjectsDataRow[]): void {\n        const selectedItemsObject: Array<any> = this.sessionService.getObject<\n            Array<any>\n        >(PepListComponent.SELECTED_ITEMS_STATE_KEY);\n        const selectedItemsFromMap: Map<string, string> =\n            selectedItemsObject && selectedItemsObject.length > 0\n                ? new Map(selectedItemsObject)\n                : null;\n        if (\n            selectedItemsFromMap != null &&\n            typeof selectedItemsFromMap.size !== 'undefined' &&\n            selectedItemsFromMap.size > 0\n        ) {\n            this.selectedItems = selectedItemsFromMap;\n            this.sessionService.removeObject(\n                PepListComponent.SELECTED_ITEMS_STATE_KEY\n            );\n        } else {\n            this.selectedItems.clear();\n        }\n\n        const unSelectedItemsObject: Array<any> = this.sessionService.getObject<\n            Array<any>\n        >(PepListComponent.UN_SELECTED_ITEMS_STATE_KEY);\n        const unSelectedItemsMap: Map<string, string> =\n            unSelectedItemsObject && unSelectedItemsObject.length > 0\n                ? new Map(unSelectedItemsObject)\n                : null;\n        if (\n            unSelectedItemsMap != null &&\n            typeof unSelectedItemsMap.size !== 'undefined' &&\n            unSelectedItemsMap.size > 0\n        ) {\n            this.unSelectedItems = unSelectedItemsMap;\n            this.sessionService.removeObject(\n                PepListComponent.UN_SELECTED_ITEMS_STATE_KEY\n            );\n        } else {\n            this.unSelectedItems.clear();\n        }\n\n        const isAllSelected = this.sessionService.getObject(\n            PepListComponent.ALL_SELECTED_STATE_KEY\n        );\n        if (isAllSelected != null) {\n            this.isAllSelected = isAllSelected && this.getIsAllSelected(items);\n            this.sessionService.removeObject(\n                PepListComponent.ALL_SELECTED_STATE_KEY\n            );\n        } else {\n            this.isAllSelected = false;\n        }\n\n        const sortBy = this.sessionService.getObject(\n            PepListComponent.SORT_BY_STATE_KEY\n        );\n        if (sortBy && sortBy !== '') {\n            this.sortBy = sortBy;\n            this.sessionService.removeObject(\n                PepListComponent.SORT_BY_STATE_KEY\n            );\n        } else {\n            this.sortBy = '';\n        }\n\n        const isAsc = this.sessionService.getObject(\n            PepListComponent.ASCENDING_STATE_KEY\n        );\n        if (isAsc != null) {\n            this.isAsc = isAsc;\n            this.sessionService.removeObject(\n                PepListComponent.ASCENDING_STATE_KEY\n            );\n        } else {\n            this.isAsc = true;\n        }\n    }\n\n    private getIsAllSelected(items: Array<ObjectsDataRow>): boolean {\n        let result = true;\n\n        if (this.selectedItems?.size > 0 && items?.length > 0) {\n            for (const item of items) {\n                if (!(item && this.selectedItems.has(item.UID.toString()))) {\n                    result = false;\n                    break;\n                }\n            }\n        } else {\n            result = false;\n        }\n\n        return result;\n    }\n\n    private getNumberOfStartItems(): number {\n        let numberOfStartItems = 20;\n\n        if (\n            this.screenSize === PepScreenSizeType.XL ||\n            this.screenSize === PepScreenSizeType.LG\n        ) {\n            numberOfStartItems = this.isTable ? 50 : 40;\n        } else if (this.screenSize === PepScreenSizeType.MD) {\n            numberOfStartItems = this.isTable ? 30 : 20;\n        } else if (this.screenSize === PepScreenSizeType.SM) {\n            numberOfStartItems = this.isTable ? 20 : 10;\n        } else if (this.screenSize === PepScreenSizeType.XS) {\n            numberOfStartItems = this.isTable ? 15 : 5;\n        }\n\n        return numberOfStartItems;\n    }\n\n    private setItemClicked(\n        itemId,\n        isSelectableForActions: boolean,\n        itemType: string,\n        isChecked: boolean\n    ): void {\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n\n        // select the selected item.\n        if (isChecked) {\n            // Set seleted item\n            this.selectedItemId = uniqItemId;\n        } else {\n            if (this.selectedItemId === uniqItemId) {\n                this.selectedItemId = '';\n            }\n        }\n\n        if (this.selectionTypeForActions === 'single') {\n            this.selectedItemsChange.emit(\n                this.selectedItemId.length === 0 ? 0 : 1\n            );\n        } else if (this.selectionTypeForActions === 'single-action') {\n            this.setSelectionItems(itemId, uniqItemId, isChecked);\n            this.singleActionClick.emit({\n                id: itemId,\n                selected: isChecked,\n            });\n        } else if (this.selectionTypeForActions === 'multi') {\n            if (isSelectableForActions) {\n                this.setSelectionItems(itemId, uniqItemId, isChecked);\n\n                const currentList = this.isAllSelected\n                    ? this.unSelectedItems\n                    : this.selectedItems;\n                const currentListCount = this.isAllSelected\n                    ? this.totalRows - currentList.size\n                    : currentList.size;\n                this.selectedItemsChange.emit(currentListCount);\n            }\n        }\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.clear = this.clear.bind(this);\n        this.hostElement.nativeElement.initListData = this.initListData.bind(\n            this\n        );\n        this.hostElement.nativeElement.updateItems = this.updateItems.bind(\n            this\n        );\n        this.hostElement.nativeElement.updatePage = this.updatePage.bind(this);\n        this.hostElement.nativeElement.updateItem = this.updateItem.bind(this);\n    }\n\n    getIsDisabled(item: ObjectsDataRow): boolean {\n        return (\n            this.lockItemInnerEvents || (item && !item.IsSelectableForActions)\n        );\n    }\n\n    getIsAllSelectedForActions(): boolean {\n        let res = false;\n\n        if (this.isAllSelected) {\n            if (this.unSelectedItems.size === 0) {\n                res = true;\n            }\n        } else {\n            if (this.scrollItems) {\n                if (this.selectedItems.size === this.totalRows) {\n                    res = this.getIsAllSelected(this.scrollItems);\n                } else if (this.selectedItems.size < this.totalRows) {\n                    for (const item of this.scrollItems) {\n                        res =\n                            item && this.selectedItems.has(item.UID.toString());\n\n                        if (!res) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n\n    setIsAllSelected(isChecked: boolean): void {\n        if (\n            this.selectionTypeForActions === 'multi' ||\n            this.selectionTypeForActions === 'single-action'\n        ) {\n            this.selectAllCB.checked = isChecked;\n            this.isAllSelected = isChecked;\n        }\n    }\n\n    selectAllItemsForActions(e: any): void {\n        // For material checkbox || radio.\n        const isChecked = e.source.checked;\n\n        // Indeterminate mode\n        let isIndeterminate = false;\n        const currentList = this.isAllSelected\n            ? this.unSelectedItems\n            : this.selectedItems;\n        if (currentList.size > 0) {\n            isIndeterminate = true;\n            this.isAllSelected = false;\n            this.selectedItemsChange.emit(0);\n            e.source.checked = false;\n        }\n\n        this.selectedItems.clear();\n        this.unSelectedItems.clear();\n\n        if (!isIndeterminate) {\n            this.isAllSelected = isChecked;\n            this.selectAllClick.emit(isChecked);\n\n            if (this.selectionTypeForActions === 'multi') {\n                if (!isChecked) {\n                    this.selectedItemsChange.emit(0);\n                    this.selectedItemId = '';\n                } else {\n                    const filteredItems = this.items.filter(\n                        (item) => item && item.IsSelectableForActions\n                    );\n                    this.selectedItemsChange.emit(filteredItems.length);\n                }\n            }\n        } else {\n            if (this.selectionTypeForActions === 'single-action') {\n                // Remove all\n                this.selectAllClick.emit(false);\n            }\n        }\n    }\n\n    // getIsItemSelected(itemId: string, itemType = ''): boolean {\n    //     let isSelected = false;\n    //     if (this.selectionTypeForActions === 'single-action' ||\n    //         this.selectionTypeForActions === 'multi') {\n    //         isSelected = this.selectedItems.has(itemId) || (this.isAllSelected && !this.unSelectedItems.has(itemId));\n    //     } else if (this.selectionTypeForActions === 'single') {\n    //         const uniqItemId = this.getUniqItemId(itemId, itemType);\n    //         isSelected = uniqItemId === this.selectedItemId;\n    //     }\n\n    //     return isSelected;\n    // }\n\n    // Change the name from getIsSelectedForActions to getIsItemSelected\n    getIsItemSelected(\n        itemId: string,\n        isSelectableForActions: boolean,\n        itemType = ''\n    ): boolean {\n        let isSelected = false;\n\n        if (this.selectionTypeForActions === 'single') {\n            isSelected =\n                this.selectedItemId === this.getUniqItemId(itemId, itemType);\n        } else if (this.selectionTypeForActions === 'single-action') {\n            isSelected =\n                (this.isAllSelected && !this.unSelectedItems.has(itemId)) ||\n                this.selectedItems.has(itemId);\n        } else if (this.selectionTypeForActions === 'multi') {\n            if (isSelectableForActions) {\n                isSelected =\n                    (this.isAllSelected && !this.unSelectedItems.has(itemId)) ||\n                    this.selectedItems.has(itemId);\n            }\n        }\n\n        return isSelected;\n    }\n\n    selectItemForActions(\n        e: any,\n        itemId: string,\n        isSelectableForActions: boolean,\n        itemType = ''\n    ): void {\n        // For material checkbox || radio.\n        const isChecked = e.source.checked;\n        this.setItemClicked(\n            itemId,\n            isSelectableForActions,\n            itemType,\n            isChecked\n        );\n    }\n\n    itemClicked(e: any, item: ObjectsDataRow): void {\n        // Set seleted item\n        const itemId = item.UID.toString();\n        const itemType = item.Type.toString();\n        let isChecked = false;\n\n        if (item && item.IsSelectableForActions) {\n            this.selectedItemId = this.getUniqItemId(itemId, itemType);\n            isChecked = true;\n        }\n\n        if (this.isTable) {\n            if (this.selectionTypeForActions === 'single') {\n                this.setItemClicked(\n                    itemId,\n                    item.IsSelectableForActions,\n                    itemType,\n                    isChecked\n                );\n            } else if (this.selectionTypeForActions === 'none') {\n                // Just mark the row as highlighted\n                this.setItemClicked(\n                    itemId,\n                    item.IsSelectableForActions,\n                    itemType,\n                    true\n                );\n            }\n        } else {\n            if (this.disabled) {\n                return;\n            }\n        }\n\n        this.itemClick.emit({ source: item, viewType: this.viewType });\n    }\n\n    onTableRowMouseEnter(event: any, itemId: string, itemType: string): void {\n        if (!this.deviceHasMouse) {\n            return;\n        }\n\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n        this.hoveredItemId = uniqItemId;\n    }\n\n    onTableRowMouseLeave(event: any, itemId: string, itemType: string): void {\n        this.hoveredItemId = '';\n    }\n\n    onCardMouseEnter(event: any, itemId: string, itemType: string): void {\n        if (!this.deviceHasMouse) {\n            return;\n        }\n\n        const uniqItemId = this.getUniqItemId(itemId, itemType);\n        this.hoveredItemId = uniqItemId;\n    }\n\n    onCardMouseLeave(event: any, itemId: string, itemType: string): void {\n        this.hoveredItemId = '';\n    }\n\n    getThumbnailsLayout(): PepLayoutType {\n        return this.layoutType ?? 'card';\n    }\n\n    // trackByFunc(index: number, item: ObjectsDataRow): any {\n    //     return item && item.UID ? item.UID : index;\n    //     // let res: string = \"\";\n\n    //     // if (item && item.UID) {\n    //     //    res = item.UID + \"_\" + this.listType + \"_\" + (this.isTable ? \"Table\" : \"Thumbnails\");\n    //     // }\n    //     // else {\n    //     //    res = index + \"_\" + this.listType + \"_\" + (this.isTable ? \"Table\" : \"Thumbnails\");\n    //     // }\n\n    //     // return res;\n    // }\n\n    clear(): void {\n        this.cleanItems();\n        this._layout = null;\n    }\n\n    setSelectedIds(selectedIds: string[], items = null): void {\n        this.selectedItems.clear();\n        this.isAllSelected = false;\n\n        if (selectedIds) {\n            // for (let i = 0; i < selected.length; i++) {\n            for (const selectedId of selectedIds) {\n                const tmp = selectedId.split(this.SEPARATOR);\n\n                if (tmp && tmp.length > 0) {\n                    const itemId = tmp[0];\n                    const itemType = tmp.length > 1 ? tmp[1] : '';\n\n                    this.selectedItems.set(\n                        itemId,\n                        this.getUniqItemId(itemId, itemType)\n                    );\n                }\n            }\n\n            this.isAllSelected = this.getIsAllSelected(\n                items ? items : this.scrollItems\n            );\n            this.setSelectionDataInSession();\n        }\n\n        if (typeof this.virtualScroll !== 'undefined') {\n            this.virtualScroll.refresh();\n        }\n    }\n\n    setSelectionDataInSession(): void {\n        if (this.selectedItems.size > 0) {\n            this.sessionService.setObject(\n                PepListComponent.SELECTED_ITEMS_STATE_KEY,\n                JSON.stringify([...this.selectedItems])\n            );\n        }\n\n        if (this.unSelectedItems.size > 0) {\n            this.sessionService.setObject(\n                PepListComponent.UN_SELECTED_ITEMS_STATE_KEY,\n                JSON.stringify([...this.unSelectedItems])\n            );\n        }\n\n        this.sessionService.setObject(\n            PepListComponent.ALL_SELECTED_STATE_KEY,\n            this.isAllSelected\n        );\n    }\n\n    initListData(\n        layout: UIControl,\n        totalRows: number,\n        items: ObjectsDataRow[],\n        viewType: PepListViewType = '',\n        itemClass = '',\n        showCardSelection = false\n    ): void {\n        this.initVariablesFromSession(items);\n        const currentList = this.isAllSelected\n            ? this.unSelectedItems\n            : this.selectedItems;\n        const currentListCount = this.isAllSelected\n            ? this.totalRows - currentList.size\n            : currentList.size;\n        this.selectedItemsChange.emit(currentListCount);\n\n        this.viewType = viewType;\n        this.isTable = viewType === 'table';\n        // this.isCardView = viewType === 'cards' || viewType === 'lines';\n        this.showCardSelection = showCardSelection;\n        this._layout = layout;\n        this.itemClass = itemClass;\n        this.selectedItemId = '';\n        this.totalRows = totalRows;\n\n        this.scrollToTop();\n        this.cleanItems();\n\n        if (items) {\n            if (this.pagerType === 'pages') {\n                this._useVirtualScroll = false;\n                // this.pageIndex = 0; // The user need to init the page index.\n\n                this.updatePage(items, {\n                    pageIndex: this.pageIndex,\n                    pageSize: this.pageSize,\n                });\n            } else {\n                if (this.totalRows === items.length) {\n                    this._useVirtualScroll = false;\n                    this.updateItems(items);\n                } else {\n                    this._useVirtualScroll = true;\n                    const numberOfStartItems = this.getNumberOfStartItems();\n                    const event = {\n                        start: 0,\n                        end: numberOfStartItems,\n                        fromIndex: 0,\n                        toIndex: numberOfStartItems,\n                    };\n                    this.updateItems(items, event);\n\n                    if (typeof this.virtualScroll !== 'undefined') {\n                        this.virtualScroll.refresh();\n                    }\n                }\n            }\n        }\n\n        // Raise list load event immediately, else will be raised from the scroller load event.\n        if (!this._useVirtualScroll) {\n            this.onListLoad();\n        }\n\n        this.setLayout();\n    }\n\n    updateItems(\n        items: ObjectsDataRow[],\n        event: IPepListLoadItemsEvent = null\n    ): void {\n        if (this._useVirtualScroll) {\n            if (!event) {\n                // Event isn't supplied.\n                return;\n            }\n\n            // Clean array\n            if (\n                this.itemsCounter + items.length >\n                PepListComponent.TOP_ITEMS_ARRAY\n            ) {\n                this.cleanItems();\n            }\n\n            const loadInChunks = this.itemsCounter === 0;\n            const startIndex = event.fromIndex ? event.fromIndex : event.start;\n\n            for (let i = 0; i < items.length; i++) {\n                if (!this.items[i + startIndex]) {\n                    this.items[i + startIndex] = items[i];\n                    this.itemsCounter += 1;\n                }\n            }\n\n            this.updateScrollItems(event.start, event.end, loadInChunks);\n            this.toggleItems(true);\n        } else {\n            this.scrollItems = this._items = items;\n            this.itemsCounter = items.length;\n        }\n    }\n\n    updatePage(items: ObjectsDataRow[], event: IPepListLoadPageEvent): void {\n        if (!event) {\n            // Event isn't supplied.\n            return;\n        }\n\n        // Clean array\n        if (\n            this.itemsCounter + items.length >\n            PepListComponent.TOP_ITEMS_ARRAY\n        ) {\n            this.cleanItems();\n        }\n\n        // const loadInChunks = this.itemsCounter === 0;\n        const startIndex = event.pageIndex * event.pageSize;\n        const endIndex = Math.min(startIndex + event.pageSize, this.totalRows);\n\n        for (let i = 0; i < items.length; i++) {\n            if (!this.items[i + startIndex]) {\n                this.items[i + startIndex] = items[i];\n                this.itemsCounter += 1;\n            }\n        }\n\n        this.updateScrollItems(startIndex, endIndex, false);\n        this.toggleItems(true);\n    }\n\n    updateItem(data: ObjectsDataRow): void {\n        let index = 0;\n\n        // Update items list\n        index = this.items.findIndex((i) => i && i.UID === data.UID);\n        if (index >= 0 && index < this.items.length) {\n            this.items[index] = data;\n        }\n\n        // Update scrollItems list\n        index = this.scrollItems.findIndex((i) => i && i.UID === data.UID);\n        if (index >= 0 && index < this.scrollItems.length) {\n            // this.scrollItems[index] = data;\n            // Update item properties to keep the pep-form instance.\n            this.updateItemProperties(this.scrollItems[index], data);\n            this.checkForChanges = new Date().getTime();\n        }\n    }\n\n    updateItemProperties(itemToUpdate: ObjectsDataRow, data: ObjectsDataRow) {\n        Object.assign(itemToUpdate, data);\n    }\n\n    // focusOnAnItem(itemIndex): void {\n    //     if (typeof this.virtualScroll !== 'undefined') {\n    //         this.virtualScroll.scrollInto(itemIndex);\n    //     }\n    // }\n\n    getSelectedItemsData(isForEdit = false): PepSelectionData {\n        const res = new PepSelectionData();\n\n        if (this.selectionTypeForActions === 'single') {\n            const tmp = this.selectedItemId.split(this.SEPARATOR);\n\n            res.selectionType = 1;\n            res.rows = [tmp[0]];\n            res.rowTypes = [tmp[1]];\n        } else if (this.selectionTypeForActions === 'multi') {\n            const items = [];\n            const itemTypes = [];\n            let selectionType = 1;\n            let currentList = [];\n\n            // For edit - only the selected items.\n            if (isForEdit) {\n                if (!this.isAllSelected) {\n                    currentList = Array.from(this.selectedItems.values());\n                } else {\n                    // Get the id's of the items that not founded in unSelectedItems.\n                    this.items.forEach((item) => {\n                        if (\n                            item &&\n                            !this.unSelectedItems.has(item.UID.toString())\n                        ) {\n                            currentList.push(\n                                this.getUniqItemId(\n                                    item.UID.toString(),\n                                    item.Type.toString()\n                                )\n                            );\n                        }\n                    });\n                }\n            } else {\n                // For delete - can be the unselected with select_all functionality.\n                currentList = Array.from(\n                    this.isAllSelected\n                        ? this.unSelectedItems.values()\n                        : this.selectedItems.values()\n                );\n                selectionType = this.isAllSelected ? 0 : 1;\n            }\n\n            currentList.forEach((item) => {\n                const tmp = item.split(this.SEPARATOR);\n\n                if (tmp.length === 2) {\n                    items.push(tmp[0]);\n                    itemTypes.push(tmp[1]);\n                }\n            });\n\n            res.selectionType = selectionType;\n            res.rows = items;\n            res.rowTypes = itemTypes;\n        }\n\n        return res;\n    }\n\n    // If not in use remove this function.\n    // private initCollectionFromState(collectionType, collection: string[]): void {\n    //     if (collectionType === 'Selected') {\n    //         collection.forEach((x) => this.selectedItems.set(x, x));\n    //     } else {\n    //         collection.forEach((x) => this.unSelectedItems.set(x, x));\n    //     }\n    // }\n\n    getIsItemEditable(uid: string): boolean {\n        const item = this.items.filter((x) => x.UID.toString() === uid);\n        if (item.length > 0) {\n            return item[0].IsEditable;\n        } else {\n            return false;\n        }\n    }\n\n    getItemDataByID(uid: string): ObjectsDataRow {\n        return this.items.find((item) => item.UID.toString() === uid);\n    }\n\n    // ---------------------------------------------------------------\n    //              Events handlers.\n    // ---------------------------------------------------------------\n    onMouseDown(event): void {\n        // if (!this.hostElement.nativeElement.contains(event.target) || event.target.className === 'scrollable-content') {\n        //     setTimeout(() => {\n        //         if (this.selectionTypeForActions === 'multi' || this.selectionTypeForActions === 'single-action') {\n        //         }\n        //         // this.selectedItemId = '';\n        //         // this.hoveredItemId = '';\n        //     }, 500);\n        // }\n    }\n\n    onWinResize(e): void {\n        if (typeof this.virtualScroll !== 'undefined') {\n            this.virtualScroll.refresh();\n        }\n\n        this.containerWidth = 0;\n        this.setLayout();\n    }\n\n    onListResizeStart(event, columnKey): void {\n        this.pressedColumn = columnKey;\n        this.startX = event.x;\n        this.startWidth = event.target.closest('.header-column').offsetWidth;\n        if (this._useVirtualScroll) {\n            this.tableStartWidth = this.virtualScroll.contentElementRef.nativeElement.offsetWidth;\n        } else {\n            // Set the tableStartWidth to the container offsetWidth\n            this.tableStartWidth = this.noVirtualScrollContnainer.nativeElement.offsetWidth;\n        }\n    }\n\n    onListResize(event): void {\n        if (this.pressedColumn.length > 0) {\n            const widthToAdd = this.layoutService.isRtl()\n                ? this.startX - event.x\n                : event.x - this.startX;\n\n            // Set the width of the column and the container of the whole columns.\n            if (\n                this.startWidth + widthToAdd >=\n                    PepListComponent.MINIMUM_COLUMN_WIDTH ||\n                widthToAdd > 0\n            ) {\n                const length = this._layout.ControlFields.length;\n                let totalCalcColsWidth = 0;\n\n                for (let index = 0; index < length; index++) {\n                    const uiControlField: UIControlField = this._layout\n                        .ControlFields[index];\n\n                    if (index === length - 1) {\n                        // Calc the last column only in percentage type.\n                        if (this.hasColumnWidthOfTypePercentage) {\n                            uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                                'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%\n                        } else {\n                            if (uiControlField.ApiName === this.pressedColumn) {\n                                uiControlField.calcColumnWidth =\n                                    this.startWidth + widthToAdd;\n                                uiControlField.calcTitleColumnWidthString =\n                                    uiControlField.calcColumnWidth + 'px';\n                                uiControlField.calcColumnWidthString =\n                                    uiControlField.calcColumnWidth - 4 + 'px';\n                            }\n                        }\n                    } else if (uiControlField.ApiName === this.pressedColumn) {\n                        uiControlField.calcColumnWidth =\n                            this.startWidth + widthToAdd;\n                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =\n                            uiControlField.calcColumnWidth + 'px';\n                    }\n\n                    totalCalcColsWidth += uiControlField.calcColumnWidth;\n                }\n\n                this.renderer.setStyle(\n                    this.hostElement.nativeElement,\n                    'width',\n                    this.tableStartWidth + widthToAdd + 'px'\n                );\n            }\n\n            this.checkForChanges = new Date().getTime();\n        }\n    }\n\n    onListResizeEnd(event): void {\n        if (this.pressedColumn.length > 0) {\n            if (\n                event &&\n                this.getParent(event.srcElement, 'resize-box').length > 0\n            ) {\n                this.initResizeData();\n            } else {\n                // Set timeout 0 for onListSortingChange will have the pressedColumn.\n                setTimeout(() => {\n                    this.initResizeData();\n                }, 0);\n            }\n        }\n    }\n\n    onListSortingChange(sortBy: string, isAsc: boolean, event = null): void {\n        if (\n            this.pressedColumn.length > 0 ||\n            (event && this.getParent(event.srcElement, 'resize-box').length > 0)\n        ) {\n            return;\n        }\n\n        if (this.sortBy !== sortBy || this.isAsc !== isAsc) {\n            this.sortBy = sortBy;\n            this.isAsc = isAsc;\n            this.saveSortingToSession();\n\n            this.sortingChange.emit({ sortBy, isAsc });\n        }\n    }\n\n    onListHeaderMouseEnter(event): void {\n        // this.headerIsInFocus = true;\n    }\n\n    onListHeaderMouseLeave(event): void {\n        // this.headerIsInFocus = false;\n        this.onListResizeEnd(event);\n        this.initResizeData();\n    }\n\n    onPagerChange(event: IPepListPagerChangeEvent): void {\n        if (this.showItems) {\n            this.pageIndex = event.pageIndex;\n\n            // Scroll to top.\n            this.scrollToTop();\n\n            this.toggleItems(false);\n            const startIndex = event.pageIndex * event.pageSize;\n            const endIndex = Math.min(\n                startIndex + event.pageSize,\n                this.totalRows\n            );\n\n            let getItemsFromApi = false;\n            let index: number = startIndex;\n\n            while (!getItemsFromApi && index < endIndex) {\n                if (!this.items[index]) {\n                    getItemsFromApi = true;\n                }\n                index++;\n            }\n\n            // Get bulk from api.\n            if (getItemsFromApi) {\n                this.loadPage.emit({\n                    pageIndex: event.pageIndex,\n                    pageSize: event.pageSize,\n                });\n            } else {\n                setTimeout(() => {\n                    this.updateScrollItems(startIndex, endIndex, true);\n                    this.toggleItems(true);\n                }, this.scrollAnimationTime);\n            }\n        }\n    }\n\n    onScrollChange(event: IPepVirtualScrollChangeEvent): void {\n        // For other events do nothing.\n        if (\n            typeof event.start === 'undefined' ||\n            typeof event.end === 'undefined'\n        ) {\n            return;\n        }\n\n        this.calculatedObjectHeight = event.calculatedChildHeight + 'px';\n\n        if (this.showItems) {\n            this.toggleItems(false);\n            this.updateScrollItems(event.start, event.end);\n\n            let getItemsFromApi = false;\n            let index: number = event.start;\n\n            while (!getItemsFromApi && index < event.end) {\n                if (!this.items[index]) {\n                    getItemsFromApi = true;\n                }\n                index++;\n            }\n\n            // Get bulk from api.\n            if (getItemsFromApi) {\n                const top = this.getTopItems() - 1;\n                let fromIndex;\n                let toIndex;\n\n                if (event.addAtStart) {\n                    fromIndex = Math.max(\n                        event.start - (top - (event.end - event.start)),\n                        0\n                    );\n                    toIndex = event.end;\n                } else {\n                    fromIndex = event.start;\n                    toIndex = Math.min(\n                        event.end + (top - (event.end - event.start)),\n                        this.totalRows\n                    );\n                }\n\n                this.loadItems.emit({\n                    start: event.start,\n                    end: event.end,\n                    fromIndex,\n                    toIndex,\n                });\n            } else {\n                this.toggleItems(true);\n            }\n        }\n    }\n\n    onListLoad(): void {\n        this.listLoad.emit();\n    }\n\n    onValueChanged(valueChange: IPepFormFieldValueChangeEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.valueChange.emit(valueChange);\n    }\n\n    onCustomizeFieldClick(\n        customizeFieldClickedData: IPepFormFieldClickEvent\n    ): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.fieldClick.emit(customizeFieldClickedData);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    height: inherit;\n    // /* get the height from the parent div minus header size */\n    // pep-virtual-scroll {\n    //     @include calc(min-height, '100% - 34px');\n    // }\n\n    display: flex;\n    flex-direction: column;\n}\n\n.no-data {\n    margin: $spacing-2xl 0;\n}\n\n.no-data-suggestions {\n    .suggestions-title {\n        margin: $spacing-lg 0 $spacing-sm;\n    }\n\n    .suggestions-list {\n        margin: 0;\n        padding: 0;\n        padding-inline-start: $spacing-2xl;\n    }\n}\n\n.no-virtual-scroll-container {\n    height: inherit;\n    overflow: auto;\n}\n\n.table-header {\n    top:0;\n\n    &.below-header-and-top-bar {\n        top: calc(#{$header-height} + #{$top-bar-height});\n    }\n}\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "sessionService",
                        "type": "PepSessionService"
                    },
                    {
                        "name": "scrollToService",
                        "type": "PepScrollToService"
                    },
                    {
                        "name": "windowScrollingService",
                        "type": "PepWindowScrollingService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 194,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "PepSessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scrollToService",
                        "type": "PepScrollToService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "windowScrollingService",
                        "type": "PepWindowScrollingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "layout": {
                    "name": "layout",
                    "getSignature": {
                        "name": "layout",
                        "type": "",
                        "returnType": "UIControl",
                        "line": 135
                    }
                },
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "Array<ObjectsDataRow>",
                        "line": 145
                    }
                },
                "useVirtualScroll": {
                    "name": "useVirtualScroll",
                    "getSignature": {
                        "name": "useVirtualScroll",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 150
                    }
                },
                "showItems": {
                    "name": "showItems",
                    "getSignature": {
                        "name": "showItems",
                        "type": "",
                        "returnType": "",
                        "line": 174
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"totalRows == 0\">\n    <div class=\"pep-border-bottom\">\n        <p class=\"title-xl no-data\">\n            {{ (noDataFoundMsg ? noDataFoundMsg : 'LIST.NO_DATA_FOUND') | translate}}\n        </p>\n    </div>\n    <div class=\"no-data-suggestions\">\n        <p class=\"suggestions-title title-lg\">\n            {{ 'LIST.NO_DATA_FOUND_SUGGESTIONS_TITLE' | translate}}\n        </p>\n        <ul class=\"suggestions-list body-lg\" [innerHtml]=\"'LIST.NO_DATA_FOUND_SUGGESTIONS_LIST' | translate\"></ul>\n    </div>\n</ng-container>\n<div *ngIf=\"totalRows > 0\" [ngClass]=\"{ 'lock-events': lockEvents }\">\n    <ng-container *ngIf=\"isTable; then tableBlock; else cardsBlock\"></ng-container>\n    <ng-template #tableBlock>\n        <ng-container *ngTemplateOutlet=\"tableHeader\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"listBody\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"tableTotal\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"listPager\"></ng-container>\n    </ng-template>\n\n    <ng-template #cardsBlock>\n        <ng-container *ngTemplateOutlet=\"listBody\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"listPager\"></ng-container>\n    </ng-template>\n\n    <ng-template #listBody>\n        <ng-container *ngIf=\"useVirtualScroll; then virtualScrollBlock; else noVirtualScrollBlock\"></ng-container>\n        <ng-template #virtualScrollBlock>\n            <pep-virtual-scroll [totalRows]=\"totalRows\" [isTable]=\"isTable\" [scrollAnimationTime]=\"scrollAnimationTime\"\n                (load)=\"onListLoad()\" (change)=\"onScrollChange($event)\"\n                [parentScroll]=\"parentScroll ? parentScroll : nativeWindow\"\n                [bufferAmount]=\"isReport ? (isTable ? 20 : 3) : isTable ? 15 : 3\"\n                [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable }\">\n                <ng-container *ngTemplateOutlet=\"listData\"></ng-container>\n            </pep-virtual-scroll>\n        </ng-template>\n\n        <ng-template #noVirtualScrollBlock>\n            <div #noVirtualScrollContnainer\n                [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable, 'no-virtual-scroll-container': pagerType === 'pages' }\">\n                <ng-container *ngTemplateOutlet=\"listData\"></ng-container>\n            </div>\n        </ng-template>\n    </ng-template>\n\n    <ng-template #listPager>\n        <pep-list-pager *ngIf=\"pagerType === 'pages'\" class=\"list-pager\" [disabled]=\"!showItems\" [length]=\"totalRows\"\n            [pageSize]=\"pageSize\" [pageIndex]=\"pageIndex\" (pagerChange)=\"onPagerChange($event)\">\n        </pep-list-pager>\n    </ng-template>\n</div>\n\n<ng-template #listData>\n    <ng-container *ngFor=\"let item of scrollItems; let index; let isFirst = first;\">\n        <ng-container *ngIf=\"isTable\">\n            <div class=\"table-row\" (mouseenter)=\"onTableRowMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onTableRowMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.IsSelectableForActions, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId\n                    }\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <fieldset class=\"table-row-fieldset\" [ngStyle]=\"{ 'background-color': item?.BackgroundColor }\">\n                    <mat-checkbox\n                        *ngIf=\"selectionTypeForActions == 'multi' || selectionTypeForActions == 'single-action'\"\n                        type=\"checkbox\" class=\"pull-left flip row-selection\" [disabled]=\"getIsDisabled(item)\" [ngStyle]=\"{\n                                visibility: !deviceHasMouse ||\n                                item?.UID + SEPARATOR + item?.Type === hoveredItemId || isAllSelected || selectedItems.size > 0 ? 'visible' : 'hidden'\n                            }\" [checked]=\"getIsItemSelected(item?.UID, item?.IsSelectableForActions, item?.Type)\"\n                        (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n                    </mat-checkbox>\n                    <mat-radio-button *ngIf=\"selectionTypeForActions == 'single'\" name=\"selection\"\n                        class=\"pull-left flip row-selection pep-radio-button\" [disabled]=\"getIsDisabled(item)\"\n                        [checked]=\"getIsItemSelected(item?.UID, item?.IsSelectableForActions, item?.Type)\"\n                        (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n                    </mat-radio-button>\n                    <!-- [canEditObject]=\"!disabled && item?.IsEditable\"  -->\n                    <pep-form [checkForChanges]=\"checkForChanges\" [layout]=\"layout\"\n                        [firstFieldAsLink]=\"firstFieldAsLink\" [data]=\"item\" [canEditObject]=\"!disabled\"\n                        [objectId]=\"objectId\" [parentId]=\"parentId\" [searchCode]=\"searchCode\"\n                        [lockEvents]=\"lockItemInnerEvents\" [isReport]=\"isReport\" [layoutType]=\"'table'\"\n                        [listType]=\"listType\" [isActive]=\"\n                                (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                                item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                            \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                        (click)=\"itemClicked($event, item)\" [pageType]=\"pageType\">\n                    </pep-form>\n                </fieldset>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isTable\">\n            <div [class]=\"itemClass\" (mouseenter)=\"onCardMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onCardMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.IsSelectableForActions, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId,\n                        'card-view': viewType === 'cards',\n                        'line-view': viewType === 'lines'\n                    }\" class=\"pull-left flip\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <mat-checkbox *ngIf=\"showCardSelection\" class=\"pull-left flip card-selection\"\n                    [disabled]=\"getIsDisabled(item)\"\n                    [checked]=\"getIsItemSelected(item?.UID, item?.IsSelectableForActions, item?.Type)\"\n                    (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n                </mat-checkbox>\n                <!-- [canEditObject]=\"!disabled && item?.IsEditable\" -->\n                <pep-form [firstFieldAsLink]=\"firstFieldAsLink\" [checkForChanges]=\"checkForChanges\" [layout]=\"layout\"\n                    [data]=\"item\" [canEditObject]=\"!disabled\" [objectId]=\"objectId\" [parentId]=\"parentId\"\n                    [searchCode]=\"searchCode\" [lockEvents]=\"lockItemInnerEvents\" [layoutType]=\"getThumbnailsLayout()\"\n                    [listType]=\"listType\" [isActive]=\"\n                            (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                            item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                        \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                    (click)=\"itemClicked($event, item)\" [pageType]=\"pageType\">\n                </pep-form>\n            </div>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<ng-template #tableHeader>\n    <div class=\"table-header\" [ngClass]=\"{ 'below-header-and-top-bar' : parentScroll == null }\"\n        (mouseup)=\"onListResizeEnd($event)\" (mouseenter)=\"onListHeaderMouseEnter($event)\"\n        (mouseleave)=\"onListHeaderMouseLeave($event)\" (mousemove)=\"onListResize($event)\">\n\n        <div class=\"table-header-padding-top\"></div>\n        <fieldset class=\"table-header-fieldset\">\n            <mat-checkbox *ngIf=\"selectionTypeForActions !== 'none'\" #selectAllCB class=\"pull-left flip row-selection\"\n                type=\"checkbox\" [ngStyle]=\"{\n                        visibility:\n                            selectionTypeForActions == 'single' || \n                            (selectionTypeForActions == 'multi' && hideAllSelectionInMulti) ? 'hidden' : 'visible'\n                    }\"\n                [indeterminate]=\"isAllSelected ? unSelectedItems.size > 0 && unSelectedItems.size < totalRows : (selectedItems.size > 0 && !getIsAllSelectedForActions())\"\n                [disabled]=\"disabled || selectionTypeForActions === 'single'\" [checked]=\"getIsAllSelectedForActions()\"\n                (change)=\"selectAllItemsForActions($event)\"></mat-checkbox>\n            <fieldset>\n                <div *ngFor=\"let field of layout?.ControlFields; let j = index\" class=\"header-column pull-left flip\"\n                    [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\" [ngClass]=\"{\n                            'support-sorting': supportSorting,\n                            'has-sorting': field.ApiName === sortBy,\n                            'is-resizing': field.ApiName === pressedColumn,\n                            'is-first': j === 0 && selectionTypeForActions !== 'multi',\n                            'is-last': j === layout?.ControlFields?.length - 1\n                        }\"\n                    (click)=\"supportSorting ? (onListSortingChange(field.ApiName, sortBy !== null && sortBy != field.ApiName ? true : !isAsc, $event)) : false\">\n\n                    <label id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip text-align-{{ field.Layout.XAlignment }}\"\n                        title=\"{{ field.Title }}\">\n                        <span *ngIf=\"field.Mandatory\" class=\"required\">\n                            <pep-icon name=\"system_must\"></pep-icon>\n                        </span>\n                        {{ field.Title != '' ? field.Title : ' '}}\n                    </label>\n\n                    <div *ngIf=\"supportResizing\" class=\"resize-box pull-right flip\"\n                        (mousedown)=\"onListResizeStart($event, field.ApiName)\">\n                        <div class=\"splitter\"></div>\n                    </div>\n\n                    <!-- The onListSortingChange moved to the column click -->\n                    <!-- (click)=\"onListSortingChange(field.ApiName, true)\" -->\n                    <div *ngIf=\"supportSorting\" class=\"sorting-box pull-left flip\"\n                        [ngClass]=\"{ 'has-sorting': field.ApiName === sortBy }\">\n                        <mat-icon *ngIf=\"field.ApiName !== sortBy\">\n                            <pep-icon name=\"arrow_either\" class=\"asc\"></pep-icon>\n                        </mat-icon>\n                        <ng-container *ngIf=\"field.ApiName === sortBy\">\n                            <mat-icon *ngIf=\"!isAsc\" [ngClass]=\"{ 'sort-by': field.ApiName === sortBy && isAsc }\"\n                                title=\"{{ 'LIST.SORT_ASC' | translate }}\">\n                                <pep-icon name=\"arrow_up\" class=\"asc\"></pep-icon>\n                            </mat-icon>\n                            <mat-icon *ngIf=\"isAsc\" [ngClass]=\"{ 'sort-by': field.ApiName === sortBy && !isAsc }\"\n                                title=\"{{ 'LIST.SORT_DESC' | translate }}\">\n                                <pep-icon name=\"arrow_down\" class=\"desc\"></pep-icon>\n                            </mat-icon>\n                        </ng-container>\n                    </div>\n                </div>\n            </fieldset>\n        </fieldset>\n    </div>\n</ng-template>\n\n<ng-template #tableTotal>\n    <div *ngIf=\"totalsRow?.length > 0 && totalsRow.length <= layout?.ControlFields.length\" class=\"table-total\">\n        <fieldset class=\"table-header-fieldset\">\n            <div *ngFor=\"let field of layout?.ControlFields; let j = index\" class=\"total-column pull-left flip\"\n                [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\">\n                <label class=\"total-label body-sm text-align-{{ field.Layout.XAlignment }}\">\n                    {{ totalsRow[j] }}\n                </label>\n            </div>\n        </fieldset>\n    </div>\n</ng-template>"
        },
        {
            "name": "PepListPagerComponent",
            "id": "component-PepListPagerComponent-4f074f2efb71a87bf888378b289a1988",
            "file": "projects/ngx-lib/list/list-pager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-pager",
            "styleUrls": [
                "./list-pager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "length",
                    "defaultValue": "0",
                    "line": 37
                },
                {
                    "name": "pageIndex",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "defaultValue": "DEFAULT_PAGE_SIZE",
                    "line": 38
                }
            ],
            "outputsClass": [
                {
                    "name": "pagerChange",
                    "defaultValue": "new EventEmitter<IPepListPagerChangeEvent>()",
                    "line": 41,
                    "type": "EventEmitter<IPepListPagerChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_pageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [
                        {
                            "name": "previousPageIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "description": "<p>Emits an event notifying that a change of the paginator&#39;s properties has been triggered. </p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "previousPageIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_nextButtonsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "description": "<p>Checks whether the buttons for going forwards should be disabled. </p>\n"
                },
                {
                    "name": "_previousButtonsDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Checks whether the buttons for going backwards should be disabled. </p>\n"
                },
                {
                    "name": "firstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "getNumberOfPages",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "hasNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "hasPreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "lastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "setPageIndex",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Injectable,\n    Input,\n    Output,\n} from '@angular/core';\nimport { IPepFieldValueChangeEvent } from '@pepperi-addons/ngx-lib';\nimport { DEFAULT_PAGE_SIZE } from './list.model';\n\nexport class IPepListPagerChangeEvent {\n    pageIndex: number;\n    previousPageIndex: number;\n    pageSize: number;\n    length: number;\n}\n\n@Component({\n    selector: 'pep-list-pager',\n    templateUrl: './list-pager.component.html',\n    styleUrls: ['./list-pager.component.scss'],\n})\n@Injectable()\nexport class PepListPagerComponent {\n    @Input() disabled = false;\n    private _pageIndex = 0;\n    @Input()\n    set pageIndex(value: number) {\n        this.setPageIndex(value);\n    }\n    get pageIndex(): number {\n        return this._pageIndex;\n    }\n\n    @Input() length = 0;\n    @Input() pageSize = DEFAULT_PAGE_SIZE;\n\n    @Output()\n    pagerChange: EventEmitter<IPepListPagerChangeEvent> = new EventEmitter<IPepListPagerChangeEvent>();\n\n    constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n    nextPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex + 1);\n    }\n\n    previousPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.pageIndex - 1);\n    }\n\n    firstPage(): void {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n\n        this.setPageIndex(0);\n    }\n\n    lastPage(): void {\n        if (!this.hasNextPage()) {\n            return;\n        }\n\n        this.setPageIndex(this.getNumberOfPages() - 1);\n    }\n\n    hasPreviousPage(): boolean {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n\n    hasNextPage(): boolean {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n\n    getNumberOfPages(): number {\n        if (!this.pageSize) {\n            return 0;\n        }\n\n        return Math.ceil(this.length / this.pageSize);\n    }\n\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n\n    onValueChange(event: IPepFieldValueChangeEvent) {\n        const pageNumber = coerceNumberProperty(event.value);\n        this.setPageIndex(pageNumber - 1); // - 1 to convert number into index.\n    }\n\n    private setPageIndex(newIndex: number) {\n        const previousPageIndex = this.pageIndex;\n\n        if (newIndex >= 0 && newIndex < this.getNumberOfPages()) {\n            this._pageIndex = newIndex;\n        } else {\n            this._pageIndex = 0;\n        }\n\n        if (this.pageIndex !== previousPageIndex) {\n            this._emitChangeEvent(previousPageIndex);\n        }\n    }\n\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    private _emitChangeEvent(previousPageIndex: number) {\n        this.pagerChange.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n.pager-container {\n    $pager-size: 2rem;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: calc(#{$pager-size} + calc(#{$spacing-sm} * 2));\n    padding: $spacing-sm;\n    // margin-top: $content-margin;\n\n    .page-index {\n        min-height: unset;\n        margin-bottom: 0;\n        // max-width: 2.5rem;\n        \n        ::ng-deep .mat-form-field-flex {\n            padding: 0 0.5rem;\n            min-height: $pager-size;\n\n            .mat-input-element {\n                min-width: 1.25rem;\n            }\n        }\n    }\n}",
                    "styleUrl": "./list-pager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "pageIndex": {
                    "name": "pageIndex",
                    "setSignature": {
                        "name": "pageIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pageIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 33
                    }
                }
            },
            "templateData": "﻿<div class=\"pager-container body-sm\">\n    <span class=\"pep-spacing-element\">{{ 'LIST.PAGER_PAGE' | translate }}</span>\n    <pep-textbox pepAutoWidth class=\"page-index pep-spacing-element\" [key]=\"'pageIndex'\" [type]=\"'int'\"\n        [disabled]=\"disabled\" [xAlignment]=\"'center'\" [renderTitle]=\"false\" [renderError]=\"false\" [renderSymbol]=\"false\"\n        [value]=\"pageIndex + 1\" [formattedValue]=\"pageIndex + 1\" [minValue]=\"1\" [maxValue]=\"this.getNumberOfPages()\"\n        [maxFieldCharacters]=\"6\" [required]=\"true\" (valueChange)=\"onValueChange($event)\">\n    </pep-textbox>\n    <span class=\"pep-spacing-element\">{{ 'LIST.PAGER_OUT_OF' | translate }}</span>\n    <span class=\"pep-spacing-element\">{{ getNumberOfPages() }}</span>\n    <button mat-button [disabled]=\"disabled || _previousButtonsDisabled()\"\n        [ngClass]=\"{ disabled: disabled || _previousButtonsDisabled() }\"\n        class=\"pep-button icon-button pep-spacing-element sm weak\" pepRtlDirection pepMenuBlur (click)=\"previousPage()\"\n        [title]=\"('LIST.PAGER_PREVIOUS' | translate)\">\n        <mat-icon>\n            <pep-icon name=\"arrow_left\"></pep-icon>\n        </mat-icon>\n    </button>\n    <button mat-button [disabled]=\"disabled || _nextButtonsDisabled()\"\n        [ngClass]=\"{ disabled: disabled || _nextButtonsDisabled() }\"\n        class=\"pep-button icon-button pep-spacing-element sm weak\" pepRtlDirection pepMenuBlur (click)=\"nextPage()\"\n        [title]=\"('LIST.PAGER_NEXT' | translate)\">\n        <mat-icon>\n            <pep-icon name=\"arrow_right\"></pep-icon>\n        </mat-icon>\n    </button>\n</div>"
        },
        {
            "name": "PepListSortingComponent",
            "id": "component-PepListSortingComponent-bfb1e43a1d18c5a2449d5363e10a37b1",
            "file": "projects/ngx-lib/list/list-sorting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-sorting",
            "styleUrls": [
                "./list-sorting.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-sorting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentSorting",
                    "line": 50,
                    "type": ""
                },
                {
                    "name": "options",
                    "line": 37,
                    "type": ""
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 62,
                    "type": "PepSizeType"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<IPepListSortingOptionChangeEvent>()",
                    "line": 64,
                    "type": "EventEmitter<IPepListSortingOptionChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentSorting",
                    "defaultValue": "null",
                    "type": "IPepListSortingOption",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "null",
                    "type": "Array<IPepListSortingOption>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n} from '@angular/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepMenuItemClickEvent,\n    PepMenuItem,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepListSortingChangeEvent } from './list.model';\n\nexport class IPepListSortingOption {\n    sortBy: string;\n    title: string;\n    iconName?: string;\n    isAsc?: boolean;\n}\n\nexport interface IPepListSortingOptionChangeEvent {\n    source: IPepListSortingOption;\n}\n\n@Component({\n    selector: 'pep-list-sorting',\n    templateUrl: './list-sorting.component.html',\n    styleUrls: ['./list-sorting.component.scss'],\n})\n@Injectable()\nexport class PepListSortingComponent implements OnInit {\n    private _options: Array<IPepListSortingOption> = null;\n    @Input()\n    set options(value: Array<IPepListSortingOption>) {\n        this._options = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.sortBy, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get options(): Array<IPepListSortingOption> {\n        return this._options;\n    }\n\n    private _currentSorting: IPepListSortingOption = null;\n    @Input()\n    set currentSorting(value: IPepListSortingOption) {\n        this._currentSorting = value;\n        this.currentItem = {\n            key: value.sortBy,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentSorting(): IPepListSortingOption {\n        return this._currentSorting;\n    }\n\n    @Input() sizeType: PepSizeType = 'md';\n    @Output()\n    change: EventEmitter<IPepListSortingOptionChangeEvent> = new EventEmitter<IPepListSortingOptionChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (\n            this.currentSorting === null &&\n            this.options &&\n            this.options.length > 0\n        ) {\n            this.currentSorting = this.options[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentSorting = this.options.find(\n            (sorting) => sorting.sortBy === menuItemClickEvent.source.key\n        );\n        this.change.emit({ source: this.currentSorting });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\r\n@import '../src/core/style/abstracts/mixins';\r\n\r\n.sorting-container {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .sort-by {\r\n        margin-inline-end: $spacing-sm;\r\n    }\r\n}",
                    "styleUrl": "./list-sorting.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<IPepListSortingOption>",
                        "line": 44
                    }
                },
                "currentSorting": {
                    "name": "currentSorting",
                    "setSignature": {
                        "name": "currentSorting",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentSorting",
                        "type": "",
                        "returnType": "IPepListSortingOption",
                        "line": 58
                    }
                }
            },
            "templateData": "﻿<div class=\"sorting-container\">\n    <div class=\"body-xs sort-by\">\n        <span>{{ 'LIST.SORT_BY' | translate }}</span>\n    </div>\n    <pep-menu [type]=\"'select'\" [sizeType]=\"sizeType\" [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"'arrow_down'\" (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</div>"
        },
        {
            "name": "PepListTotalComponent",
            "id": "component-PepListTotalComponent-071f1227d2e3d088cad7634c85af11c4",
            "file": "projects/ngx-lib/list/list-total.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-total",
            "styleUrls": [
                "./list-total.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-total.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isMapView",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "totalAmount",
                    "defaultValue": "-1",
                    "line": 11
                },
                {
                    "name": "totalRows",
                    "defaultValue": "-1",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Injectable, Input } from '@angular/core';\n\n@Component({\n    selector: 'pep-list-total',\n    templateUrl: './list-total.component.html',\n    styleUrls: ['./list-total.component.scss'],\n})\n@Injectable()\nexport class PepListTotalComponent {\n    @Input() totalRows = -1;\n    @Input() totalAmount = -1;\n    @Input() isMapView = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n\n.total-items-container {\n    height: $top-bar-height-with-no-top;\n    display: flex;\n    align-items: center;\n    \n    // .total-items {\n    // }\n}\n",
                    "styleUrl": "./list-total.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "﻿<div class=\"total-items-container\">\n    <ng-container *ngIf=\"isMapView; then mapTemplate; else notMapTemplate\"></ng-container>\n\n    <ng-template #notMapTemplate>\n        <ng-container *ngIf=\"totalRows >= 0\">\n            <div class=\"body-md total-items\"\n                [innerHtml]=\"(totalRows === 1 ? 'LIST.TOTAL_RESULT' : 'LIST.TOTAL_RESULTS') | translate: { totalRows: totalRows }\">\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"totalAmount > 0\"> {{ 'LIST.TOTAL_OF' | translate }} {{ totalAmount }} </ng-container>\n    </ng-template>\n\n    <ng-template #mapTemplate>\n        <ng-container *ngIf=\"totalAmount >= 0\">\n        </ng-container>\n        <ng-container *ngIf=\"totalRows >= 0\">\n            <div class=\"body-md total-items\"\n                [innerHtml]=\"(totalRows === 1 ? 'LIST.TOTAL_RESULT_OUT_OF_RESULT' : 'LIST.TOTAL_RESULTS_OUT_OF') | translate: { xRows: totalAmount, totalRows: totalRows }\">\n            </div>\n        </ng-container>\n    </ng-template>\n</div>"
        },
        {
            "name": "PepListViewsComponent",
            "id": "component-PepListViewsComponent-707ba6227b2d128e0720b514366c8691",
            "file": "projects/ngx-lib/list/list-views.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-list-views",
            "styleUrls": [
                "./list-views.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-views.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classNames",
                    "defaultValue": "''",
                    "line": 65
                },
                {
                    "name": "currentView",
                    "line": 50,
                    "type": ""
                },
                {
                    "name": "displayType",
                    "defaultValue": "'buttons'",
                    "line": 62,
                    "type": "PepListViewDisplayType"
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 64,
                    "type": "PepSizeType"
                },
                {
                    "name": "styleType",
                    "defaultValue": "'weak'",
                    "line": 63,
                    "type": "PepStyleType"
                },
                {
                    "name": "views",
                    "line": 37,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<IListViewChangeEvent>()",
                    "line": 68,
                    "type": "EventEmitter<IListViewChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentView",
                    "defaultValue": "null",
                    "type": "IPepListView",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_views",
                    "defaultValue": "null",
                    "type": "Array<IPepListView>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentItem",
                    "defaultValue": "null",
                    "type": "PepMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "menuItems",
                    "defaultValue": "null",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "menuItemClickEvent",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewChanged",
                    "args": [
                        {
                            "name": "view",
                            "type": "IPepListView"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "IPepListView",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n} from '@angular/core';\nimport { PepSizeType, PepStyleType } from '@pepperi-addons/ngx-lib';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\n\nexport type PepListViewDisplayType = 'menu' | 'buttons';\n\nexport class IPepListView {\n    key: string;\n    iconName: string;\n    title?: string;\n}\n\nexport interface IListViewChangeEvent {\n    source: IPepListView;\n}\n\n@Component({\n    selector: 'pep-list-views',\n    templateUrl: './list-views.component.html',\n    styleUrls: ['./list-views.component.scss'],\n})\n@Injectable()\nexport class PepListViewsComponent implements OnInit {\n    private _views: Array<IPepListView> = null;\n    @Input()\n    set views(value: Array<IPepListView>) {\n        this._views = value;\n\n        this.menuItems = value.map((opt) => {\n            return { key: opt.key, text: opt.title, iconName: opt.iconName };\n        });\n    }\n    get views(): Array<IPepListView> {\n        return this._views;\n    }\n\n    private _currentView: IPepListView = null;\n    @Input()\n    set currentView(value: IPepListView) {\n        this._currentView = value;\n        this.currentItem = {\n            key: value.key,\n            text: value.title,\n            iconName: value.iconName,\n        };\n    }\n    get currentView(): IPepListView {\n        return this._currentView;\n    }\n\n    @Input() displayType: PepListViewDisplayType = 'buttons';\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n\n    @Output()\n    change: EventEmitter<IListViewChangeEvent> = new EventEmitter<IListViewChangeEvent>();\n\n    menuItems: Array<PepMenuItem> = null;\n    currentItem: PepMenuItem = null;\n\n    ngOnInit(): void {\n        if (this.currentView === null && this.views && this.views.length > 0) {\n            this.currentView = this.views[0];\n        }\n    }\n\n    onMenuItemClicked(menuItemClickEvent: IPepMenuItemClickEvent): void {\n        this.currentView = this.views.find(\n            (list) => list.key === menuItemClickEvent.source.key\n        );\n        this.raiseChangeEvent();\n    }\n\n    onViewChanged(view: IPepListView): void {\n        this.currentView = view;\n        this.raiseChangeEvent();\n    }\n\n    private raiseChangeEvent(): void {\n        this.change.emit({ source: this.currentView });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\r\n@import '../src/core/style/abstracts/mixins';\r\n\r\n.buttons-wrapper {\r\n    display: flex;\r\n}",
                    "styleUrl": "./list-views.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "views": {
                    "name": "views",
                    "setSignature": {
                        "name": "views",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "views",
                        "type": "",
                        "returnType": "Array<IPepListView>",
                        "line": 44
                    }
                },
                "currentView": {
                    "name": "currentView",
                    "setSignature": {
                        "name": "currentView",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentView",
                        "type": "",
                        "returnType": "IPepListView",
                        "line": 58
                    }
                }
            },
            "templateData": "﻿<ng-container *ngIf=\"displayType === 'menu' then menuTemplate else buttonsTemplate\">\n</ng-container>\n<ng-template #menuTemplate>\n    <pep-menu [type]=\"'select'\" [styleType]=\"styleType\" [sizeType]=\"sizeType\" [classNames]=\"classNames\"\n        [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"currentItem?.iconName ? currentItem?.iconName : 'arrow_down'\"\n        (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</ng-template>\n<ng-template #buttonsTemplate>\n    <div class=\"buttons-wrapper pep-spacing-element-negative\">\n        <button *ngFor=\"let view of views\" mat-button [title]=\"view.title\" [disabled]=\"view.key === currentView?.key\"\n            class=\"pep-button icon-button pep-spacing-element {{ sizeType }} {{ styleType }} {{ classNames }}\"\n            pepRtlDirection pepMenuBlur (click)=\"onViewChanged(view)\">\n            <mat-icon>\n                <pep-icon name=\"{{ view?.iconName }}\"></pep-icon>\n            </mat-icon>\n        </button>\n    </div>\n</ng-template>"
        },
        {
            "name": "PepMenuComponent",
            "id": "component-PepMenuComponent-25e1629abd3dd753cc2da60cc8e02cfe",
            "file": "projects/ngx-lib/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classNames",
                    "defaultValue": "''",
                    "line": 65
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 70
                },
                {
                    "name": "hideOnEmptyItems",
                    "defaultValue": "false",
                    "line": 67
                },
                {
                    "name": "iconName",
                    "defaultValue": "pepIconSystemMenu.name",
                    "line": 61
                },
                {
                    "name": "items",
                    "defaultValue": "null",
                    "line": 68,
                    "type": "Array<PepMenuItem>"
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "null",
                    "line": 69,
                    "type": "PepMenuItem"
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'md'",
                    "line": 64,
                    "type": "PepSizeType"
                },
                {
                    "name": "styleType",
                    "defaultValue": "'weak'",
                    "line": 63,
                    "type": "PepStyleType"
                },
                {
                    "name": "text",
                    "defaultValue": "null",
                    "line": 60,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'action'",
                    "line": 62,
                    "type": "PepMenuType"
                },
                {
                    "name": "xPosition",
                    "defaultValue": "'after'",
                    "line": 66,
                    "type": "\"before\" | \"after\""
                }
            ],
            "outputsClass": [
                {
                    "name": "menuClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 76,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "menuItemClick",
                    "defaultValue": "new EventEmitter<IPepMenuItemClickEvent>()",
                    "line": 75,
                    "type": "EventEmitter<IPepMenuItemClickEvent>"
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<IPepMenuStateChangeEvent>()",
                    "line": 73,
                    "type": "EventEmitter<IPepMenuStateChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayText",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "state",
                    "defaultValue": "'hidden'",
                    "type": "PepMenuStateType",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "animationDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143
                },
                {
                    "name": "animationStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "onMenuClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "click",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "jsdoctags": [
                        {
                            "name": "click",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n} from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    transition,\n    animate,\n} from '@angular/animations';\nimport {\n    PepLayoutService,\n    PepStyleType,\n    PepSizeType,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { pepIconSystemMenu } from '@pepperi-addons/ngx-lib/icon';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n    IPepMenuStateChangeEvent,\n    PepMenuStateType,\n    PepMenuType,\n} from './menu.model';\n\n@Component({\n    selector: 'pep-menu',\n    templateUrl: './menu.component.html',\n    styleUrls: ['./menu.component.scss'],\n    animations: [\n        trigger('slideInOut', [\n            state(\n                'hidden',\n                style({\n                    width: '0px',\n                    padding: '0',\n                    margin: '0',\n                    minWidth: '0px',\n                    opacity: 0,\n                })\n            ),\n            state(\n                'visible',\n                style({\n                    width: 'inherit',\n                    opacity: 1,\n                })\n            ),\n            transition('close => open', animate('500ms ease-in')),\n            transition('open => close', animate('500ms ease-out')),\n        ]),\n    ],\n})\nexport class PepMenuComponent implements OnChanges, OnDestroy {\n    @Input() text: string = null;\n    @Input() iconName = pepIconSystemMenu.name;\n    @Input() type: PepMenuType = 'action';\n    @Input() styleType: PepStyleType = 'weak';\n    @Input() sizeType: PepSizeType = 'md';\n    @Input() classNames = '';\n    @Input() xPosition: 'before' | 'after' = 'after';\n    @Input() hideOnEmptyItems = false;\n    @Input() items: Array<PepMenuItem> = null;\n    @Input() selectedItem: PepMenuItem = null;\n    @Input() disabled = false;\n\n    @Output()\n    stateChange: EventEmitter<IPepMenuStateChangeEvent> = new EventEmitter<IPepMenuStateChangeEvent>();\n    @Output()\n    menuItemClick: EventEmitter<IPepMenuItemClickEvent> = new EventEmitter<IPepMenuItemClickEvent>();\n    @Output() menuClick: EventEmitter<void> = new EventEmitter<void>();\n\n    state: PepMenuStateType = 'hidden';\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    displayText: string = null;\n\n    constructor(public layoutService: PepLayoutService) {\n        this.layoutService.onResize$.subscribe((size) => {\n            this.screenSize = size;\n        });\n    }\n\n    private updateText(): void {\n        if (this.type === 'select' || this.type === 'action-select') {\n            this.displayText = this.selectedItem\n                ? this.selectedItem.text\n                : this.text;\n        } else {\n            this.displayText = this.text;\n        }\n    }\n\n    ngOnChanges(changes): void {\n        if (this.hideOnEmptyItems) {\n            this.state =\n                !this.disabled &&\n                this.items &&\n                this.items.filter((item) => !item.disabled).length > 0\n                    ? 'visible'\n                    : 'hidden';\n        } else {\n            this.state = 'visible';\n        }\n\n        if (this.type === 'select') {\n            if (\n                this.selectedItem === null &&\n                this.items &&\n                this.items.length > 0\n            ) {\n                this.selectedItem = this.items[0];\n            }\n        }\n\n        this.updateText();\n    }\n\n    ngOnDestroy(): void {\n        if (this.menuItemClick) {\n            this.menuItemClick.unsubscribe();\n        }\n    }\n\n    onMenuClicked(event): void {\n        this.menuClick.emit();\n    }\n\n    onMenuItemClicked(click: IPepMenuItemClickEvent): void {\n        this.selectedItem = click.source;\n        this.updateText();\n\n        this.menuItemClick.emit(click);\n    }\n\n    animationDone(): void {\n        if (this.state === 'hidden') {\n            setTimeout(() => {\n                this.stateChange.emit({ state: this.state });\n            }, 500);\n        }\n    }\n\n    animationStart(): void {\n        if (this.state === 'visible') {\n            this.stateChange.emit({ state: this.state });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-container {\r\n    .pep-button {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n}",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div class=\"menu-container\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\n\n    <ng-container *ngIf=\"hideOnEmptyItems then animationTemplate else regularTemplate\">\n    </ng-container>\n    <ng-template #animationTemplate>\n        <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n            [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS  }\"\n            pepRtlDirection pepMenuBlur (click)=\"onMenuClicked($event)\" [@slideInOut]=\"state\"\n            (@slideInOut.done)=\"animationDone()\" (@slideInOut.start)=\"animationStart()\"\n            [matMenuTriggerFor]=\"menu.childMenu\">\n            <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n            </ng-container>\n        </button>\n        <pep-menu-item #menu [type]=\"type\" [items]=\"items\" [selectedItem]=\"selectedItem\"\n            (menuItemClick)=\"onMenuItemClicked($event)\">\n        </pep-menu-item>\n    </ng-template>\n    <ng-template #regularTemplate>\n        <ng-container *ngIf=\"items then menuTemplate else buttonTemplate\"></ng-container>\n        <ng-template #menuTemplate>\n            <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n                [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS, disabled: disabled }\"\n                pepRtlDirection pepMenuBlur (menuClick)=\"onMenuClicked($event)\" [disabled]=\"disabled\"\n                [matMenuTriggerFor]=\"menu.childMenu\">\n                <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n                </ng-container>\n            </button>\n            <pep-menu-item #menu [type]=\"type\" [items]=\"items\" [selectedItem]=\"selectedItem\"\n                (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu-item>\n        </ng-template>\n        <ng-template #buttonTemplate>\n            <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n                [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS, disabled: disabled }\"\n                pepRtlDirection pepMenuBlur (menuClick)=\"onMenuClicked($event)\" [disabled]=\"disabled\">\n                <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n                </ng-container>\n            </button>\n        </ng-template>\n    </ng-template>\n</div>\n\n<ng-template #triggerTemplate>\n    <span *ngIf=\"displayText && screenSize <= PepScreenSizeType.SM\" class=\"ellipsis\"\n        [ngClass]=\"{ 'button-title-with-icon': iconName }\" [title]=\"displayText\">\n        {{ displayText }}\n    </span>\n    <mat-icon *ngIf=\"iconName\">\n        <pep-icon name=\"{{ iconName }}\"></pep-icon>\n    </mat-icon>\n</ng-template>\n"
        },
        {
            "name": "PepMenuItemComponent",
            "id": "component-PepMenuItemComponent-7ff34717e46d9f242341008b5eaee73b",
            "file": "projects/ngx-lib/menu/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-menu-item",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 19,
                    "type": "Array<PepMenuItem>"
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "null",
                    "line": 20,
                    "type": "PepMenuItem"
                },
                {
                    "name": "subMenuIconName",
                    "defaultValue": "pepIconArrowRight.name",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'action'",
                    "line": 18,
                    "type": "PepMenuType"
                },
                {
                    "name": "xPosition",
                    "defaultValue": "'after'",
                    "line": 21,
                    "type": "\"before\" | \"after\""
                }
            ],
            "outputsClass": [
                {
                    "name": "menuItemClick",
                    "defaultValue": "new EventEmitter<IPepMenuItemClickEvent>()",
                    "line": 27,
                    "type": "EventEmitter<IPepMenuItemClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "childMenu",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'childMenu', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onChildClicked",
                    "args": [
                        {
                            "name": "click",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "click",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "PepMenuItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PepMenuItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { pepIconArrowRight } from '@pepperi-addons/ngx-lib/icon';\nimport { PepMenuItem, IPepMenuItemClickEvent, PepMenuType } from './menu.model';\n\n@Component({\n    selector: 'pep-menu-item',\n    templateUrl: './menu-item.component.html',\n    styleUrls: ['./menu-item.component.scss'],\n})\nexport class PepMenuItemComponent implements OnDestroy {\n    @Input() type: PepMenuType = 'action';\n    @Input() items: Array<PepMenuItem> = [];\n    @Input() selectedItem: PepMenuItem = null;\n    @Input() xPosition: 'before' | 'after' = 'after';\n    @Input() subMenuIconName: string = pepIconArrowRight.name;\n\n    @ViewChild('childMenu', { static: true }) public childMenu: any;\n\n    @Output()\n    menuItemClick: EventEmitter<IPepMenuItemClickEvent> = new EventEmitter<IPepMenuItemClickEvent>();\n\n    ngOnDestroy(): void {\n        if (this.menuItemClick) {\n            this.menuItemClick.unsubscribe();\n        }\n    }\n\n    onChildClicked(click: IPepMenuItemClickEvent): void {\n        this.menuItemClick.emit(click);\n    }\n\n    onMenuItemClicked(item: PepMenuItem): void {\n        this.menuItemClick.emit({ source: item });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n.mat-menu-item-submenu-trigger::after {\n    display: none;\n}\n\n.mat-menu-item {\n    \n    .title {\n        margin: 0 $spacing-xs;\n\n        &.spacing-from-icon {\n            margin: 0 $spacing-sm;\n        }\n\n        &.spacing-from-submenu-trigger {\n            padding-right: $spacing-lg;\n        }\n    }\n\n    .mat-icon {\n        margin: 0;\n    }\n\n    .submenu-trigger {\n        position: absolute;\n        right: $spacing-sm;\n        width: 1rem;\n    \n        &.rotate {\n            @include rotate(180deg);\n        }\n    }\n\n    &.splitter {\n        height: 1px !important;\n        margin: $spacing-sm 0;\n    }\n\n    &[dir='rtl'] {\n        .title {\n            &.spacing-from-submenu-trigger {\n                padding-right: unset;\n                padding-left: $spacing-lg;\n            }\n        }\n\n        .submenu-trigger {\n            right: unset;\n            left: $spacing-sm;\n            @include rotate(180deg);\n\n            &.rotate {\n                @include rotate(0deg);\n            }\n        }\n    }\n}\n\n.mat-menu-item-submenu-trigger::after {\n    width: unset;\n    height: unset;\n    transform: unset;\n}",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<mat-menu #childMenu=\"matMenu\" xPosition=\"{{ xPosition }}\" class=\"pep-{{type}}-menu\">\n    <ng-container *ngFor=\"let menuItem of items\">\n        <ng-container *ngIf=\"!menuItem.hidden\">\n            <ng-container *ngIf=\"menuItem.type === 'splitter'; then splitterBlock; else buttonBlock\"></ng-container>\n            <ng-template #splitterBlock>\n                <div mat-menu-item class=\"splitter\"></div>\n            </ng-template>\n\n            <ng-template #buttonBlock>\n                <ng-container\n                    *ngIf=\"type !== 'select' && menuItem.children?.length > 0; then childrenBlock; else regularBlock\">\n                </ng-container>\n                <ng-template #childrenBlock>\n                    <button mat-menu-item (click)=\"onMenuItemClicked(menuItem)\" [matMenuTriggerFor]=\"menu.childMenu\"\n                        title=\"{{ menuItem.text }}\" pepRtlDirection [disabled]=\"menuItem.disabled\"\n                        [ngClass]=\"{ disabled: menuItem.disabled }\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {\n                            itemIconName: menuItem.iconName,\n                            itemText: menuItem.text,\n                            itemType: menuItem.type,\n                            hasChildren: true\n                        }\"></ng-container>\n                    </button>\n                    <pep-menu-item #menu [type]=\"type\" [items]=\"menuItem.children\"\n                        (menuItemClick)=\"onChildClicked($event)\">\n                    </pep-menu-item>\n                </ng-template>\n                <ng-template #regularBlock>\n                    <button mat-menu-item (click)=\"onMenuItemClicked(menuItem)\" title=\"{{ menuItem.text }}\"\n                        pepRtlDirection [disabled]=\"menuItem.disabled\"\n                        [ngClass]=\"{ selected: type === 'select' && selectedItem?.key == menuItem?.key, disabled: menuItem.disabled }\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {\n                            itemIconName: menuItem.iconName,\n                            itemText: menuItem.text,\n                            itemType: menuItem.type,\n                            hasChildren: false\n                        }\"></ng-container>\n                    </button>\n                </ng-template>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n</mat-menu>\n\n<ng-template #itemTemplate let-itemIconName=\"itemIconName\" let-itemText=\"itemText\" let-itemType=\"itemType\"\n    let-hasChildren=\"hasChildren\">\n    <ng-container>\n        <mat-icon *ngIf=\"itemIconName\" class=\"pull-left flip\">\n            <pep-icon name=\"{{itemIconName}}\"></pep-icon>\n        </mat-icon>\n        <span *ngIf=\"itemText\" class=\"pull-left flip title ellipsis\"\n            [ngClass]=\"{ 'spacing-from-icon': itemIconName, 'spacing-from-submenu-trigger': hasChildren }\"\n            [title]=\"itemText\">\n            {{ itemText }}\n        </span>\n        <mat-icon *ngIf=\"hasChildren\" class=\"pull-left flip submenu-trigger\"\n            [ngClass]=\"{ 'rotate': xPosition === 'before' }\">\n            <pep-icon name=\"{{ subMenuIconName }}\"></pep-icon>\n        </mat-icon>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "PepMultiSelectFilterComponent",
            "id": "component-PepMultiSelectFilterComponent-052cdbba15f9a71d10e181fce605e271",
            "file": "projects/ngx-lib/smart-filters/multi-select-filter/multi-select-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-multi-select-filter",
            "styleUrls": [
                "./multi-select-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredOptions$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "MAX_OPTIONS_TO_SHOW",
                    "defaultValue": "6.35",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "numberOptionsToShowSearch",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "PepMultiSelectFilterOption[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "optionsContainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'optionsContainer'"
                        }
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "virtualScroller",
                    "type": "VirtualScrollerComponent",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "VirtualScrollerComponent"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calcOptionsHeight",
                    "args": [
                        {
                            "name": "optionsCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "optionsCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOptions",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 131,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultOperator",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterOperator",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "getFilterValue",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterDataValue",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "initFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "initOptionsSelectedValues",
                    "args": [
                        {
                            "name": "selectedValues",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "selectedValues",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "onOptionChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "PepMultiSelectFilterOption"
                        },
                        {
                            "name": "event",
                            "type": "MatCheckboxChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "PepMultiSelectFilterOption",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { BaseFilterComponent } from '../common/model/base-filter-component';\nimport {\n    IPepSmartFilterOperator,\n    PepSmartFilterOperators,\n} from '../common/model/operator';\nimport { IPepSmartFilterDataValue } from '../common/model/filter';\nimport { IPepSmartFilterFieldOption } from '../common/model/field';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { VirtualScrollerComponent } from 'ngx-virtual-scroller';\n\nclass PepMultiSelectFilterOption implements IPepSmartFilterFieldOption {\n    value: string;\n    count?: number;\n    selected = false;\n}\n\n@Component({\n    selector: 'pep-multi-select-filter',\n    templateUrl: './multi-select-filter.component.html',\n    styleUrls: ['./multi-select-filter.component.scss'],\n})\nexport class PepMultiSelectFilterComponent\n    extends BaseFilterComponent\n    implements OnInit, AfterViewInit {\n    options: PepMultiSelectFilterOption[] = [];\n    filteredOptions$: Observable<any>;\n    searchControl = new FormControl();\n\n    @ViewChild('optionsContainer')\n    optionsContainer: ElementRef;\n\n    private readonly MAX_OPTIONS_TO_SHOW = 6.35;\n    @ViewChild(VirtualScrollerComponent)\n    private virtualScroller: VirtualScrollerComponent;\n\n    numberOptionsToShowSearch = 10;\n\n    ngOnInit() {\n        super.ngOnInit;\n\n        if (this.field.options?.length > 0) {\n            this.options = this.field.options.map((opt) => {\n                return { value: opt.value, count: opt.count, selected: false };\n            });\n        } else {\n            this.searchControl.disable();\n        }\n\n        // Init the selected values from first value.\n        const firstControl = this.firstControl;\n        if (firstControl.value) {\n            this.initOptionsSelectedValues(firstControl.value);\n        }\n\n        // Add subscription for the first value change to set the selected options.\n        firstControl.valueChanges\n            .pipe(this.getDestroyer(), distinctUntilChanged())\n            .subscribe((selectedValues: string[]) => {\n                this.initOptionsSelectedValues(selectedValues);\n            });\n\n        // Filter the options by the search control.\n        this.filteredOptions$ = this.searchControl.valueChanges.pipe(\n            this.getDestroyer(),\n            startWith<any>(''),\n            map((option) =>\n                typeof option === 'string' ? option : option && option.value\n            ),\n            map((value) => (value ? this.filterOptions(value) : this.options))\n        );\n\n        // Each time the filter change.\n        this.filteredOptions$.subscribe(\n            (filterdOptions: PepMultiSelectFilterOption[]) => {\n                this.calcOptionsHeight(filterdOptions.length);\n                setTimeout(() => {\n                    // 8 is the padding top of the multi-select-options\n                    this.virtualScroller.scrollToPosition(-8);\n                }, 125);\n            }\n        );\n    }\n\n    ngAfterViewInit(): void {\n        // Calc for the first time.\n        this.calcOptionsHeight(this.options.length);\n    }\n\n    initOptionsSelectedValues(selectedValues: string[]): void {\n        this.options.forEach((opt) => {\n            const isValueSelected =\n                selectedValues && selectedValues.includes(opt.value);\n            opt.selected = isValueSelected;\n\n            // TODO: Maybe we need to support in values that not come over here from the api (with count 0).\n            // if (isValueSelected) {\n            //     opt.selected === true;\n            // }\n        });\n    }\n\n    private calcOptionsHeight(optionsCount: number) {\n        if (this.optionsContainer) {\n            const optionsToShow =\n                optionsCount > this.MAX_OPTIONS_TO_SHOW\n                    ? this.MAX_OPTIONS_TO_SHOW\n                    : optionsCount;\n            // optionsToShow * 2.25 is 1 option height + 1 is the padding top & bottom of the container.\n            const optionsHeight = optionsToShow * 2.25 + 1 + 'rem';\n\n            this.renderer.setStyle(\n                this.optionsContainer.nativeElement,\n                'height',\n                optionsHeight\n            );\n        }\n    }\n\n    private filterOptions(value: string): any[] {\n        const filterValue = value.toLowerCase();\n        return this.options.filter(\n            (opt) =>\n                opt.value &&\n                opt.value.toLowerCase().includes(filterValue.toLowerCase())\n        );\n    }\n\n    // Override\n    getDefaultOperator(): IPepSmartFilterOperator {\n        return PepSmartFilterOperators.In;\n    }\n\n    // Override\n    getFilterValue(): IPepSmartFilterDataValue {\n        const selectedValues = this.options\n            .filter((opt) => opt.selected)\n            .map((opt) => opt.value);\n        const filterValue = {\n            first: selectedValues,\n        };\n\n        return selectedValues.length > 0 ? filterValue : null;\n    }\n\n    // Override\n    initFilter() {\n        this.options.forEach((opt) => (opt.selected = false));\n        this.searchControl.setValue('');\n    }\n\n    onOptionChange(\n        option: PepMultiSelectFilterOption,\n        event: MatCheckboxChange\n    ) {\n        option.selected = event.checked;\n        this.firstControl.setValue(\n            this.options.filter((opt) => opt.selected).map((opt) => opt.value),\n            { emitEvent: false }\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../src/core/style/abstracts/variables';\r\n@import '../../src/core/style/abstracts/mixins';\r\n\r\n.multi-select-options {\r\n    margin: $spacing-sm calc(#{$spacing-xs} * -1) 0;\r\n    \r\n    &.with-no-search {\r\n        margin: calc(#{$spacing-sm} * -1) calc(#{$spacing-xs} * -1) 0;\r\n    }\r\n\r\n    .no-options {\r\n        display: flex;\r\n        padding: $spacing-sm $spacing-md;\r\n    }\r\n    \r\n    .flip-scroll {\r\n        padding: $spacing-sm $spacing-xs;\r\n        min-height: 3.25rem; // for 1 option\r\n        max-height: 34.75rem; // for 15 options\r\n        direction: rtl;\r\n        \r\n        virtual-scroller {\r\n            direction: ltr;\r\n        }\r\n\r\n        &.rtl {\r\n            direction: ltr;\r\n\r\n            virtual-scroller {\r\n                direction: rtl;\r\n            }\r\n        }\r\n    }\r\n    \r\n    .pep-checkbox-container {\r\n        height: 2.25rem;\r\n        padding-inline-end: 0;\r\n\r\n        ::ng-deep.mat-checkbox-layout {\r\n            width: 100%;\r\n            height: 100%;\r\n            grid-template-columns: auto 1fr;\r\n\r\n            .mat-checkbox-label {\r\n                align-self: center;\r\n            }\r\n        }\r\n\r\n        .title {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin: 0 $spacing-xs;\r\n        }\r\n    }\r\n\r\n}",
                    "styleUrl": "./multi-select-filter.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFilterComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div [formGroup]=\"form\">\n    <pep-search *ngIf=\"options?.length > numberOptionsToShowSearch\" [searchControl]=\"searchControl\"\n        [triggerOn]=\"'keydown'\" [shrinkInSmallScreen]=\"false\"></pep-search>\n    <div pepRtlClass class=\"multi-select-options pep-border-top pep-border-bottom\"\n        [ngClass]=\"{'with-no-search': options?.length <= numberOptionsToShowSearch}\">\n        <div #optionsContainer class=\"flip-scroll\">\n            <virtual-scroller #scroll [items]=\"filteredOptions$ | async\" [parentScroll]=\"optionsContainer\">\n                <mat-checkbox *ngFor=\"let opt of scroll.viewPortItems\"\n                    class=\"pep-checkbox-container pep-input no-default-background md\" [title]=\"opt.value\"\n                    [checked]=\"opt.selected\" (change)=\"onOptionChange(opt, $event)\">\n                    <div class=\"title\">\n                        <span class=\"body-sm ellipsis\">{{ opt.value }}</span>\n                        <span *ngIf=\"opt.count\" class=\"color-dimmed body-xs ellipsis\">({{opt.count}})</span>\n                    </div>\n                </mat-checkbox>\n                <ng-container *ngIf=\"scroll.viewPortItems?.length === 0\">\n                    <span class=\"no-options body-sm ellipsis\" [title]=\"field.name\">\n                        {{ ( options.length > 0 ? \"SMART_FILTERS.NO_SEARCH_RESULTS\" : \"SMART_FILTERS.NO_OPTIONS\") |\n                        translate }}\n                    </span>\n                </ng-container>\n            </virtual-scroller>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "PepNumberFilterComponent",
            "id": "component-PepNumberFilterComponent-de06f7281e21a9bb922204faced3f673",
            "file": "projects/ngx-lib/smart-filters/number-filter/number-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-number-filter",
            "styleUrls": [
                "./number-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chooseTypeOptions",
                    "defaultValue": "[]",
                    "type": "Array<IPepOption>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "PepSmartFilterOperators",
                    "defaultValue": "PepSmartFilterOperators",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultOperator",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterOperator",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "getFilterValue",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSmartFilterDataValue",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "loadOperatorsOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onOperatorChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldValueChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldsStateAndValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit } from '@angular/core';\nimport { BaseFilterComponent } from '../common/model/base-filter-component';\nimport {\n    IPepSmartFilterOperator,\n    PepSmartFilterOperators,\n} from '../common/model/operator';\nimport { IPepSmartFilterDataValue } from '../common/model/filter';\nimport { Validators } from '@angular/forms';\nimport { IPepFieldValueChangeEvent, IPepOption } from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-number-filter',\n    templateUrl: './number-filter.component.html',\n    styleUrls: ['./number-filter.component.scss'],\n})\nexport class PepNumberFilterComponent extends BaseFilterComponent {\n    PepSmartFilterOperators = PepSmartFilterOperators;\n    chooseTypeOptions: Array<IPepOption> = [];\n\n    // Override\n    getDefaultOperator(): IPepSmartFilterOperator {\n        return PepSmartFilterOperators.Equals;\n    }\n\n    // Override\n    getFilterValue(): IPepSmartFilterDataValue {\n        const filterValue = {\n            first: this.firstControl.value,\n        };\n\n        if (this.operator === PepSmartFilterOperators.NumberRange) {\n            filterValue['second'] = this.secondControl.value;\n        }\n\n        return filterValue;\n    }\n\n    // Override\n    loadOperatorsOptions() {\n        this.chooseTypeOptions = this.operators.map((operator) => {\n            return {\n                key: operator.id,\n                value: this.translate.instant(\n                    `${this.OPERATORS_TRANSLATION_PREFIX}.${operator.name}`\n                ),\n            };\n        });\n    }\n\n    // Override\n    setFieldsStateAndValidators(): void {\n        if (this.operator === PepSmartFilterOperators.NumberRange) {\n            this.firstControl.setValidators([\n                Validators.required,\n                this.validator.isLessThan(this.secondControl),\n            ]);\n            this.secondControl.enable();\n            this.secondControl.setValidators([\n                Validators.required,\n                this.validator.isGreaterThan(this.firstControl),\n            ]);\n        } else {\n            super.setFieldsStateAndValidators();\n        }\n    }\n\n    onOperatorChanged(event: IPepFieldValueChangeEvent) {\n        const operator = Object.values(PepSmartFilterOperators).find(\n            (operator) => operator.id === event.value\n        );\n        this.operator = operator;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./number-filter.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseFilterComponent",
            "templateData": "<div [formGroup]=\"form\">\n    <ng-container>\n        <pep-select [key]=\"'typeOperator'\" [value]=\"operator.id\" [label]=\"'SMART_FILTERS.TYPE' | translate\"\n            [emptyOption]=\"false\" [options]=\"chooseTypeOptions\" (valueChange)=\"onOperatorChanged($event)\">\n        </pep-select>\n    </ng-container>\n    <div *ngIf=\"operator !== PepSmartFilterOperators.NumberRange\">\n        <!-- Amount -->\n        <pep-textbox [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.AMOUNT' | translate\"\n            [renderError]=\"false\" [type]=\"field.type\" [formattedValue]=\"firstControl.value\"\n            [value]=\"firstControl.value\">\n        </pep-textbox>\n    </div>\n    <div *ngIf=\"operator === PepSmartFilterOperators.NumberRange\" fxLayout=\"row\" fxLayout.xs=\"column\"\n        fxLayoutGap=\"1rem\">\n        <!-- Min number -->\n        <pep-textbox [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.MIN' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type\" [formattedValue]=\"firstControl.value\"\n            [value]=\"firstControl.value\" [maxValue]=\"secondControl.value\">\n        </pep-textbox>\n        <!-- Max number -->\n        <pep-textbox [form]=\"form\" [key]=\"secondControlKey\" [label]=\"'SMART_FILTERS.MAX' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type\" [formattedValue]=\"secondControl.value\"\n            [value]=\"secondControl.value\" [minValue]=\"firstControl.value\">\n        </pep-textbox>\n    </div>\n</div>"
        },
        {
            "name": "PepQuantitySelectorComponent",
            "id": "component-PepQuantitySelectorComponent-91eacdf9818aaa4dcd242f462ae3b664",
            "file": "projects/ngx-lib/quantity-selector/quantity-selector.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-quantity-selector",
            "styleUrls": [
                "./quantity-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quantity-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "additionalValue",
                    "defaultValue": "''",
                    "line": 84
                },
                {
                    "name": "alowDecimal",
                    "defaultValue": "false",
                    "line": 83
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 77
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 89,
                    "type": "FormGroup"
                },
                {
                    "name": "formattedValue",
                    "defaultValue": "''",
                    "line": 73
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 92
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 71
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 74
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 91,
                    "type": "PepLayoutType"
                },
                {
                    "name": "notificationInfo",
                    "line": 85,
                    "type": "any"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 78
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 76
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 81
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 90
                },
                {
                    "name": "styleClass",
                    "defaultValue": "document.documentElement.style.getPropertyValue(\n        PepCustomizationService.STYLE_QS_KEY\n    ) as PepStyleType",
                    "line": 96,
                    "type": "PepStyleType"
                },
                {
                    "name": "textColor",
                    "defaultValue": "''",
                    "line": 79
                },
                {
                    "name": "type",
                    "defaultValue": "'qs'",
                    "line": 75,
                    "type": "PepQuantitySelectorFieldType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 72
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 80,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "elementClick",
                    "defaultValue": "new EventEmitter<IPepFieldClickEvent>()",
                    "line": 103,
                    "type": "EventEmitter<IPepFieldClickEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 101,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "controlType",
                    "defaultValue": "'qs'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "ENTER_CHILDREN",
                    "defaultValue": "'[EnterChildren]'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ENTER_PACKAGE",
                    "defaultValue": "'[EnterPackage]'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "isCaution",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "isEmptyKey",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "isMatrixFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "lastQsContClientWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "messages",
                    "defaultValue": "null",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "MINUS",
                    "defaultValue": "'[-]'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "PLUS",
                    "defaultValue": "'[+]'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "QSCont",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'QSCont'"
                        }
                    ]
                },
                {
                    "name": "QSInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'QSInput'"
                        }
                    ]
                },
                {
                    "name": "qsWidthSubject",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sameElementInTheWantedRow",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "showQsBtn",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 415,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cleanError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 353
                },
                {
                    "name": "decrement",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 446,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enterChildren",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 468,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enterPackage",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusToTheSameElementInTheWantedRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 337
                },
                {
                    "name": "getDestroyer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getParentByClass",
                    "args": [
                        {
                            "name": "el",
                            "type": ""
                        },
                        {
                            "name": "parentSelector",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 261,
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentSelector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSameElementInTheWantedRowByClassName",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "isNext",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 281,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isNext",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increment",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 424,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 394,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 507,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMatrixBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 379,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMatrixClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 371,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMatrixMouseEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMatrixMouseleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 367,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "setQsView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 495
                },
                {
                    "name": "setSameElementInTheWantedRow",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "isNext",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isNext",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupQsButtons",
                    "args": [
                        {
                            "name": "qsWidth",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 487,
                    "jsdoctags": [
                        {
                            "name": "qsWidth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    Renderer2,\n    AfterViewInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\nimport {\n    PepLayoutType,\n    PepStyleType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    IPepFieldClickEvent,\n    PepQuantitySelectorFieldType,\n    PepQuantitySelectorField,\n} from '@pepperi-addons/ngx-lib';\nimport { BehaviorSubject, fromEvent, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'pep-quantity-selector',\n    templateUrl: './quantity-selector.component.html',\n    styleUrls: ['./quantity-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('showHide', [\n            state(\n                'show',\n                style({\n                    opacity: 1,\n                    transform: 'scale(1)',\n                })\n            ),\n            state(\n                'hide',\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)',\n                })\n            ),\n            transition('show => hide', animate('250ms ease-out')),\n            transition('hide => show', animate('250ms ease-in')),\n        ]),\n    ],\n})\nexport class PepQuantitySelectorComponent\n    implements OnChanges, OnInit, AfterViewInit, OnDestroy {\n    public static ENTER_CHILDREN = '[EnterChildren]';\n    public static ENTER_PACKAGE = '[EnterPackage]';\n    public static PLUS = '[+]';\n    public static MINUS = '[-]';\n\n    @Input() key = '';\n    @Input() value = '';\n    @Input() formattedValue = '';\n    @Input() label = '';\n    @Input() type: PepQuantitySelectorFieldType = 'qs';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() textColor = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    // @Input() lastFocusField: any;\n    @Input() alowDecimal = false;\n    @Input() additionalValue = '';\n    @Input() notificationInfo: any;\n\n    controlType = 'qs';\n\n    @Input() form: FormGroup = null;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() isActive = false;\n\n    // Get default style from theme.\n    @Input()\n    styleClass: PepStyleType = document.documentElement.style.getPropertyValue(\n        PepCustomizationService.STYLE_QS_KEY\n    ) as PepStyleType; //'strong';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output()\n    elementClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();\n\n    @ViewChild('QSCont') QSCont: ElementRef;\n    @ViewChild('QSInput') QSInput: ElementRef;\n\n    private readonly _destroyed: Subject<void>;\n    private qsWidthSubject: BehaviorSubject<number>;\n    lastQsContClientWidth = 0;\n    showQsBtn = true;\n\n    standAlone = false;\n    isFocus = false;\n    isMatrixFocus = false;\n\n    isCaution = false;\n    messages: Array<any> = null;\n    // resize: any;\n\n    sameElementInTheWantedRow = null;\n\n    isEmptyKey = false;\n\n    constructor(\n        private cd: ChangeDetectorRef,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {\n        this._destroyed = new Subject();\n        this.qsWidthSubject = new BehaviorSubject(0);\n    }\n\n    setForm() {\n        const pepField = new PepQuantitySelectorField({\n            key: this.key,\n            value: this.value,\n            required: this.required,\n            readonly: this.readonly,\n            disabled: this.disabled,\n        });\n        this.form = this.customizationService.getDefaultFromGroup(pepField);\n    }\n\n    protected getDestroyer() {\n        return takeUntil(this._destroyed);\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            if (this.key === '') {\n                this.isEmptyKey = true;\n            }\n\n            this.standAlone = true;\n            this.setForm();\n            this.formattedValue = this.formattedValue || this.value;\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        // Get state class from theme.\n        // this.styleClass = document.documentElement.style.getPropertyValue(\n        //     PepCustomizationService.STYLE_QS_KEY\n        // ) as PepStyleType;\n\n        this.qsWidthSubject\n            .asObservable()\n            .pipe(this.getDestroyer(), distinctUntilChanged())\n            .subscribe((qsWidth: number) => {\n                this.setupQsButtons(qsWidth);\n            });\n    }\n\n    ngAfterViewInit() {\n        //\n    }\n\n    ngAfterViewChecked(): void {\n        this.setQsView();\n    }\n\n    ngOnChanges(changes: any): void {\n        if (this.standAlone) {\n            this.formattedValue = this.formattedValue || this.value;\n        }\n\n        // Bug fix for addons when the key is '' in the ngOnInit for some reson\n        if (this.isEmptyKey && this.key !== '') {\n            this.setForm();\n        }\n\n        this.isCaution = this.textColor === '#FF0000';\n\n        const messages =\n            this.notificationInfo && this.notificationInfo.length > 0\n                ? JSON.parse(this.notificationInfo).Messages\n                : '';\n        if (messages && messages.length > 0) {\n            // Replace the msg keys.\n            for (const msg of messages) {\n                if (msg.Key === 'Inventory_Limit_Msg') {\n                    msg.Key = 'MESSAGES.ERROR_INVENTORY_LIMIT';\n                } else if (msg.Key === 'Case_Quantity_Limit_Msg') {\n                    msg.Key = 'MESSAGES.ERROR_CASE_QUANTITY_LIMIT';\n                } else if (msg.Key === 'Min_Quantity_Limit_Msg') {\n                    msg.Key = 'MESSAGES.ERROR_MIN_QUANTITY_LIMIT';\n                } else if (msg.Key === 'Max_Quantity_Limit_Msg') {\n                    msg.Key = 'MESSAGES.ERROR_MAX_QUANTITY_LIMIT';\n                }\n            }\n\n            this.messages = messages;\n\n            const fieldControl = this.form.controls[this.key];\n            fieldControl.setErrors({\n                serverError: 'Error',\n            });\n            setTimeout(() => {\n                if (this.QSInput && this.QSInput.nativeElement) {\n                    this.QSInput.nativeElement.focus();\n                }\n            }, 150);\n        } else {\n            setTimeout(() => {\n                // if (this.lastFocusField) {\n                //     this.lastFocusField.focus();\n                //     this.lastFocusField = null;\n                // } else {\n                this.focusToTheSameElementInTheWantedRow();\n                // }\n            }, 100);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n\n        // if (this.resize) {\n        //     this.resize.unsubscribe();\n        // }\n\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n\n        // if (this.elementClick) {\n        //     this.elementClick.unsubscribe();\n        // }\n    }\n\n    get getAdditionalValue(): string {\n        return this.additionalValue.length > 0 ? 'show' : 'hide';\n    }\n\n    getParentByClass(el, parentSelector /* optional */): any {\n        // If no parentSelector defined will bubble up all the way to *document*\n        if (parentSelector === undefined) {\n            parentSelector = document;\n        }\n\n        let p = el.parentNode;\n\n        while (\n            p &&\n            !p?.classList?.contains(parentSelector) &&\n            parentSelector !== document\n        ) {\n            const o = p;\n            p = o?.parentNode || null;\n        }\n\n        return p?.className.indexOf(parentSelector) > -1 ? p : null;\n    }\n\n    getSameElementInTheWantedRowByClassName(event: any, isNext = true): any {\n        const eventTarget = event.target || event.srcElement;\n        let sameElementInTheWantedRowByClassName;\n\n        let parentSelector;\n        if (this.layoutType === 'table') {\n            parentSelector = this.getParentByClass(eventTarget, 'table-row');\n        } else if (this.layoutType === 'card') {\n            parentSelector = this.getParentByClass(eventTarget, 'card-view');\n            if (!parentSelector) {\n                parentSelector = this.getParentByClass(\n                    eventTarget,\n                    'line-view'\n                );\n            }\n        }\n\n        if (isNext) {\n            if (parentSelector.nextElementSibling === null) {\n                sameElementInTheWantedRowByClassName = parentSelector.parentElement.querySelectorAll(\n                    '[name=' + this.key + ']'\n                )[0];\n            } else {\n                sameElementInTheWantedRowByClassName = parentSelector.nextElementSibling.querySelectorAll(\n                    '[name=' + this.key + ']'\n                )[0];\n            }\n        } else {\n            if (parentSelector.previousElementSibling === null) {\n                const elementsList = parentSelector.parentElement.querySelectorAll(\n                    '[name=' + this.key + ']'\n                );\n                sameElementInTheWantedRowByClassName =\n                    elementsList[elementsList.length - 1];\n            } else {\n                sameElementInTheWantedRowByClassName = parentSelector.previousElementSibling.querySelectorAll(\n                    '[name=' + this.key + ']'\n                )[0];\n            }\n        }\n\n        return sameElementInTheWantedRowByClassName;\n    }\n\n    setSameElementInTheWantedRow(event: any, isNext = true): void {\n        // Navigate to the QS in the next row.\n        if (this.layoutType === 'card' || this.layoutType === 'table') {\n            this.sameElementInTheWantedRow = this.getSameElementInTheWantedRowByClassName(\n                event,\n                isNext\n            );\n        }\n\n        this.QSInput.nativeElement.blur();\n    }\n\n    focusToTheSameElementInTheWantedRow(): void {\n        if (this.sameElementInTheWantedRow) {\n            const elem = this.sameElementInTheWantedRow;\n            // If this is regular item (qs and not button) .\n            if (elem instanceof HTMLInputElement && elem.type === 'text') {\n                elem.click();\n                elem.select();\n            } else {\n                const parentElem = elem.parentNode;\n                parentElem.click();\n                elem.focus();\n            }\n            this.sameElementInTheWantedRow = null;\n        }\n    }\n\n    cleanError(): void {\n        const fieldControl = this.form.controls[this.key];\n\n        // Clean the error message\n        if (this.messages && this.messages.length > 0) {\n            this.messages = this.notificationInfo = null;\n            fieldControl.setErrors(null);\n        }\n    }\n\n    onMatrixMouseEnter(event: any): void {\n        this.isMatrixFocus = true;\n    }\n\n    onMatrixMouseleave(event: any): void {\n        this.isMatrixFocus = false;\n    }\n\n    onMatrixClick(event: any): void {\n        this.isFocus = true;\n\n        if (this.QSInput && this.QSInput.nativeElement) {\n            this.QSInput.nativeElement.focus();\n        }\n    }\n\n    onMatrixBlur(event: any): void {\n        if (\n            !event.relatedTarget ||\n            event.relatedTarget.className.indexOf('qs') < 0\n        ) {\n            this.isMatrixFocus = false;\n        }\n\n        this.onBlur(event);\n    }\n\n    onFocus(event: any): void {\n        this.isFocus = true;\n    }\n\n    onBlur(event: any): void {\n        this.isFocus = false;\n        this.cleanError();\n\n        const value = event.target ? event.target.value : event;\n\n        if (parseFloat(this.value) !== parseFloat(value)) {\n            this.value = value;\n            this.formattedValue = value;\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                value\n            );\n\n            this.changeValue(this.value, event.relatedTarget);\n        } else {\n            this.focusToTheSameElementInTheWantedRow();\n        }\n    }\n\n    changeValue(value: any, lastFocusedField: any = null): void {\n        this.valueChange.emit({\n            key: this.key,\n            value,\n            controlType: this.controlType,\n            lastFocusedField,\n        });\n    }\n\n    increment(event): void {\n        if (this.standAlone) {\n            let tmp = parseFloat(this.value);\n\n            this.value = this.formattedValue = (++tmp).toString();\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                this.value\n            );\n        }\n\n        // this.changeValue('+', null);\n        this.elementClick.emit({\n            key: this.key,\n            value: PepQuantitySelectorComponent.PLUS,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n        event.stopPropagation();\n    }\n\n    decrement(event): void {\n        if (this.standAlone) {\n            let tmp = parseFloat(this.value);\n\n            this.value = this.formattedValue = (--tmp).toString();\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                this.value\n            );\n        }\n\n        // this.changeValue('-', null);\n        this.elementClick.emit({\n            key: this.key,\n            value: PepQuantitySelectorComponent.MINUS,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n        event.stopPropagation();\n    }\n\n    enterChildren(event): void {\n        this.elementClick.emit({\n            key: this.key,\n            value: PepQuantitySelectorComponent.ENTER_CHILDREN,\n            controlType: this.controlType,\n            eventWhich: event.which,\n        });\n    }\n\n    enterPackage(event): void {\n        this.elementClick.emit({\n            key: this.key,\n            value: PepQuantitySelectorComponent.ENTER_PACKAGE,\n            controlType: this.controlType,\n            eventWhich: event.which,\n            otherData: this.notificationInfo,\n        });\n    }\n\n    setupQsButtons(qsWidth: number) {\n        this.showQsBtn = qsWidth > 120;\n\n        if (!this.cd['destroyed']) {\n            this.cd.detectChanges();\n        }\n    }\n\n    setQsView(): void {\n        if (\n            this.QSCont &&\n            this.QSCont.nativeElement &&\n            this.QSCont.nativeElement.clientWidth > 0\n        ) {\n            setTimeout(() => {\n                this.qsWidthSubject.next(this.QSCont.nativeElement.clientWidth);\n            }, 0);\n        }\n    }\n\n    onKeyPress(event): any {\n        let inputChar = String.fromCharCode(event.charCode);\n        const keyboardEvent = event as KeyboardEvent;\n\n        if (keyboardEvent.key === 'Enter') {\n            this.setSameElementInTheWantedRow(\n                keyboardEvent,\n                !keyboardEvent.shiftKey\n            );\n            return true;\n        }\n\n        // TODO: Make it one function like in PepTextboxComponent\n        if (\n            /*[8, 9, 27, 13, 190].indexOf(keyboardEvent.keyCode) !== -1 ||*/\n            // Allow: Ctrl+A\n            (keyboardEvent.keyCode === 65 && keyboardEvent.ctrlKey === true) ||\n            // Allow: Ctrl+C\n            (keyboardEvent.keyCode === 67 && keyboardEvent.ctrlKey === true) ||\n            // Allow: Ctrl+V\n            (keyboardEvent.keyCode === 86 && keyboardEvent.ctrlKey === true) ||\n            // Allow: Ctrl+X\n            (keyboardEvent.keyCode === 88 &&\n                keyboardEvent.ctrlKey ===\n                    true) /*||\n            // Allow: home, end, left, right\n            (keyboardEvent.keyCode >= 35 && keyboardEvent.keyCode <= 39)*/\n        ) {\n            // let it happen, don't do anything\n            return true;\n        }\n\n        if (this.alowDecimal) {\n            const decPoint = '.';\n            const thousandSeparator = ',';\n            const pattern = /^\\d[\\d,]*(\\.\\d+)?$/;\n            if (keyboardEvent.keyCode === 46) {\n                inputChar = inputChar + '0';\n            } else if (keyboardEvent.keyCode === 44) {\n                inputChar = inputChar + '000';\n            }\n            if (!pattern.test(event.target.value + inputChar)) {\n                keyboardEvent.preventDefault();\n            }\n        } else {\n            const pattern = /[0-9\\+\\-\\ ]/;\n            if (!pattern.test(inputChar)) {\n                keyboardEvent.preventDefault();\n            }\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    height: inherit;\n    display: grid;\n    // width: inherit;\n}\n\n.pepperi-quantity-selector-container, .pep-quantity-selector-container {\n    display: flex;\n    flex-flow: wrap;\n    align-items: center;\n    min-width: 2rem;\n    width: 100%;\n    height: inherit;\n\n    @include hide-spin-buttons();\n\n    .mat-input-element {\n        padding: 0 0.25rem;\n        text-align: center;\n        font-weight: $font-weight-bold;\n        width: 100%;\n    }\n\n    .mat-form-field {\n        .mat-form-field-wrapper {\n            .mat-form-field-subscript-wrapper {\n                height: unset;\n            }\n        }\n    }\n\n    .pepperi-button, .pep-button {\n        width: 100%;\n\n        &.qs-action {\n            min-width: 2rem;\n            line-height: 2rem;\n            width: 2rem !important;\n            height: 2rem !important;\n\n            .mat-icon {\n                height: inherit;\n                width: inherit;\n            }\n        }\n    }\n\n    .qs-error {\n        display: block;\n    }\n\n    &.hide-qs-actions {\n        .pepperi-button, .pep-button {\n            &.qs-action {\n                display: none;\n            }\n        }\n    }\n\n    &.matrix-qs {\n        // margin: 0 0.125rem;\n\n        .additional-value {\n            height: 1.25rem;\n            top: calc(#{$spacing-xs} * -1);\n            transform: unset !important; // Override material default.\n            display: flex;\n            align-self: flex-start;\n            justify-content: flex-end;\n\n            &.prefix {\n                left: calc(#{$spacing-sm} * -1) !important;\n            }\n\n            &.suffix {\n                right: calc(#{$spacing-sm} * -1) !important;\n            }\n\n            .mat-badge-content {\n                @include mat-badge-content();\n            }\n        }\n\n        .disable {\n            min-width: 0.5rem;\n            padding: 0 0.25rem;\n        }\n    }\n\n    &.pepperi-table-quantity-selector, &.pep-table-quantity-selector {\n        .pepperi-button:not(.qs-action), .pep-button:not(.qs-action) {\n            // margin-top: 0.25rem;\n            height: 2rem;\n            line-height: 2rem;\n        }\n\n        .pepperi-button, .pep-button {\n            &.qs-action {\n                min-width: 1.5rem;\n                line-height: 1.5rem;\n                width: 1.5rem !important;\n                height: 1.5rem !important;\n            }\n        }\n\n        // .mat-form-field .mat-form-field-wrapper {\n        //     margin-top: 0 !important;\n        // }\n    }\n}\n",
                    "styleUrl": "./quantity-selector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "getAdditionalValue": {
                    "name": "getAdditionalValue",
                    "getSignature": {
                        "name": "getAdditionalValue",
                        "type": "string",
                        "returnType": "string",
                        "line": 257
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <div #QSCont class=\"pep-quantity-selector-container {{ styleClass }}\" [ngClass]=\"{\n                'hide-qs-actions' : layoutType === 'card' && rowSpan <= 1,\n                'pep-table-quantity-selector': layoutType === 'table',\n                'one-row': rowSpan === 1,\n                caution: isCaution,\n                'matrix-qs': type === 'qsForMatrix',\n                'zero-quantity': formattedValue === '0'\n            }\">\n            <pep-field-title *ngIf=\"layoutType !== 'table' && layoutType !== 'card'\" [label]=\"label\"\n                [required]=\"required\" [disabled]=\"disabled\" [showTitle]=\"showTitle\" [xAlignment]=\"xAlignment\">\n            </pep-field-title>\n\n            <ng-container *ngIf=\"type == 'qs'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleClass }} disable ellipsis\"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        title=\"{{ formattedValue }}\" disabled=\"true\">\n                        {{ formattedValue }}\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <mat-form-field appearance=\"outline\">\n                        <input type=\"decimalNumber\" inputmode=\"decimal\" matInput #QSInput name=\"{{ key }}\"\n                            class=\"body-lg ellipsis\" title=\"{{ formattedValue }}\" autocomplete=\"off\" [id]=\"key\"\n                            [formControlName]=\"key\"\n                            [value]=\"isFocus ? (value | pepQuantitySelectorNumber: alowDecimal) : formattedValue\"\n                            (keypress)=\"onKeyPress($event)\" (click)=\"$event.target.setSelectionRange(0, 999)\"\n                            (blur)=\"onBlur($event)\" (focus)=\"onFocus($event)\" />\n                        <button *ngIf=\"showQsBtn\" mat-button matPrefix (click)=\"decrement($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleClass !== 'strong',\n                                'keep-background-on-focus': styleClass === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_minus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <button *ngIf=\"showQsBtn\" mat-button matSuffix (click)=\"increment($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleClass !== 'strong',\n                                'keep-background-on-focus': styleClass === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_plus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'qsForMatrix'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleClass }} disable\" disabled=\"true\"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\">\n                        X\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <span *ngIf=\"xAlignment == 'right'\" class=\"body-sm additional-value prefix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n\n                    <mat-form-field appearance=\"outline\" (mouseleave)=\"!isFocus ? onMatrixMouseleave($event) : null\">\n                        <input type=\"decimalNumber\" inputmode=\"decimal\" matInput #QSInput name=\"{{ key }}\"\n                            title=\"{{ formattedValue }}\" class=\"body-sm ellipsis\" autocomplete=\"off\" [id]=\"key\"\n                            [formControlName]=\"key\"\n                            [value]=\"isFocus ? (value | pepQuantitySelectorNumber: alowDecimal) : formattedValue\"\n                            (keypress)=\"onKeyPress($event)\"\n                            (click)=\"onMatrixClick($event); $event.target.setSelectionRange(0, 999)\"\n                            (blur)=\"onMatrixBlur($event)\" (focus)=\"onMatrixMouseEnter($event); onFocus($event)\"\n                            (mouseenter)=\"onMatrixMouseEnter($event)\" />\n\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n\n                    <span *ngIf=\"xAlignment != 'right'\" class=\"body-sm additional-value suffix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'button'\">\n                <ng-container *ngIf=\"(value | pepToNumber) == 0; then regularBlock; else withBadgeBlock\">\n                </ng-container>\n                <ng-template #regularBlock>\n                    <button mat-button [disabled]=\"disabled\" class=\"pep-button {{ styleClass }} ellipsis\" [id]=\"key\"\n                        name=\"{{ key }}\"\n                        [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\">\n                        {{ 'QS.ORDER' | translate }}\n                    </button>\n                </ng-template>\n                <ng-template #withBadgeBlock>\n                    <button mat-button matBadge=\"{{ formattedValue }}\"\n                        matBadgePosition=\"{{xAlignment == 'right' ? 'before' : 'after'}}\"\n                        [matBadgeSize]=\"layoutType === 'card' && rowSpan === 1 ? 'small' : 'medium'\"\n                        class=\"pep-button {{ styleClass }} ellipsis\" [id]=\"key\" name=\"{{ key }}\" [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1,\n                            'right-alignment': xAlignment == 'right', 'left-alignment': xAlignment != 'right'}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\" [disabled]=\"disabled\">\n                        {{ 'QS.ORDER' | translate }}\n                    </button>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"type == 'packageButton'\">\n                <button mat-button class=\"pep-button {{ styleClass }} ellipsis\" [id]=\"key\" name=\"{{ key }}\"\n                    [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                    [title]=\"'QS.ORDER' | translate\" (click)=\"enterPackage($event)\" [disabled]=\"disabled\">\n                    {{ 'QS.ORDER' | translate }} &#40;{{ formattedValue }}&#41;\n                </button>\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepRichHtmlTextareaComponent",
            "id": "component-PepRichHtmlTextareaComponent-018c861e3bd0333d89103825ae623a8b",
            "file": "projects/ngx-lib/rich-html-textarea/rich-html-textarea.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-rich-html-textarea",
            "styleUrls": [
                "./rich-html-textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rich-html-textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 59
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 67,
                    "type": "FormGroup"
                },
                {
                    "name": "inlineMode",
                    "defaultValue": "false",
                    "line": 71
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 68
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 55
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 57
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 70,
                    "type": "PepLayoutType"
                },
                {
                    "name": "maxFieldCharacters",
                    "defaultValue": "0",
                    "line": 61
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 60
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 58
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 63
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 69
                },
                {
                    "name": "toolbarOptions",
                    "line": 75,
                    "type": "IPepRichHtmlTextareaToolbarOptions"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 56
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 62,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 85,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_toolbarOptions",
                    "type": "IPepRichHtmlTextareaToolbarOptions",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "active",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "controlType",
                    "defaultValue": "'richhtmltextarea'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "quillContent",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "quillContentDialog",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "richTextEditorDialogTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'richTextEditorDialogTemplate', {read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "cardTemplateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultToolbarOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepRichHtmlTextareaToolbarOptions",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onContentChanged",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditorCreated",
                    "args": [
                        {
                            "name": "quill",
                            "type": "any"
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "quill",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inDialog",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    ElementRef,\n    Renderer2,\n    TemplateRef,\n    ViewChild,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepRichHtmlTextareaField,\n} from '@pepperi-addons/ngx-lib';\nimport {\n    PepDialogService,\n    PepDialogData,\n} from '@pepperi-addons/ngx-lib/dialog';\nimport { SafeHtml, DomSanitizer } from '@angular/platform-browser';\n\nexport interface IPepRichHtmlTextareaToolbarOptions {\n    font?: any;\n    size?: any;\n    header?: any;\n    bold?: any;\n    italic?: any;\n    underline?: any;\n    strike?: any;\n    link?: any;\n    image?: any;\n    ordered?: any;\n    bullet?: any;\n    color?: any;\n    background?: any;\n    align?: any;\n}\n\n@Component({\n    selector: 'pep-rich-html-textarea',\n    templateUrl: './rich-html-textarea.component.html',\n    styleUrls: ['./rich-html-textarea.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepRichHtmlTextareaComponent implements OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() maxFieldCharacters = 0;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n\n    controlType = 'richhtmltextarea';\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() inlineMode = false;\n\n    protected _toolbarOptions: IPepRichHtmlTextareaToolbarOptions;\n    @Input()\n    get toolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return this._toolbarOptions;\n    }\n    set toolbarOptions(options: IPepRichHtmlTextareaToolbarOptions) {\n        if (options) {\n            this._toolbarOptions = options;\n        }\n    }\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    @ViewChild('richTextEditorDialogTemplate', { read: TemplateRef })\n    richTextEditorDialogTemplate: TemplateRef<any>;\n    quillContent = '';\n    quillContentDialog = '';\n\n    fieldHeight = '';\n    standAlone = false;\n    active = false;\n\n    constructor(\n        private sanitizer: DomSanitizer,\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {\n        this.toolbarOptions = this.getDefaultToolbarOptions();\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(\n            //     this.key, this.value, this.required, this.readonly, this.disabled, this.maxFieldCharacters);\n            const pepField = new PepRichHtmlTextareaField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n                maxFieldCharacters: this.maxFieldCharacters,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n\n        this.quillContent = this.value;\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    getDefaultToolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return {\n            font: false,\n            size: false,\n            header: true,\n            bold: true,\n            italic: true,\n            underline: true,\n            strike: false,\n            link: true,\n            image: true,\n            ordered: true,\n            bullet: true,\n            color: true,\n            background: false,\n            align: true,\n        };\n    }\n\n    changeValue(value: any, lastFocusedField: any = null): void {\n        if (value !== this.value) {\n            this.value = value;\n            this.quillContent = value;\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                value\n            );\n            this.valueChange.emit({ key: this.key, value, lastFocusedField });\n        }\n    }\n\n    cardTemplateClicked(event: any): void {\n        this.openDialog();\n    }\n\n    openDialog(): void {\n        const config = this.dialogService.getDialogConfig(\n            {\n                // minWidth: '50vw',\n                // maxWidth: '90vw',\n                // maxHeight: '90vh',\n            },\n            'large'\n        );\n\n        // If disabled open regular modal as html mode.\n        if (this.disabled || this.readonly) {\n            const data = new PepDialogData({\n                title: this.label,\n                content: this.quillContent,\n                showFooter: false,\n            });\n            this.dialogService.openDefaultDialog(data, config);\n        } else {\n            this.quillContentDialog = this.quillContent;\n            const dialogRef = this.dialogService.openDialog(\n                this.richTextEditorDialogTemplate,\n                {},\n                config\n            );\n\n            dialogRef.afterClosed().subscribe((value) => {\n                if (value !== undefined && value !== null) {\n                    this.changeValue(value);\n                }\n            });\n        }\n    }\n\n    // Init quillContent in case that there are html tags...\n    onEditorCreated(quill: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.quillContent = quill.getText();\n        }\n    }\n\n    onContentChanged(obj: any, inDialog: boolean): void {\n        if (inDialog) {\n            this.quillContentDialog = obj.html;\n        } else {\n            this.quillContent = obj.html;\n        }\n    }\n\n    onBlur(obj: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.active = false;\n            this.changeValue(this.quillContent);\n        }\n    }\n\n    onFocus(obj: any, inDialog: boolean): void {\n        if (!inDialog) {\n            this.active = true;\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/mixins';\n@import '../src/core/style/abstracts/variables';\n\n:host {\n    height: inherit;\n    display: block;\n}\n\n.pepperi-textarea-container, .pep-textarea-container {\n    ::ng-deep.mat-form-field-infix {\n        margin-left: calc(#{$spacing-md} * -1);\n    }\n\n    &.right-alignment {\n        ::ng-deep.mat-form-field-infix {\n            margin-left: unset;\n            margin-right: calc(#{$spacing-md} * -1);\n        }\n    }\n}\n\n.vertical-separator {\n    display: none;\n    // display: inline;\n    // border-style: dashed;\n    // margin: 0 4px;\n    // border-top-width: 0;\n    // border-bottom-width: 0;\n    // border-right-width: 0;\n    // border-left-width: 1px;\n}\n\n",
                    "styleUrl": "./rich-html-textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "toolbarOptions": {
                    "name": "toolbarOptions",
                    "setSignature": {
                        "name": "toolbarOptions",
                        "type": "void",
                        "args": [
                            {
                                "name": "options",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-isFormView=\"isFormView\">\n        <div class=\"pep-textarea-container pep-report-textarea\" [ngClass]=\"{ 'stand-alone': standAlone,\n            'right-alignment': xAlignment == 'right', 'one-row': !isFormView && rowSpan === 1,\n            'pep-textarea-card-container': layoutType === 'card'  }\">\n            <pep-field-title *ngIf=\"isFormView\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n                [maxFieldCharacters]=\"inlineMode && !disabled && !readonly ? maxFieldCharacters : 0\"\n                [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\" [inputLength]=\"quillContent?.length\">\n            </pep-field-title>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\"\n                [ngClass]=\"{ 'pep-table-textarea': layoutType === 'table', 'active': active, 'ignore-disabled': disabled }\">\n                <textarea [hidden]=\"true\" matInput [formControlName]=\"key\"></textarea>\n\n                <ng-container *ngIf=\"inlineMode; then inlineBlock; else notInlineBlock\"></ng-container>\n\n                <ng-template #inlineBlock>\n                    <ng-container *ngTemplateOutlet=\"quilTemplate; context: {inDialog: false}\"></ng-container>\n                </ng-template>\n                <ng-template #notInlineBlock>\n\n                    <!-- We can use the quill-view-html\n                    <quill-view-html class=\"body-sm rich-text-cont \"\n                    [ngStyle]=\"{ 'text-align': xAlignment == 'right' ? 'right' : 'left' }\" [content]=\"value | pepSafeHtml\"\n                    theme=\"snow\" [style.height]=\"fieldHeight\"></quill-view-html> \n                -->\n\n                    <div class=\"body-sm rich-text-cont \"\n                        [ngStyle]=\"{ 'text-align': xAlignment == 'right' ? 'right' : 'left' }\"\n                        [innerHtml]=\"value | pepSafeHtml\" [style.height]=\"fieldHeight\">\n                    </div>\n                </ng-template>\n                <pep-textbox-icon matSuffix [value]=\"value\" [label]=\"label\" [type]=\"controlType\"\n                    [disabled]=\"disabled || readonly\"\n                    [ngClass]=\"{ 'card-one-row-icon': layoutType === 'card' && rowSpan === 1 }\"\n                    (iconClick)=\"openDialog()\">\n                </pep-textbox-icon>\n                <mat-error>\n                    <span class=\"body-xs\"\n                        [title]=\"required && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"required && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n\n            </mat-form-field>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: true }\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <div class=\"pep-textarea-card-container card-flex-container\"\n            [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled }\"\n            [ngStyle]=\"{ '-webkit-line-clamp': rowSpan }\" [class]=\"'text-align-' + xAlignment\"\n            (click)=\"!disabled ? cardTemplateClicked($event) : ''\" [style.height]=\"fieldHeight\">\n            <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title no-shrink\" title=\"{{ label }}\">{{ label\n                }}:&nbsp;</span>\n            <span [id]=\"key\" class=\"body-sm value wrap\" [innerHtml]=\"value | pepSafeHtml\"></span>\n            <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button self-start\"\n                [ngClass]=\"{'self-end' : value && value !== ''}\" mat-button>\n                <mat-icon>\n                    <pep-icon name=\"system_edit\">\n                    </pep-icon>\n                </mat-icon>\n            </button>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false }\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"value?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <div class=\"pep-textarea-card-container card-flex-container one-row\">\n                    <span [id]=\"key\" class=\"wrap\" [innerHtml]=\"value | pepSafeHtml\"></span>\n                </div>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span>&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n</ng-container>\n\n<ng-template #richTextEditorDialogTemplate>\n    <div class=\"rich-text-editor-container\">\n        <button mat-button [mat-dialog-close]=\"null\" class=\"pep-button icon-button md weak pull-right flip\">\n            <mat-icon>\n                <pep-icon name=\"system_close\">\n                </pep-icon>\n            </mat-icon>\n        </button>\n        <ng-container *ngTemplateOutlet=\"quilTemplate; context: {inDialog: true}\"></ng-container>\n        <div mat-dialog-actions class=\" pep-border-top\">\n            <div class=\"pep-spacing-element-negative\">\n                <button mat-button [mat-dialog-close]=\"null\" class=\"pep-spacing-element pep-button md weak\">\n                    {{'ACTIONS.CANCEL' | translate}}\n                </button>\n                <button mat-button [mat-dialog-close]=\"quillContentDialog || ''\" [disabled]=\"disabled\"\n                    class=\"pep-spacing-element pep-button md strong \">\n                    {{'ACTIONS.SAVE' | translate}}\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #quilTemplate let-inDialog=\"inDialog\">\n    <quill-editor id=\"{{inDialog ? 'quill-editor-dialog' : 'quill-editor-inline'}}\"\n        [class]=\"inDialog ? 'dialog-quill' : 'inline-quill'\" [ngClass]=\"{ 'rich-text-cont': !inDialog }\"\n        placeholder=\"{{'RICH_TEXTAREA.HINT' | translate}}\" [ngModel]=\"inDialog ? quillContentDialog : quillContent\"\n        [sanitize]=\"true\" [readOnly]=\"disabled\" [maxLength]=\"maxFieldCharacters\" [required]=\"required\"\n        (onEditorCreated)=\"onEditorCreated($event, inDialog)\" (onContentChanged)=\"onContentChanged($event, inDialog)\"\n        (onBlur)=\"onBlur($event, inDialog)\" (onFocus)=\"onFocus($event, inDialog)\" theme=\"\">\n        <div *ngIf=\"!disabled\" quill-editor-toolbar>\n            <div class=\"pep-spacing-element-negative\">\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.font\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-font select-arrow\">\n                        <option selected></option>\n                        <option value=\"serif\"></option>\n                        <option value=\"monospace\"></option>\n                    </select>\n                    <select *ngIf=\"toolbarOptions?.size\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-size select-arrow\">\n                        <option value=\"small\"></option>\n                        <option selected></option>\n                        <option value=\"large\"></option>\n                        <option value=\"huge\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.header\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-header select-arrow\">\n                        <option value=\"1\"></option>\n                        <option value=\"2\"></option>\n                        <option value=\"3\"></option>\n                        <!-- \n                        <option value=\"4\"></option>\n                        <option value=\"5\"></option>\n                        <option value=\"6\"></option> \n                        -->\n                        <option value=\"false\" selected></option>\n                    </select>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.bold\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-bold\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.italic\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-italic\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.underline\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-underline\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.strike\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-strike\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.link\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-link\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.image\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-image\"></button>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.ordered\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-list\" value=\"ordered\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.bullet\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-list\" value=\"bullet\"></button>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.color\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-color\"></select>\n                    <select *ngIf=\"toolbarOptions?.background\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.align\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n            </div>\n        </div>\n    </quill-editor>\n</ng-template>"
        },
        {
            "name": "PepSearchComponent",
            "id": "component-PepSearchComponent-3610c84bf59449a25be18b819763cdd9",
            "file": "projects/ngx-lib/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoCompleteTop",
                    "defaultValue": "20",
                    "line": 87
                },
                {
                    "name": "autoCompleteValues",
                    "line": 90,
                    "type": "[]"
                },
                {
                    "name": "searchControl",
                    "line": 111,
                    "type": ""
                },
                {
                    "name": "shrinkInSmallScreen",
                    "defaultValue": "true",
                    "line": 98
                },
                {
                    "name": "triggerOn",
                    "defaultValue": "'click'",
                    "line": 86,
                    "type": "PepSearchTriggerType"
                },
                {
                    "name": "value",
                    "line": 101,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "search",
                    "defaultValue": "new EventEmitter<IPepSearchClickEvent>()",
                    "line": 119,
                    "type": "EventEmitter<IPepSearchClickEvent>"
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<IPepSearchStateChangeEvent>()",
                    "line": 123,
                    "type": "EventEmitter<IPepSearchStateChangeEvent>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepSearchValueChangeEvent>()",
                    "line": 121,
                    "type": "EventEmitter<IPepSearchValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_autoCompleteValues",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_searchControl",
                    "defaultValue": "null",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "fadeState",
                    "type": "\"fadeOut\" | \"fadeIn\"",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "isFloating",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "isRtl",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "lastValue",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput'"
                        }
                    ]
                },
                {
                    "name": "showFloatSrcBtn",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "state",
                    "defaultValue": "'open'",
                    "type": "\"open\" | \"close\"",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "type",
                    "defaultValue": "'regular'",
                    "type": "PepSearchType",
                    "optional": false,
                    "description": "",
                    "line": 128
                }
            ],
            "methodsClass": [
                {
                    "name": "animateSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269
                },
                {
                    "name": "animateSearchDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285
                },
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createSearchControlIfNotExist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "emitSearchClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "onClearClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearch",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242
                },
                {
                    "name": "showFloatingButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "triggerSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    ViewEncapsulation,\n    Injectable,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChange,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    Renderer2,\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n    trigger,\n    state,\n    style,\n    transition,\n    animate,\n} from '@angular/animations';\nimport { FormControl } from '@angular/forms';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport {\n    IPepSearchClickEvent,\n    IPepSearchValueChangeEvent,\n    IPepSearchStateChangeEvent,\n    PepSearchType,\n    PepSearchTriggerType,\n} from './search.model';\n\n@Component({\n    selector: 'pep-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    animations: [\n        trigger('slideInOut', [\n            state(\n                'close',\n                style({\n                    width: '0',\n                    padding: '0',\n                    border: 'none',\n                })\n            ),\n            state(\n                'open',\n                style({\n                    width: 'inherit',\n                })\n            ),\n            transition('close => open', animate('500ms ease-in-out')),\n            transition('open => close', animate('500ms ease-in-out')),\n        ]),\n        trigger('fadeInOut', [\n            state(\n                'fadeOut',\n                style({\n                    opacity: 0,\n                    width: '1px',\n                })\n            ),\n            state(\n                'fadeIn',\n                style({\n                    opacity: 1,\n                    width: '100%',\n                })\n            ),\n            transition(\n                'fadeOut => fadeIn',\n                animate(300, style({ opacity: 1, width: '100%' }))\n            ),\n            transition(\n                'fadeIn => fadeOut',\n                animate(350, style({ opacity: 0, width: '1px' }))\n            ),\n        ]),\n    ],\n})\n@Injectable()\nexport class PepSearchComponent implements OnInit, OnDestroy {\n    @Input() triggerOn: PepSearchTriggerType = 'click';\n    @Input() autoCompleteTop = 20;\n    private _autoCompleteValues = [];\n    @Input()\n    set autoCompleteValues(val: any[]) {\n        this.type = 'auto-complete';\n        this._autoCompleteValues = val;\n    }\n    get autoCompleteValues(): any[] {\n        return this._autoCompleteValues;\n    }\n\n    @Input() shrinkInSmallScreen = true;\n\n    @Input()\n    set value(val: string) {\n        this.createSearchControlIfNotExist();\n        this.searchControl.setValue(val);\n    }\n    get value(): string {\n        return this.searchControl.value || '';\n    }\n\n    private _searchControl: FormControl = null;\n    @Input()\n    set searchControl(ctrl: FormControl) {\n        this._searchControl = ctrl;\n    }\n    get searchControl(): FormControl {\n        return this._searchControl;\n    }\n\n    @Output()\n    search: EventEmitter<IPepSearchClickEvent> = new EventEmitter<IPepSearchClickEvent>();\n    @Output()\n    valueChange: EventEmitter<IPepSearchValueChangeEvent> = new EventEmitter<IPepSearchValueChangeEvent>();\n    @Output()\n    stateChange: EventEmitter<IPepSearchStateChangeEvent> = new EventEmitter<IPepSearchStateChangeEvent>();\n\n    @ViewChild('searchInput') searchInput: ElementRef;\n\n    private readonly _destroyed = new Subject<void>();\n    type: PepSearchType = 'regular';\n    fadeState: 'fadeOut' | 'fadeIn';\n    state: 'open' | 'close' = 'open';\n    lastValue = null;\n    showFloatSrcBtn = true;\n    isRtl = false;\n    isFloating = false;\n    screenSize: PepScreenSizeType;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n    }\n\n    ngOnInit(): void {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n\n            if (this.shrinkInSmallScreen) {\n                this.isFloating = this.screenSize > PepScreenSizeType.SM;\n            }\n\n            // Just for the smoote animation\n            if (this.isFloating) {\n                this.showFloatSrcBtn = false;\n\n                this.showFloatingButton();\n            } else {\n                this.fadeState = 'fadeIn';\n            }\n        });\n\n        this.isRtl = this.layoutService.isRtl();\n        this.createSearchControlIfNotExist();\n\n        this.searchControl.valueChanges\n            .pipe(debounceTime(1000), takeUntil(this._destroyed))\n            .subscribe((newValue) => {\n                if (this.type === 'auto-complete') {\n                    this.autoCompleteValues = [];\n                    if (\n                        newValue &&\n                        newValue.length > 2 &&\n                        newValue !== this.lastValue\n                    ) {\n                        this.valueChange.emit({\n                            value: newValue,\n                            top: this.autoCompleteTop,\n                        });\n                    }\n                } else if (this.type === 'regular') {\n                    if (this.triggerOn === 'keydown') {\n                        this.emitSearchClick();\n                    }\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.initSearch = this.initSearch.bind(this);\n    }\n\n    private createSearchControlIfNotExist(): void {\n        if (!this.searchControl) {\n            this.searchControl = new FormControl();\n        }\n    }\n\n    private blur() {\n        setTimeout(() => {\n            this.searchInput.nativeElement.blur();\n        }, 0);\n    }\n\n    private showFloatingButton() {\n        this.fadeState = 'fadeOut';\n\n        setTimeout(() => {\n            this.stateChange.emit({ state: 'close' });\n            this.showFloatSrcBtn = true;\n        }, 500);\n\n        // close the phone keyboard\n        this.blur();\n    }\n\n    initSearch() {\n        this.lastValue = null;\n        this.searchControl.setValue('');\n    }\n\n    onClearClicked(event: any) {\n        if (this.type === 'auto-complete') {\n            this.autoCompleteValues = [];\n        }\n\n        this.initSearch();\n        this.search.emit({ value: '' });\n\n        event.preventDefault();\n\n        if (this.isFloating) {\n            this.showFloatingButton();\n        }\n    }\n\n    onSearchClicked() {\n        if (this.isFloating) {\n            this.triggerSearch();\n        } else {\n            if (this.state === 'open') {\n                this.triggerSearch();\n            } else {\n                this.state = 'open';\n            }\n        }\n    }\n\n    onSearch(event: Event) {\n        // Stop the event propagation - cause we don't want fire two events.\n        event.stopPropagation();\n        this.triggerSearch();\n    }\n\n    triggerSearch() {\n        if (this.type === 'auto-complete') {\n            this.autoCompleteValues = [];\n        }\n\n        this.blur();\n        this.emitSearchClick();\n    }\n\n    animateSearch() {\n        if (this.state === 'open') {\n            this.fadeState =\n                this.fadeState === 'fadeOut' ? 'fadeIn' : 'fadeOut';\n            if (this.fadeState === 'fadeIn') {\n                this.stateChange.emit({ state: 'open' });\n                this.showFloatSrcBtn = false;\n                this.searchInput.nativeElement.focus();\n            }\n        } else {\n            this.fadeState = 'fadeIn';\n        }\n    }\n\n    // do the emit just when done because of the line break when closing the search\n    // component and showen all other components before\n    animateSearchDone() {\n        if (this.state !== 'open') {\n            this.stateChange.emit({ state: 'close' });\n        }\n    }\n\n    emitSearchClick() {\n        const value = this.searchControl.value;\n\n        if (value !== this.lastValue) {\n            this.lastValue = value;\n            this.search.emit({ value });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\r\n@import '../src/core/style/abstracts/mixins';\r\n\r\n.pep-search-container {\r\n    .pep-search-input {\r\n        .mat-form-field {\r\n            display: inherit;\r\n        }\r\n\r\n        .pep-v-separator {\r\n            padding: $spacing-xs 0;\r\n            height: 100%;\r\n        }\r\n\r\n        .pep-text-icon {\r\n            &.pep-pointer {\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n\r\n    &.pep-floating-search {\r\n        display: inline-flex; // flex;\r\n        // justify-content: flex-start;\r\n\r\n        &.pep-is-action-button-visable {\r\n            @include calc(width, '100% -' calc(#{$spacing-sm} * 2 + #{$spacing-xl})); // content spacing in both sides + 1.5 rem is the action-button width.\r\n        }\r\n    }\r\n\r\n    @media (max-width: $screen-max-size-xs) {\r\n        ::ng-deep .mat-button-wrapper {\r\n            max-width: 3.125rem;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 135,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "autoCompleteValues": {
                    "name": "autoCompleteValues",
                    "setSignature": {
                        "name": "autoCompleteValues",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 90,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "autoCompleteValues",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 94
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 105
                    }
                },
                "searchControl": {
                    "name": "searchControl",
                    "setSignature": {
                        "name": "searchControl",
                        "type": "void",
                        "args": [
                            {
                                "name": "ctrl",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "ctrl",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "searchControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 114
                    }
                }
            },
            "templateData": "﻿<!-- <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false, hasParent: false }\">\n</ng-container> -->\n<ng-container *ngIf=\"shrinkInSmallScreen; then shrinkBlock; else staticBlock\"></ng-container>\n<ng-template #shrinkBlock>\n    <div pepRtlClass class=\"pep-search-container\" [ngClass]=\"{ 'pep-floating-search': isFloating}\"\n        [@fadeInOut]=\"fadeState\">\n        <div class=\"pep-search-input\">\n            <ng-container *ngIf=\"type === 'auto-complete'\">\n                <ng-container *ngTemplateOutlet=\"autoCompleteBlock\"></ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"type === 'regular'\">\n                <ng-container *ngTemplateOutlet=\"regularBlock\"></ng-container>\n            </ng-container>\n        </div>\n    </div>\n    <button *ngIf=\"isFloating && fadeState !='fadeIn' && showFloatSrcBtn\" class=\"pep-button icon-button md weak\"\n        mat-button (click)=\"animateSearch()\">\n        <mat-icon>\n            <pep-icon name=\"system_search\"></pep-icon>\n        </mat-icon>\n    </button>\n</ng-template>\n<ng-template #staticBlock>\n    <div pepRtlClass class=\"pep-search-container\">\n        <div class=\"pep-search-input\">\n            <ng-container *ngIf=\"type === 'auto-complete'\">\n                <ng-container *ngTemplateOutlet=\"autoCompleteBlock\"></ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"type === 'regular'\">\n                <ng-container *ngTemplateOutlet=\"regularBlock\"></ng-container>\n            </ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #autoCompleteBlock>\n    <mat-form-field appearance=\"outline\">\n        <!-- (@slideInOut.done)=\"animateSearchDone()\" [@slideInOut]=\"state\" -->\n        <input #searchInput class=\"body-sm pep-search-input\" matInput autocomplete=\"off\"\n            [ngStyle]=\"{ textAlign: isRtl ? 'right' : 'left' }\" type=\"search\" (search)=\"onSearch($event)\" results=\"5\"\n            [formControl]=\"searchControl\" placeholder=\"{{ 'SEARCH.HINT' | translate }}...\" [matAutocomplete]=\"auto\" />\n        <mat-autocomplete #auto=\"matAutocomplete\" class=\"pep-select\">\n            <mat-option *ngFor=\"let value of autoCompleteValues\" [value]=\"value\" (click)=\"triggerSearch()\">\n                {{value}}\n            </mat-option>\n            <mat-option *ngIf=\"autoCompleteValues?.length > autoCompleteTop - 1\" [value]=\"value\"\n                (click)=\"triggerSearch()\">{{ 'SEARCH.MORE_RESULTS' | translate }}</mat-option>\n        </mat-autocomplete>\n        <div matSuffix class=\"flex align-center\">\n            <ng-container *ngIf=\"triggerOn === 'click'\">\n                <ng-container *ngTemplateOutlet=\"triggerOnClickBlock\"></ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"triggerOn === 'keydown'\">\n                <ng-container *ngTemplateOutlet=\"triggerOnKeydownBlock\"></ng-container>\n            </ng-container>\n        </div>\n    </mat-form-field>\n</ng-template>\n\n<ng-template #regularBlock>\n    <mat-form-field appearance=\"outline\">\n        <input #searchInput class=\"body-sm pep-search-input\" matInput autocomplete=\"off\"\n            [ngStyle]=\"{ textAlign: isRtl ? 'right' : 'left' }\" type=\"search\" (search)=\"onSearch($event)\"\n            [formControl]=\"searchControl\" placeholder=\"{{ 'SEARCH.HINT' | translate }}...\" />\n        <div matSuffix class=\"flex align-center\">\n            <ng-container *ngIf=\"triggerOn === 'click'\">\n                <ng-container *ngTemplateOutlet=\"triggerOnClickBlock\"></ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"triggerOn === 'keydown'\">\n                <ng-container *ngTemplateOutlet=\"triggerOnKeydownBlock\"></ng-container>\n            </ng-container>\n        </div>\n    </mat-form-field>\n</ng-template>\n\n<ng-template #triggerOnClickBlock>\n    <!-- <ng-container *ngIf=\"(state == 'open' && searchControl.value?.length > 0)\"> -->\n    <ng-container *ngIf=\"(state == 'open')\">\n        <mat-icon class=\"pep-text-icon pep-pointer\" (click)=\"onClearClicked($event)\">\n            <pep-icon name=\"system_close\"></pep-icon>\n        </mat-icon>\n        <span class=\"pep-text-icon pep-spacing-element pep-v-separator\">|</span>\n    </ng-container>\n    <mat-icon class=\"pep-text-icon pep-pointer\" (click)=\"onSearchClicked()\">\n        <pep-icon name=\"system_search\"></pep-icon>\n    </mat-icon>\n</ng-template>\n\n<ng-template #triggerOnKeydownBlock>\n    <ng-container *ngIf=\"searchControl.value?.length > 0; then clearBlock; else searchBlock\"></ng-container>\n    <ng-template #clearBlock>\n        <button class=\"pep-button md regular\" mat-button (click)=\"onClearClicked($event)\">\n            <mat-icon>\n                <pep-icon name=\"system_close\"></pep-icon>\n            </mat-icon>\n        </button>\n    </ng-template>\n    <ng-template #searchBlock>\n        <mat-icon class=\"pep-text-icon\">\n            <pep-icon name=\"system_search\"></pep-icon>\n        </mat-icon>\n    </ng-template>\n</ng-template>"
        },
        {
            "name": "PepSelectComponent",
            "id": "component-PepSelectComponent-cb739033f5e47863c19f07f613a6f60e",
            "file": "projects/ngx-lib/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 39
                },
                {
                    "name": "emptyOption",
                    "defaultValue": "true",
                    "line": 53
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 48,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 51
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 36
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 49,
                    "type": "PepLayoutType"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 43,
                    "type": "Array<IPepOption>"
                },
                {
                    "name": "parentFieldKey",
                    "defaultValue": "null",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 40
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 38
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 42
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 52
                },
                {
                    "name": "type",
                    "defaultValue": "'select'",
                    "line": 37,
                    "type": "PepSelectFieldType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 41,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 58,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 56,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'select'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "fieldFormattedValue",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "isInEditMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isMulti",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "select",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select'"
                        }
                    ]
                },
                {
                    "name": "selectedValueModel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "selectedValuesModel",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "addOptionsIfNeeded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cardTemplateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "openedChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldFormattedValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    OnDestroy,\n    Renderer2,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepSelectFieldType,\n    PepSelectField,\n    IPepOption,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-select',\n    templateUrl: './select.component.html',\n    styleUrls: ['./select.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepSelectComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() type: PepSelectFieldType = 'select';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() options: Array<IPepOption> = [];\n\n    controlType = 'select';\n\n    // @Input() field: PepFieldBase;\n    @Input() form: FormGroup = null;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() parentFieldKey: string = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() emptyOption = true;\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ViewChild('select') select: MatSelect;\n\n    standAlone = false;\n    isInEditMode = false;\n    // isFocus: boolean = false;\n    isMulti = false;\n    selectedValuesModel: string[];\n    selectedValueModel: string;\n    fieldFormattedValue = '';\n\n    constructor(\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    private addOptionsIfNeeded(): void {\n        if (this.isMulti) {\n            // Go gor all selected and add to options if not exist\n            // for (let i = 0; i < this.selectedValuesModel.length; i++) {\n            for (const selectedValue of this.selectedValuesModel) {\n                let valueNotExist = false;\n\n                if (\n                    this.options &&\n                    !this.options.find((opt) => opt.key === selectedValue)\n                ) {\n                    valueNotExist = true;\n                }\n\n                // Add it to options.\n                if (valueNotExist) {\n                    this.options.push({\n                        key: selectedValue,\n                        value: selectedValue,\n                    });\n                }\n            }\n        } else {\n            if (\n                this.value &&\n                this.value !== '' &&\n                this.options &&\n                !this.options.find((opt) => opt.key === this.value)\n            ) {\n                this.options.push({ key: this.value, value: this.value });\n            }\n        }\n    }\n\n    private setFieldFormattedValue(value: any): void {\n        if (this.isMulti) {\n            if (this.selectedValuesModel.length > 0) {\n                this.fieldFormattedValue = this.selectedValuesModel\n                    .map((value) => {\n                        return this.options.find((opt) => opt.key === value)\n                            ?.value;\n                    })\n                    .join(', ');\n            } else {\n                this.fieldFormattedValue = '';\n            }\n\n            // this.fieldFormattedValue = typeof value === 'string' ? value.replace(new RegExp(';', 'g'), ', ') : '';\n        } else {\n            const selectedOpt = this.options.find((opt) => opt.key === value);\n\n            if (selectedOpt) {\n                this.fieldFormattedValue = selectedOpt.value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.required, this.readonly, this.disabled);\n            const pepField = new PepSelectField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n    }\n\n    ngOnChanges(changes: any): void {\n        this.isMulti = this.type === 'multi';\n        if (this.isMulti) {\n            this.selectedValuesModel =\n                this.value.length > 0 ? this.value.split(';') : [];\n        } else {\n            this.selectedValueModel = this.value;\n        }\n\n        this.addOptionsIfNeeded();\n        this.setFieldFormattedValue(this.value);\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n    }\n\n    selectionChange(event: any): void {\n        // this.isFocus = false;\n        if (!this.isMulti) {\n            this.changeValue(this.selectedValueModel);\n        }\n    }\n\n    openedChange(event: any): void {\n        // Only on close.\n        if (!event) {\n            if (this.isMulti) {\n                // this.isFocus = false;\n                this.changeValue(this.selectedValuesModel.join(';'));\n            }\n\n            if (this.isInEditMode) {\n                this.isInEditMode = false;\n            }\n        }\n    }\n\n    changeValue(value: any): void {\n        this.setFieldFormattedValue(value);\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            value,\n            this.parentFieldKey\n        );\n\n        if (this.required) {\n            const fieldControl = this.form.controls[this.key];\n            if (value) {\n                fieldControl.setErrors(null);\n            } else {\n                fieldControl.setErrors({\n                    serverError: 'Required',\n                });\n            }\n            this.formValidationChange.emit(this.form.valid);\n        }\n\n        this.valueChange.emit({ key: this.key, value });\n    }\n\n    cardTemplateClicked(event: any): void {\n        this.isInEditMode = true;\n\n        setTimeout(() => {\n            this.select.open();\n        }, 0);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n// .additional-selection {\n//     opacity: 0.75;\n//     font-size: 0.75em;\n// }",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <ng-container *ngIf=\"type == 'multi'; then multiSelectBlock; else regularSelectBlock\"></ng-container>\n        <ng-template #regularSelectBlock>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n                <mat-select #select [required]=\"required ? required : undefined\" matInput disableOptionCentering\n                    class=\"body-sm text-align-{{ xAlignment }}\" [id]=\"key\"\n                    [ngClass]=\"{'right-alignment': xAlignment === 'right'}\"\n                    [placeholder]=\"disabled || readonly ? '' : ('SELECT.HINT' | translate)\"\n                    [(ngModel)]=\"selectedValueModel\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"disabled\"\n                    (selectionChange)=\"selectionChange($event)\" (openedChange)=\"openedChange($event)\"\n                    title=\"{{ fieldFormattedValue }}\">\n                    <mat-option *ngIf=\"emptyOption\" value=\"\" [title]=\"'LIST.NONE' | translate\">{{ 'LIST.NONE' |\n                        translate }}</mat-option>\n                    <mat-option *ngFor=\"let option of options\" [value]=\"option.key\" [title]=\"option.value\">{{\n                        option.value }}</mat-option>\n                </mat-select>\n                <mat-error>\n                    <span class=\"body-xs\" [title]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"\n                        [innerText]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"></span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n        <ng-template #multiSelectBlock>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n                <mat-select #select multiple [required]=\"required ? required : undefined\" matInput\n                    disableOptionCentering class=\"body-sm text-align-{{ xAlignment }}\" [id]=\"key\"\n                    [ngClass]=\"{'right-alignment': xAlignment === 'right'}\"\n                    [placeholder]=\"disabled || readonly ? '' : ('SELECT.HINT' | translate)\"\n                    [(ngModel)]=\"selectedValuesModel\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"disabled\"\n                    (openedChange)=\"openedChange($event)\" title=\"{{ fieldFormattedValue }}\">\n                    <mat-option *ngFor=\"let option of options\" [value]=\"option.key\" [title]=\"option.value\">{{\n                        option.value }}</mat-option>\n                </mat-select>\n                <mat-error><span class=\"body-xs\" [title]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"\n                        [innerText]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"> </span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"!parentFieldKey\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\n                <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n            </div>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-card-input card-flex-container\"\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled}\"\n                [class]=\"'text-align-' + xAlignment\" (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ fieldFormattedValue }}\" class=\"body-sm value\">{{ fieldFormattedValue\n                    }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <span [id]=\"key\" class=\"body-sm pep-report-input\" [ngClass]=\"{readonly: disabled}\"\n                title=\"{{ fieldFormattedValue }}\">{{ fieldFormattedValue }}</span>\n        </ng-template>\n    </ng-container>\n</ng-container>"
        },
        {
            "name": "PepSeparatorComponent",
            "id": "component-PepSeparatorComponent-c7250defd937d946c6dfd12b1a459618",
            "file": "projects/ngx-lib/separator/separator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-separator",
            "styleUrls": [
                "./separator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./separator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 30,
                    "type": "FormGroup"
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 24
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 25
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 31,
                    "type": "PepLayoutType"
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 26,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'separator'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    OnInit,\n    ChangeDetectionStrategy,\n    Renderer2,\n    ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-separator',\n    templateUrl: './separator.component.html',\n    styleUrls: ['./separator.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepSeparatorComponent implements OnInit {\n    @Input() key = '';\n    @Input() label = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n\n    controlType = 'separator';\n\n    @Input() form: FormGroup = null;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    standAlone = false;\n\n    constructor(private renderer: Renderer2, private element: ElementRef) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}\n",
                    "styleUrl": "./separator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"layoutType === 'form'\">\n    <div class=\"pep-separator-field wrap pep-border-bottom align-{{ xAlignment }}\" title=\"{{ label }}\">\n        <span class=\"block-with-text body-md\">{{ label }}</span>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <div class=\"pep-separator-field pep-small-separator-field pep-border-bottom text-align-{{ xAlignment }}\"\n        dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" title=\"{{ label }}\">\n        <span class=\"small-block-with-text body-sm\">{{ label }}</span>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <label class=\"cl\" title=\"{{ label }}\">{{ label }}</label>\n</ng-container>"
        },
        {
            "name": "PepSideBarComponent",
            "id": "component-PepSideBarComponent-fd16a87c0fe41d15a67d206b79cf9808",
            "file": "projects/ngx-lib/side-bar/side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-side-bar",
            "styleUrls": [
                "./side-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "line": 29
                }
            ],
            "outputsClass": [
                {
                    "name": "stateChange",
                    "defaultValue": "new EventEmitter<IPepSideBarStateChangeEvent>()",
                    "line": 32,
                    "type": "EventEmitter<IPepSideBarStateChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isMouseIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "sideBarHeight",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sidenav",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidenav'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mouseLeaveSideBar",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "openedChange",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSideBarHeight",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Injectable,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport {\n    PepCustomizationService,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { IPepSideBarStateChangeEvent } from './side-bar.model';\n// import { pepIconSystemClose } from '@pepperi-addons/ngx-lib/icon';\n\n@Component({\n    selector: 'pep-side-bar',\n    templateUrl: './side-bar.component.html',\n    styleUrls: ['./side-bar.component.scss'],\n})\n@Injectable()\nexport class PepSideBarComponent implements OnInit {\n    // @Input() showOnLargeScreens = true;\n    // @Input() sideBarButtons: Array<SideBarButton> = [];\n    @Input() showFooter = true;\n\n    @Output()\n    stateChange: EventEmitter<IPepSideBarStateChangeEvent> = new EventEmitter<IPepSideBarStateChangeEvent>();\n\n    @ViewChild('sidenav') sidenav: MatSidenav;\n\n    isMouseIn = false;\n    sideBarHeight = '100%';\n\n    screenSize: PepScreenSizeType;\n    PepScreenSizeType = PepScreenSizeType;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n        });\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.open = this.open.bind(this);\n        this.hostElement.nativeElement.close = this.close.bind(this);\n    }\n\n    ngOnInit() {\n        // this.sideBarButtons.push(new SideBarButton('', () => this.close(), pepIconSystemClose.name, null, true, null, ''));\n    }\n\n    setSideBarHeight(event) {\n        const from = event.relatedTarget\n            ? event.relatedTarget\n            : event.fromElement;\n        const to = event.target ? event.target : event.toElement;\n\n        if (typeof from === 'undefined' || typeof to === 'undefined') {\n            return;\n        }\n        this.isMouseIn = true;\n\n        this.sideBarHeight = window.innerHeight - to.offsetTop + 'px';\n    }\n\n    mouseLeaveSideBar(event) {\n        const from = event.relatedTarget\n            ? event.relatedTarget\n            : event.fromElement;\n        const to = event.target ? event.target : event.toElement;\n\n        if (typeof from === 'undefined' || typeof to === 'undefined') {\n            return;\n        }\n        this.sideBarHeight = '100%';\n        this.isMouseIn = false;\n    }\n\n    open() {\n        if (this.sidenav) {\n            this.sidenav.open();\n        }\n    }\n\n    close() {\n        if (this.sidenav) {\n            this.sidenav.close();\n        }\n    }\n\n    toggle() {\n        if (this.sidenav) {\n            const isOpen = this.sidenav.opened;\n            this.sidenav.toggle();\n        }\n    }\n\n    openedChange(isOpen: boolean) {\n        this.stateChange.emit({ state: isOpen ? 'open' : 'close' });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n.side-bar-container {\n    .side-layout {\n        position: fixed;\n        z-index: $z-index-medium + 1;\n        // padding: 0 0 0 $double-content-padding;\n        padding: 0 $content-padding;\n        top: inherit;\n        height: stretch;\n        overflow: auto;\n\n        .content {\n            margin: 0;\n            height: inherit;\n            // width: inherit;\n            overflow: auto;\n        }\n\n        @media (min-width: $screen-max-size-sm + 1) {\n            overflow: hidden;\n        }\n    }\n\n    .sidenav-container {\n        position: fixed;\n        top: $header-height;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        z-index: $z-index-high;\n        visibility: hidden;\n        \n        &.mat-drawer-opened {\n            visibility: unset;\n        }\n    \n        .sidenav {\n\n            $side-nav-width: calc(#{$floating-side-bar-width} + #{$double-content-padding});\n            $side-nav-content-width: $floating-side-bar-width;\n            \n            width: $side-nav-width;\n            height: 100%;\n            padding-top: $top-bar-height;\n            padding-bottom: $footer-bar-height;\n            padding-left: $double-content-padding;\n            padding-right: $double-content-padding;\n            overflow: visible;\n\n            &.hide-footer {\n                padding-bottom: 0;\n            }\n\n            .sidenav-header {\n                position: absolute;\n                width: auto;\n                top: 0;\n                height: $top-bar-height;\n                left: $double-content-padding;\n                right: $double-content-padding;\n                justify-content: unset;\n                padding: 0;\n                display: block;\n                padding-top: $top-bar-spacing-top;\n                max-width: $side-nav-content-width;\n            }\n            \n            .sidenav-main {\n                max-width: $side-nav-content-width;\n            }\n\n            .sidenav-footer {\n                position: absolute;\n                width: auto;\n                max-width: $side-nav-content-width;\n                bottom: 0;\n                height: $footer-bar-height;\n                left: $double-content-padding;\n                right: $double-content-padding;\n                justify-content: unset;\n                padding: 0;\n                display: block;\n                padding-top: $footer-bar-spacing-top;\n\n                .pep-button {\n                    @include pep-top-bar-button();\n                }\n            }\n        }\n\n        @media (max-width: $screen-max-size-xs) {\n            .sidenav {\n                $side-nav-width: $floating-side-bar-width;\n                $side-nav-content-width: calc(#{$floating-side-bar-width} - #{$double-content-padding});\n\n                width: $side-nav-width;\n                padding-left: $content-padding;\n                padding-right: $content-padding;\n            \n                .sidenav-main {\n                    max-width: $side-nav-content-width;\n                }\n\n                .sidenav-header,\n                .sidenav-footer {\n                    left: $content-padding;\n                    right: $content-padding;\n                    max-width: $side-nav-content-width;\n                }\n            }\n        }\n\n    }\n}\n\n// [dir='rtl'] {\n//     .side-layout {\n//         padding: 0 $double-content-padding 0 0;\n//     }\n// }",
                    "styleUrl": "./side-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div #sideBarCont class=\"side-bar-container\" pepRtlDirection>\n    <ng-container *ngIf=\"screenSize < PepScreenSizeType.MD; then largeScreensBlock; else notLargeScreensBlock\">\n    </ng-container>\n    <ng-template #largeScreensBlock>\n        <div class=\"side-layout pull-left flip\" [ngStyle]=\"{ overflow: isMouseIn ? 'unset' : 'visible' }\"\n            (mouseenter)=\"setSideBarHeight($event)\" [style.height]=\"sideBarHeight\"\n            (mouseleave)=\"mouseLeaveSideBar($event)\">\n            <div class=\"content\">\n                <!-- New Filters -->\n                <ng-container *ngTemplateOutlet=\"filtersTemplate\"></ng-container>\n\n                <!-- Smart filters -->\n                <ng-container *ngTemplateOutlet=\"smartFiltersTemplate\"></ng-container>\n            </div>\n        </div>\n    </ng-template>\n    <ng-template #notLargeScreensBlock>\n        <mat-sidenav-container class=\"sidenav-container\" [hasBackdrop]=\"true\">\n            <mat-sidenav #sidenav mode=\"over\" autoFocus=\"false\" class=\"sidenav\" fixedInViewport=\"false\"\n                (openedChange)=\"openedChange($event)\" [ngClass]=\"{'hide-footer': !showFooter}\">\n                <div class=\"sidenav-header pep-border-bottom\">\n                    <ng-content select=\"[header-content]\"></ng-content>\n                </div>\n\n                <div class=\"sidenav-main\">\n                    <!-- New Filters -->\n                    <ng-container *ngTemplateOutlet=\"filtersTemplate\"></ng-container>\n\n                    <!-- Smart filters -->\n                    <ng-container *ngTemplateOutlet=\"smartFiltersTemplate\"></ng-container>\n\n                    <!-- Custom -->\n                    <ng-content></ng-content>\n                </div>\n\n                <div *ngIf=\"showFooter\" class=\"sidenav-footer pep-border-top\">\n                    <ng-content select=\"[footer-content]\"></ng-content>\n                </div>\n            </mat-sidenav>\n        </mat-sidenav-container>\n    </ng-template>\n</div>\n\n<ng-template #filtersTemplate>\n\n</ng-template>\n\n<ng-template #smartFiltersTemplate>\n    <ng-content select=\"pep-smart-filters\"></ng-content>\n</ng-template>"
        },
        {
            "name": "PepSignatureComponent",
            "id": "component-PepSignatureComponent-62e5ccc75cc249ea0a2d7d1a9c06b9f3",
            "file": "projects/ngx-lib/signature/signature.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-signature",
            "styleUrls": [
                "./signature.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signature.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 41
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 50,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 53
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 37
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 39
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 52,
                    "type": "PepLayoutType"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 42
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 40
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 44
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 51
                },
                {
                    "name": "signatureURL",
                    "defaultValue": "''",
                    "line": 45
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "line": 38
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 43,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 56,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "acceptSignatureType",
                    "defaultValue": "'png'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "controlType",
                    "defaultValue": "'signature'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "dataURI",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isVisibleModal",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showActionBtn",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "signaturePad",
                    "type": "SignaturePad",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'signaturePad'"
                        }
                    ]
                },
                {
                    "name": "signaturePadOptions",
                    "defaultValue": "{\n        // passed through to szimek/signature_pad constructor\n        minWidth: 2,\n        canvasWidth: 500,\n        canvasHeight: 300,\n        penColor: 'rgb(151, 151, 151)',\n    }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signaturePopupPad",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'signaturePopupPad', {read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "afterDialogOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSignModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178
                },
                {
                    "name": "deleteSignature",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130
                },
                {
                    "name": "drawStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "onKeyPress_OpenSignModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSignatoreDlg",
                    "args": [
                        {
                            "name": "src",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "src",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSignModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "saveSignModal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnDestroy,\n    ViewChild,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    OnChanges,\n    ElementRef,\n    Renderer2,\n    TemplateRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { SignaturePad } from 'ngx-signaturepad/signature-pad';\nimport {\n    PepFileService,\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepSignatureField,\n} from '@pepperi-addons/ngx-lib';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'pep-signature',\n    styleUrls: ['./signature.component.scss'],\n    templateUrl: './signature.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepSignatureComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() key = '';\n    @Input() src = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    @Input() signatureURL = '';\n    // @Input() inDialog = false;\n\n    controlType = 'signature';\n\n    @Input() form: FormGroup = null;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() isActive = false;\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    @ViewChild('signaturePad') signaturePad: SignaturePad;\n    @ViewChild('signaturePopupPad', { read: TemplateRef })\n    signaturePopupPad: TemplateRef<any>;\n    dialogRef: MatDialogRef<any>;\n\n    fieldHeight = '';\n    standAlone = false;\n    dataURI = null;\n    showActionBtn = true;\n\n    public isVisibleModal = false;\n    acceptSignatureType = 'png';\n\n    public signaturePadOptions: any = {\n        // passed through to szimek/signature_pad constructor\n        minWidth: 2,\n        canvasWidth: 500,\n        canvasHeight: 300,\n        penColor: 'rgb(151, 151, 151)',\n    };\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private fileService: PepFileService,\n        private cd: ChangeDetectorRef,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.src, this.required, this.readonly, this.disabled);\n            const pepField = new PepSignatureField({\n                key: this.key,\n                value: this.src,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n    }\n\n    ngOnChanges(changes: any): void {\n        if (changes.src && changes.src.currentValue.length > 0) {\n            // Empty dataURI if there is change in the src.\n            this.dataURI = null;\n\n            // For clean the cache.\n            // this.src = this.src ? this.src + '?t=' + new Date().toTimeString() : '';\n        }\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    drawComplete(): void {\n        // will be notified of szimek/signature_pad's onEnd event\n    }\n\n    drawStart(): void {\n        // will be notified of szimek/signature_pad's onBegin event\n    }\n\n    openSignModal(): void {\n        // If the signature is not empty open it in image viewer.\n        if (this.standAlone && this.dataURI) {\n            const fileStrArr = this.dataURI.fileStr.split(';');\n\n            if (fileStrArr.length === 2) {\n                const win = window.open('', '_blank');\n                const contentType = fileStrArr[0].split(':')[1];\n                const base64 = fileStrArr[1].split(',')[1];\n                const blob = this.fileService.convertFromb64toBlob(\n                    base64,\n                    contentType\n                );\n                const url = URL.createObjectURL(blob);\n                win.location.href = url;\n            }\n            // signature allready exits\n        } else {\n            this.signatureURL = this.src;\n            this.openSignatoreDlg(this.signatureURL);\n        }\n    }\n\n    openSignatoreDlg(src = ''): void {\n        this.showActionBtn =\n            this.signatureURL && this.signatureURL !== '' ? false : true;\n\n        this.dialogRef = this.dialogService.openDialog(this.signaturePopupPad);\n        this.dialogRef.afterOpened().subscribe(() => {\n            this.afterDialogOpened();\n        });\n    }\n\n    afterDialogOpened(): void {\n        if (this.signatureURL && this.signatureURL !== '') {\n            this.signaturePad.fromDataURL(this.signatureURL);\n            this.signaturePad.off();\n        }\n    }\n\n    clearSignModal(): void {\n        this.signatureURL = '';\n        this.signaturePad.clear();\n        this.signaturePad.on();\n    }\n\n    deleteSignature(event: any): void {\n        this.signatureURL = '';\n        this.changeValue(this.signatureURL);\n        this.cd.detectChanges();\n    }\n\n    saveSignModal(event: any): void {\n        if (!this.signaturePad.isEmpty()) {\n            this.signatureURL = this.signaturePad.toDataURL('image/png');\n            const fileValue = JSON.stringify({\n                acceptedExtensions: this.acceptSignatureType,\n                fileStr: this.signatureURL,\n                fileExt: this.acceptSignatureType,\n            });\n            this.changeValue(fileValue);\n        } else {\n            this.signatureURL = '';\n            this.changeValue(this.signatureURL);\n        }\n\n        this.dialogRef.close(this.signatureURL);\n    }\n\n    errorHandler(event: any): void {\n        this.signatureURL = this.src = ''; // this.blankImage;\n    }\n\n    changeValue(value: any, lastFocusedField: any = null): void {\n        this.dataURI = value.length > 0 ? JSON.parse(value) : null;\n        this.src = this.standAlone && this.dataURI ? this.dataURI.fileStr : '';\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            this.dataURI ? this.dataURI.fileExt : ''\n        );\n        this.valueChange.emit({\n            key: this.key,\n            value,\n            controlType: this.controlType,\n            lastFocusedField,\n        });\n    }\n\n    onKeyPress_OpenSignModal(event: any): void {\n        const e = event as KeyboardEvent;\n\n        if ([13, 32].indexOf(e.which) !== -1) {\n            this.openSignModal();\n        }\n        e.preventDefault();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n:host {\n    display: block;\n    // height: inherit;\n}\n\nsignature-pad {\n    display: grid;\n    width: inherit;\n    height: inherit;\n}\n",
                    "styleUrl": "./signature.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #pepTemplate>\n            <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n                <div class=\"pep-file-wrapper\">\n                    <div class=\"pep-file body-sm\" [ngClass]=\"{ disable: disabled }\" [style.height]=\"fieldHeight\">\n                        <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                        <ng-template #withImg>\n                            <button *ngIf=\"!disabled\" mat-button (click)=\"deleteSignature($event)\"\n                                class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                                [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                                <mat-icon>\n                                    <pep-icon name=\"system_bin\"></pep-icon>\n                                </mat-icon>\n                            </button>\n                            <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                                <img [src]=\"src\" [style.max-height]=\"fieldHeight\" class=\"pep-file-preview-img\"\n                                    (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                    [ngClass]=\"['text-align-' + xAlignment]\" />\n                            </div>\n                        </ng-template>\n                        <ng-template #noImg>\n                            <div class=\"ellipsis pep-file-message\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_signature\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">\n                                    {{ (disabled ? 'MESSAGES.INFO_MISSING_SIGNATURE' : 'SIGNATURE.HINT') | translate }}\n                                </span>\n                            </div>\n                        </ng-template>\n                    </div>\n                    <input [id]=\"key\" matInput [formControlName]=\"key\" class=\"hidden-input signature\" type=\"text\"\n                        [value]=\"src\" (click)=\"openSignModal()\" (keypress)=\"onKeyPress_OpenSignModal($event)\"\n                        autocomplete=\"off\" readonly />\n                </div>\n\n                <mat-error><span class=\"body-xs\"\n                        [title]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"required && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n                <pep-field-title [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1 }\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: false}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: true}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n\n    <!-- <ng-container *ngIf=\"inDialog === true\">\n        <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n    </ng-container> -->\n\n    <!-- <div *ngIf=\"inDialog === false\" class=\"signature-backdrop modal\" [ngClass]=\"{ fade: !isVisibleModal }\" tabindex=\"-1\"\n        role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\"\n        [ngStyle]=\"{ display: isVisibleModal ? 'block' : 'none' }\">\n        <div class=\"signature-modal modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n            </div>\n        </div>\n    </div> -->\n\n    <ng-template #pepReadonlyTemplate let-isTableView=\"isTableView\">\n        <div class=\"pep-file-container\">\n            <div class=\"pep-file-wrapper\">\n                <div class=\"pep-file body-sm disable\">\n                    <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                    <ng-template #withImg>\n                        <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                            <img *ngIf=\"!isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-file-preview-img\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                [ngClass]=\"['text-align-' + xAlignment]\" />\n                            <img *ngIf=\"isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-report-file pep-file-preview-img\" (error)=\"errorHandler($event)\"\n                                [alt]=\"label\" [ngClass]=\"['text-align-' + xAlignment]\" />\n                        </div>\n                    </ng-template>\n                    <ng-template #noImg></ng-template>\n                </div>\n            </div>\n        </div>\n    </ng-template>\n\n    <ng-template #signaturePopupPad>\n        <pep-dialog [title]=\"'SIGNATURE.DIALOG_TITLE' | translate\" [showFooter]=\"showActionBtn\">\n            <ng-container pep-dialog-content>\n                <signature-pad #signaturePad [options]=\"signaturePadOptions\" (onBeginEvent)=\"drawStart()\"\n                    (onEndEvent)=\"drawComplete()\">\n                </signature-pad>\n            </ng-container>\n            <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n                <button mat-button class=\"pep-spacing-element pep-button md weak\" [disabled]=\"readonly || disabled\"\n                    (click)=\"clearSignModal()\">\n                    {{ 'ACTIONS.CLEAR' | translate }}\n                </button>\n                <button mat-button class=\"pep-spacing-element pep-button md strong\" [disabled]=\"readonly || disabled\"\n                    (click)=\"saveSignModal($event)\">\n                    {{ 'ACTIONS.DONE' | translate }}\n                </button>\n            </div>\n        </pep-dialog>\n    </ng-template>\n\n</ng-container>"
        },
        {
            "name": "PepSizeDetectorComponent",
            "id": "component-PepSizeDetectorComponent-03e06dbe6422db3b67eb61e7a380317a",
            "file": "projects/ngx-lib/size-detector/size-detector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-size-detector",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./size-detector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showScreenSize",
                    "defaultValue": "false",
                    "line": 24
                }
            ],
            "outputsClass": [
                {
                    "name": "sizeChange",
                    "defaultValue": "new EventEmitter<IPepSizeDetectorItem>()",
                    "line": 27,
                    "type": "EventEmitter<IPepSizeDetectorItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentSize",
                    "type": "IPepSizeDetectorItem",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "prefix",
                    "defaultValue": "'is-'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sizes",
                    "defaultValue": "[\n        {\n            id: PepScreenSizeType.XS,\n            name: 'xs',\n            css: `d-block d-sm-none`,\n        },\n        {\n            id: PepScreenSizeType.SM,\n            name: 'sm',\n            css: `d-none d-sm-block d-md-none`,\n        },\n        {\n            id: PepScreenSizeType.MD,\n            name: 'md',\n            css: `d-none d-md-block d-lg-none`,\n        },\n        {\n            id: PepScreenSizeType.LG,\n            name: 'lg',\n            css: `d-none d-lg-block d-xl-none`,\n        },\n        {\n            id: PepScreenSizeType.XL,\n            name: 'xl',\n            css: `d-none d-xl-block`,\n        },\n    ]",
                    "type": "Array<IPepSizeDetectorItem>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "detectScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getCurrentSize",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepSizeDetectorItem",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 73
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    AfterViewInit,\n    HostListener,\n    ElementRef,\n    Input,\n    Output,\n    EventEmitter,\n} from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\n\ninterface IPepSizeDetectorItem {\n    id: PepScreenSizeType;\n    name: string;\n    css: string;\n}\n\n@Component({\n    selector: 'pep-size-detector',\n    templateUrl: './size-detector.component.html',\n})\nexport class PepSizeDetectorComponent implements AfterViewInit {\n    @Input() showScreenSize = false;\n\n    @Output()\n    sizeChange: EventEmitter<IPepSizeDetectorItem> = new EventEmitter<IPepSizeDetectorItem>();\n\n    prefix = 'is-';\n    sizes: Array<IPepSizeDetectorItem> = [\n        {\n            id: PepScreenSizeType.XS,\n            name: 'xs',\n            css: `d-block d-sm-none`,\n        },\n        {\n            id: PepScreenSizeType.SM,\n            name: 'sm',\n            css: `d-none d-sm-block d-md-none`,\n        },\n        {\n            id: PepScreenSizeType.MD,\n            name: 'md',\n            css: `d-none d-md-block d-lg-none`,\n        },\n        {\n            id: PepScreenSizeType.LG,\n            name: 'lg',\n            css: `d-none d-lg-block d-xl-none`,\n        },\n        {\n            id: PepScreenSizeType.XL,\n            name: 'xl',\n            css: `d-none d-xl-block`,\n        },\n    ];\n\n    private currentSize: IPepSizeDetectorItem;\n\n    constructor(\n        private hostElement: ElementRef,\n        private layoutService: PepLayoutService\n    ) {\n        this.exportFunctionsOnHostElement();\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.currentSize = this.sizes.find((s) => s.id === size);\n            this.sizeChange.emit(this.currentSize);\n        });\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event): void {\n        this.detectScreenSize();\n    }\n\n    ngAfterViewInit(): void {\n        this.detectScreenSize();\n    }\n\n    private detectScreenSize(): void {\n        this.currentSize = this.sizes.find((x) => {\n            const el = this.hostElement.nativeElement.querySelector(\n                `.${this.prefix}${x.id}`\n            );\n            const isVisible = window.getComputedStyle(el).display !== 'none';\n\n            return isVisible;\n        });\n\n        this.layoutService.onResize(this.currentSize.id);\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.getCurrentSize = this.getCurrentSize.bind(\n            this\n        );\n    }\n\n    getCurrentSize(): IPepSizeDetectorItem {\n        return this.currentSize;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<!-- Bootstrap -->\n<!-- <div *ngFor=\"let s of sizes\" class=\"{{s.css + ' ' + (prefix + s.id) }}\">{{s.name}}</div> -->\n\n<!-- Angular flex-layout -->\n<div *ngFor=\"let s of sizes\" fxShow.xs=\"{{s.name == 'xs'}}\" fxShow.sm=\"{{s.name == 'sm'}}\"\n  fxShow.md=\"{{s.name == 'md'}}\" fxShow.lg=\"{{s.name == 'lg'}}\" fxShow.xl=\"{{s.name == 'xl'}}\"\n  class=\"{{s.css + ' ' + (prefix + s.id) }}\">\n  <ng-container *ngIf=\"showScreenSize\"> The current screen size is - {{s.name}}</ng-container>\n</div>"
        },
        {
            "name": "PepSmartFiltersComponent",
            "id": "component-PepSmartFiltersComponent-5bdf8d469cd99bba73ecb602c7214c6b",
            "file": "projects/ngx-lib/smart-filters/smart-filters.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-smart-filters",
            "styleUrls": [
                "./smart-filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./smart-filters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fields",
                    "line": 47,
                    "type": ""
                },
                {
                    "name": "filters",
                    "line": 29,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "filtersChange",
                    "defaultValue": "new EventEmitter<\n        IPepSmartFilterData[]\n    >()",
                    "line": 57,
                    "type": "EventEmitter<IPepSmartFilterData[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_fields",
                    "defaultValue": "[]",
                    "type": "Array<IPepSmartFilterField>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "IPepSmartFilterData[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "expansionPanelHeaderHeight",
                    "defaultValue": "'*'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "filtersDataMap",
                    "defaultValue": "new Map<\n        string,\n        IPepSmartFilterData\n    >()",
                    "type": "Map<string | IPepSmartFilterData>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "fieldId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "fieldId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "exportFunctionsOnHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "field",
                            "type": "IPepSmartFilterField"
                        },
                        {
                            "name": "filterData",
                            "type": "IPepSmartFilterData"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "IPepSmartFilterField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterData",
                            "type": "IPepSmartFilterData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFilterClear",
                    "args": [
                        {
                            "name": "field",
                            "type": "IPepSmartFilterField"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "IPepSmartFilterField",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFiltersClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "raiseFiltersChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setupFilters",
                    "args": [
                        {
                            "name": "value",
                            "type": "IPepSmartFilterData[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "IPepSmartFilterData[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleField",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "isOpen",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    ChangeDetectionStrategy,\n    Output,\n    EventEmitter,\n    ElementRef,\n} from '@angular/core';\nimport {\n    IPepSmartFilterField,\n    PepSmartFilterBaseField,\n} from './common/model/field';\nimport { IPepSmartFilterData } from './common/model/filter';\n\n@Component({\n    selector: 'pep-smart-filters',\n    templateUrl: './smart-filters.component.html',\n    styleUrls: ['./smart-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepSmartFiltersComponent {\n    filtersDataMap: Map<string, IPepSmartFilterData> = new Map<\n        string,\n        IPepSmartFilterData\n    >();\n\n    private _filters: IPepSmartFilterData[] = [];\n    @Input()\n    set filters(value: IPepSmartFilterData[]) {\n        this._filters = value;\n        this.setupFilters(value);\n    }\n    get filters(): IPepSmartFilterData[] {\n        this._filters = [...this.filtersDataMap.keys()]\n            // .filter((key) => this.filtersDataMap.get(key) !== null)\n            .map((key) => {\n                if (key) {\n                    return this.filtersDataMap.get(key);\n                }\n            });\n\n        return this._filters;\n    }\n\n    private _fields: Array<IPepSmartFilterField> = [];\n    @Input()\n    set fields(value: Array<IPepSmartFilterField>) {\n        this._fields = value;\n    }\n    get fields(): Array<IPepSmartFilterField> {\n        return this._fields;\n    }\n\n    // @Output()\n    // filtersClear: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    filtersChange: EventEmitter<IPepSmartFilterData[]> = new EventEmitter<\n        IPepSmartFilterData[]\n    >();\n\n    expansionPanelHeaderHeight = '*';\n\n    constructor(private hostElement: ElementRef) {\n        this.exportFunctionsOnHostElement();\n    }\n\n    private exportFunctionsOnHostElement() {\n        // This is for web component usage for use those functions.\n        this.hostElement.nativeElement.clearFilters = this.clearFilters.bind(\n            this\n        );\n        this.hostElement.nativeElement.clearFilter = this.clearFilter.bind(\n            this\n        );\n        this.hostElement.nativeElement.toggleField = this.toggleField.bind(\n            this\n        );\n    }\n\n    private setupFilters(value: IPepSmartFilterData[]) {\n        this.filtersDataMap.clear();\n        if (value) {\n            value.forEach((filter) => {\n                // Validate before add the filter into the map.\n                const currentField = this.fields.find(\n                    (field) => field.id === filter.fieldId\n                ) as PepSmartFilterBaseField;\n\n                if (currentField) {\n                    // Only if the operator is from the same type\n                    if (\n                        filter.operator.componentType.includes(\n                            currentField.componentType\n                        )\n                    ) {\n                        let isOperatorUnitValid = true;\n                        if (filter.operatorUnit) {\n                            // Only if the operator unit is not from the same type\n                            if (\n                                !filter.operatorUnit.componentType.includes(\n                                    currentField.componentType\n                                )\n                            ) {\n                                isOperatorUnitValid = false;\n                            }\n                        }\n\n                        // Add the filter.\n                        if (isOperatorUnitValid) {\n                            this.filtersDataMap.set(filter.fieldId, filter);\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    private raiseFiltersChange(): void {\n        this.filtersChange.emit(this.filters);\n    }\n\n    toggleField(index: number, isOpen: boolean): void {\n        this.fields[index].isOpen = isOpen;\n    }\n\n    clearFilters() {\n        this.filtersDataMap.clear();\n    }\n\n    clearFilter(fieldId: string) {\n        this.filtersDataMap.delete(fieldId);\n    }\n\n    // Clear all the filters and raise event that filters has change.\n    onFiltersClear() {\n        this.clearFilters();\n        this.raiseFiltersChange();\n    }\n\n    // Clear the filter and raise event that filters has change.\n    onFilterClear(field: IPepSmartFilterField) {\n        this.clearFilter(field.id);\n        this.raiseFiltersChange();\n    }\n\n    // Set the filter and raise event that filters has change.\n    onFilterChange(\n        field: IPepSmartFilterField,\n        filterData: IPepSmartFilterData\n    ) {\n        this.clearFilter(field.id);\n        this.filtersDataMap.set(field.id, filterData);\n        this.raiseFiltersChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/mixins';\n@import '../src/core/style/abstracts/variables';\n\n.smart-filters-container {\n    .title {\n        height: $top-bar-height-with-no-top;\n        display: flex;\n        flex-flow: wrap;\n        align-items: center;\n        justify-content: space-between;\n\n        .clear-filter {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            margin: 0 $spacing-xs;\n            padding:0 $spacing-md;\n\n            &:after {\n                background-color: transparent;\n            }\n        }\n    }\n\n    .smart-filter-title-container {\n        display: grid;\n        grid-auto-flow: column;\n        grid-template-columns: auto 1fr auto;\n        width: 100%;\n        \n        // To cancel the warning of this add > * instead\n        // align-items: center;\n        > * { \n            align-self: center \n        }\n\n        .clear-filter {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            margin-inline-end: $spacing-sm;\n            \n            &:after {\n                background-color: transparent;\n            }\n        }\n\n        .mat-icon {\n            pep-icon {\n                height: 0.75rem;\n                width: 0.75rem;\n            }\n        }\n    }\n}",
                    "styleUrl": "./smart-filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "hostElement",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filters",
                        "type": "[]",
                        "returnType": "IPepSmartFilterData[]",
                        "line": 33
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fields",
                        "type": "",
                        "returnType": "Array<IPepSmartFilterField>",
                        "line": 50
                    }
                }
            },
            "templateData": "<div class=\"smart-filters-container\">\n    <div class=\"title\">\n        <span class=\"body-md bold\">{{ \"SMART_FILTERS.TITLE\" | translate}}</span>\n        <mat-chip *ngIf=\"filtersDataMap.size > 0\" [selectable]=\"false\" [removable]=\"true\" (click)=\"onFiltersClear()\"\n            class=\"clear-filter pep-button chip xs weak\">\n            <span class=\"body-xs ellipsis \">\n                {{ \"ACTIONS.CLEAR\" | translate}}\n            </span>\n        </mat-chip>\n    </div>\n\n    <mat-accordion [displayMode]=\"'flat'\" [multi]=\"true\" class=\"pep-accordion2\">\n        <mat-expansion-panel *ngFor=\"let field of fields; let i = index\" hideToggle=\"true\" [expanded]=\"field.isOpen\"\n            (opened)=\"toggleField(i, true)\" (closed)=\"toggleField(i, false)\">\n            <mat-expansion-panel-header [collapsedHeight]=\"expansionPanelHeaderHeight\"\n                [expandedHeight]=\"expansionPanelHeaderHeight\">\n                <mat-panel-title class=\"pep-spacing-element-negative\">\n                    <div class=\"smart-filter-title-container\">\n                        <mat-icon class=\"pep-spacing-element\">\n                            <pep-icon [name]=\"field.isOpen ? 'number_minus' : 'number_plus'\"></pep-icon>\n                        </mat-icon>\n                        <span class=\"body-sm ellipsis\" [title]=\"field.name\">\n                            {{ field.name }}\n                        </span>\n                        <mat-chip *ngIf=\"filtersDataMap.get(field.id)\" [selectable]=\"false\" [removable]=\"true\"\n                            (click)=\"onFilterClear(field)\" class=\"clear-filter pep-button chip xs weak\">\n                            <span *ngIf=\"field.componentType === 'multi-select'\" class=\"body-xs pep-spacing-element\">\n                                {{ filtersDataMap.get(field.id).value?.first?.length }}\n                                <!-- {{ field.componentType === 'multi-select' ?\n                                filtersDataMap.get(field.id).value?.first?.length : 1 }} -->\n                            </span>\n                            <mat-icon>\n                                <pep-icon name=\"system_close\"></pep-icon>\n                            </mat-icon>\n                        </mat-chip>\n                    </div>\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <div class=\"expansion-content smart-filter-content\">\n                <ng-container [ngSwitch]=\"field.componentType\">\n                    <ng-container *ngSwitchCase=\"'boolean'\">\n                        <pep-boolean-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-boolean-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'date'\">\n                        <pep-date-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-date-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'multi-select'\">\n                        <pep-multi-select-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-multi-select-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'number'\">\n                        <pep-number-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-number-filter>\n                    </ng-container>\n                    <!-- <div *ngSwitchDefault>\n                    </div> -->\n                </ng-container>\n            </div>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>"
        },
        {
            "name": "PepTextareaComponent",
            "id": "component-PepTextareaComponent-803c732972d422c3aded58c883ee6177",
            "file": "projects/ngx-lib/textarea/textarea.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 38
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 48,
                    "type": "FormGroup"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 49
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 36
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 51,
                    "type": "PepLayoutType"
                },
                {
                    "name": "maxFieldCharacters",
                    "line": 40,
                    "type": "number"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 39
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 37
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 43
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 50
                },
                {
                    "name": "textColor",
                    "defaultValue": "''",
                    "line": 41
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 42,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 54,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'textarea'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "fieldHeight",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isInEditMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "textAreaDialogTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textAreaDialogTemplate', {read: TemplateRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cardTemplateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastFocusedField",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    ElementRef,\n    ViewChild,\n    OnDestroy,\n    Renderer2,\n    TemplateRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepTextareaField,\n} from '@pepperi-addons/ngx-lib';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\n\n@Component({\n    selector: 'pep-textarea',\n    templateUrl: './textarea.component.html',\n    styleUrls: ['./textarea.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepTextareaComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() maxFieldCharacters: number;\n    @Input() textColor = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    // @Input() lastFocusField: any;\n\n    controlType = 'textarea';\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() layoutType: PepLayoutType = 'form';\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n\n    // @ViewChild('input') input: ElementRef;\n    @ViewChild('textAreaDialogTemplate', { read: TemplateRef })\n    textAreaDialogTemplate: TemplateRef<any>;\n\n    fieldHeight = '';\n    standAlone = false;\n    isInEditMode = false;\n\n    dialogRef: MatDialogRef<any>;\n\n    constructor(\n        private dialogService: PepDialogService,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n            // this.form = this.customizationService.getDefaultFromGroup(\n            //     this.key, this.value, this.required, this.readonly, this.disabled, this.maxFieldCharacters);\n            const pepField = new PepTextareaField({\n                key: this.key,\n                value: this.value,\n                required: this.required,\n                readonly: this.readonly,\n                disabled: this.disabled,\n                maxFieldCharacters: this.maxFieldCharacters,\n            });\n            this.form = this.customizationService.getDefaultFromGroup(pepField);\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.fieldHeight = this.customizationService.calculateFieldHeight(\n            this.layoutType,\n            this.rowSpan,\n            this.standAlone\n        );\n    }\n\n    ngOnChanges(changes: any): void {\n        // setTimeout(() => {\n        //     if (this.lastFocusField) {\n        //         this.lastFocusField.focus();\n        //         this.lastFocusField = null;\n        //     }\n        // }, 100);\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n    }\n\n    onBlur(event: any): void {\n        const value = event.target ? event.target.value : event;\n        this.changeValue(value, event.relatedTarget);\n\n        setTimeout(() => {\n            if (this.isInEditMode) {\n                this.isInEditMode = false;\n            }\n        }, 0);\n    }\n\n    changeValue(value: any, lastFocusedField: any = null): void {\n        if (value !== this.value) {\n            this.value = value;\n            this.customizationService.updateFormFieldValue(\n                this.form,\n                this.key,\n                value\n            );\n            this.valueChange.emit({ key: this.key, value, lastFocusedField });\n        }\n    }\n\n    cardTemplateClicked(event: any): void {\n        this.openDialog();\n    }\n\n    openDialog(): void {\n        const config = this.dialogService.getDialogConfig(\n            {\n                // maxWidth: '90vw',\n                // maxHeight: '90vh'\n            },\n            'regular'\n        );\n\n        this.dialogRef = this.dialogService.openDialog(\n            this.textAreaDialogTemplate,\n            {},\n            config\n        );\n\n        this.dialogRef.afterClosed().subscribe((value) => {\n            if (value !== undefined && value !== null) {\n                this.changeValue(value);\n            }\n        });\n    }\n\n    closeDialog(data: any = null): void {\n        this.dialogRef?.close(data);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import '../src/core/style/abstracts/variables';\n\n:host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n}\n\n.disable-text-div {\n    display: inline-block;\n    vertical-align: middle;\n    margin: 0;\n    padding: 0.5rem 1.5rem 0.5rem 0;\n    overflow-y: hidden;\n}\n\n.right-alignment {\n    .disable-text-div {\n        padding: 0.5rem 0 0.5rem 1.5rem;\n    }\n}\n\n.dialog-textarea-container {\n    textarea {\n        border: none;\n        resize: none;\n        width: 25rem;\n        height: 13rem;\n        // margin: 0;\n        // padding:0;\n        // padding: $content-padding $spacing-sm;\n\n        &:focus {\n            outline: none;\n        }\n    }\n}",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-isFormView=\"isFormView\">\n        <div class=\"pep-textarea-container\" [ngClass]=\"{ 'stand-alone': standAlone,\n            'right-alignment': xAlignment == 'right', 'one-row': rowSpan === 1,\n            'pep-textarea-card-container': layoutType === 'card' }\">\n            <pep-field-title *ngIf=\"isFormView\" [label]=\"label\" [required]=\"required\" [disabled]=\"disabled\"\n                [maxFieldCharacters]=\"disabled || readonly ? 0 : maxFieldCharacters\" [xAlignment]=\"xAlignment\"\n                [showTitle]=\"showTitle\" [inputLength]=\"input.value?.length\">\n            </pep-field-title>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\"\n                [ngClass]=\"{ 'pep-table-textarea': layoutType === 'table' }\">\n                <textarea #input [hidden]=\"readonly\" [id]=\"key\" class=\"body-sm\" matInput (blur)=\"onBlur($event)\"\n                    title=\"{{ value }}\" [value]=\"value\"\n                    maxlength=\"{{ maxFieldCharacters > 0 ? maxFieldCharacters : 99999 }}\"\n                    [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'right' ? 'right' : 'left' }\"\n                    [formControlName]=\"key\" [style.height]=\"fieldHeight\">\n                </textarea>\n                <div *ngIf=\"readonly\" class=\"body-sm disable-text-div\" title=\"{{ value }}\"\n                    [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'right' ? 'right' : 'left' }\"\n                    [innerHtml]=\"value | pepSafeHtml\" [style.height]=\"fieldHeight\">\n                </div>\n                <!-- <pep-textbox-icon *ngIf=\"xAlignment == 'right'\" matPrefix [value]=\"value\" [label]=\"label\" [type]=\"controlType\" [disabled]=\"disabled\"\n                    [ngClass]=\"{ 'card-one-row-icon': layoutType === 'card' && rowSpan === 1 }\" (iconClick)=\"openDialog()\">\n                </pep-textbox-icon> -->\n                <pep-textbox-icon matSuffix [value]=\"value\" [label]=\"label\" [type]=\"controlType\"\n                    [disabled]=\"disabled || readonly\"\n                    [ngClass]=\"{ 'card-one-row-icon': layoutType === 'card' && rowSpan === 1 }\"\n                    (iconClick)=\"openDialog()\">\n                </pep-textbox-icon>\n                <mat-error>\n                    <span class=\"body-xs\"\n                        [title]=\"required && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"required && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n            </mat-form-field>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: true }\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false }\"></ng-container>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-textarea-card-container card-flex-container\"\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled }\"\n                [ngStyle]=\"{ color: textColor, '-webkit-line-clamp': rowSpan }\" [class]=\"'text-align-' + xAlignment\"\n                (click)=\"!disabled ? cardTemplateClicked($event) : ''\" [style.height]=\"fieldHeight\">\n                <span *ngIf=\" showTitle && label !=''\" class=\" body-xs title no-shrink\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ value }}\" class=\"body-sm value wrap\">{{ value }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button self-start\"\n                    [ngClass]=\"{'self-end' : value && value !== ''}\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false }\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"value?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\"\n                    class=\"pep-report-textarea\" [ngClass]=\"{ readonly: disabled }\">\n                    <input matInput [id]=\"key\" class=\"body-sm pep-report-input\" [ngClass]=\"{ readonly: disabled }\"\n                        [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'center' ? 'center' : xAlignment == 'right' ? 'right' : 'left' }\"\n                        title=\"{{ value }}\" [formControlName]=\"key\" type=\"text\" [value]=\"value\" [disabled]=\"true\" />\n                    <pep-textbox-icon *ngIf=\"disabled && xAlignment == 'right'\" matPrefix [value]=\"value\"\n                        [label]=\"label\" [type]=\"controlType\" [disabled]=\"disabled\" (iconClick)=\"openDialog()\">\n                    </pep-textbox-icon>\n                    <pep-textbox-icon *ngIf=\"disabled && (xAlignment == 'left')\" matSuffix [value]=\"value\"\n                        [label]=\"label\" [type]=\"controlType\" [disabled]=\"disabled\" (iconClick)=\"openDialog()\">\n                    </pep-textbox-icon>\n                </mat-form-field>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span>&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n</ng-container>\n\n<ng-template #textAreaDialogTemplate>\n    <pep-dialog class=\"dialog-textarea-container\" [title]=\"label\">\n        <ng-container pep-dialog-content>\n            <textarea #dialogTextarea [readonly]=\"disabled || readonly\">{{ value }}</textarea>\n        </ng-container>\n        <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n            <ng-container *ngIf=\"disabled || readonly; then notEditableBlock; else editableBlock\">\n            </ng-container>\n            <ng-template #editableBlock>\n                <button mat-button (click)=\"closeDialog()\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button class=\"pep-spacing-element pep-button md strong\"\n                    (click)=\"closeDialog(dialogTextarea.value)\">\n                    {{ 'ACTIONS.SAVE' | translate }}\n                </button>\n            </ng-template>\n            <ng-template #notEditableBlock>\n                <button mat-button (click)=\"closeDialog()\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CLOSE' | translate }}\n                </button>\n            </ng-template>\n        </div>\n    </pep-dialog>\n</ng-template>"
        },
        {
            "name": "PepTextboxComponent",
            "id": "component-PepTextboxComponent-5abcd6fb37536fecaafcb8c055da24ee",
            "file": "projects/ngx-lib/textbox/textbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-textbox",
            "styleUrls": [
                "./textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 41
                },
                {
                    "name": "form",
                    "defaultValue": "null",
                    "line": 51,
                    "type": "FormGroup"
                },
                {
                    "name": "formattedValue",
                    "defaultValue": "''",
                    "line": 36
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 52
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 37
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "line": 57,
                    "type": "PepLayoutType"
                },
                {
                    "name": "maxFieldCharacters",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "maxValue",
                    "defaultValue": "NaN",
                    "line": 49
                },
                {
                    "name": "minValue",
                    "defaultValue": "NaN",
                    "line": 48
                },
                {
                    "name": "parentFieldKey",
                    "defaultValue": "null",
                    "line": 58,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 38
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 42
                },
                {
                    "name": "renderError",
                    "defaultValue": "true",
                    "line": 55
                },
                {
                    "name": "renderSymbol",
                    "defaultValue": "true",
                    "line": 56
                },
                {
                    "name": "renderTitle",
                    "defaultValue": "true",
                    "line": 54
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 40
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "line": 46
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "line": 53
                },
                {
                    "name": "textColor",
                    "defaultValue": "''",
                    "line": 44
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 39,
                    "type": "PepTextboxFieldType"
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "line": 45,
                    "type": "PepHorizontalAlignment"
                }
            ],
            "outputsClass": [
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 63,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFieldValueChangeEvent>()",
                    "line": 61,
                    "type": "EventEmitter<IPepFieldValueChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "'textbox'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "fb",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "input",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "isInEditMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "standAlone",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "anchorClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312
                },
                {
                    "name": "cardTemplateClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getField",
                    "args": [],
                    "optional": false,
                    "returnType": "PepFieldBase",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isDifferentValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 191,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNumberType",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "isValueValid",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 251,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { coerceNumberProperty, _isNumberValue } from '@angular/cdk/coercion';\nimport {\n    Component,\n    OnInit,\n    OnChanges,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectionStrategy,\n    ElementRef,\n    ViewChild,\n    Renderer2,\n    OnDestroy,\n} from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport {\n    PepLayoutType,\n    PepCustomizationService,\n    PepHorizontalAlignment,\n    DEFAULT_HORIZONTAL_ALIGNMENT,\n    IPepFieldValueChangeEvent,\n    PepTextboxFieldType,\n    PepTextboxField,\n    PepFieldBase,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-textbox',\n    templateUrl: './textbox.component.html',\n    styleUrls: ['./textbox.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PepTextboxComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() key = '';\n    @Input() value = '';\n    @Input() formattedValue = '';\n    @Input() label = '';\n    @Input() placeholder = '';\n    @Input() type: PepTextboxFieldType = 'text';\n    @Input() required = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() maxFieldCharacters: number;\n    @Input() textColor = '';\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() rowSpan = 1;\n    // @Input() lastFocusField: any;\n    @Input() minValue = NaN;\n    @Input() maxValue = NaN;\n\n    @Input() form: FormGroup = null;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() renderTitle = true;\n    @Input() renderError = true;\n    @Input() renderSymbol = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() parentFieldKey: string = null;\n\n    @Output()\n    valueChange: EventEmitter<IPepFieldValueChangeEvent> = new EventEmitter<IPepFieldValueChangeEvent>();\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ViewChild('input') input: ElementRef;\n\n    readonly controlType = 'textbox';\n\n    standAlone = false;\n    isInEditMode = false;\n    isFocus = false;\n\n    constructor(\n        public fb: FormBuilder,\n        private customizationService: PepCustomizationService,\n        private renderer: Renderer2,\n        private element: ElementRef\n    ) { }\n\n    private getField(): PepFieldBase {\n        const pepField = new PepTextboxField({\n            key: this.key,\n            value: this.value,\n            required: this.required,\n            readonly: this.readonly,\n            disabled: this.disabled,\n            maxFieldCharacters: this.maxFieldCharacters,\n            type: this.type,\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n        });\n\n        return pepField;\n    }\n\n    ngOnInit(): void {\n        if (this.form === null) {\n            this.standAlone = true;\n\n            this.minValue =\n                isNaN(this.minValue) && !isNaN(this.maxValue)\n                    ? 0\n                    : this.minValue;\n            this.maxValue =\n                isNaN(this.maxValue) && !isNaN(this.minValue)\n                    ? 99999\n                    : this.maxValue;\n\n            const pepField = this.getField();\n            this.form = this.customizationService.getDefaultFromGroup(\n                pepField,\n                this.renderError\n            );\n\n            this.formattedValue = this.formattedValue || this.value;\n\n            this.renderer.addClass(\n                this.element.nativeElement,\n                PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME\n            );\n        }\n\n        this.readonly = this.type === 'duration' ? true : this.readonly; // Hack until we develop Timer UI for editing Duration field\n    }\n\n    ngOnChanges(changes: any): void {\n        if (this.standAlone) {\n            this.formattedValue = this.formattedValue || this.value;\n\n            const pepField = this.getField();\n            this.customizationService.updateFormField(\n                this.form,\n                pepField,\n                this.formattedValue\n            );\n        }\n\n        this.readonly = this.type === 'duration' ? true : this.readonly; // Hack until we develop Timer UI for editing Duration field\n\n        setTimeout(() => {\n            // if (this.lastFocusField) {\n            //     this.lastFocusField.focus();\n            //     this.lastFocusField = null;\n            // } else {\n            // }\n        }, 500);\n    }\n\n    ngOnDestroy(): void {\n        // if (this.valueChange) {\n        //     this.valueChange.unsubscribe();\n        // }\n        // if (this.formValidationChange) {\n        //     this.formValidationChange.unsubscribe();\n        // }\n    }\n\n    onFocus(e: any): void {\n        this.isFocus = true;\n    }\n\n    isNumberType(): boolean {\n        return (\n            this.type === 'percentage' ||\n            this.type === 'currency' ||\n            this.type === 'int' ||\n            this.type === 'real'\n        );\n    }\n\n    isValueValid(value: string): boolean {\n        let res = false;\n\n        if (this.isNumberType()) {\n            if (value === '') {\n                res = this.required ? false : true;\n            } else {\n                const numberValue = coerceNumberProperty(value);\n                res =\n                    numberValue >= this.minValue &&\n                    numberValue <= this.maxValue;\n            }\n        } else {\n            // TODO: Maybe need to check other types.\n            res = true;\n        }\n\n        return res;\n    }\n\n    isDifferentValue(value: string): boolean {\n        let res = false;\n\n        if (this.isNumberType()) {\n            if (this.value === '' || value === '') {\n                res = true;\n            } else {\n                const currentValue = coerceNumberProperty(this.value);\n                const newValue = coerceNumberProperty(value);\n\n                res = currentValue !== newValue;\n            }\n        } else {\n            res = true;\n        }\n\n        return res;\n    }\n\n    onBlur(e: any): void {\n        this.isFocus = false;\n        const value = e.target ? e.target.value : e;\n\n        if (value !== this.value && this.isDifferentValue(value)) {\n            // If renderError is false and the new value is not valid.\n            if (!this.renderError && !this.isValueValid(value)) {\n                this.renderer.setProperty(\n                    this.input.nativeElement,\n                    'value',\n                    this.value\n                );\n            } else {\n                this.formattedValue = this.value = value;\n\n                // There is formControl.setValue in the onKeyUp so we don't need it here.\n                // this.propagateChange(value, e.relatedTarget);\n                this.valueChange.emit({\n                    key: this.key,\n                    value,\n                    lastFocusedField: e.relatedTarget,\n                });\n            }\n        }\n\n        if (this.isInEditMode) {\n            this.isInEditMode = false;\n        }\n    }\n\n    onKeyUp(event: any): void {\n        const value = event.target ? event.target.value : event;\n        this.customizationService.updateFormFieldValue(\n            this.form,\n            this.key,\n            value,\n            this.parentFieldKey\n        );\n        this.formValidationChange.emit(this.form.valid);\n    }\n\n    onKeyPress(event: any): any {\n        // Not In use.\n        // let inputChar = String.fromCharCode(event.charCode);\n        // const e = event as KeyboardEvent;\n        // if (\n        //     [8, 9, 13, 27, 190].indexOf(e.which) !== -1 ||\n        //     // Allow: Ctrl+A\n        //     (e.which === 65 && e.ctrlKey === true) ||\n        //     // Allow: Ctrl+C\n        //     (e.which === 67 && e.ctrlKey === true) ||\n        //     // Allow: Ctrl+V\n        //     (e.which === 86 && e.ctrlKey === true) ||\n        //     // Allow: Ctrl+X\n        //     (e.which === 88 &&\n        //         e.ctrlKey ===\n        //         true) /*||\n        //     // Allow: home, end, left, right\n        //     (e.which >= 35 && e.which <= 39)*/\n        // ) {\n        //     // let it happen, don't do anything\n        //     return true;\n        // }\n        // switch (this.type) {\n        //     case 'int': {\n        //         const pattern = /[0-9\\+\\-\\ ]/;\n        //         if (!pattern.test(inputChar)) {\n        //             e.preventDefault();\n        //         }\n        //         break;\n        //     }\n        //     case 'currency':\n        //     case 'real': {\n        //         const decPoint = '.';\n        //         const thousandSeparator = ',';\n        //         const pattern = /^[-+]?[0-9]+\\.[0-9]+$/; // -> /^\\d+(\\.\\d{1,9})?$/;\n        //         if (e.which === 46) {\n        //             inputChar = inputChar + '0';\n        //         } else if (e.which === 44) {\n        //             inputChar = inputChar + '000';\n        //         }\n        //         if (!pattern.test(event.target.value + inputChar)) {\n        //             e.preventDefault();\n        //         }\n        //         break;\n        //     }\n        //     case 'phone': {\n        //         const pattern = /^[\\d\\.\\-\\+\\(\\)\\*\\#]+$/;\n        //         if (!pattern.test(event.target.value + inputChar)) {\n        //             e.preventDefault();\n        //         }\n        //         break;\n        //     }\n        //     case 'text': {\n        //         // if (this.maxFieldCharacters !== 0 && event.target.value.length >= this.maxFieldCharacters) {\n        //         //     e.preventDefault();\n        //         // }\n        //         break;\n        //     }\n        // }\n    }\n\n    anchorClicked(): void {\n        const currentValue = this.value;\n        if (currentValue.trim().length > 0) {\n            switch (this.type) {\n                case 'email':\n                    window.open('mailto:' + currentValue, 'email');\n                    break;\n                case 'phone':\n                    window.open('tel:' + currentValue, 'tel');\n                    break;\n                case 'link':\n                    window.open(currentValue);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    cardTemplateClicked(event: any): void {\n        this.isInEditMode = true;\n\n        setTimeout(() => {\n            this.input.nativeElement.focus();\n        }, 0);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    height: inherit;\n    display: grid;\n    // align-items: center;\n}\n:host > * { \n    align-self: center; // instead of  align-items: center; in the :host\n    align-items: baseline;\n}\n\n.disable-hidden {\n    display:none;\n}\n\n.dis-grid {\n    display:grid;\n}\n\n.multi-rows-text {\n    display: -webkit-box; \n    // -webkit-line-clamp: 2 or more - set this in the html by the rowSpan inout; \n    -webkit-box-orient: vertical; \n    overflow: hidden; \n    text-overflow: ellipsis;\n    white-space: normal !important;\n}",
                    "styleUrl": "./textbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-isFormView=\"isFormView\" let-hasParent=\"hasParent\">\n        <pep-field-title *ngIf=\"renderTitle && isFormView && !hasParent\" [label]=\"label\" [required]=\"required\"\n            [disabled]=\"disabled\" [maxFieldCharacters]=\"maxFieldCharacters\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\" [inputLength]=\"input.value?.length\">\n        </pep-field-title>\n        <mat-form-field appearance=\"outline\">\n            <!-- (keyup)=\"onKeyUp($event)\"  -->\n            <input #input pepTextboxValidation [id]=\"key\" [name]=\"key\" class=\" body-sm \" matInput autocomplete=\"off\"\n                maxlength=\"{{ maxFieldCharacters > 0 ? maxFieldCharacters : 99999 }}\"\n                [placeholder]=\"hasParent && !disabled ? placeholder : ''\"\n                [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'center' ? 'center' : xAlignment == 'right' ? 'right' : 'left' }\"\n                title=\"{{ formattedValue }}\" [formControlName]=\"key\" [type]=\"type\"\n                [value]=\"type == 'link' ? formattedValue : (isFocus ? value : formattedValue)\" (blur)=\"onBlur($event)\"\n                (keyup.enter)=\"$event?.currentTarget?.blur()\" (focus)=\"onFocus($event)\"\n                [ngClass]=\"{'disable-hidden': disabled && formattedValue.length > 0 && (type === 'phone' || type === 'email' || type === 'link')}\" />\n\n            <span\n                *ngIf=\"disabled && formattedValue.length > 0 && (type === 'phone' || type === 'email' || type === 'link')\"\n                class=\"dis-grid\">\n                <a href=\"javascript:void(0)\" (click)=\"anchorClicked()\" [id]=\"key\" [name]=\"key\"\n                    class=\"color-link body-sm \"> {{formattedValue}}</a>\n            </span>\n            <mat-error *ngIf=\"renderError\">\n                <ng-container *ngIf=\"required && input.value.length == 0 then requiredError else otherError\">\n                </ng-container>\n                <ng-template #requiredError>\n                    <span class=\"body-xs\" [title]=\"('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label })\"\n                        [innerText]=\"('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label })\">\n                    </span>\n                </ng-template>\n                <ng-template #otherError>\n                    <span class=\"body-xs\" [title]=\"(input.value | pepToNumber) > this.maxValue || (input.value | pepToNumber) < this.minValue ?\n                            ('MESSAGES.ERROR_RANGE_IS_NOT_VALID' | translate: { min: minValue, max: maxValue }) :\n                            ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\" [innerText]=\"(input.value | pepToNumber) > this.maxValue || (input.value | pepToNumber) < this.minValue ?\n                            ('MESSAGES.ERROR_RANGE_IS_NOT_VALID' | translate: { min: minValue, max: maxValue }) :\n                            ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\">\n                    </span>\n                </ng-template>\n            </mat-error>\n\n            <pep-textbox-icon *ngIf=\"renderSymbol && isFormView && xAlignment == 'right'\" matPrefix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\">\n            </pep-textbox-icon>\n            <pep-textbox-icon *ngIf=\"renderSymbol && isFormView && (xAlignment == 'left')\" matSuffix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\">\n            </pep-textbox-icon>\n        </mat-form-field>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngIf=\"parentFieldKey; then groupedBlock; else regularBlock\"></ng-container>\n        <ng-template #regularBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: true, hasParent: false }\">\n            </ng-container>\n        </ng-template>\n        <ng-template #groupedBlock>\n            <ng-container [formGroupName]=\"parentFieldKey\">\n                <mat-form-field appearance=\"outline\">\n                    <!-- (keypress)=\"onKeyPress($event)\" -->\n                    <input pepTextboxValidation [id]=\"key\" [name]=\"key\" class=\" body-sm \" matInput autocomplete=\"off\"\n                        (keyup)=\"onKeyUp($event)\" [placeholder]=\"!disabled ? placeholder : ''\"\n                        title=\"{{ formattedValue }}\" [formControlName]=\"key\" [value]=\"value\" (blur)=\"onBlur($event)\"\n                        (keyup.enter)=\"$event?.currentTarget?.blur()\" (focus)=\"onFocus($event)\" />\n                </mat-form-field>\n                <!-- <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: true, hasParent: true }\"></ng-container> -->\n            </ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\n                <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false, hasParent: false }\">\n                </ng-container>\n            </div>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-card-input card-flex-container\" [ngStyle]=\"{ color: textColor }\"\n                [class]=\"'text-align-' + xAlignment\" [ngClass]=\"{'one-row': rowSpan === 1,\n                            'multi-rows': rowSpan > 1,\n                            'pep-button weak': isActive && !disabled}\"\n                (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm value\"\n                    [ngClass]=\"{'multi-rows-text': rowSpan > 1}\" [ngStyle]=\"{ '-webkit-line-clamp': rowSpan }\">{{\n                    formattedValue }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false, hasParent: false }\">\n            </ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <ng-container [ngSwitch]=\"type\">\n                    <ng-container *ngSwitchCase=\"'link'\">\n                        <a [id]=\"key\" class=\"color-link body-sm pep-report-input\"\n                            [ngClass]=\"{'disable': (disabled && value === '')}\" *ngIf=\"formattedValue != null\"\n                            title=\"{{ formattedValue }}\" target=\"_blank\" href=\"{{ value ? value : formattedValue }}\">{{\n                            formattedValue }}</a>\n                    </ng-container>\n                    <ng-container *ngSwitchDefault>\n                        <span [id]=\"key\" class=\"body-sm pep-report-input\" [ngClass]=\"{'readonly': disabled}\"\n                            title=\"{{ formattedValue }}\" [ngStyle]=\"{ color: textColor }\">{{ formattedValue }}</span>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span [id]=\"key\">&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n\n</ng-container>"
        },
        {
            "name": "PepTextboxIconComponent",
            "id": "component-PepTextboxIconComponent-8767e006cea4644faefe393a8dcc821e",
            "file": "projects/ngx-lib/textbox-icon/textbox-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-textbox-icon",
            "styleUrls": [
                "./textbox-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textbox-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "iconClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 15,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "test",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "iconButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'pep-textbox-icon',\n    templateUrl: './textbox-icon.component.html',\n    styleUrls: ['./textbox-icon.component.scss'],\n})\nexport class PepTextboxIconComponent {\n    @Input() value: string;\n    @Input() label: string;\n    @Input() type?: string;\n    @Input() disabled: boolean;\n\n    test = true;\n    @Output() iconClick: EventEmitter<void> = new EventEmitter<void>();\n\n    iconButtonClicked(): void {\n        const currentValue = this.value;\n        if (currentValue.toString().trim().length > 0) {\n            switch (this.type) {\n                case 'email':\n                    window.open('mailto:' + currentValue, 'email');\n                    break;\n                case 'phone':\n                    window.open('tel:' + currentValue, 'tel');\n                    break;\n                case 'link':\n                    window.open(currentValue);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        this.iconClick.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: flex;\n}\n\n// For making the button on the text for richtext and other components.\n// .floating-button {\n//     position: absolute;\n//     bottom: 0;\n//     display: flex;\n//     align-items: flex-end;\n// }",
                    "styleUrl": "./textbox-icon.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-icon *ngIf=\"!disabled && type === 'currency'\" class=\"pep-text-icon\">\n    <pep-icon name=\"number_coins\">\n    </pep-icon>\n</mat-icon>\n<mat-icon *ngIf=\"!disabled && type === 'percentage'\" class=\"pep-text-icon\">\n    <pep-icon name=\"number_percent\">\n    </pep-icon>\n</mat-icon>\n<mat-icon *ngIf=\"!disabled && type === 'int'\" class=\"pep-text-icon\">\n    <pep-icon name=\"number_number\">\n    </pep-icon>\n</mat-icon>\n<mat-icon *ngIf=\"!disabled && type === 'real'\" class=\"pep-text-icon\">\n    <pep-icon name=\"number_decimal\">\n    </pep-icon>\n</mat-icon>\n<button *ngIf=\"type === 'phone'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\"\n    [disabled]=\"value.length === 0\" [ngClass]=\"{ disabled: value.length === 0 }\">\n    <mat-icon>\n        <pep-icon name=\"system_phone\">\n        </pep-icon>\n    </mat-icon>\n</button>\n<button *ngIf=\"type === 'email'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\"\n    [disabled]=\"value.length === 0\" [ngClass]=\"{ disabled: value.length === 0 }\">\n    <mat-icon>\n        <pep-icon name=\"system_email\">\n        </pep-icon>\n    </mat-icon>\n</button>\n<button *ngIf=\"type === 'link'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\"\n    [disabled]=\"value.length === 0\" [ngClass]=\"{ disabled: value.length === 0 }\">\n    <mat-icon>\n        <pep-icon name=\"system_link\">\n        </pep-icon>\n    </mat-icon>\n</button>\n<button *ngIf=\"type === 'textarea'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\">\n    <mat-icon>\n        <pep-icon name=\"system_full_screen\">\n        </pep-icon>\n    </mat-icon>\n</button>\n<button *ngIf=\"type === 'richhtmltextarea'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\">\n    <mat-icon>\n        <pep-icon name=\"{{ disabled ? 'system_full_screen' : 'system_edit'}}\">\n        </pep-icon>\n    </mat-icon>\n</button>\n\n<button *ngIf=\"!disabled && type === 'datetime'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\">\n    <mat-icon>\n        <pep-icon name=\"time_datetime\">\n        </pep-icon>\n    </mat-icon>\n</button>\n\n<button *ngIf=\"!disabled && type === 'date'\" class=\"pep-button md regular\" mat-button (click)=\"iconButtonClicked()\">\n    <mat-icon>\n        <pep-icon name=\"time_cal\">\n        </pep-icon>\n    </mat-icon>\n</button>\n\n<!-- <span class=\"pep-text-icon\" *ngIf=\"type === 'percentage'\">%</span> -->\n<!-- <mat-icon matSuffix>sentiment_very_satisfied</mat-icon> -->\n<!-- <mat-icon matPrefix>sentiment_very_satisfied</mat-icon> -->\n<!-- <mat-hint>Hint</mat-hint> -->"
        },
        {
            "name": "PepTopBarComponent",
            "id": "component-PepTopBarComponent-e8894fa471cafd11825dd38549b4bd22",
            "file": "projects/ngx-lib/top-bar/top-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-top-bar",
            "styleUrls": [
                "./top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "line": 44
                },
                {
                    "name": "title",
                    "defaultValue": "null",
                    "line": 45,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "footerStateChange",
                    "defaultValue": "new EventEmitter<IPepFooterStateChangeEvent>()",
                    "line": 48,
                    "type": "EventEmitter<IPepFooterStateChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "customizationService",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "footerEndContent",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'footerEndContent'"
                        }
                    ]
                },
                {
                    "name": "footerStartContent",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'footerStartContent'"
                        }
                    ]
                },
                {
                    "name": "footerState",
                    "type": "PepFooterStateType",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "isHidden",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listActionsComp",
                    "type": "PepListActionsComponent",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepListActionsComponent"
                        }
                    ]
                },
                {
                    "name": "listChooserComp",
                    "type": "PepListChooserComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepListChooserComponent"
                        }
                    ]
                },
                {
                    "name": "listSortingComp",
                    "type": "PepListSortingComponent",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepListSortingComponent"
                        }
                    ]
                },
                {
                    "name": "listTotalComp",
                    "type": "PepListTotalComponent",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepListTotalComponent"
                        }
                    ]
                },
                {
                    "name": "listViewsComp",
                    "type": "PepListViewsComponent",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepListViewsComponent"
                        }
                    ]
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "searchComp",
                    "type": "PepSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "PepSearchComponent"
                        }
                    ]
                },
                {
                    "name": "searchIsOpenAndSmallDevice",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "searchState",
                    "type": "PepSearchStateType",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "showFooter",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "setFooterState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setSearchIsOpenAndSmallDevice",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    AfterContentInit,\n    ChangeDetectorRef,\n    ContentChild,\n    ElementRef,\n    ViewChild,\n} from '@angular/core';\nimport {\n    AfterViewInit,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n} from '@angular/core';\nimport {\n    PepCustomizationService,\n    PepLayoutService,\n    PepScreenSizeType,\n} from '@pepperi-addons/ngx-lib';\nimport { PepSearchComponent } from '@pepperi-addons/ngx-lib/search';\nimport {\n    PepListActionsComponent,\n    PepListChooserComponent,\n    PepListSortingComponent,\n    PepListTotalComponent,\n    PepListViewsComponent,\n} from '@pepperi-addons/ngx-lib/list';\nimport { PepMenuStateType } from '@pepperi-addons/ngx-lib/menu';\nimport {\n    IPepSearchStateChangeEvent,\n    PepSearchStateType,\n} from '@pepperi-addons/ngx-lib/search';\nimport {\n    IPepFooterStateChangeEvent,\n    PepFooterStateType,\n} from './top-bar.model';\n\n@Component({\n    selector: 'pep-top-bar',\n    templateUrl: './top-bar.component.html',\n    styleUrls: ['./top-bar.component.scss'],\n})\nexport class PepTopBarComponent implements AfterViewInit, AfterContentInit {\n    @Input() inline = false;\n    @Input() title: string = null;\n\n    @Output()\n    footerStateChange: EventEmitter<IPepFooterStateChangeEvent> = new EventEmitter<IPepFooterStateChangeEvent>();\n\n    @ViewChild('footerStartContent') footerStartContent: ElementRef;\n    @ViewChild('footerEndContent') footerEndContent: ElementRef;\n\n    @ContentChild(PepSearchComponent) searchComp: PepSearchComponent;\n    @ContentChild(PepListActionsComponent)\n    listActionsComp: PepListActionsComponent;\n    @ContentChild(PepListChooserComponent)\n    listChooserComp: PepListChooserComponent;\n    @ContentChild(PepListTotalComponent) listTotalComp: PepListTotalComponent;\n    @ContentChild(PepListSortingComponent)\n    listSortingComp: PepListSortingComponent;\n    @ContentChild(PepListViewsComponent) listViewsComp: PepListViewsComponent;\n\n    showFooter = false;\n    isHidden = true;\n    screenSize: PepScreenSizeType;\n    // listActionsIsVisible = false;\n    searchState: PepSearchStateType;\n    searchIsOpenAndSmallDevice = false;\n    footerState: PepFooterStateType;\n    PepScreenSizeType = PepScreenSizeType;\n\n    constructor(\n        public customizationService: PepCustomizationService,\n        public layoutService: PepLayoutService,\n        private cdRef: ChangeDetectorRef\n    ) {}\n\n    ngAfterViewInit(): void {\n        if (!this.inline) {\n            this.showFooter =\n                this.footerStartContent?.nativeElement?.children?.length > 0 ||\n                this.footerEndContent?.nativeElement?.children?.length > 0;\n        }\n\n        this.layoutService.onResize$.subscribe((size: PepScreenSizeType) => {\n            this.screenSize = size;\n            this.setSearchIsOpenAndSmallDevice();\n\n            if (!this.inline) {\n                this.setFooterState();\n            }\n        });\n\n        this.isHidden = false;\n        this.cdRef.detectChanges();\n    }\n\n    ngAfterContentInit() {\n        if (this.searchComp) {\n            this.searchComp.stateChange\n                .subscribe(\n                    (searchStateChangeEvent: IPepSearchStateChangeEvent) => {\n                        this.searchState = searchStateChangeEvent.state;\n                        this.setSearchIsOpenAndSmallDevice();\n                    }\n                )\n                .unsubscribe();\n        }\n    }\n\n    private setSearchIsOpenAndSmallDevice(): void {\n        // check if search is open and the device size is small or extra small\n        this.searchIsOpenAndSmallDevice =\n            this.screenSize > PepScreenSizeType.SM &&\n            this.searchState === 'open';\n    }\n\n    private setFooterState() {\n        const newFooterState: PepFooterStateType =\n            this.showFooter && this.screenSize >= PepScreenSizeType.MD\n                ? 'visible'\n                : 'hidden';\n\n        if (this.footerState !== newFooterState) {\n            this.footerState = newFooterState;\n            this.cdRef.detectChanges();\n            this.footerStateChange.emit({ state: this.footerState });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../src/core/style/abstracts/variables';\n@import '../src/core/style/abstracts/mixins';\n\n.top-bar-container {\n    height: $top-bar-height;\n    position: fixed;\n    // width: 100%;\n    // width: calc(100% - ((#{$content-padding} * 2)));\n    z-index: $z-index-medium + 1;\n    width: calc(100% - (#{$settings-bar-width}));\n    top: $header-height;\n    \n    .title {\n        @include align-center();\n    }\n\n    .header-content {\n        height: $top-bar-height-with-no-top;\n        margin-top: $top-bar-spacing-top;\n        padding-right: $content-padding;\n        padding-left: $content-padding;\n\n        .main-layout {\n            width: inherit;\n            height: inherit;\n            padding: 0;\n\n            .content {\n                display: flex;\n                justify-content: space-between;\n                height: inherit;\n                \n                .left-container,\n                .right-container {\n                    height: inherit;\n                }\n            }\n        }\n\n    }\n\n    .footer {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: $footer-bar-height;\n\n        .content {\n            display: flex;\n            justify-content: space-between;\n            margin: 0 $double-content-margin;\n            padding-top: $footer-bar-spacing-top;\n        }\n\n        @media (max-width: $screen-max-size-xs) {\n            .content {\n                margin-right: $content-margin;\n                margin-left: $content-margin;\n            }\n        }\n    }\n\n    .left-container {\n        display: flex;\n    }\n\n    .right-container {\n        display: flex;\n        justify-content: flex-end;\n    }\n    \n    .flex-wrapper {\n        ::ng-deep > * {\n            display: flex;\n        }\n    }\n\n    .list-actions-wrapper {\n        ::ng-deep.pep-button {\n            @include pep-spacing-element(false);\n        }\n    }\n\n    &:not(.inline) {\n        ::ng-deep .pepperi-button,\n        ::ng-deep .pep-button,\n        .pepperi-button, .pep-button {\n            @include pep-top-bar-button();\n        }\n    }\n\n    &.inline {\n        position: inherit;\n        height: calc(#{$top-bar-spacing-bottom} + #{$top-bar-field-height});\n        width: 100%;\n        \n        .header-content {\n            margin-top: 0;\n            height: $top-bar-field-height;\n            padding: 0;\n            position: inherit;\n            width: inherit;\n\n            .main-layout {\n                width: inherit;\n                height: inherit;\n                padding: 0;\n\n                .content {\n                    height: inherit;\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService"
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "AfterContentInit"
            ],
            "templateData": "<div pepRtlDirection [hidden]=\"isHidden\" class=\"top-bar-container\" [ngClass]=\"{ inline: inline }\">\n    <div class=\"header-content\">\n        <div class=\"main-layout\">\n            <div class=\"content pep-border-bottom\">\n                <div class=\"left-container pep-spacing-element-negative\">\n                    <ng-container *ngTemplateOutlet=\"listActionsTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"titleTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"listChooserTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"leftContentTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"listTotalTemplate\"></ng-container>\n                </div>\n                <div class=\"pep-spacing-element\"></div>\n                <div class=\"right-container pep-spacing-element-negative\">\n                    <ng-container *ngTemplateOutlet=\"searchTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"sortingTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"viewsTemplate\"></ng-container>\n                    <ng-container *ngTemplateOutlet=\"rightContentTemplate\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div #footer *ngIf=\"!inline\" class=\"footer\" [hidden]=\"!showFooter\"\n        [style.height.rem]=\"customizationService.footerHeight\">\n        <div class=\"content pep-border-top\">\n            <div #footerStartContent class=\"left-container pep-spacing-element-negative flex-wrapper\">\n                <ng-content select=\"[footer-start-content]\"></ng-content>\n            </div>\n            <div #footerEndContent class=\"right-container pep-spacing-element-negative flex-wrapper\">\n                <ng-content select=\"[footer-end-content]\"></ng-content>\n            </div>\n        </div>\n        <ng-container *ngIf=\"showFooter && screenSize >= PepScreenSizeType.MD; then footerBlock; else noFooterBlock\">\n        </ng-container>\n        <ng-template #footerBlock>\n            {{ customizationService.showFooter() }}\n        </ng-template>\n        <ng-template #noFooterBlock>\n            {{ customizationService.hideFooter() }}\n        </ng-template>\n    </div>\n\n</div>\n\n<!-- Left side templates -->\n<ng-template #listActionsTemplate>\n    <div class=\"list-actions-wrapper\">\n        <ng-content *ngIf=\"!searchIsOpenAndSmallDevice\" select=\"pep-list-actions\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #titleTemplate>\n    <div *ngIf=\"title?.length > 0\" class=\"pep-spacing-element title\">\n        <span [title]=\"title\">{{ title }}</span>\n    </div>\n</ng-template>\n\n<ng-template #listChooserTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" [ngClass]=\"{ 'pep-spacing-element': listChooserComp }\">\n        <ng-content select=\"pep-list-chooser\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #leftContentTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" class=\"flex-wrapper\">\n        <ng-content select=\"[header-start-content]\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #listTotalTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" [ngClass]=\"{ 'pep-spacing-element': listTotalComp }\">\n        <ng-content select=\"pep-list-total\"></ng-content>\n    </div>\n</ng-template>\n\n<!-- Right side templates -->\n<ng-template #searchTemplate>\n    <div [ngClass]=\"{ 'pep-spacing-element': searchComp }\">\n        <ng-content select=\"pep-search\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #sortingTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" [ngClass]=\"{ 'pep-spacing-element': listSortingComp }\">\n        <ng-content select=\"pep-list-sorting\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #viewsTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" [ngClass]=\"{ 'pep-spacing-element': listViewsComp }\" class=\"flex-wrapper\">\n        <ng-content select=\"pep-list-views\"></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #rightContentTemplate>\n    <div *ngIf=\"!searchIsOpenAndSmallDevice\" class=\"flex-wrapper\">\n        <ng-content select=\"[header-end-content]\"></ng-content>\n    </div>\n</ng-template>"
        },
        {
            "name": "PepVirtualScrollComponent",
            "id": "component-PepVirtualScrollComponent-696b7c94f65d00c3e144844186456702",
            "file": "projects/ngx-lib/list/virtual-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-virtual-scroll",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                overflow: hidden;\n                position: relative;\n                display: block;\n                -webkit-overflow-scrolling: touch;\n            }\n            .scrollable-content {\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                //   z-index:495;\n            }\n            .total-padding {\n                width: 1px;\n                opacity: 0;\n            }\n\n            .rtl {\n                .scrollable-content {\n                    left: unset;\n                    right: 0;\n                }\n            }\n        "
            ],
            "template": "<div class=\"total-padding\" #shim></div>\n<div class=\"scrollable-content\" #content>\n    <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferAmount",
                    "defaultValue": "0",
                    "line": 89
                },
                {
                    "name": "childHeight",
                    "line": 86,
                    "type": "number"
                },
                {
                    "name": "childWidth",
                    "line": 83,
                    "type": "number"
                },
                {
                    "name": "doNotCheckAngularZone",
                    "defaultValue": "false",
                    "line": 95
                },
                {
                    "name": "isTable",
                    "defaultValue": "false",
                    "line": 115
                },
                {
                    "name": "parentScroll",
                    "line": 102,
                    "type": ""
                },
                {
                    "name": "scrollAnimationTime",
                    "defaultValue": "1500",
                    "line": 92
                },
                {
                    "name": "scrollbarHeight",
                    "line": 80,
                    "type": "number"
                },
                {
                    "name": "scrollbarWidth",
                    "line": 77,
                    "type": "number"
                },
                {
                    "name": "totalRows",
                    "defaultValue": "0",
                    "line": 74
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<IPepVirtualScrollChangeEvent>()",
                    "line": 122,
                    "type": "EventEmitter<IPepVirtualScrollChangeEvent>"
                },
                {
                    "name": "load",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 125,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_parentScroll",
                    "type": "Element | Window",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "containerElementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'container'"
                        }
                    ]
                },
                {
                    "name": "contentElementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'content', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "currentTween",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "disposeResizeHandler",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "disposeScrollHandler",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastScrollHeight",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "<p>Cache of the last scroll height to prevent setting CSS when not needed. </p>\n",
                    "line": 151,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "lastTopPadding",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "<p>Cache of the last top padding to prevent setting CSS when not needed. </p>\n",
                    "line": 154,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "previousEnd",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "previousStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "refreshHandler",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "shimElementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'shim', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "startupLoop",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "methodsClass": [
                {
                    "name": "addParentEventHandlers",
                    "args": [
                        {
                            "name": "parentScroll",
                            "type": "Element | Window"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentScroll",
                            "type": "Element | Window",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "{ itemCount: number; viewWidth: number; viewHeight: number; childWidth: any; childHeight: any; it...",
                    "typeParameters": [],
                    "line": 388,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "calculateItems",
                    "args": [
                        {
                            "name": "forceViewportUpdate",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 471,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "forceViewportUpdate",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "countItemsPerRow",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 359,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "detectIE",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 216
                },
                {
                    "name": "getElementsOffset",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 374,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "refresh",
                    "args": [
                        {
                            "name": "forceViewportUpdate",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "forceViewportUpdate",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeParentEventHandlers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollInto",
                    "args": [
                        {
                            "name": "index",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\n\nimport * as tween from '@tweenjs/tween.js';\n\ndeclare let _: any;\nexport interface IPepVirtualScrollChangeEvent {\n    start?: number;\n    end?: number;\n    addAtStart?: boolean;\n    calculatedChildHeight?: number;\n}\n\n@Component({\n    selector: 'pep-virtual-scroll',\n    template: `\n        <div class=\"total-padding\" #shim></div>\n        <div class=\"scrollable-content\" #content>\n            <ng-content></ng-content>\n        </div>\n    `,\n    host: {\n        '[style.overflow-y]': \"parentScroll ? 'hidden' : 'auto'\",\n    },\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                position: relative;\n                display: block;\n                -webkit-overflow-scrolling: touch;\n            }\n            .scrollable-content {\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                //   z-index:495;\n            }\n            .total-padding {\n                width: 1px;\n                opacity: 0;\n            }\n\n            .rtl {\n                .scrollable-content {\n                    left: unset;\n                    right: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class PepVirtualScrollComponent implements OnInit, OnChanges, OnDestroy {\n    //@Input()\n    //items: any[] = [];\n\n    @Input()\n    totalRows = 0;\n\n    @Input()\n    scrollbarWidth: number;\n\n    @Input()\n    scrollbarHeight: number;\n\n    @Input()\n    childWidth: number;\n\n    @Input()\n    childHeight: number;\n\n    @Input()\n    bufferAmount = 0;\n\n    @Input()\n    scrollAnimationTime = 1500;\n\n    @Input()\n    doNotCheckAngularZone = false;\n\n    private refreshHandler = () => {\n        this.refresh(true);\n    };\n    private _parentScroll: Element | Window;\n    @Input()\n    set parentScroll(element: Element | Window) {\n        if (this._parentScroll === element) {\n            return;\n        }\n        this._parentScroll = element;\n        this.addParentEventHandlers(this._parentScroll);\n    }\n\n    get parentScroll(): Element | Window {\n        return this._parentScroll;\n    }\n\n    @Input()\n    isTable = false;\n\n    //@Output()\n    //update: EventEmitter<any[]> = new EventEmitter<any[]>();\n    //viewPortItems: any[];\n\n    @Output()\n    change: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    @Output()\n    load: EventEmitter<void> = new EventEmitter<void>();\n\n    // @Output()\n    // start: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    // @Output()\n    // end: EventEmitter<IPepVirtualScrollChangeEvent> = new EventEmitter<IPepVirtualScrollChangeEvent>();\n\n    @ViewChild('content', { read: ElementRef })\n    contentElementRef: ElementRef;\n\n    @ViewChild('shim', { read: ElementRef })\n    shimElementRef: ElementRef;\n\n    @ContentChild('container')\n    containerElementRef: ElementRef;\n\n    previousStart: number;\n    previousEnd: number;\n    startupLoop = true;\n    currentTween: any;\n\n    private disposeScrollHandler: () => void | undefined;\n    private disposeResizeHandler: () => void | undefined;\n\n    /** Cache of the last scroll height to prevent setting CSS when not needed. */\n    private lastScrollHeight = -1;\n\n    /** Cache of the last top padding to prevent setting CSS when not needed. */\n    private lastTopPadding = -1;\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private zone: NgZone\n    ) {}\n\n    ngOnInit() {\n        this.scrollbarWidth = 0; // this.element.nativeElement.offsetWidth - this.element.nativeElement.clientWidth;\n        this.scrollbarHeight = 0; // this.element.nativeElement.offsetHeight - this.element.nativeElement.clientHeight;\n\n        if (!this.parentScroll) {\n            this.addParentEventHandlers(this.element.nativeElement);\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeParentEventHandlers();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.previousStart = undefined;\n        this.previousEnd = undefined;\n        const totalRows = (changes as any).totalRows || {};\n        if (\n            ((changes as any).totalRows !== undefined &&\n                totalRows.previousValue === undefined) ||\n            totalRows.previousValue !== undefined\n        ) {\n            this.startupLoop = true;\n        }\n\n        const ieVer = this.detectIE();\n        const headerRowHeight = '34px';\n\n        // Set padding top for the table view because the header row.\n        //this.renderer.setStyle(this.contentElementRef.nativeElement, 'padding-top', this.isTable ? headerRowHeight : '0');\n\n        if (!ieVer || ieVer >= 16) {\n            // not IE and version < 16\n            this.renderer.setStyle(this.element.nativeElement, 'top', '0');\n        } else {\n            this.renderer.setStyle(\n                this.element.nativeElement,\n                'top',\n                headerRowHeight\n            );\n        }\n\n        //Only for IE browsers\n        /*  let ua = navigator.userAgent;\n        if (this.isTable && (ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0 || ua.indexOf('Edge/') >= 0)) {\n            this.renderer.setStyle(this.element.nativeElement, 'top', headerRowHeight);\n        }\n        else {\n            this.renderer.setStyle(this.element.nativeElement, 'top', '0');\n        }*/\n\n        this.refresh();\n    }\n\n    detectIE(): any {\n        const ua = window.navigator.userAgent;\n\n        // Test values; Uncomment to check result …\n\n        // IE 10\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n        // IE 11\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n        // Edge 12 (Spartan)\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n        // Edge 13\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n        const msie = ua.indexOf('MSIE ');\n        if (msie > 0) {\n            // IE 10 or older => return version number\n            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        }\n\n        const trident = ua.indexOf('Trident/');\n        if (trident > 0) {\n            // IE 11 => return version number\n            const rv = ua.indexOf('rv:');\n            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        }\n\n        const edge = ua.indexOf('Edge/');\n        if (edge > 0) {\n            // Edge (IE 12+) => return version number\n            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n        }\n\n        // other browser\n        return false;\n    }\n\n    refresh(forceViewportUpdate = false) {\n        this.zone.runOutsideAngular(() => {\n            requestAnimationFrame(() =>\n                this.calculateItems(forceViewportUpdate)\n            );\n        });\n    }\n\n    scrollInto(index: any) {\n        const el: Element =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        // const offsetTop = this.getElementsOffset();\n        //let index: number = (this.items || []).indexOf(item);\n        if (index < 0 || index >= this.totalRows) return;\n\n        const d = this.calculateDimensions();\n        const scrollTop =\n            Math.floor(index / d.itemsPerRow) * d.childHeight -\n            d.childHeight * Math.min(index, this.bufferAmount);\n\n        let animationRequest;\n\n        if (this.currentTween !== undefined) {\n            this.currentTween.stop();\n        }\n\n        // totally disable animate\n        if (!this.scrollAnimationTime) {\n            el.scrollTop = scrollTop;\n            return;\n        }\n\n        this.currentTween = new tween.Tween({ scrollTop: el.scrollTop })\n            .to({ scrollTop }, this.scrollAnimationTime)\n            .easing(tween.Easing.Quadratic.Out)\n            .onUpdate((data) => {\n                if (isNaN(data.scrollTop)) {\n                    return;\n                }\n                this.renderer.setProperty(el, 'scrollTop', data.scrollTop);\n                this.refresh(true);\n            })\n            .onStop(() => {\n                cancelAnimationFrame(animationRequest);\n            })\n            .start();\n\n        const animate = (time?) => {\n            this.currentTween.update(time);\n            if (this.currentTween._object.scrollTop !== scrollTop) {\n                this.zone.runOutsideAngular(() => {\n                    animationRequest = requestAnimationFrame(animate);\n                });\n            }\n        };\n\n        animate();\n    }\n\n    private addParentEventHandlers(parentScroll: Element | Window) {\n        this.removeParentEventHandlers();\n        if (parentScroll) {\n            this.zone.runOutsideAngular(() => {\n                this.disposeScrollHandler = this.renderer.listen(\n                    parentScroll,\n                    'mousewheel',\n                    _.throttle(this.refreshHandler, 20, {\n                        leading: false,\n                        trailing: true,\n                    })\n                );\n                this.renderer.listen(\n                    parentScroll,\n                    'scroll',\n                    _.debounce(this.refreshHandler, 150)\n                );\n\n                //this.renderer.listen(parentScroll, 'scroll', _.debounce(_.throttle(this.refreshHandler, 150), 50));\n\n                if (parentScroll instanceof Window) {\n                    this.disposeScrollHandler = this.renderer.listen(\n                        'window',\n                        'resize',\n                        _.debounce(this.refreshHandler, 250)\n                    );\n                }\n            });\n        }\n    }\n\n    private removeParentEventHandlers() {\n        if (this.disposeScrollHandler) {\n            this.disposeScrollHandler();\n            this.disposeScrollHandler = undefined;\n        }\n        if (this.disposeResizeHandler) {\n            this.disposeResizeHandler();\n            this.disposeResizeHandler = undefined;\n        }\n    }\n\n    private countItemsPerRow() {\n        let offsetTop;\n        let itemsPerRow;\n        const children = this.contentElementRef.nativeElement.children;\n        for (itemsPerRow = 0; itemsPerRow < children.length; itemsPerRow++) {\n            if (\n                offsetTop != undefined &&\n                offsetTop !== children[itemsPerRow].offsetTop\n            )\n                break;\n            offsetTop = children[itemsPerRow].offsetTop;\n        }\n        return itemsPerRow;\n    }\n\n    private getElementsOffset(): number {\n        let offsetTop = 0;\n        if (\n            this.containerElementRef &&\n            this.containerElementRef.nativeElement\n        ) {\n            offsetTop += this.containerElementRef.nativeElement.offsetTop;\n        }\n        if (this.parentScroll) {\n            offsetTop += this.element.nativeElement.offsetTop;\n        }\n        return offsetTop;\n    }\n\n    private calculateDimensions() {\n        const el: Element =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        const itemCount = this.totalRows;\n        const viewWidth = el.clientWidth - this.scrollbarWidth;\n        const viewHeight = el.clientHeight - this.scrollbarHeight;\n\n        let contentDimensions;\n        if (this.childWidth == undefined || this.childHeight == undefined) {\n            let content = this.contentElementRef.nativeElement;\n            if (\n                this.containerElementRef &&\n                this.containerElementRef.nativeElement\n            ) {\n                content = this.containerElementRef.nativeElement;\n            }\n            contentDimensions = content.children[0]\n                ? content.children[0].getBoundingClientRect()\n                : {\n                      width: viewWidth,\n                      height: viewHeight,\n                  };\n        }\n\n        const childWidth = this.childWidth || contentDimensions.width;\n        const childHeight = this.childHeight || contentDimensions.height;\n\n        let itemsPerRow = Math.max(1, this.countItemsPerRow());\n        const itemsPerRowByCalc = Math.max(\n            1,\n            Math.floor(viewWidth / childWidth)\n        );\n        const itemsPerCol = Math.max(1, Math.floor(viewHeight / childHeight));\n        const elScrollTop =\n            this.parentScroll instanceof Window\n                ? window.pageYOffset ||\n                  document.documentElement.scrollTop ||\n                  document.body.scrollTop ||\n                  0\n                : el.scrollTop;\n        const scrollTop = Math.max(0, elScrollTop);\n\n        const scrollHeight =\n            childHeight * Math.floor(itemCount / itemsPerRow) +\n            (itemCount % itemsPerRow != 0 ? childHeight : 0);\n\n        const ua = navigator.userAgent;\n        /*if (this.isTable && (ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0 || ua.indexOf('Edge/') >= 0)) {\n            scrollHeight += 34;\n        }*/\n        if (\n            itemsPerCol === 1 &&\n            Math.floor((scrollTop / scrollHeight) * itemCount) +\n                itemsPerRowByCalc >=\n                itemCount\n        ) {\n            itemsPerRow = itemsPerRowByCalc;\n        }\n\n        if (scrollHeight !== this.lastScrollHeight) {\n            this.renderer.setStyle(\n                this.shimElementRef.nativeElement,\n                'height',\n                `${scrollHeight}px`\n            );\n            this.lastScrollHeight = scrollHeight;\n        }\n\n        return {\n            itemCount: itemCount,\n            viewWidth: viewWidth,\n            viewHeight: viewHeight,\n            childWidth: childWidth,\n            childHeight: childHeight,\n            itemsPerRow: itemsPerRow,\n            itemsPerCol: itemsPerCol,\n            itemsPerRowByCalc: itemsPerRowByCalc,\n            scrollHeight,\n        };\n    }\n\n    private calculateItems(forceViewportUpdate = false) {\n        if (!this.doNotCheckAngularZone) {\n            NgZone.assertNotInAngularZone();\n        }\n\n        const el =\n            this.parentScroll instanceof Window\n                ? document.body\n                : this.parentScroll || this.element.nativeElement;\n        const d = this.calculateDimensions();\n\n        //let items = this.items || [];\n        const offsetTop = this.getElementsOffset();\n        let elScrollTop =\n            this.parentScroll instanceof Window\n                ? window.pageYOffset ||\n                  document.documentElement.scrollTop ||\n                  document.body.scrollTop ||\n                  0\n                : el.scrollTop;\n\n        if (elScrollTop > d.scrollHeight) {\n            elScrollTop = d.scrollHeight + offsetTop;\n        }\n\n        const scrollTop = Math.max(0, elScrollTop - offsetTop);\n        const indexByScrollTop =\n            ((scrollTop / d.scrollHeight) * d.itemCount) / d.itemsPerRow;\n        let end = Math.min(\n            d.itemCount,\n            Math.ceil(indexByScrollTop) * d.itemsPerRow +\n                d.itemsPerRow * (d.itemsPerCol + 1)\n        );\n\n        let maxStartEnd = end;\n        const modEnd = end % d.itemsPerRow;\n        if (modEnd) {\n            maxStartEnd = end + d.itemsPerRow - modEnd;\n        }\n        const maxStart = Math.max(\n            0,\n            maxStartEnd - d.itemsPerCol * d.itemsPerRow - d.itemsPerRow\n        );\n        let start = Math.min(\n            maxStart,\n            Math.floor(indexByScrollTop) * d.itemsPerRow\n        );\n\n        const startRow = Math.ceil(start / d.itemsPerRow);\n\n        const topPadding =\n            this.totalRows === 0\n                ? 0\n                : d.childHeight * startRow -\n                  d.childHeight * Math.min(startRow, this.bufferAmount);\n\n        if (topPadding !== this.lastTopPadding) {\n            this.renderer.setStyle(\n                this.contentElementRef.nativeElement,\n                'transform',\n                `translateY(${topPadding}px)`\n            );\n            this.renderer.setStyle(\n                this.contentElementRef.nativeElement,\n                'webkitTransform',\n                `translateY(${topPadding}px)`\n            );\n            this.lastTopPadding = topPadding;\n        }\n\n        const buffer = this.bufferAmount * d.itemsPerRow;\n        start = !isNaN(start) ? start : -1;\n        end = !isNaN(end) ? end : -1;\n        start -= buffer;\n        start = Math.max(0, start);\n        end += buffer;\n        end = Math.min(this.totalRows, end);\n\n        if (\n            start !== this.previousStart ||\n            end !== this.previousEnd ||\n            forceViewportUpdate === true\n        ) {\n            this.zone.run(() => {\n                // update the scroll list\n                end = end >= 0 ? end : 0; // To prevent from accidentally selecting the entire array with a negative 1 (-1) in the end position.\n\n                //this.viewPortItems = this.items.slice(start, end);\n                //this.update.emit(this.viewPortItems);\n\n                // emit 'start' event\n                //if (start !== this.previousStart && this.startupLoop === false) {\n                //    this.start.emit({ start, end });\n                //}\n\n                // emit 'end' event\n                //if (end !== this.previousEnd && this.startupLoop === false) {\n                //    this.end.emit({ start, end });\n                //}\n\n                // To know if to add at the start of the list or at the end.\n                const addAtStart = this.previousEnd >= end;\n                this.previousStart = start;\n                this.previousEnd = end;\n\n                if (this.startupLoop === true) {\n                    this.refresh();\n                } else {\n                    const calculatedChildHeight = d.childHeight;\n                    this.change.emit({\n                        start,\n                        end,\n                        addAtStart,\n                        calculatedChildHeight,\n                    });\n                }\n            });\n        } else if (this.startupLoop === true) {\n            this.startupLoop = false;\n            // Added to know when the scroll is ready (UI elements are displayed already).\n            this.load.emit();\n            this.refresh();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                overflow: hidden;\n                position: relative;\n                display: block;\n                -webkit-overflow-scrolling: touch;\n            }\n            .scrollable-content {\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                //   z-index:495;\n            }\n            .total-padding {\n                width: 1px;\n                opacity: 0;\n            }\n\n            .rtl {\n                .scrollable-content {\n                    left: unset;\n                    right: 0;\n                }\n            }\n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 154,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "parentScroll": {
                    "name": "parentScroll",
                    "setSignature": {
                        "name": "parentScroll",
                        "type": "void",
                        "args": [
                            {
                                "name": "element",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 102,
                        "jsdoctags": [
                            {
                                "name": "element",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "parentScroll",
                        "type": "",
                        "returnType": "Element | Window",
                        "line": 110
                    }
                }
            }
        },
        {
            "name": "TopBarExampleComponent",
            "id": "component-TopBarExampleComponent-b1d276baabd686d1cc00578b1b66925f",
            "file": "projects/web-app/src/app/top-bar-example/top-bar-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./top-bar-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groupButtons",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "layoutService",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuItems",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "PepScreenSizeType",
                    "defaultValue": "PepScreenSizeType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "screenSize",
                    "type": "PepScreenSizeType",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchAutoCompleteValues",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "title",
                    "defaultValue": "'client-side'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getMenuItems",
                    "args": [
                        {
                            "name": "withChildren",
                            "type": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<PepMenuItem>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "withChildren",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "menuClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onGroupButtonClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchAutocompleteChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChanged",
                    "args": [
                        {
                            "name": "search",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchStateChanged",
                    "args": [
                        {
                            "name": "searchStateChangeEvent",
                            "type": "IPepSearchStateChangeEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "searchStateChangeEvent",
                            "type": "IPepSearchStateChangeEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';\nimport {\n    IPepButtonClickEvent,\n    PepButton,\n} from '@pepperi-addons/ngx-lib/button';\nimport { pepIconSystemBin } from '@pepperi-addons/ngx-lib/icon';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepSearchStateChangeEvent } from '@pepperi-addons/ngx-lib/search';\n\n@Component({\n    templateUrl: './top-bar-example.component.html',\n    styleUrls: ['./top-bar-example.component.scss'],\n})\nexport class TopBarExampleComponent implements OnInit {\n    title = 'client-side';\n    groupButtons: Array<PepButton>;\n\n    menuItems: Array<PepMenuItem>;\n\n    PepScreenSizeType = PepScreenSizeType;\n    screenSize: PepScreenSizeType;\n\n    searchString = '';\n    searchAutoCompleteValues = [];\n\n    constructor(public layoutService: PepLayoutService) {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            this.screenSize = size;\n        });\n\n        this.groupButtons = [\n            {\n                key: 'action',\n                value: 'test for check the size of the button',\n                callback: (event: IPepButtonClickEvent) =>\n                    this.onGroupButtonClicked(event),\n            },\n            {\n                key: 'del',\n                class: 'caution',\n                callback: (event: IPepButtonClickEvent) =>\n                    this.onGroupButtonClicked(event),\n                icon: pepIconSystemBin.name,\n            },\n        ];\n    }\n\n    ngOnInit(): void {\n        this.loadMenuItems();\n    }\n\n    getMenuItems(withChildren = true, index = 0): Array<PepMenuItem> {\n        let menuItems: Array<PepMenuItem>;\n\n        index++;\n\n        if (withChildren) {\n            menuItems = [\n                {\n                    key: 'test1',\n                    text: 'test 1',\n                    iconName: pepIconSystemBin.name,\n                },\n                {\n                    key: 'test2',\n                    text: 'test 2',\n                    iconName: pepIconSystemBin.name,\n                },\n                { key: 'sep', type: 'splitter' },\n                {\n                    key: 'test3',\n                    text: 'test 3',\n                    iconName: pepIconSystemBin.name,\n                    children: this.getMenuItems(index <= 3, index),\n                },\n            ];\n        } else {\n            menuItems = [\n                { key: 'test1', text: 'test 1' },\n                { key: 'test2', text: 'test 2', disabled: true },\n                { key: 'sep', type: 'splitter' },\n                { key: 'test3', text: 'test 3' },\n            ];\n        }\n\n        return menuItems;\n    }\n\n    private loadMenuItems(): void {\n        this.menuItems = this.getMenuItems();\n    }\n\n    toggleMenu(): void {\n        this.menuItems = this.menuItems === null ? this.getMenuItems() : null;\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    menuClicked(event): void {\n        alert('menu clicked');\n    }\n\n    onGroupButtonClicked(event: IPepButtonClickEvent): void {\n        alert(`${event.source.key}: was clicked`);\n    }\n\n    onSearchStateChanged(searchStateChangeEvent: IPepSearchStateChangeEvent) {\n        // debugger;\n    }\n\n    onSearchChanged(search: any) {\n        console.log(search);\n        // debugger;\n    }\n\n    onSearchAutocompleteChanged(value) {\n        console.log(value);\n        // debugger;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ui-test-container {\n    //   margin: 0 2rem;\n\n    .main-content{\n    //   padding-top: .5rem;\n\n        .content {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr 1fr;\n            gap: 1px 60px;\n            grid-template-areas: \"child1 child2 child3 child4\";\n            .child1 { grid-area: child1; }\n\n            .child2 { grid-area: child2; }\n\n            .child3 { grid-area: child3; }\n\n            .child4 { grid-area: child4; }\n        }\n\n    }\n\n    .header-content{\n        .content{\n        //   padding-bottom: 1rem;\n        }\n    }\n}\n\n@media screen and (max-width: 767px) {\n    .ui-test-container{\n        .main-content {\n            .content {\n                display: block;\n            }\n        }\n    }\n}\n\n\n",
                    "styleUrl": "./top-bar-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"addon-page-container ui-test-container\">\n    <pep-top-bar [title]=\"'Top bar title'\">\n        <div header-start-content>\n\n        </div>\n        <div header-end-content>\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n        </div>\n        <pep-search [value]=\"searchString\" (search)=\"onSearchChanged($event)\" [triggerOn]=\"'click'\"\n            (valueChange)=\"onSearchAutocompleteChanged($event)\" (stateChange)=\"onSearchStateChanged($event)\">\n        </pep-search>\n    </pep-top-bar>\n    <div class=\"main-content \">\n        <div class=\"content spacing-top\">\n            <div class=\"child1 child-container\">\n                <pep-group-buttons [buttons]=\"groupButtons\" [buttonsClass]=\"'md regular'\" [buttonsDisabled]=\"false\"\n                    [viewType]=\"'split'\">\n                </pep-group-buttons>\n            </div>\n\n            <div class=\"child2 child-container\">\n                <!-- Icons Examples -->\n                <mat-icon>\n                    <pep-icon name=\"system_spinner\" [spin]=\"true\"></pep-icon>\n                </mat-icon>\n                <mat-icon>\n                    <pep-icon name=\"system_bolt\"></pep-icon>\n                </mat-icon>\n                <mat-icon>\n                    <pep-icon name=\"no_image\"></pep-icon>\n                </mat-icon>\n            </div>\n\n            <div class=\"child3 child-container\">\n\n            </div>\n\n            <div class=\"child4 child-container\">\n                <!-- Color Picker Example -->\n                <pep-color [key]=\"'color1'\" [label]=\"'Pepperi Color Picker'\" [value]=\"'hsl(77, 87%, 42%)'\"\n                    [xAlignment]=\"'right'\" [showAAComplient]=\"true\" [type]=\"'any'\">\n                </pep-color>\n            </div>\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepAttachmentModule"
                        },
                        {
                            "name": "PepCheckboxModule"
                        },
                        {
                            "name": "PepColorModule"
                        },
                        {
                            "name": "PepDateModule"
                        },
                        {
                            "name": "PepGroupButtonsModule"
                        },
                        {
                            "name": "PepImageModule"
                        },
                        {
                            "name": "PepImagesFilmstripModule"
                        },
                        {
                            "name": "PepMenuModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepQuantitySelectorModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepSeparatorModule"
                        },
                        {
                            "name": "PepSignatureModule"
                        },
                        {
                            "name": "PepSizeDetectorModule"
                        },
                        {
                            "name": "PepTextareaModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CarouselExampleComponent"
                        },
                        {
                            "name": "FormFieldsExampleComponent"
                        },
                        {
                            "name": "InlineListExampleComponent"
                        },
                        {
                            "name": "ListExampleComponent"
                        },
                        {
                            "name": "TopBarExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PepUIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepAddressModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepAddressComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepAddressComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepAttachmentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepAttachmentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepFilesUploaderModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepAttachmentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepBreadCrumbsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepBreadCrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepBreadCrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepCarouselModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepCarouselComponent"
                        },
                        {
                            "name": "PepCarouselItemDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepCarouselComponent"
                        },
                        {
                            "name": "PepCarouselItemDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepCheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepColorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepColorComponent"
                        },
                        {
                            "name": "PepColorPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepColorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepDateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepDateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepDateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepDefaultDialogComponent"
                        },
                        {
                            "name": "PepDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFieldTitleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepFieldTitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepFieldTitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFilesUploaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepFilesUploaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepFilesUploaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepFieldGeneratorComponent"
                        },
                        {
                            "name": "PepFormComponent"
                        },
                        {
                            "name": "PepIndicatorsComponent"
                        },
                        {
                            "name": "PepInternalButtonComponent"
                        },
                        {
                            "name": "PepInternalListComponent"
                        },
                        {
                            "name": "PepInternalMenuComponent"
                        },
                        {
                            "name": "PepInternalPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepAddressModule"
                        },
                        {
                            "name": "PepAttachmentModule"
                        },
                        {
                            "name": "PepButtonModule"
                        },
                        {
                            "name": "PepCheckboxModule"
                        },
                        {
                            "name": "PepDateModule"
                        },
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepGroupButtonsModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepImageModule"
                        },
                        {
                            "name": "PepImagesFilmstripModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepQuantitySelectorModule"
                        },
                        {
                            "name": "PepRichHtmlTextareaModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepSeparatorModule"
                        },
                        {
                            "name": "PepSignatureModule"
                        },
                        {
                            "name": "PepTextareaModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGroupButtonsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepGroupButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepGroupButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepIconModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepImageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepFilesUploaderModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepImagesFilmstripModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepImagesFilmstripComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepImagesFilmstripComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepListActionsComponent"
                        },
                        {
                            "name": "PepListCarouselComponent"
                        },
                        {
                            "name": "PepListChooserComponent"
                        },
                        {
                            "name": "PepListComponent"
                        },
                        {
                            "name": "PepListPagerComponent"
                        },
                        {
                            "name": "PepListSortingComponent"
                        },
                        {
                            "name": "PepListTotalComponent"
                        },
                        {
                            "name": "PepListViewsComponent"
                        },
                        {
                            "name": "PepVirtualScrollComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepBreadCrumbsModule"
                        },
                        {
                            "name": "PepButtonModule"
                        },
                        {
                            "name": "PepCarouselModule"
                        },
                        {
                            "name": "PepFormModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepMenuModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepListActionsComponent"
                        },
                        {
                            "name": "PepListCarouselComponent"
                        },
                        {
                            "name": "PepListChooserComponent"
                        },
                        {
                            "name": "PepListComponent"
                        },
                        {
                            "name": "PepListPagerComponent"
                        },
                        {
                            "name": "PepListSortingComponent"
                        },
                        {
                            "name": "PepListTotalComponent"
                        },
                        {
                            "name": "PepListViewsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepMenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepMenuComponent"
                        },
                        {
                            "name": "PepMenuItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepNgxLibModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepAttachDirective"
                        },
                        {
                            "name": "PepButtonBlurDirective"
                        },
                        {
                            "name": "PepButtonLoaderDirective"
                        },
                        {
                            "name": "PepCapitalizePipe"
                        },
                        {
                            "name": "PepClipboardDirective"
                        },
                        {
                            "name": "PepDataQaDirective"
                        },
                        {
                            "name": "PepDateFormatterPipe"
                        },
                        {
                            "name": "PepDateStringFormatterPipe"
                        },
                        {
                            "name": "PepEncodePipe"
                        },
                        {
                            "name": "PepEscapePipe"
                        },
                        {
                            "name": "PepInputAutoWidthDirective"
                        },
                        {
                            "name": "PepMenuBlurDirective"
                        },
                        {
                            "name": "PepPreventMultiClickDirective"
                        },
                        {
                            "name": "PepReplaceLineBreaksPipe"
                        },
                        {
                            "name": "PepRtlClassDirective"
                        },
                        {
                            "name": "PepRtlDirectionDirective"
                        },
                        {
                            "name": "PepSafeHtmlPipe"
                        },
                        {
                            "name": "PepSafePipe"
                        },
                        {
                            "name": "PepSplitUppercasePipe"
                        },
                        {
                            "name": "PepTargetDirective"
                        },
                        {
                            "name": "PepToNumberPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepAttachDirective"
                        },
                        {
                            "name": "PepButtonBlurDirective"
                        },
                        {
                            "name": "PepButtonLoaderDirective"
                        },
                        {
                            "name": "PepCapitalizePipe"
                        },
                        {
                            "name": "PepClipboardDirective"
                        },
                        {
                            "name": "PepDataQaDirective"
                        },
                        {
                            "name": "PepDateFormatterPipe"
                        },
                        {
                            "name": "PepDateStringFormatterPipe"
                        },
                        {
                            "name": "PepEncodePipe"
                        },
                        {
                            "name": "PepEscapePipe"
                        },
                        {
                            "name": "PepInputAutoWidthDirective"
                        },
                        {
                            "name": "PepMenuBlurDirective"
                        },
                        {
                            "name": "PepPreventMultiClickDirective"
                        },
                        {
                            "name": "PepReplaceLineBreaksPipe"
                        },
                        {
                            "name": "PepRtlClassDirective"
                        },
                        {
                            "name": "PepRtlDirectionDirective"
                        },
                        {
                            "name": "PepSafeHtmlPipe"
                        },
                        {
                            "name": "PepSafePipe"
                        },
                        {
                            "name": "PepSplitUppercasePipe"
                        },
                        {
                            "name": "PepTargetDirective"
                        },
                        {
                            "name": "PepToNumberPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepQuantitySelectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepQuantitySelectorComponent"
                        },
                        {
                            "name": "PepQuantitySelectorNumberPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepQuantitySelectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepRichHtmlTextareaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepRichHtmlTextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepRichHtmlTextareaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSearchModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSeparatorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSeparatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSeparatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSideBarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSideBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSideBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSignatureModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSignatureComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepFilesUploaderModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSignatureComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSizeDetectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepSizeDetectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepNgxLibModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSizeDetectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepSmartFiltersModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepBooleanFilterComponent"
                        },
                        {
                            "name": "PepDateFilterComponent"
                        },
                        {
                            "name": "PepFilterActionsComponent"
                        },
                        {
                            "name": "PepMultiSelectFilterComponent"
                        },
                        {
                            "name": "PepNumberFilterComponent"
                        },
                        {
                            "name": "PepSmartFiltersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepCheckboxModule"
                        },
                        {
                            "name": "PepDateModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepSearchModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepSmartFiltersComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepTextareaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepTextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepDialogModule"
                        },
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepTextareaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepTextboxIconModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepTextboxIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepTextboxIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepTextboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepTextboxComponent"
                        },
                        {
                            "name": "PepTextboxValidationDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFieldTitleModule"
                        },
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepTextboxIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepTextboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepTopBarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepTopBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepIconModule"
                        },
                        {
                            "name": "PepMenuModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepSearchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepTopBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepUIModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepAttachmentModule"
                        },
                        {
                            "name": "PepCheckboxModule"
                        },
                        {
                            "name": "PepColorModule"
                        },
                        {
                            "name": "PepDateModule"
                        },
                        {
                            "name": "PepGroupButtonsModule"
                        },
                        {
                            "name": "PepImageModule"
                        },
                        {
                            "name": "PepImagesFilmstripModule"
                        },
                        {
                            "name": "PepMenuModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepQuantitySelectorModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepSeparatorModule"
                        },
                        {
                            "name": "PepSignatureModule"
                        },
                        {
                            "name": "PepSizeDetectorModule"
                        },
                        {
                            "name": "PepTextareaModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepAttachmentModule"
                        },
                        {
                            "name": "PepCheckboxModule"
                        },
                        {
                            "name": "PepColorModule"
                        },
                        {
                            "name": "PepDateModule"
                        },
                        {
                            "name": "PepGroupButtonsModule"
                        },
                        {
                            "name": "PepImageModule"
                        },
                        {
                            "name": "PepImagesFilmstripModule"
                        },
                        {
                            "name": "PepMenuModule"
                        },
                        {
                            "name": "PepNgxLibModule"
                        },
                        {
                            "name": "PepQuantitySelectorModule"
                        },
                        {
                            "name": "PepSelectModule"
                        },
                        {
                            "name": "PepSeparatorModule"
                        },
                        {
                            "name": "PepSignatureModule"
                        },
                        {
                            "name": "PepSizeDetectorModule"
                        },
                        {
                            "name": "PepTextareaModule"
                        },
                        {
                            "name": "PepTextboxModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/list/virtual-scroll.component.ts",
                "type": "any"
            },
            {
                "name": "_BIDI_RTL_LANGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/core/layout/layout.service.ts",
                "type": "[]",
                "defaultValue": "[\n    'ae' /* Avestan */,\n    'ar' /* 'العربية', Arabic */,\n    'arc' /* Aramaic */,\n    'bcc' /* 'بلوچی مکرانی', Southern Balochi */,\n    'bqi' /* 'بختياري', Bakthiari */,\n    'ckb' /* 'Soranî / کوردی', Sorani */,\n    'dv' /* Dhivehi */,\n    'fa' /* 'فارسی', Persian */,\n    'glk' /* 'گیلکی', Gilaki */,\n    'he' /* 'עברית', Hebrew */,\n    'ku' /* 'Kurdî / كوردی', Kurdish */,\n    'mzn' /* 'مازِرونی', Mazanderani */,\n    'nqo' /* N'Ko */,\n    'pnb' /* 'پنجابی', Western Punjabi */,\n    'ps' /* 'پښتو', Pashto, */,\n    'sd' /* 'سنڌي', Sindhi */,\n    'ug' /* 'Uyghurche / ئۇيغۇرچە', Uyghur */,\n    'ur' /* 'اردو', Urdu */,\n    'yi' /* 'ייִדיש', Yiddish */,\n]"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "clipboardList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "[]",
                "defaultValue": "[PepClipboardDirective]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-elements/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'dateRange',\n    name: 'DATE_RANGE',\n    short: 'Range',\n    componentType: ['date'],\n}"
            },
            {
                "name": "Days",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperatorUnit",
                "defaultValue": "{\n    id: 'days',\n    name: 'DAYS',\n    componentType: ['date'],\n}"
            },
            {
                "name": "DEFAULT_HORIZONTAL_ALIGNMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "PepHorizontalAlignment",
                "defaultValue": "'left'",
                "description": "<p>Default horizontal alignment. </p>\n"
            },
            {
                "name": "DEFAULT_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/list/list.model.ts",
                "type": "number",
                "defaultValue": "50"
            },
            {
                "name": "DEFAULT_VERTICAL_ALIGNMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "PepVerticalAlignment",
                "defaultValue": "'top'",
                "description": "<p>Default horizontal alignment. </p>\n"
            },
            {
                "name": "document",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
                "type": "any"
            },
            {
                "name": "DueIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'dueIn',\n    name: 'DUE_IN',\n    short: 'Due in',\n    componentType: ['date'],\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n    production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n    production: false,\n}"
            },
            {
                "name": "Equals",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'eq',\n    name: 'EQUAL',\n    short: '=',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n}"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/app/inline-list-example/fake-data.ts",
                "type": "object",
                "defaultValue": "{\n    Addons: [\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        }\n    ],\n}"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/app/list-example/fake-data.ts",
                "type": "object",
                "defaultValue": "{\n    Addons: [\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        }\n    ],\n}"
            },
            {
                "name": "FLOAT_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "type": "",
                "defaultValue": "/^\\d+(\\.\\d+)?$/"
            },
            {
                "name": "GreaterThan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'gt',\n    name: 'GREATER_THEN',\n    short: '>',\n    componentType: ['number'],\n}"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/core/http/interceptors/index.ts",
                "type": "[]",
                "defaultValue": "[\n    // { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: CacheInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: ConvertInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: PepErrorInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: FakeInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: HeaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: PepLoaderInterceptor, multi: true },\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: PepProfilerInterceptor,\n        multi: true,\n    },\n]"
            },
            {
                "name": "In",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'in',\n    name: 'IN',\n    short: 'In',\n    componentType: ['multi-select'],\n}"
            },
            {
                "name": "InTheLast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'inTheLast',\n    name: 'IN_THE_LAST',\n    short: 'In the last',\n    componentType: ['date'],\n}"
            },
            {
                "name": "IsEmpty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'isEmpty',\n    name: 'IS_EMPTY',\n    short: 'Is empty',\n    componentType: ['date'],\n}"
            },
            {
                "name": "IsNotEmpty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'isNotEmpty',\n    name: 'IS_NOT_EMPTY',\n    short: 'Is not empty',\n    componentType: ['date'],\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "layoutList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "[]",
                "defaultValue": "[PepRtlClassDirective, PepRtlDirectionDirective]"
            },
            {
                "name": "LessThan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'lt',\n    name: 'LESS_THEN',\n    short: '<',\n    componentType: ['number'],\n}"
            },
            {
                "name": "listComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/list/list.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepListComponent,\n    PepListActionsComponent,\n    PepListCarouselComponent,\n    PepListChooserComponent,\n    PepListPagerComponent,\n    PepListSortingComponent,\n    PepListTotalComponent,\n    PepListViewsComponent,\n]"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "matComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/app/modules/material.module.ts",
                "type": "[]",
                "defaultValue": "[\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDatetimepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatNativeDatetimeModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    MatFormFieldModule,\n]"
            },
            {
                "name": "Months",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperatorUnit",
                "defaultValue": "{\n    id: 'months',\n    name: 'MONTHS',\n    componentType: ['date'],\n}"
            },
            {
                "name": "NotDueIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'notDueIn',\n    name: 'NOT_DUE_IN',\n    short: 'Not due in',\n    componentType: ['date'],\n}"
            },
            {
                "name": "NotEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'neq',\n    name: 'NOT_EQUAL',\n    short: '<>',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n}"
            },
            {
                "name": "NotInTheLast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'notInTheLast',\n    name: 'NOT_IN_THE_LAST',\n    short: 'Not in the last',\n    componentType: ['date'],\n}"
            },
            {
                "name": "NumberRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'numberRange',\n    name: 'NUMBER_RANGE',\n    short: 'Range',\n    componentType: ['number'],\n}"
            },
            {
                "name": "On",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'on',\n    name: 'ON',\n    short: 'On',\n    componentType: ['date'],\n}"
            },
            {
                "name": "pepComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/form/form.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepAddressModule,\n    PepAttachmentModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepDateModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSignatureModule,\n    PepTextareaModule,\n    PepTextboxModule,\n]"
            },
            {
                "name": "pepIconArrowBack",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_back',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.713 4.309c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0zm-7 0c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_down',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.8 9.287l5.454 3.916c.412.382 1.08.382 1.492 0L18.2 9.287a1.113 1.113 0 011.491 0 .93.93 0 010 1.384l-6.2 5.756c-.823.764-2.159.764-2.982 0l-6.2-5.756a.93.93 0 010-1.384 1.113 1.113 0 011.491 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowDownAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_down_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.933 20a2 2 0 01-.059-.004L12 20a2.026 2.026 0 01-.527-.07l-.029-.009a1.476 1.476 0 01-.121-.039l-.01-.004a2.006 2.006 0 01-.405-.202l-.017-.012-6-4a2 2 0 012.218-3.328L10 14.263 10 6a2 2 0 114 0v8.263l2.89-1.927a2 2 0 012.22 3.328l-6 4-.012.008c-.124.081-.257.15-.398.202l-.012.004-.11.037a1.984 1.984 0 01-.025.008l-.011.002a1.315 1.315 0 01-.124.031l-.026.005a1.194 1.194 0 01-.131.022c-.007 0-.014.002-.02.003l-.02.002a1.995 1.995 0 01-.053.005l-.044.003a1.789 1.789 0 01-.057.003z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowEither",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_either',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.35 14.215l4.09 2.937a.835.835 0 001.12 0l4.09-2.937a.835.835 0 011.118 0 .698.698 0 010 1.038l-4.65 4.317a1.67 1.67 0 01-2.237 0l-4.65-4.317a.698.698 0 010-1.038.835.835 0 011.12 0zM13.12 4.43l4.65 4.317a.698.698 0 010 1.038.835.835 0 01-1.12 0l-4.09-2.937a.835.835 0 00-1.118 0L7.35 9.785a.835.835 0 01-1.12 0 .698.698 0 010-1.038l4.65-4.317a1.67 1.67 0 012.238 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_left',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.713 5.8l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0c.383.412.383 1.08 0 1.491z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowLeftAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_left_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 11.933a2 2 0 01.004-.059L4 12a2.026 2.026 0 01.07-.527l.009-.029a1.476 1.476 0 01.039-.121l.004-.01a2.006 2.006 0 01.202-.405l.012-.017 4-6a2 2 0 013.328 2.218L9.737 10 18 10a2 2 0 110 4H9.737l1.927 2.89a2 2 0 01-3.328 2.22l-4-6-.008-.012a1.993 1.993 0 01-.202-.398l-.004-.012-.037-.11a1.984 1.984 0 01-.008-.025l-.002-.011a1.315 1.315 0 01-.031-.124l-.005-.026a1.194 1.194 0 01-.022-.131c0-.007-.002-.014-.003-.02l-.002-.02a1.995 1.995 0 01-.005-.053l-.003-.044A1.789 1.789 0 014 12.067z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_right',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.287 4.309a.93.93 0 011.384 0l5.756 6.2c.764.823.764 2.159 0 2.982l-5.756 6.2a.93.93 0 01-1.384 0 1.113 1.113 0 010-1.491l3.916-5.454a1.113 1.113 0 000-1.492L9.287 5.8a1.113 1.113 0 010-1.491z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowRightAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_right_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20 11.933a2 2 0 00-.004-.059L20 12a2.026 2.026 0 00-.07-.527l-.009-.029a1.476 1.476 0 00-.039-.121l-.004-.01a2.006 2.006 0 00-.202-.405l-.012-.017-4-6a2 2 0 00-3.328 2.218L14.263 10 6 10a2 2 0 100 4h8.263l-1.927 2.89a2 2 0 003.328 2.22l4-6 .008-.012c.081-.124.15-.257.202-.398l.004-.012.037-.11.008-.025.002-.011a1.315 1.315 0 00.031-.124l.005-.026a1.194 1.194 0 00.022-.131c0-.007.002-.014.003-.02l.002-.02.005-.053.003-.044a1.789 1.789 0 00.003-.057z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowTwoWaysHorL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_two_ways_hor_l',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.232 12.303a1.036 1.036 0 111.465 1.465L7.464 15H19a1 1 0 010 2H7.464l1.233 1.232a1.036 1.036 0 11-1.465 1.465l-2.929-2.93a1.032 1.032 0 01-.301-.67L4 16.019V16l.001-.019v-.078c.013-.203.085-.404.216-.573l.086-.098zm9.536-8l2.929 2.93c.186.186.287.426.301.67v.064L20 8v.034l-.002.063a1.032 1.032 0 01-.301.67l-2.93 2.93a1.036 1.036 0 11-1.464-1.465L16.536 9H5a1 1 0 01-.993-.883L4 8a1 1 0 011-1h11.536l-1.233-1.232a1.036 1.036 0 111.465-1.465z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowTwoWaysHorR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_two_ways_hor_r',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.768 12.303a1.036 1.036 0 10-1.465 1.465L16.536 15H5a1 1 0 000 2h11.536l-1.233 1.232a1.036 1.036 0 101.465 1.465l2.929-2.93c.186-.186.287-.426.301-.67l.002-.078V16l-.001-.019v-.078a1.032 1.032 0 00-.216-.573l-.086-.098zm-9.536-8l-2.929 2.93a1.032 1.032 0 00-.301.67v.064L4 8v.034l.002.063c.014.244.115.484.301.67l2.93 2.93a1.036 1.036 0 101.464-1.465L7.464 9H19a1 1 0 00.993-.883L20 8a1 1 0 00-1-1H7.464l1.233-1.232a1.036 1.036 0 10-1.465-1.465z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowTwoWaysVerB",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_two_ways_ver_b',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 16.768a1.036 1.036 0 10-1.465-1.465L9 16.536V5a1 1 0 00-2 0v11.536l-1.232-1.233a1.036 1.036 0 10-1.465 1.465l2.93 2.929c.186.186.426.287.67.301l.078.002H8l.019-.001h.078c.203-.013.404-.085.573-.216l.098-.086zm8-9.536l-2.93-2.929a1.032 1.032 0 00-.67-.301h-.064L16 4h-.034l-.063.002a1.032 1.032 0 00-.67.301l-2.93 2.93a1.036 1.036 0 101.465 1.464L15 7.464V19a1 1 0 00.883.993L16 20a1 1 0 001-1V7.464l1.232 1.233a1.036 1.036 0 101.465-1.465z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowTwoWaysVerT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_two_ways_ver_t',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 7.232a1.036 1.036 0 11-1.465 1.465L9 7.464V19a1 1 0 01-2 0V7.464L5.768 8.697a1.036 1.036 0 11-1.465-1.465l2.93-2.929c.186-.186.426-.287.67-.301L7.981 4H8l.019.001h.078c.203.013.404.085.573.216l.098.086zm8 9.536l-2.93 2.929a1.032 1.032 0 01-.67.301h-.064L16 20h-.034l-.063-.002a1.032 1.032 0 01-.67-.301l-2.93-2.93a1.036 1.036 0 111.465-1.464L15 16.536V5a1 1 0 01.883-.993L16 4a1 1 0 011 1v11.536l1.232-1.233a1.036 1.036 0 111.465 1.465z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_up',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.2 14.713l-5.454-3.916a1.113 1.113 0 00-1.492 0L5.8 14.713a1.113 1.113 0 01-1.491 0 .93.93 0 010-1.384l6.2-5.756c.823-.764 2.159-.764 2.982 0l6.2 5.756a.93.93 0 010 1.384 1.113 1.113 0 01-1.491 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconArrowUpAlt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'arrow_up_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.067 4a2 2 0 01.059.004L12 4a2.026 2.026 0 01.527.07l.029.009a1.476 1.476 0 01.121.039l.01.004a2.006 2.006 0 01.405.202l.017.012 6 4a2 2 0 01-2.218 3.328L14 9.737 14 18a2 2 0 11-4 0V9.737l-2.89 1.927a2 2 0 01-2.22-3.328l6-4 .012-.008c.124-.081.257-.15.398-.202l.012-.004.11-.037.025-.008.011-.002a1.315 1.315 0 01.124-.031l.026-.005a1.194 1.194 0 01.131-.022c.007 0 .014-.002.02-.003l.02-.002.053-.005.044-.003A1.789 1.789 0 0111.933 4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconBarndPepperi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'barnd_pepperi',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.234 10.687a.17.17 0 00-.167-.171c-.446 0-.885.372-1.44.843-.887.753-1.99 1.69-3.705 1.69-1.714 0-2.818-.937-3.705-1.69-.556-.471-.994-.843-1.44-.843a.17.17 0 00-.168.171.17.17 0 00.167.172c.327 0 .744.354 1.228.765.88.747 2.084 2.563 3.918 2.563 2.19 0 2.682-1.514 3.918-2.563.483-.41.9-.765 1.227-.765a.17.17 0 00.167-.172M6.671 7.588c0 1.039.826 1.884 1.841 1.884 1.015 0 1.841-.845 1.841-1.884 0-1.038-.826-1.883-1.841-1.883-1.015 0-1.841.845-1.841 1.883m6.866 0c0 1.039.826 1.884 1.841 1.884 1.016 0 1.841-.845 1.841-1.884 0-1.038-.825-1.883-1.84-1.883-1.016 0-1.842.845-1.842 1.883m7.386 10.922a3.46 3.46 0 00-.778-.087c-1.144 0-2.125.544-2.52 1.311-.394-.767-1.375-1.31-2.519-1.31-.266 0-.526.028-.778.086.387-.651 1.12-1.154 2.01-1.405.12-.034.244-.063.37-.087V14.658a.188.188 0 00-.185-.19.188.188 0 00-.186.19v2.056c-.751.196-1.409.559-1.885 1.037-.802.11-1.655.185-2.507.185a18.55 18.55 0 01-2.507-.184c-.475-.479-1.133-.842-1.885-1.038v-2.056a.188.188 0 00-.185-.19.188.188 0 00-.186.19V17.018c.126.024.25.053.371.087.89.25 1.622.754 2.01 1.405a3.46 3.46 0 00-.779-.087c-1.144 0-2.124.544-2.52 1.311-.394-.767-1.374-1.31-2.519-1.31-.266 0-.526.028-.778.086.39-.656 1.13-1.16 2.028-1.409.088-.024.178-.046.27-.065V7.589c0-1.833 1.456-3.323 3.247-3.323 1.79 0 2.143.995 3.248 2.555.06.085.083.19.185.19.103 0 .127-.105.186-.19 1.139-1.647 1.457-2.555 3.247-2.555 1.791 0 3.248 1.49 3.248 3.322V17.035c.088.019.173.04.258.064.904.247 1.648.753 2.04 1.411M8.068 7.588c0 .25.198.454.443.454a.449.449 0 00.443-.454.449.449 0 00-.443-.453.449.449 0 00-.443.453m-.688 0c0-.638.507-1.157 1.131-1.157s1.13.52 1.13 1.157c0 .638-.506 1.157-1.13 1.157-.624 0-1.13-.519-1.13-1.157m7.553 0c0 .25.199.454.443.454a.449.449 0 00.444-.454.449.449 0 00-.444-.453.449.449 0 00-.443.453m-.687 0c0-.638.507-1.157 1.13-1.157.624 0 1.131.52 1.131 1.157 0 .638-.507 1.157-1.13 1.157-.624 0-1.131-.519-1.131-1.157m.48 10.416a2.626 2.626 0 00-.315.374.817.817 0 00.315-.374m4.918-1.172c-.04.045-.08.092-.12.135.695.287 1.287.708 1.71 1.222.26.015.515.044.764.088-.484-.62-1.321-1.123-2.354-1.445m-14.753-.088v-5.932c-.39-.236-.78-.368-1.135-.368-.145 0-.283.023-.41.07-1.047.385-1.14 2.298-.202 4.177.426.853 1.001 1.583 1.606 2.088l.141-.035m15.852-2.053c.938-1.879.845-3.792-.203-4.177a1.184 1.184 0 00-.41-.07c-.355 0-.744.132-1.135.368v5.932c.048.01.094.022.14.035.606-.505 1.182-1.235 1.608-2.088M2.819 18.035c-.278.015-.551.041-.819.08.5-.536 1.334-.98 2.365-1.283-.628.302-1.161.713-1.546 1.203\"/></svg>`,\n}"
            },
            {
                "name": "pepIconIndicatorDotPlaceholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'indicator_dot_placeholder',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\"><circle cx=\"4\" cy=\"4\" r=\"3.5\" fill-rule=\"evenodd\"/></svg>`,\n}"
            },
            {
                "name": "pepIconMiscExcel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'misc_excel',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 4.18a1 1 0 01.993.884L16 5.18v13.64a1 1 0 01-1.048.998l-.116-.012-10-1.667a1 1 0 01-.829-.866L4 17.153V6.847a1 1 0 01.718-.96l.118-.026 10-1.667A1 1 0 0115 4.18zM19 7a1 1 0 011 1v8a1 1 0 01-1 1h-1a1 1 0 01-1-1V8a1 1 0 011-1zm-5.715.214l-2.078.224-1.243 2.976L8.769 7.7l-2.126.23 2.174 3.795L6.5 16.054l2.079.224 1.386-3.229 1.409 3.531 2.126.23-2.39-5.179 2.175-4.417z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNoImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'no_image',\n    data: `<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 988 988\" xml:space=\"preserve\"><style>.st1{fill:#c1c1c1}</style><path d=\"M-546.6 491.2h5.6v5.6h-5.6v-5.6z\" fill=\"none\"/><path class=\"st1\" d=\"M144.5-966.5c-7.8-8.6-19.4-12.9-32.3-11.6L29-969.9c-9.9.9-22.4 6.5-28.5 12.5l-137.2 137.1c-10.8 10.8-12.1 27.6-2.6 37.1l98.3 98.3c3.9 3.9 9.9 6.5 15.9 6.5 7.3 0 14.7-3 19.8-8.6L132-824.2c6.5-6.5 12.1-18.1 12.9-26.3l8.6-85.8c1.4-12.1-1.6-22.5-9-30.2zm-157 271.3c-3.5 3.5-7.8 5.2-12.1 5.2-2.2 0-5.6-.4-8.2-3l-98.3-98.4c-5.2-5.2-3.9-14.7 2.6-21.1l22.4-22.4L10.3-718.4l-22.8 23.2zm155.3-242.9l-8.6 85.8c-.4 6-5.2 15.1-9.5 19.4L18.6-726.8-97.9-843.2 8.7-949.3c4.3-4.3 14.7-8.6 21.6-9.5l83.2-8.2h3.5c7.8 0 14.7 3 19.4 8.2 5.1 5.2 7.3 12.5 6.4 20.7z\"/><path class=\"st1\" d=\"M90.6-942.8c-15.5 0-28 12.5-28 28s12.5 28 28 28 28-12.5 28-28-12.5-28-28-28zm0 44.9c-9.5 0-16.8-7.8-16.8-16.8s7.8-16.8 16.8-16.8c9.5 0 16.8 7.8 16.8 16.8s-7.7 16.8-16.8 16.8zM-357.1-1138c-15.5-17.3-38.8-25.9-64.7-23.3l-166.4 16.5c-19.9 1.7-44.9 12.9-56.9 25l-274.4 274.3c-21.5 21.5-24.1 55.2-5.2 74.2L-728-574.6c7.7 7.7 19.8 12.9 31.9 12.9 14.7 0 29.3-6.1 39.7-17.3l274.2-274.3c12.9-12.9 24.1-36.2 25.9-52.6l17.3-171.7c2.6-24.1-3.4-44.8-18.1-60.4zm-314 542.6c-6.9 6.9-15.5 10.4-24.2 10.4-4.3 0-11.2-.9-16.4-6.1l-196.7-196.6c-10.3-10.3-7.7-29.3 5.2-42.3l44.9-44.9L-625.4-642l-45.7 46.6zm310.5-485.6l-17.2 171.6c-.9 12.1-10.3 30.2-19 38.8L-609-658.3l-233-232.9 213.2-212.2c8.6-8.6 29.3-17.3 43.1-19l166.5-16.4h6.9c15.5 0 29.3 6.1 38.8 16.4 10.3 10.3 14.7 25 12.9 41.4z\"/><path class=\"st1\" d=\"M-465-1090.5c-31.1 0-56.1 25-56.1 56.1s25 56.1 56.1 56.1 56.1-25 56.1-56.1-25-56.1-56.1-56.1zm0 89.7c-19 0-33.7-15.5-33.7-33.7 0-18.2 15.5-33.7 33.7-33.7 19 0 33.7 15.5 33.7 33.7 0 18.2-15.5 33.7-33.7 33.7z\"/><g><path class=\"st1\" d=\"M915.2 79.6c-23.3-25.9-58.2-38.8-97-34.9L568.5 69.3c-29.8 2.6-67.3 19.4-85.4 37.5L71.6 518.3c-32.3 32.3-36.2 82.8-7.8 111.3l295 295c11.6 11.6 29.7 19.4 47.8 19.4 22 0 44-9.1 59.5-25.9l411.5-411.5c19.4-19.4 36.2-54.3 38.8-78.9l25.9-257.5c3.9-36.2-5.1-67.3-27.1-90.6zm-471 813.9c-10.4 10.4-23.3 15.6-36.3 15.6-6.5 0-16.8-1.3-24.6-9.1l-295-295c-15.5-15.5-11.6-44 7.8-63.4l67.3-67.3 349.3 349.4-68.5 69.8zM910 165l-25.9 257.5c-1.3 18.1-15.5 45.3-28.5 58.2L537.3 799.1 187.9 449.7l319.7-318.3c12.9-12.9 44-25.9 64.7-28.5L822 78.3h10.4c23.3 0 44 9.1 58.2 24.6 15.5 15.5 22 37.5 19.4 62.1z\"/><path class=\"st1\" d=\"M753.4 150.8c-46.6 0-84.1 37.5-84.1 84.1s37.5 84.1 84.1 84.1 84.1-37.5 84.1-84.1-37.5-84.1-84.1-84.1zm0 134.6c-28.5 0-50.5-23.3-50.5-50.5s23.3-50.5 50.5-50.5c28.5 0 50.5 23.3 50.5 50.5s-23.3 50.5-50.5 50.5z\"/></g></svg>`,\n}"
            },
            {
                "name": "pepIconNoImage2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'no_image_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\"><style>.placeholder{stroke:#999;stroke-width:4;stroke-linecap:round}</style><g fill=\"none\" fill-rule=\"evenodd\"><circle class=\"placeholder\" cx=\"128\" cy=\"60\" r=\"32\"/><path class=\"placeholder\" d=\"M263 6H14a8 8 0 00-8 8v74M195.05 182.887L65.443 97.913a8 8 0 00-8.851.053L9.535 129.622A8 8 0 006 136.26V186a8 8 0 008 8h272a8 8 0 008-8v-84.869a8 8 0 00-3.368-6.523l-41.31-29.33a8 8 0 00-9.713.344l-90.374 74.339M294 85V63M294 45v-7.997M294 55.003v-2M294 29V14a8 8 0 00-8-8h-5M273 6h-2M6 122v-15.997m0-8v-2\"/></g></svg>`,\n}"
            },
            {
                "name": "pepIconNumberCoins",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_coins',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.5 14.244c.355.562.885 1.04 1.547 1.432-.659.27-1.047.576-1.047.824 0 .589 2.186 1.5 5 1.5 2.44 0 4.409-.685 4.888-1.251.754-.14 1.457-.338 2.085-.592.018.112.027.226.027.343 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.914.563-1.678 1.5-2.256zm13.64-3.523c.547.5.86 1.098.86 1.779 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.27.049-.526.142-.769.543.309 1.17.562 1.858.759v.01c0 .589 2.186 1.5 5 1.5s5-.911 5-1.5c0-.172-.187-.372-.522-.568.672-.33 1.238-.733 1.662-1.21zM12 5c3.814 0 7 1.328 7 3.5 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5C5 6.328 8.186 5 12 5zm0 2c-2.814 0-5 .911-5 1.5S9.186 10 12 10s5-.911 5-1.5S14.814 7 12 7z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberDecimal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_decimal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.55 8h2.583c.48 0 .867.448.867 1s-.387 1-.867 1h-2.891l-.308 2h2.2c.479 0 .866.447.866 1 0 .553-.387 1-.867 1h-2.506l-.637 4.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.603 14h-1.976l-.637 4.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L9.604 14H6.867C6.388 14 6 13.553 6 13c0-.553.388-1 .867-1H9.91l.308-2H7.867C7.388 10 7 9.552 7 9s.388-1 .867-1h2.66l.483-3.142a1 1 0 011.98.284L12.55 8h1.976l.483-3.142a1.002 1.002 0 011.132-.848zM5.5 16a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm8.718-6h-1.975l-.308 2h1.975l.308-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberDollar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_dollar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.203 20h1.48a.605.605 0 00.614-.591v-1.367l.307-.08C16.11 17.357 17 15.698 17 14.465c0-2.285-2.048-3.234-4.055-3.865-1.884-.598-2.487-.96-2.487-1.496 0-.48.578-.962 1.872-.962 1.426 0 2.319.39 2.7.56a.623.623 0 00.81-.284l.586-1.194a.584.584 0 00-.295-.784 7.681 7.681 0 00-2.335-.622l-.36-.044V4.587A.602.602 0 0012.82 4h-1.454c-.336 0-.614.264-.614.587v1.32l-.308.075c-2.023.492-3.232 1.741-3.232 3.337 0 2.104 2.167 3.042 4.293 3.684 1.962.615 2.228 1.147 2.228 1.588 0 .682-.917 1.178-2.179 1.178-1.073 0-2.228-.264-3.089-.706a.62.62 0 00-.487-.04.614.614 0 00-.36.32l-.566 1.21a.576.576 0 00.258.752c.717.399 1.782.693 2.913.816l.365.036v1.253c0 .326.274.59.614.59z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberEuro",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_euro',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.936 4.086l.294.008a6.185 6.185 0 013.268 1.148c.152.09.274.212.365.365l.102.243c.073.263.035.549-.102.784a1.025 1.025 0 01-.609.467c-.241.066-.573.05-.784-.102a5.58 5.58 0 00-1.107-.628l.127.058-.133-.051c-.25-.09-.507-.16-.769-.209l-.122-.02-.133-.013a5.058 5.058 0 00-.789.002l-.113.01-.138.024c-.259.05-.512.12-.76.209l-.129.049-.131.06a5.522 5.522 0 00-.73.428l-.126.09-.144.12a6.33 6.33 0 00-.675.677l-.118.145-.142.196a7.204 7.204 0 00-.547.94h4.249c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.212l-.022.208a8.369 8.369 0 00-.032.793l4.882-.001c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.46c.078.259.169.513.273.762l-.052-.131.101.225c.16.332.345.653.555.957l.139.19-.081-.098.16.206-.076-.103.118.145c.208.242.433.47.675.678l.139.114.131.095c.232.16.476.304.73.428l.139.062.121.048c.248.089.501.158.76.208l.121.02.13.015c.263.02.526.021.789.001l.143-.015.112-.018c.262-.05.519-.12.77-.209l.134-.052.161-.073c.19-.094.376-.2.554-.315l.263-.18c.21-.153.543-.169.785-.104.254.07.475.24.608.467a1.012 1.012 0 01-.16 1.233c-.067.054-.136.107-.205.16a6.275 6.275 0 01-1.66.848c-1.808.617-3.9.279-5.438-.851a7.376 7.376 0 01-1.055-.917 8.135 8.135 0 01-.88-1.132 7.267 7.267 0 01-.578-1.095 9.32 9.32 0 01-.528-1.568l-1.399-.001c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.165a8.305 8.305 0 01.053-1H5.96c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.651c.094-.267.201-.53.316-.79A7.681 7.681 0 019.41 6.094a7.302 7.302 0 011.065-.902c.31-.218.64-.408.99-.557.423-.18.846-.342 1.301-.426.48-.09.975-.143 1.464-.114z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberMinus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_minus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><rect width=\"16\" height=\"4\" x=\"4\" y=\"10\" fill-rule=\"evenodd\" rx=\"2\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_number',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.582 8H19a1 1 0 110 2h-2.704l-.571 4H18a.999.999 0 110 2h-2.561l-.449 3.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.417 16H9.439l-.449 3.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L7.418 16H5a1 1 0 110-2h2.704l.571-4H6a1 1 0 010-2h2.561l.449-3.142a1 1 0 011.98.284L10.582 8h3.978l.45-3.142a1.002 1.002 0 011.131-.848zM14.274 10h-3.978l-.571 4h3.978l.571-4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberPercent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_percent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 13a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4zm1.364-9.364a1 1 0 010 1.414L7.05 18.364a1 1 0 01-1.414-1.414L16.95 5.636a1 1 0 011.414 0zM7 3a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconNumberPlus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'number_plus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a2 2 0 012 2v4h4a2 2 0 110 4h-4v4a2 2 0 11-4 0v-4H6a2 2 0 110-4h4V6a2 2 0 012-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconRipplesTransparent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'ripples_transparent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 128 128\" preserveAspectRatio=\"xMidYMid\" class=\"lds-ripple\" style=\"background:0 0\"><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-1.6s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-1.6s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-0.8s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-0.8s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"0s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"0s\" repeatCount=\"indefinite\"/></circle></svg>`,\n}"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
            },
            {
                "name": "pepIconShoppingCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'shopping_cart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 4h2.153a1 1 0 01.986.836L7.333 6H18a1 1 0 011 1v4.153a1 1 0 01-.836.986l-9.542 1.59.045.271H18a1 1 0 010 2H7.847a1 1 0 01-.986-.836L5.473 6.836A1 1 0 004.486 6H4a1 1 0 110-2zm3.86 5.164l.273 1.633a1 1 0 001.15.822l6.881-1.146A1 1 0 0017 9.486V9a1 1 0 00-1-1H8.847a1 1 0 00-.986 1.164zM17.5 20a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm-11 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconShoppingPaper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'shopping_paper',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 2a5 5 0 015 5v1h2a2 2 0 012 2v8a4 4 0 01-4 4H7a4 4 0 01-4-4v-8a2 2 0 012-2h2V7a5 5 0 015-5zm6 8H6a1 1 0 00-1 1v7a2 2 0 002 2h10a2 2 0 002-2v-7a1 1 0 00-1-1zm-6-6a3 3 0 00-3 3v1h6V7a3 3 0 00-3-3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemAttach",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_attach',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.86 14.378l2.787-2.786a.985.985 0 00-1.393-1.393l-2.786 2.786a2.955 2.955 0 104.179 4.18l2.786-2.787a4.925 4.925 0 00-6.965-6.965L6.68 10.199a.985.985 0 01-1.393-1.393L8.075 6.02a6.896 6.896 0 019.75 9.751l-2.785 2.786a4.925 4.925 0 01-6.965-6.965l2.786-2.786a2.955 2.955 0 114.179 4.18l-2.786 2.785a.985.985 0 01-1.393-1.393z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemAvatar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_avatar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.873 20C5.317 18.835 5 17.562 5 16.333c0-2.407 1.215-4.078 3.066-4.997C7.706 10.393 7.5 9.37 7.5 8.4 7.5 5.362 9.515 4 12 4s4.5 1.362 4.5 4.4c0 .97-.205 1.993-.566 2.936 1.85.919 3.066 2.59 3.066 4.997 0 1.23-.317 2.502-.873 3.667h-1.244c-1.16 0-1.16-.629-.999-.966.392-.816.616-1.705.616-2.534 0-1.482-.716-2.44-1.821-2.974C13.93 14.42 13.004 15 12 15c-1.004 0-1.93-.58-2.679-1.474C8.216 14.06 7.5 15.018 7.5 16.5c0 .827.223 1.712.612 2.525.163.34.163.975-.966.975H5.873zM12 12.5c1.105 0 2-2.2 2-3.857S13.105 6.5 12 6.5s-2 .486-2 2.143c0 1.657.895 3.857 2 3.857z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemBin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_bin',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 7V6a1 1 0 011-1h4a1 1 0 011 1v.999l.913.001H17a1 1 0 010 2h-.167l-.757 9.083a1 1 0 01-.996.917H8.92a1 1 0 01-.996-.917L7.166 9H7a1 1 0 110-2h2zm5.76 2l-5.525.005L9.79 17h4.42l.55-8z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemBolt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_bolt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.612 19.84a.33.33 0 01-.279.16.332.332 0 01-.128-.026.362.362 0 01-.199-.402l1.25-6.568H7.333c-.103 0-.2-.05-.263-.137a.374.374 0 01-.06-.305l2-8.293A.336.336 0 019.333 4h6c.122 0 .235.07.294.185a.377.377 0 01-.012.362L12.943 9h3.723c.122 0 .235.064.294.18a.387.387 0 01-.015.37l-6.333 10.29z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemChat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_chat',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.5 4a7.5 7.5 0 016.755 10.764L20 20l-5.236-1.745A7.5 7.5 0 1111.5 4zm0 2a5.5 5.5 0 102.392 10.454l.732-.354 2.214.738-.738-2.214.354-.732A5.5 5.5 0 0011.5 6zm-2 4a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm4 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_circle',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"8\" fill-rule=\"evenodd\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemClose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_close',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.39 5.61a2.085 2.085 0 010 2.95L14.948 12l3.44 3.44c.774.774.813 2.004.116 2.823l-.116.126a2.085 2.085 0 01-2.949 0L12 14.95l-3.44 3.44a2.085 2.085 0 11-2.95-2.949L9.052 12l-3.44-3.44a2.085 2.085 0 01-.116-2.823l.116-.126a2.085 2.085 0 012.949 0L12 9.05l3.44-3.44a2.085 2.085 0 012.95 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemDoc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_doc',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.172 4a1 1 0 01.707.293l3.828 3.828a1 1 0 01.293.707V19a1 1 0 01-1 1H7a1 1 0 01-1-1V5a1 1 0 011-1h6.172zM11 6H9a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1v-6a1 1 0 00-1-1h-2a1 1 0 01-1-1V7a1 1 0 00-1-1z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemDoor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_door',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16.7a2 2 0 01-1.188 1.828l-7.109 3.16A.5.5 0 0110 21.23V10.3a2 2 0 011.188-1.828l5.579-2.48L7 5.959V17a1 1 0 01-2 0V5a1 1 0 011-1h12a1 1 0 011 1v11.7z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemDotEllipsis",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_dot_ellipsis',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(5 17)\"><circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"7.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"13.5\" cy=\"1.5\" r=\"1.5\"/></g></svg>`,\n}"
            },
            {
                "name": "pepIconSystemEdit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_edit',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 20a1 1 0 010 2H3a1 1 0 010-2h18zM14.207 2.793l4 4a1 1 0 010 1.414l-8.5 8.5a1 1 0 01-.39.242l-6 2a1 1 0 01-1.266-1.265l2-6a1 1 0 01.242-.391l8.5-8.5a1 1 0 011.414 0zM11 7.414L5.874 12.54 4.581 16.42l3.879-1.293L13.585 10 11 7.414zm2.501-2.5L12.414 6 15 8.585 16.086 7.5 13.5 4.914z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemEducation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_education',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.12 4.062l10.478 5.719a.25.25 0 010 .438l-.598.326V15a1 1 0 01-2 0v-3.363l-2 1.091V16c0 2.21-2.686 4-6 4s-6-1.79-6-4v-3.272L1.402 10.22a.25.25 0 010-.438L11.88 4.062a.25.25 0 01.24 0zm-4.121 9.757L8 16c0 .893 1.66 2 4 2s4-1.107 4-2l-.001-2.18-3.88 2.118a.25.25 0 01-.239 0L8 13.819zm3.98-7.302l-.038.013-6.237 3.36a.125.125 0 00-.031.196l.031.024 6.237 3.36a.125.125 0 00.08.013l.038-.013 6.237-3.36a.125.125 0 00.031-.196l-.031-.024-6.237-3.36a.125.125 0 00-.08-.013z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_email',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4c4.411 0 8 3.589 8 8 0 .543-.055 1.086-.163 1.612-.344 1.64-1.939 2.685-3.555 2.345a2.973 2.973 0 01-1.64-.955A3.984 3.984 0 0112 16c-2.206 0-4-1.794-4-4s1.794-4 4-4a4.004 4.004 0 013.923 4.782l-.008.033a.994.994 0 00.143.752.998.998 0 00.632.432 1.008 1.008 0 001.184-.775A6.006 6.006 0 0012 6C8.691 6 6 8.69 6 12a6.006 6.006 0 008.064 5.636 1 1 0 11.685 1.88 7.983 7.983 0 01-2.75.484L12 20c-4.411 0-8-3.589-8-8s3.589-8 8-8zm0 6c-1.103 0-2 .897-2 2s.897 2 2 2 2-.897 2-2-.897-2-2-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFileDownload",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_file_download',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6-5v5h2.575a.5.5 0 01.312.89l-3.575 2.86a.5.5 0 01-.624 0l-3.575-2.86a.5.5 0 01.312-.89H11V6h2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFileUpload",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_file_upload',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6.688-4.75l3.575 2.86a.5.5 0 01-.312.89H13v4a1 1 0 01-2 0v-4H8.425a.5.5 0 01-.312-.89l3.575-2.86a.5.5 0 01.624 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFileUploadCloud",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_file_upload_cloud',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10 6a4 4 0 013.6 2.253 4 4 0 015.397 3.917A3 3 0 0118 18h-5.001L13 14h2.575a.5.5 0 00.312-.89l-3.575-2.86a.5.5 0 00-.624 0l-3.575 2.86a.5.5 0 00.312.89H11l-.001 4H7a4 4 0 01-.997-7.875L6 10a4 4 0 014-4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_filter',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.5 15a.5.5 0 01.5.5v2.86a.5.5 0 01-.621.485l-3-.75A.5.5 0 0110 17.61V15.5a.5.5 0 01.5-.5h3zm2.5-5a1 1 0 010 2H8a1 1 0 010-2h8zm3-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFilter2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_filter_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 15.5a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h1.708A2.5 2.5 0 018 15.5zm8-6a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-1.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h9.708A2.5 2.5 0 0116 9.5zm-8-6A2.5 2.5 0 0110.292 5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 110-2h1.708A2.5 2.5 0 018 3.5z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemFullScreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_full_screen',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.597 13.403a.961.961 0 010 1.36L7.36 18H9a1 1 0 010 2H5a1 1 0 01-1-1v-4a1 1 0 012 0v1.64l3.238-3.237a.961.961 0 011.36 0zM19 4a1 1 0 011 1v4a1 1 0 01-2 0V7.36l-3.238 3.237a.961.961 0 11-1.36-1.36L16.642 6H15a1 1 0 010-2h4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemHeart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_heart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 6.532C11.395 5.805 10.353 5 8.7 5 5.89 5 4 7.608 4 10.043c0 3.546 6.803 8.297 7.579 8.827a.75.75 0 00.842 0c.776-.53 7.579-5.282 7.579-8.827C20 7.608 18.11 5 15.299 5c-1.651 0-2.694.805-3.299 1.532zM6 10.27C6 8.9 7.028 7 8.957 7c1.755 0 2.374 1.517 2.398 1.577a.688.688 0 001.288.005c.025-.065.645-1.582 2.4-1.582C16.973 7 18 8.9 18 10.27c0 1.82-3.53 4.72-6 6.48-2.471-1.76-6-4.657-6-6.48z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemHome",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_home',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 5a1 1 0 011 1v3.057l1.581 1.13a1 1 0 01.3 1.288l-.067.106a1 1 0 01-1.395.233l-.42-.3L18 19a1 1 0 01-1 1H7a1 1 0 01-1-1v-7.486l-.419.3a1 1 0 11-1.162-1.628l7-5 .014-.01a.993.993 0 01.062-.04l-.076.05a1.009 1.009 0 01.7-.179.882.882 0 01.227.055.885.885 0 01.115.05c.041.022.081.046.12.074l-.076-.05a.993.993 0 01.062.04l.014.01L16 7.628V6a1 1 0 011-1zm-5.001 2.228l-4 2.857L8 18h8v-7.914l-4.001-2.858z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_info',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm.32 6a1 1 0 01.986 1.164l-.667 4a1 1 0 01-.986.836h-.473a1 1 0 01-.986-1.164l.667-4a1 1 0 01.986-.836h.473zm.18-4a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemInventory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_inventory',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.394 4.08l7.302 3.13a.5.5 0 01.303.46L20 16.33a.5.5 0 01-.303.46l-7.304 3.128a1 1 0 01-.787 0L4.303 16.79A.5.5 0 014 16.33V7.67c0-.2.119-.38.303-.459l7.303-3.13a1 1 0 01.788 0zM6 9.518v5.824l5 2.142V11.66L6 9.517zm12 0l-5 2.142v5.824l5-2.142V9.517zm-6-3.429L7.539 8 12 9.912 16.461 8 12 6.088z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_link',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.254 10.627a.97.97 0 010 1.373L6.51 14.745a1.941 1.941 0 002.744 2.745L12 14.745a.97.97 0 111.373 1.372l-2.746 2.746a3.882 3.882 0 01-5.49-5.49l2.745-2.746a.97.97 0 011.372 0zm5.491-1.373a.972.972 0 010 1.373l-4.117 4.118a.97.97 0 01-1.373-1.373l4.118-4.118a.97.97 0 011.372 0zm4.118-4.117a3.882 3.882 0 010 5.49l-2.746 2.745A.97.97 0 1114.745 12l2.745-2.746a1.942 1.942 0 00-2.745-2.744L12 9.255a.97.97 0 01-1.373-1.373l2.746-2.745a3.883 3.883 0 015.49 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_map',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.958 20l-.073-.006a.985.985 0 01-.14-.027l-.03-.008a.855.855 0 01-.08-.027l-.006-.004-5-2A1 1 0 013 17V5a1 1 0 011.371-.928l4.66 1.863 5.653-1.884.01-.003a.997.997 0 01.086-.024l-.096.027a1.024 1.024 0 01.206-.046l.03-.002a.85.85 0 01.086-.004H15.042a.984.984 0 01.213.034l.03.008a.855.855 0 01.08.027l.006.004 5 2A1 1 0 0121 7v12a1 1 0 01-1.371.928l-4.661-1.864-5.652 1.885-.01.003a.997.997 0 01-.086.024l.096-.027a1.024 1.024 0 01-.206.046l-.03.002a.85.85 0 01-.086.004H8.958zM14 6.387l-4 1.334v9.892l4-1.334V6.387zm-9 .09v9.846l3 1.2V7.677l-3-1.2zm11 0v9.846l3 1.2V7.677l-3-1.2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_menu',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemMenuDots",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_menu_dots',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(10 4)\"><path d=\"M2 12a2 2 0 110 4 2 2 0 010-4zm0-6a2 2 0 110 4 2 2 0 010-4z\"/><rect width=\"4\" height=\"4\" rx=\"2\"/></g></svg>`,\n}"
            },
            {
                "name": "pepIconSystemMove",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_move',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 14a1 1 0 011 1v3.585l1.293-1.292a1 1 0 011.32-.083l.094.083a1 1 0 010 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 011.414-1.414L11 18.585V15a1 1 0 011-1zM6.707 8.293a1 1 0 010 1.414L5.415 11 9 11a1 1 0 010 2l-3.587-.001 1.294 1.294a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm10.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414l1.292-1.294L15 13a1 1 0 010-2l3.585-.001-1.292-1.292a1 1 0 01-.083-1.32zm-6-6a1 1 0 011.414 0l3 3a1 1 0 11-1.414 1.414L13 5.414V9a1 1 0 01-2 0V5.414L9.707 6.707a1 1 0 01-1.32.083l-.094-.083a1 1 0 010-1.414z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemMust",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_must',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><filter id=\"a\" width=\"187.5%\" height=\"187.5%\" x=\"-43.7%\" y=\"-31.2%\" filterUnits=\"objectBoundingBox\"><feOffset dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" stdDeviation=\"2\"/><feColorMatrix in=\"shadowBlurOuter1\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.12 0\"/></filter><path id=\"b\" d=\"M13.487 4l-.403 6.767 5.997-2.493.919 2.973-6.246 1.689 4.11 5.226L15.457 20 12 14.276 8.542 20l-2.405-1.838 4.109-5.226L4 11.247l.919-2.973 5.996 2.493L10.513 4h2.974z\"/></defs><g fill=\"none\" fill-rule=\"evenodd\"><use fill=\"#000\" filter=\"url(#a)\" xlink:href=\"#b\"/><use fill=\"#FE0000\" xlink:href=\"#b\"/></g></svg>`,\n}"
            },
            {
                "name": "pepIconSystemOffLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_off_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20.142 5l1.414 1.414-2.93 2.93A4 4 0 0117 17h-6.03l-3.556 3.556L6 19.142 20.142 5zM14 5c1.141 0 2.17.478 2.9 1.244l-1.416 1.415a1.998 1.998 0 00-3.283.467l-.398.819a1 1 0 01-1.25.5l-.852-.32A1.991 1.991 0 009 9c-1.105 0-2 .895-2 1.98l.04 1.592-1.373.484A1.001 1.001 0 006 15h2.142l-2 2H6a3 3 0 01-.997-5.83l-.002-.085L5 11a4 4 0 015.402-3.748A3.998 3.998 0 0114 5zm3.029 5.941L12.97 15H17a2 2 0 00.5-3.937l-.471-.122z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemOk",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_ok',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.511 7c-.376.011-.732.168-.995.438-2.29 2.295-4.38 4.544-6.58 6.79l-2.584-2.072a1.445 1.445 0 00-2.035.226 1.448 1.448 0 00.226 2.035l3.618 2.894c.578.46 1.409.411 1.929-.113 2.602-2.608 4.934-5.17 7.476-7.718A1.449 1.449 0 0017.511 7z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemPause",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_pause',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.5 5A1.5 1.5 0 0110 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 018.5 5zm7 0A1.5 1.5 0 0117 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 0115.5 5z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemPhone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_phone',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4.814 8.88c1.362-1.39 2.043-1.022 2.98.328.85 1.228.595 2.046 0 2.578-.384.327-1.363.9-.852 1.76.724 1.227 2.129 2.7 3.363 3.478.851.531 1.532-.369 1.915-.696.596-.573 1.447-.736 2.64.164 1.32.982 1.66 1.677.127 2.905C9.88 22.384 1.323 13.546 4.814 8.88zM11 4a9 9 0 019 9 1 1 0 01-2 0 7 7 0 00-7-7 1 1 0 010-2zm0 4a5 5 0 015 5 1 1 0 01-2 0 3 3 0 00-3-3 1 1 0 010-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemPlay",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_play',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 4.869a1 1 0 01.555.167l9.821 6.548a.5.5 0 010 .832l-9.821 6.548A1 1 0 017 18.13V5.87a1 1 0 011-1zm2 4a1 1 0 00-1 1v4.262a1 1 0 001.555.833l3.821-2.548a.5.5 0 000-.832l-3.821-2.548A1 1 0 0010 8.87z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemPrint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_print',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 7a1 1 0 00-1-1h-4a1 1 0 00-.993.883L9 7v1H7V6a2 2 0 012-2h6a2 2 0 012 2v2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2v2a2 2 0 01-2 2H9a2 2 0 01-2-2v-2H5a2 2 0 01-2-2v-4a2 2 0 012-2h10V7zm0 7H9v3a1 1 0 00.883.993L10 18h4a1 1 0 00.993-.883L15 17v-3zm3-4H6a1 1 0 00-.993.883L5 11v2a1 1 0 00.883.993L6 14h1v-2h10v2h1a1 1 0 00.993-.883L19 13v-2a1 1 0 00-1-1z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemProcessing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_processing',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18 12a1 1 0 012 0 8 8 0 01-11.955 6.955l-1.338 1.338A1 1 0 015 19.586V16a1 1 0 011-1h3.586a1 1 0 01.707 1.707l-.763.763A6 6 0 0018 12zM4 12a8 8 0 0111.955-6.955l1.338-1.338A1 1 0 0119 4.414V8a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12a1 1 0 01-2 0z\" fill-rule=\"evenodd\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemQuestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_question',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm-.004 9a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-.087-7c2.565 0 3.814 1.075 3.814 2.575 0 .93-.665 1.713-1.25 2.022-.774.409-1.213.678-1.268 1.27l-.006.133h-2.703c0-1.421.199-1.866 1.118-2.285.782-.358 1.38-.656 1.38-1.14 0-.432-.493-.726-1.11-.726-.62 0-1.156.305-1.225.75l-.007.097H8.21C8.235 7.795 9.511 7 11.91 7z\" fill-rule=\"evenodd\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemRotateDevice",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_rotate_device',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.707 4.293A1 1 0 0119 5v3.586a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12.561V16.5A1.5 1.5 0 007.5 18h9a1.5 1.5 0 001.5-1.5V13a1 1 0 012 0v4a3 3 0 01-3 3H7a3 3 0 01-3-3v-5h.021a8 8 0 0111.934-6.37l1.338-1.337a1 1 0 011.414 0zM12 11a2 2 0 011.001 3.732L13 16a1 1 0 01-2 0v-1.268A2 2 0 0112 11z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_search',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.5 4a6.5 6.5 0 015.533 9.912l3.538 3.538a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414 0l-3.538-3.538A6.5 6.5 0 1110.5 4zm0 2.5a4 4 0 100 8 4 4 0 000-8z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_select',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.153 4l-1.944 2H6a1 1 0 00-1 1v11h14v-7.039c.66-.69 1.322-1.38 2-2.073V19a1 1 0 01-1 1H4a1 1 0 01-1-1V5a1 1 0 011-1h12.153zm3.358 0a1.447 1.447 0 011.055 2.48c-2.542 2.548-4.874 5.11-7.476 7.718-.52.524-1.351.572-1.93.113l-3.617-2.894a1.449 1.449 0 011.809-2.261l2.585 2.072c2.199-2.246 4.29-4.495 6.58-6.79.262-.27.618-.427.994-.437z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_settings',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13 4l.691 2.765c.479.154.929.373 1.34.645l2.576-1.198 1.258 1.554-1.72 2.285c.175.463.29.954.334 1.466l2.543 1.299-.45 1.948-2.847.053a5.524 5.524 0 01-.926 1.16l.589 2.784-1.798.876-1.838-2.188a5.55 5.55 0 01-1.503 0l-1.84 2.188-1.797-.876.59-2.784a5.524 5.524 0 01-.927-1.16l-2.847-.053-.45-1.948 2.543-1.298a5.47 5.47 0 01.333-1.465l-1.72-2.287 1.26-1.554L8.967 7.41a5.477 5.477 0 011.342-.645L11 4h2zm-1 4.5a3.5 3.5 0 100 7 3.5 3.5 0 000-7z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSignature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_signature',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.016 4.598l.235.002c1.196.047.94 1.048.557 1.43-1.459 1.387-3.133 2.392-4.927 3.205-.286.288-.573.574-.837.861-.365.385-1.198 1.591-2.065 2.904H20a1 1 0 010 2l-14.321.001c-.72 1.126-1.285 2.036-1.366 2.19-.383.669-1.62-.169-1.238-.838.038-.069.361-.616.807-1.359A1.002 1.002 0 014 13h1.095c.724-1.173 1.44-2.291 1.758-2.67-1.172.407-1.922.676-3.117 1.01-.742.215-1.137-1.291-.395-1.506 1.937-.55 3.922-1.125 5.764-1.938.717-.67 1.393-1.499 2.158-2.072.884-.694 1.793-1.272 2.988-1.224zm-1.648 4.278c.478-.192.933.478.67.885-.12.143-.192.31-.241.479.814-.096 1.507-.359 2.224-.862.263-.191.669-.048.813.215.12.215 1.507-.358 1.698-.43.336-.12.647.12.742.406.023.095.048.167.048.24.67.023 1.482-.192 2.104-.264.765-.096.762 1.453-.003 1.549-.886.096-1.89.335-2.775.191-.191-.048-.334-.215-.406-.406-.693.239-1.458.478-2.008.12-.981.574-2.057.836-3.229.789-.43-.024-.621-.382-.573-.765 0-.048.024-.072.024-.12-.598.262-1.173.574-1.746.885-.67.382-1.265-.999-.595-1.382a23.77 23.77 0 013.253-1.53z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_spinner',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11 15a2 2 0 110 4 2 2 0 010-4zm5.5-1a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-9-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm10 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-5-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5z\" fill-rule=\"evenodd\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemSupport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_support',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 16V8l-.005-.182C16.875 5.76 14.743 4 12 4 9.176 4 7 5.865 7 8v8H5a2 2 0 01-2-2v-4a2 2 0 012-2l.004-.215C5.137 4.57 8.218 2 12 2c3.866 0 7 2.686 7 6a2 2 0 012 2v4a2 2 0 01-2 2c0 2.311-2.196 4.257-5.179 4.83A2.001 2.001 0 0110 20a2 2 0 013.622-1.17C15.641 18.396 17 17.188 17 16z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemTexterea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_texterea',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.74 16.112a.889.889 0 010 1.257l-2.37 2.37a.889.889 0 11-1.258-1.256l2.37-2.37a.889.889 0 011.258 0zm0-5.926a.889.889 0 010 1.257l-8.297 8.297a.889.889 0 11-1.257-1.257l8.297-8.297a.889.889 0 011.257 0zm0-5.926a.889.889 0 010 1.257L5.517 19.74a.889.889 0 01-1.257-1.257L18.483 4.26a.889.889 0 011.257 0z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemTool",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_tool',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.5 3.293a1 1 0 01.083 1.32l-.083.094-1.06 1.06a1.5 1.5 0 002.12 2.122l1.061-1.06.088-.078a1 1 0 011.41 1.397l-.083.095-1.061 1.06a3.502 3.502 0 01-4.14.606l-5.255 5.255a3.5 3.5 0 11-1.416-1.416l5.256-5.254a3.502 3.502 0 01.605-4.14l1.06-1.061.088-.078a1 1 0 011.327.078zm-10 12.035a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconSystemView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'system_view',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><path id=\"a\" d=\"M12 5c5.15 0 7.987 4.15 8.942 6.83L21 12c-.893 2.672-3.74 7-9 7-5.15 0-7.987-4.15-8.942-6.83L3 12c.893-2.672 3.74-7 9-7zm0 2c-4.09 0-6.305 3.092-7 5l.056.15C5.81 14.064 8.014 17 12 17c4.09 0 6.305-3.092 7-5l-.056-.15C18.19 9.936 15.986 7 12 7zm0 8.5A3.51 3.51 0 018.5 12 3.51 3.51 0 0112 8.5a3.51 3.51 0 013.5 3.5 3.51 3.51 0 01-3.5 3.5zm0-5c-.825 0-1.5.675-1.5 1.5s.675 1.5 1.5 1.5 1.5-.675 1.5-1.5-.675-1.5-1.5-1.5z\"/></defs><use fill-rule=\"evenodd\" xlink:href=\"#a\"/></svg>`,\n}"
            },
            {
                "name": "pepIconTimeCal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'time_cal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm2 8H6v6a1 1 0 001 1h10a1 1 0 001-1v-6zM7.983 7H7a1 1 0 00-1 1v1h12V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconTimeDatetime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'time_datetime',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm1 4H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1zm-5 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 13.02 1 1 0 0111 13V9a1 1 0 011-1z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconTimeDuration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'time_duration',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zM7.983 7H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017zm3.724 1.793l2.829 2.828a.998.998 0 01.289.793.998.998 0 01-.29.793l-2.828 2.829a1 1 0 01-1.414-1.415l2.206-2.207-2.206-2.207a1 1 0 011.414-1.414z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconTimeTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'time_time',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a8 8 0 110 16 8 8 0 010-16zm0 2a6 6 0 100 12 6 6 0 000-12zm0 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 12.02 1 1 0 0111 12V8a1 1 0 011-1z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewCardLg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_card_lg',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 4a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h12zm-7 9H6v3a2 2 0 001.85 1.995L8 18h3v-5zm7 0h-5v5h3a2 2 0 001.995-1.85L18 16v-3zm-7-7H8a2 2 0 00-1.995 1.85L6 8v3h5V6zm5 0h-3v5h5V8a2 2 0 00-2-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewCardMd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_card_md',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 13a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2v-3a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2v-3a2 2 0 012-2h3zM7.5 15a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3zM9 4a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2V6a2 2 0 012-2h3zM7.5 6a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewCardSm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_card_sm',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7 16a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 10a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 4a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 13a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 17h10a1 1 0 000-2zm1-10a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 9h10a1 1 0 000-2z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewMatrix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_matrix',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 19a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h14a2 2 0 012 2v14zM5 16v2a1 1 0 00.883.993L6 19h2v-3H5zm9 0h-4v3h4v-3zm5 0h-3v3h2a1 1 0 00.993-.883L19 18v-2zm-5-6h-4v4h4v-4zm5 0h-3v4h3v-4zm-5-5h-4v3h4V5zm4 0h-2v3h3V6a1 1 0 00-1-1zM8 5H6a1 1 0 00-.993.883L5 6v2h3V5zm-3 9h3v-4H5v4z\"/></svg>`,\n}"
            },
            {
                "name": "pepIconViewTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "literal type",
                "defaultValue": "{\n    name: 'view_table',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 5a2 2 0 012 2v10a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm0 10H6v1a1 1 0 00.883.993L7 17h10a1 1 0 001-1v-1zm0-4H6v2h12v-2zm-1-4H7a1 1 0 00-1 1v1h12V8a1 1 0 00-.883-.993L17 7z\"/></svg>`,\n}"
            },
            {
                "name": "pepperiComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-elements/src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepAttachmentModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    // PepInternalButtonModule,\n    PepMenuModule,\n    PepQuantitySelectorModule,\n    // PepRichHtmlTextareaModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n]"
            },
            {
                "name": "pepperiComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
            },
            {
                "name": "PepSmartFilterOperators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "object",
                "defaultValue": "{\n    Equals: Equals,\n    NotEqual: NotEqual,\n    LessThan: LessThan,\n    // LessThanOrEquals: LessThanOrEquals,\n    GreaterThan: GreaterThan,\n    // GreaterThanOrEquals: GreaterThanOrEquals,\n    NumberRange: NumberRange,\n    // Contains: Contains,\n    // BeginsWith: BeginsWith,\n    // EndsWith: EndsWith,\n    // After: After,\n    // Before: Before,\n    InTheLast: InTheLast,\n    Today: Today,\n    ThisWeek: ThisWeek,\n    ThisMonth: ThisMonth,\n    DateRange: DateRange,\n    DueIn: DueIn,\n    On: On,\n    NotInTheLast: NotInTheLast,\n    NotDueIn: NotDueIn,\n    IsEmpty: IsEmpty,\n    IsNotEmpty: IsNotEmpty,\n    In: In,\n}"
            },
            {
                "name": "PepSmartFilterOperatorUnits",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "object",
                "defaultValue": "{\n    Days: Days,\n    Weeks: Weeks,\n    Months: Months,\n    Years: Years,\n}"
            },
            {
                "name": "pipeList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepCapitalizePipe,\n    PepEncodePipe,\n    PepEscapePipe,\n    PepReplaceLineBreaksPipe,\n    PepDateFormatterPipe,\n    PepDateStringFormatterPipe,\n    PepSafeHtmlPipe,\n    PepSafePipe,\n    PepSplitUppercasePipe,\n    PepToNumberPipe,\n]"
            },
            {
                "name": "portalList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "[]",
                "defaultValue": "[PepAttachDirective, PepTargetDirective]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib-elements/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-app/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SIX_DIGIT_HEX_COLOR_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "type": "",
                "defaultValue": "/^[0-9a-fA-F]{6}$/"
            },
            {
                "name": "SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "type": "",
                "defaultValue": "/^#[0-9a-fA-F]{6}$/"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n    component: Button,\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n    component: Header,\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n    component: Page,\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                "type": "Story<PepTextboxComponent>",
                "defaultValue": "(args: PepTextboxComponent) => ({\r\n    component: PepTextboxComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "ThisMonth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'thisMonth',\n    name: 'THIS_MONTH',\n    short: 'This month',\n    componentType: ['date'],\n}"
            },
            {
                "name": "ThisWeek",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'thisWeek',\n    name: 'THIS_WEEK',\n    short: 'This week',\n    componentType: ['date'],\n}"
            },
            {
                "name": "THREE_DIGIT_HEX_COLOR_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "type": "",
                "defaultValue": "/^[0-9a-fA-F]{3}$/"
            },
            {
                "name": "THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "type": "",
                "defaultValue": "/^#[0-9a-fA-F]{3}$/"
            },
            {
                "name": "Today",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperator",
                "defaultValue": "{\n    id: 'today',\n    name: 'TODAY',\n    short: 'Today',\n    componentType: ['date'],\n}"
            },
            {
                "name": "utilitiesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "[]",
                "defaultValue": "[\n    PepInputAutoWidthDirective,\n    PepButtonBlurDirective,\n    PepButtonLoaderDirective,\n    PepMenuBlurDirective,\n    PepDataQaDirective,\n    // PreventDoubleClickDirective,\n    PepPreventMultiClickDirective,\n]"
            },
            {
                "name": "Weeks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperatorUnit",
                "defaultValue": "{\n    id: 'weeks',\n    name: 'WEEKS',\n    componentType: ['date'],\n}"
            },
            {
                "name": "Years",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "IPepSmartFilterOperatorUnit",
                "defaultValue": "{\n    id: 'years',\n    name: 'YEARS',\n    componentType: ['date'],\n}"
            }
        ],
        "functions": [
            {
                "name": "contrast",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "str1"
                    },
                    {
                        "name": "str2"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "str1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertHslToStringHsl",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "hsl"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "hsl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createBooleanSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createCurrencySmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createDateSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createDateTimeSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createIntSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createMultiSelectSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createPercentageSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createRealSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSmartFilter",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "fieldId"
                    },
                    {
                        "name": "operator"
                    },
                    {
                        "name": "first",
                        "type": "any"
                    },
                    {
                        "name": "second",
                        "type": "any",
                        "optional": true
                    }
                ],
                "returnType": "IPepSmartFilterData",
                "jsdoctags": [
                    {
                        "name": "fieldId",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operator",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "first",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "second",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSmartFilterField",
                "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "type"
                    }
                ],
                "returnType": "PepSmartFilterBaseField",
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createTranslateLoader",
                "file": "projects/ngx-lib-elements/src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    },
                    {
                        "name": "PepFileService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "PepFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createTranslateLoader",
                "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    },
                    {
                        "name": "fileService"
                    },
                    {
                        "name": "addonService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createViewerConfig",
                "file": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "translate"
                    }
                ],
                "returnType": "ImageViewerConfig",
                "jsdoctags": [
                    {
                        "name": "translate",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "escape",
                "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "s"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "s",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "findClosestAccessibleColor",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "adjustableColor"
                    },
                    {
                        "name": "otherColor"
                    },
                    {
                        "name": "contrastRatio"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "adjustableColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contrastRatio",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "findClosestAccessibleDarkerColor",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "adjustableColor"
                    },
                    {
                        "name": "otherColor"
                    },
                    {
                        "name": "contrastRatio"
                    }
                ],
                "returnType": "IPepClosestColor",
                "jsdoctags": [
                    {
                        "name": "adjustableColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contrastRatio",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "findClosestAccessibleLighterColor",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "adjustableColor"
                    },
                    {
                        "name": "otherColor"
                    },
                    {
                        "name": "contrastRatio"
                    }
                ],
                "returnType": "IPepClosestColor",
                "jsdoctags": [
                    {
                        "name": "adjustableColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherColor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "contrastRatio",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hex2hsl",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "str"
                    }
                ],
                "returnType": "IPepHslColor",
                "jsdoctags": [
                    {
                        "name": "str",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hex2rgb",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Convert hex string to rgb color.</p>\n",
                "args": [
                    {
                        "name": "str"
                    }
                ],
                "returnType": "IPepRgbColor",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1758,
                            "end": 1761,
                            "flags": 0,
                            "escapedText": "str"
                        },
                        "tagName": {
                            "pos": 1752,
                            "end": 1757,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The hex string to convert.</p>\n"
                    }
                ]
            },
            {
                "name": "hex2sixDigitHex",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Convert hex string to 6 digits hex string.</p>\n",
                "args": [
                    {
                        "name": "str"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 569,
                            "end": 572,
                            "flags": 0,
                            "escapedText": "str"
                        },
                        "tagName": {
                            "pos": 563,
                            "end": 568,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The string to convert.</p>\n"
                    }
                ]
            },
            {
                "name": "hsl2hex",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "hsl"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "hsl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hsl2rgb",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {}
                ],
                "returnType": "IPepRgbColor",
                "jsdoctags": [
                    {
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hslString2hsl",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "str"
                    }
                ],
                "returnType": "IPepHslColor",
                "jsdoctags": [
                    {
                        "name": "str",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "relativeLuminance",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {}
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rgb2hsl",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {}
                ],
                "returnType": "IPepHslColor",
                "jsdoctags": [
                    {
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rgb2sixDigitHex",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Convert rgb color to 6 digits hex string.</p>\n",
                "args": [
                    {
                        "name": "color"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1235,
                            "end": 1240,
                            "flags": 0,
                            "escapedText": "color"
                        },
                        "tagName": {
                            "pos": 1229,
                            "end": 1234,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The rgb color to convert.</p>\n"
                    }
                ]
            },
            {
                "name": "rgbString2hsl",
                "file": "projects/ngx-lib/color/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "str"
                    }
                ],
                "returnType": "IPepHslColor",
                "jsdoctags": [
                    {
                        "name": "str",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "IconNameSubset",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "description": "",
                "kind": 175
            },
            {
                "name": "PepBreadCrumbsDisplayType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"label\" | \"items\"",
                "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepCheckboxFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"booleanText\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepColorType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"any\" | \"main\" | \"success\" | \"caution\"",
                "file": "projects/ngx-lib/color/color.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepDateFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"datetime\" | \"date\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepDialogActionsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"close\" | \"cancel-continue\" | \"cancel-ok\" | \"cancel-delete\" | \"custom\"",
                "file": "projects/ngx-lib/dialog/dialog.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepDialogSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inline\" | \"small\" | \"regular\" | \"large\" | \"full-screen\"",
                "file": "projects/ngx-lib/dialog/dialog.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepFileType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"script\" | \"style\"",
                "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepFooterStateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"visible\" | \"hidden\"",
                "file": "projects/ngx-lib/top-bar/top-bar.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepGroupButtonsViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"regular\" | \"dropdown\" | \"split\"",
                "file": "projects/ngx-lib/group-buttons/group-buttons.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepHorizontalAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"center\" | \"right\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "<p>Allowed horizontal alignment options </p>\n",
                "kind": 168
            },
            {
                "name": "PepIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"arrow_back\" | \"arrow_down_alt\" | \"arrow_down\" | \"arrow_either\" | \"arrow_left_alt\" | \"arrow_left\" | \"arrow_right_alt\" | \"arrow_right\" | \"arrow_two_ways_hor_l\" | \"arrow_two_ways_hor_r\" | \"arrow_two_ways_ver_b\" | \"arrow_two_ways_ver_t\" | \"arrow_up_alt\" | \"arrow_up\" | \"barnd_pepperi\" | \"indicator_dot_placeholder\" | \"misc_excel\" | \"no_image_2\" | \"no_image\" | \"number_coins\" | \"number_decimal\" | \"number_dollar\" | \"number_euro\" | \"number_minus\" | \"number_number\" | \"number_percent\" | \"number_plus\" | \"ripples_transparent\" | \"shopping_cart\" | \"shopping_paper\" | \"system_attach\" | \"system_avatar\" | \"system_bin\" | \"system_bolt\" | \"system_chat\" | \"system_circle\" | \"system_close\" | \"system_doc\" | \"system_door\" | \"system_dot_ellipsis\" | \"system_edit\" | \"system_education\" | \"system_email\" | \"system_file_download\" | \"system_file_upload_cloud\" | \"system_file_upload\" | \"system_filter_2\" | \"system_filter\" | \"system_full_screen\" | \"system_heart\" | \"system_home\" | \"system_info\" | \"system_inventory\" | \"system_link\" | \"system_map\" | \"system_menu_dots\" | \"system_menu\" | \"system_move\" | \"system_must\" | \"system_off_line\" | \"system_ok\" | \"system_pause\" | \"system_phone\" | \"system_play\" | \"system_print\" | \"system_processing\" | \"system_question\" | \"system_rotate_device\" | \"system_search\" | \"system_select\" | \"system_settings\" | \"system_signature\" | \"system_spinner\" | \"system_support\" | \"system_texterea\" | \"system_tool\" | \"system_view\" | \"time_cal\" | \"time_datetime\" | \"time_duration\" | \"time_time\" | \"view_card_lg\" | \"view_card_md\" | \"view_card_sm\" | \"view_line\" | \"view_matrix\" | \"view_table\"",
                "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepInternalButtonFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"reference\" | \"listofobjects\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepLayoutType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"form\" | \"card\" | \"table\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "<p>Allowed layout options </p>\n",
                "kind": 168
            },
            {
                "name": "PepListCarouselSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\"",
                "file": "projects/ngx-lib/list/list-carousel.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepListPagerType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"pages\" | \"scroll\"",
                "file": "projects/ngx-lib/list/list.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepListSelectionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"none\" | \"single\" | \"single-action\" | \"multi\"",
                "file": "projects/ngx-lib/list/list.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepListViewDisplayType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"menu\" | \"buttons\"",
                "file": "projects/ngx-lib/list/list-views.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepListViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cards\" | \"lines\" | \"table\"",
                "file": "projects/ngx-lib/form/internal-list.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepListViewType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"\" | \"cards\" | \"lines\" | \"table\" | \"map\"",
                "file": "projects/ngx-lib/list/list.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepMenuItemType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"regular\" | \"splitter\"",
                "file": "projects/ngx-lib/menu/menu.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepMenuStateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"visible\" | \"hidden\"",
                "file": "projects/ngx-lib/menu/menu.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepMenuType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"action\" | \"action-select\" | \"select\"",
                "file": "projects/ngx-lib/menu/menu.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepOrientationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"landscape\" | \"portrait\"",
                "file": "projects/ngx-lib/src/core/layout/layout.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepQuantitySelectorFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"packageButton\" | \"qs\" | \"qsForMatrix\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSearchStateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"open\" | \"close\"",
                "file": "projects/ngx-lib/search/search.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSearchTriggerType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"keydown\" | \"click\"",
                "file": "projects/ngx-lib/search/search.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSearchType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"regular\" | \"auto-complete\"",
                "file": "projects/ngx-lib/search/search.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSelectFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"select\" | \"multi\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSideBarStateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"open\" | \"close\"",
                "file": "projects/ngx-lib/side-bar/side-bar.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "<p>Allowed size options </p>\n",
                "kind": 168
            },
            {
                "name": "PepSmartFilterComponentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"number\" | \"date\" | \"multi-select\" | \"boolean\"",
                "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSmartFilterOperatorType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"eq\" | \"neq\" | \"lt\" | \"gt\" | \"ltoe\" | \"gtoe\" | \"numberRange\" | \"contains\" | \"beginsWith\" | \"endsWith\" | \"after\" | \"before\" | \"inTheLast\" | \"today\" | \"thisWeek\" | \"thisMonth\" | \"dateRange\" | \"dueIn\" | \"on\" | \"notInTheLast\" | \"notDueIn\" | \"isEmpty\" | \"isNotEmpty\" | \"in\"",
                "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSmartFilterOperatorUnitType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"days\" | \"weeks\" | \"months\" | \"years\"",
                "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepSmartFilterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"boolean\" | \"currency\" | \"date\" | \"date-time\" | \"int\" | \"multi-select\" | \"percentage\" | \"real\"",
                "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepStyleType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"weak\" | \"weak-invert\" | \"regular\" | \"strong\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "<p>Allowed style options </p>\n",
                "kind": 168
            },
            {
                "name": "PepTextboxFieldType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"link\" | \"email\" | \"phone\" | \"duration\" | \"int\" | \"percentage\" | \"currency\" | \"real\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "PepVerticalAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"middle\" | \"bottom\"",
                "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "description": "<p>Allowed vertical alignment options </p>\n",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "FIELD_TYPE",
                "childs": [
                    {
                        "name": "Default",
                        "value": "0"
                    },
                    {
                        "name": "TextBox",
                        "value": "1"
                    },
                    {
                        "name": "LimitedLengthTextBox",
                        "value": "2"
                    },
                    {
                        "name": "TextArea",
                        "value": "3"
                    },
                    {
                        "name": "TextHeader",
                        "value": "4"
                    },
                    {
                        "name": "Date",
                        "value": "5"
                    },
                    {
                        "name": "DateAndTime",
                        "value": "6"
                    },
                    {
                        "name": "NumberInteger",
                        "value": "7"
                    },
                    {
                        "name": "NumberReal",
                        "value": "8"
                    },
                    {
                        "name": "Currency",
                        "value": "9"
                    },
                    {
                        "name": "Boolean",
                        "value": "10"
                    },
                    {
                        "name": "ComboBox",
                        "value": "11"
                    },
                    {
                        "name": "MultiTickBox",
                        "value": "12"
                    },
                    {
                        "name": "Separator",
                        "value": "13"
                    },
                    {
                        "name": "Address",
                        "value": "14"
                    },
                    {
                        "name": "Percentage",
                        "value": "15"
                    },
                    {
                        "name": "EmptyComboBox",
                        "value": "16"
                    },
                    {
                        "name": "InternalLink",
                        "value": "17"
                    },
                    {
                        "name": "Email",
                        "value": "18"
                    },
                    {
                        "name": "LimitedDate",
                        "value": "19"
                    },
                    {
                        "name": "Image",
                        "value": "20"
                    },
                    {
                        "name": "MultiTickBoxToComboBox",
                        "value": "21"
                    },
                    {
                        "name": "EmptyMultiTickBox",
                        "value": "22"
                    },
                    {
                        "name": "Totals",
                        "value": "23"
                    },
                    {
                        "name": "Attachment",
                        "value": "24"
                    },
                    {
                        "name": "Signature",
                        "value": "25"
                    },
                    {
                        "name": "Link",
                        "value": "26"
                    },
                    {
                        "name": "ImageURL",
                        "value": "27"
                    },
                    {
                        "name": "NumberIntegerQuantitySelector",
                        "value": "28"
                    },
                    {
                        "name": "NumberRealQuantitySelector",
                        "value": "29"
                    },
                    {
                        "name": "NumberIntegerForMatrix",
                        "value": "30"
                    },
                    {
                        "name": "NumberRealForMatrix",
                        "value": "31"
                    },
                    {
                        "name": "Images",
                        "value": "32"
                    },
                    {
                        "name": "Indicators",
                        "value": "33"
                    },
                    {
                        "name": "CalculatedReal",
                        "value": "34"
                    },
                    {
                        "name": "CalculatedInt",
                        "value": "35"
                    },
                    {
                        "name": "CalculatedString",
                        "value": "36"
                    },
                    {
                        "name": "CalculatedDate",
                        "value": "37"
                    },
                    {
                        "name": "CalculatedBool",
                        "value": "38"
                    },
                    {
                        "name": "MapDataDropDown",
                        "value": "39"
                    },
                    {
                        "name": "MapDataReal",
                        "value": "40"
                    },
                    {
                        "name": "MapDataString",
                        "value": "41"
                    },
                    {
                        "name": "MapDataInt",
                        "value": "42"
                    },
                    {
                        "name": "Sum",
                        "value": "43"
                    },
                    {
                        "name": "Phone",
                        "value": "44"
                    },
                    {
                        "name": "UrlForApi",
                        "value": "45"
                    },
                    {
                        "name": "ManyToManyUrlForApi",
                        "value": "46"
                    },
                    {
                        "name": "ReferenceType",
                        "value": "47"
                    },
                    {
                        "name": "GuidReferenceType",
                        "value": "48"
                    },
                    {
                        "name": "Button",
                        "value": "49"
                    },
                    {
                        "name": "InternalPage",
                        "value": "50"
                    },
                    {
                        "name": "Duration",
                        "value": "51"
                    },
                    {
                        "name": "ListOfObjects",
                        "value": "52"
                    },
                    {
                        "name": "Package",
                        "value": "53"
                    },
                    {
                        "name": "BooleanText",
                        "value": "55"
                    },
                    {
                        "name": "RichTextHTML",
                        "value": "56"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
            },
            {
                "name": "PepContrastRatioType",
                "childs": [
                    {
                        "name": "AA",
                        "value": "4.5"
                    },
                    {
                        "name": "AAA",
                        "value": "7"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-lib/color/color-picker.component.ts"
            },
            {
                "name": "PepScreenSizeType",
                "childs": [
                    {
                        "name": "XL"
                    },
                    {
                        "name": "LG"
                    },
                    {
                        "name": "MD"
                    },
                    {
                        "name": "SM"
                    },
                    {
                        "name": "XS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-lib/src/core/layout/layout.service.ts"
            },
            {
                "name": "X_ALIGNMENT_TYPE",
                "childs": [
                    {
                        "name": "None",
                        "value": "0"
                    },
                    {
                        "name": "Left",
                        "value": "1"
                    },
                    {
                        "name": "Right",
                        "value": "2"
                    },
                    {
                        "name": "Center",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
            },
            {
                "name": "Y_ALIGNMENT_TYPE",
                "childs": [
                    {
                        "name": "None",
                        "value": "0"
                    },
                    {
                        "name": "Top",
                        "value": "1"
                    },
                    {
                        "name": "Bottom",
                        "value": "2"
                    },
                    {
                        "name": "Center",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
            }
        ],
        "groupedVariables": {
            "projects/ngx-lib/list/virtual-scroll.component.ts": [
                {
                    "name": "_",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/list/virtual-scroll.component.ts",
                    "type": "any"
                }
            ],
            "projects/ngx-lib/src/core/layout/layout.service.ts": [
                {
                    "name": "_BIDI_RTL_LANGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/core/layout/layout.service.ts",
                    "type": "[]",
                    "defaultValue": "[\n    'ae' /* Avestan */,\n    'ar' /* 'العربية', Arabic */,\n    'arc' /* Aramaic */,\n    'bcc' /* 'بلوچی مکرانی', Southern Balochi */,\n    'bqi' /* 'بختياري', Bakthiari */,\n    'ckb' /* 'Soranî / کوردی', Sorani */,\n    'dv' /* Dhivehi */,\n    'fa' /* 'فارسی', Persian */,\n    'glk' /* 'گیلکی', Gilaki */,\n    'he' /* 'עברית', Hebrew */,\n    'ku' /* 'Kurdî / كوردی', Kurdish */,\n    'mzn' /* 'مازِرونی', Mazanderani */,\n    'nqo' /* N'Ko */,\n    'pnb' /* 'پنجابی', Western Punjabi */,\n    'ps' /* 'پښتو', Pashto, */,\n    'sd' /* 'سنڌي', Sindhi */,\n    'ug' /* 'Uyghurche / ئۇيغۇرچە', Uyghur */,\n    'ur' /* 'اردو', Urdu */,\n    'yi' /* 'ייִדיש', Yiddish */,\n]"
                }
            ],
            "projects/ngx-lib/textbox/stories/textbox.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                    "type": "Story<PepTextboxComponent>",
                    "defaultValue": "(args: PepTextboxComponent) => ({\r\n    component: PepTextboxComponent,\r\n    props: args,\r\n})"
                }
            ],
            "projects/ngx-lib/src/ngx-lib.module.ts": [
                {
                    "name": "clipboardList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                    "type": "[]",
                    "defaultValue": "[PepClipboardDirective]"
                },
                {
                    "name": "layoutList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                    "type": "[]",
                    "defaultValue": "[PepRtlClassDirective, PepRtlDirectionDirective]"
                },
                {
                    "name": "pipeList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepCapitalizePipe,\n    PepEncodePipe,\n    PepEscapePipe,\n    PepReplaceLineBreaksPipe,\n    PepDateFormatterPipe,\n    PepDateStringFormatterPipe,\n    PepSafeHtmlPipe,\n    PepSafePipe,\n    PepSplitUppercasePipe,\n    PepToNumberPipe,\n]"
                },
                {
                    "name": "portalList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                    "type": "[]",
                    "defaultValue": "[PepAttachDirective, PepTargetDirective]"
                },
                {
                    "name": "utilitiesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/ngx-lib.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepInputAutoWidthDirective,\n    PepButtonBlurDirective,\n    PepButtonLoaderDirective,\n    PepMenuBlurDirective,\n    PepDataQaDirective,\n    // PreventDoubleClickDirective,\n    PepPreventMultiClickDirective,\n]"
                }
            ],
            "projects/ngx-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ngx-lib-elements/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-elements/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-elements/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/web-app/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ngx-lib/smart-filters/common/model/operator.ts": [
                {
                    "name": "DateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'dateRange',\n    name: 'DATE_RANGE',\n    short: 'Range',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "Days",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperatorUnit",
                    "defaultValue": "{\n    id: 'days',\n    name: 'DAYS',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "DueIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'dueIn',\n    name: 'DUE_IN',\n    short: 'Due in',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "Equals",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'eq',\n    name: 'EQUAL',\n    short: '=',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n}"
                },
                {
                    "name": "GreaterThan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'gt',\n    name: 'GREATER_THEN',\n    short: '>',\n    componentType: ['number'],\n}"
                },
                {
                    "name": "In",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'in',\n    name: 'IN',\n    short: 'In',\n    componentType: ['multi-select'],\n}"
                },
                {
                    "name": "InTheLast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'inTheLast',\n    name: 'IN_THE_LAST',\n    short: 'In the last',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "IsEmpty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'isEmpty',\n    name: 'IS_EMPTY',\n    short: 'Is empty',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "IsNotEmpty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'isNotEmpty',\n    name: 'IS_NOT_EMPTY',\n    short: 'Is not empty',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "LessThan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'lt',\n    name: 'LESS_THEN',\n    short: '<',\n    componentType: ['number'],\n}"
                },
                {
                    "name": "Months",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperatorUnit",
                    "defaultValue": "{\n    id: 'months',\n    name: 'MONTHS',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "NotDueIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'notDueIn',\n    name: 'NOT_DUE_IN',\n    short: 'Not due in',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "NotEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'neq',\n    name: 'NOT_EQUAL',\n    short: '<>',\n    componentType: [\n        'number',\n        // 'multi-select',\n        // 'date',\n        // 'text',\n        // 'auto-complete',\n        // 'select',\n    ],\n}"
                },
                {
                    "name": "NotInTheLast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'notInTheLast',\n    name: 'NOT_IN_THE_LAST',\n    short: 'Not in the last',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "NumberRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'numberRange',\n    name: 'NUMBER_RANGE',\n    short: 'Range',\n    componentType: ['number'],\n}"
                },
                {
                    "name": "On",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'on',\n    name: 'ON',\n    short: 'On',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "PepSmartFilterOperators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "object",
                    "defaultValue": "{\n    Equals: Equals,\n    NotEqual: NotEqual,\n    LessThan: LessThan,\n    // LessThanOrEquals: LessThanOrEquals,\n    GreaterThan: GreaterThan,\n    // GreaterThanOrEquals: GreaterThanOrEquals,\n    NumberRange: NumberRange,\n    // Contains: Contains,\n    // BeginsWith: BeginsWith,\n    // EndsWith: EndsWith,\n    // After: After,\n    // Before: Before,\n    InTheLast: InTheLast,\n    Today: Today,\n    ThisWeek: ThisWeek,\n    ThisMonth: ThisMonth,\n    DateRange: DateRange,\n    DueIn: DueIn,\n    On: On,\n    NotInTheLast: NotInTheLast,\n    NotDueIn: NotDueIn,\n    IsEmpty: IsEmpty,\n    IsNotEmpty: IsNotEmpty,\n    In: In,\n}"
                },
                {
                    "name": "PepSmartFilterOperatorUnits",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "object",
                    "defaultValue": "{\n    Days: Days,\n    Weeks: Weeks,\n    Months: Months,\n    Years: Years,\n}"
                },
                {
                    "name": "ThisMonth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'thisMonth',\n    name: 'THIS_MONTH',\n    short: 'This month',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "ThisWeek",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'thisWeek',\n    name: 'THIS_WEEK',\n    short: 'This week',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "Today",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperator",
                    "defaultValue": "{\n    id: 'today',\n    name: 'TODAY',\n    short: 'Today',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "Weeks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperatorUnit",
                    "defaultValue": "{\n    id: 'weeks',\n    name: 'WEEKS',\n    componentType: ['date'],\n}"
                },
                {
                    "name": "Years",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                    "type": "IPepSmartFilterOperatorUnit",
                    "defaultValue": "{\n    id: 'years',\n    name: 'YEARS',\n    componentType: ['date'],\n}"
                }
            ],
            "projects/ngx-lib/src/core/customization/customization.model.ts": [
                {
                    "name": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "type": "PepHorizontalAlignment",
                    "defaultValue": "'left'",
                    "description": "<p>Default horizontal alignment. </p>\n"
                },
                {
                    "name": "DEFAULT_VERTICAL_ALIGNMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "type": "PepVerticalAlignment",
                    "defaultValue": "'top'",
                    "description": "<p>Default horizontal alignment. </p>\n"
                }
            ],
            "projects/ngx-lib/list/list.model.ts": [
                {
                    "name": "DEFAULT_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/list/list.model.ts",
                    "type": "number",
                    "defaultValue": "50"
                }
            ],
            "projects/ngx-lib/src/core/common/services/file.service.ts": [
                {
                    "name": "document",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
                    "type": "any"
                }
            ],
            "projects/web-app/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n}"
                }
            ],
            "projects/web-app/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n}"
                }
            ],
            "projects/web-app/src/app/inline-list-example/fake-data.ts": [
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/app/inline-list-example/fake-data.ts",
                    "type": "object",
                    "defaultValue": "{\n    Addons: [\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        }\n    ],\n}"
                }
            ],
            "projects/web-app/src/app/list-example/fake-data.ts": [
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/app/list-example/fake-data.ts",
                    "type": "object",
                    "defaultValue": "{\n    Addons: [\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\n            Addon: {\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\n                Name: 'Add-ons Manager',\n                Description: 'Manage your add-ons',\n                SystemData:\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\n                Hidden: true,\n                Type: 1,\n                CreationDate: '2020-04-22T11:56:09.863Z',\n                ModificationDate: '2020-06-08T10:34:40.417Z',\n            },\n            Version: 'v1.0',\n            SystemData:\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\n            CreationDate: '2020-04-22T11:58:42.443Z',\n            ModificationDate: '2020-04-22T11:58:50.587Z',\n        },\n        {\n            Type: 'OverwriteExisting',\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\n            Addon: {\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\n                Name: 'Addons Manager',\n                Description: 'Manage the addons (install, uninstall, upgrade)',\n                SystemData:\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-08T09:39:08.703Z',\n                ModificationDate: '2020-08-05T13:19:45.87Z',\n            },\n            Version: '0.3.3',\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\n            CreationDate: '2020-06-21T13:19:14.54Z',\n            ModificationDate: '2020-08-03T08:19:09.013Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\n            Addon: {\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\n                Name: 'Automated Jobs',\n                Description: 'Run, Schedule and Audit your jobs',\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-09T07:44:49.883Z',\n                ModificationDate: '2020-06-10T09:14:07.817Z',\n            },\n            Version: '1.0.53',\n            SystemData: '{\"Version\":\"1.0.53\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\n            CreationDate: '2020-06-09T09:20:16.427Z',\n            ModificationDate: '2020-08-30T12:01:12.083Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\n            Addon: {\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\n                Name: 'CPI Node',\n                Description: 'Manages the embeded Node.js app in the CPI',\n                SystemData:\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\n                Hidden: true,\n                Type: 2,\n                CreationDate: '2020-05-25T08:31:44.01Z',\n                ModificationDate: '2020-06-23T10:19:45.763Z',\n            },\n            Version: '0.0.3',\n            SystemData: '{\"Version\":\"0.0.3\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\n            CreationDate: '2020-06-17T14:16:31.71Z',\n            ModificationDate: '2020-08-27T11:17:12.67Z',\n        },\n        {\n            Type: 'UseExisting',\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\n            Addon: {\n                UUID: '00000000-0000-0000-0000-000000abcdef',\n                Name: 'Cross Platforms API',\n                Description: 'Cross Platforms API (CPAPI)',\n                SystemData: '{}',\n                Hidden: false,\n                Type: 1,\n                CreationDate: '2020-06-02T09:16:49.223Z',\n                ModificationDate: '2020-08-05T13:29:18.277Z',\n            },\n            Version: 'V106',\n            SystemData: '{\"Version\":\"V106\"}',\n            AdditionalData: '{}',\n            Hidden: false,\n            PublicBaseURL:\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\n            CreationDate: '2020-06-17T20:04:02.857Z',\n            ModificationDate: '2020-08-05T08:48:45.45Z',\n        }\n    ],\n}"
                }
            ],
            "projects/ngx-lib/color/color-utils.ts": [
                {
                    "name": "FLOAT_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "type": "",
                    "defaultValue": "/^\\d+(\\.\\d+)?$/"
                },
                {
                    "name": "SIX_DIGIT_HEX_COLOR_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "type": "",
                    "defaultValue": "/^[0-9a-fA-F]{6}$/"
                },
                {
                    "name": "SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "type": "",
                    "defaultValue": "/^#[0-9a-fA-F]{6}$/"
                },
                {
                    "name": "THREE_DIGIT_HEX_COLOR_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "type": "",
                    "defaultValue": "/^[0-9a-fA-F]{3}$/"
                },
                {
                    "name": "THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "type": "",
                    "defaultValue": "/^#[0-9a-fA-F]{3}$/"
                }
            ],
            "projects/ngx-lib/src/core/http/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/src/core/http/interceptors/index.ts",
                    "type": "[]",
                    "defaultValue": "[\n    // { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: CacheInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: ConvertInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: PepErrorInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: FakeInterceptor, multi: true },\n    //   { provide: HTTP_INTERCEPTORS, useClass: HeaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: PepLoaderInterceptor, multi: true },\n    {\n        provide: HTTP_INTERCEPTORS,\n        useClass: PepProfilerInterceptor,\n        multi: true,\n    },\n]"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n    component: Button,\n    props: args,\n})"
                }
            ],
            "projects/ngx-lib/list/list.module.ts": [
                {
                    "name": "listComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/list/list.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepListComponent,\n    PepListActionsComponent,\n    PepListCarouselComponent,\n    PepListChooserComponent,\n    PepListPagerComponent,\n    PepListSortingComponent,\n    PepListTotalComponent,\n    PepListViewsComponent,\n]"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n    component: Header,\n    props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n    component: Page,\n    props: args,\n})"
                }
            ],
            "projects/web-app/src/app/modules/material.module.ts": [
                {
                    "name": "matComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/app/modules/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDatetimepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatNativeDatetimeModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    MatFormFieldModule,\n]"
                }
            ],
            "projects/ngx-lib/form/form.module.ts": [
                {
                    "name": "pepComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/form/form.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepAddressModule,\n    PepAttachmentModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepDateModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSignatureModule,\n    PepTextareaModule,\n    PepTextboxModule,\n]"
                }
            ],
            "projects/ngx-lib/icon/icon-generated.model.ts": [
                {
                    "name": "pepIconArrowBack",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_back',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.713 4.309c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0zm-7 0c.383.412.383 1.08 0 1.491l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_down',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.8 9.287l5.454 3.916c.412.382 1.08.382 1.492 0L18.2 9.287a1.113 1.113 0 011.491 0 .93.93 0 010 1.384l-6.2 5.756c-.823.764-2.159.764-2.982 0l-6.2-5.756a.93.93 0 010-1.384 1.113 1.113 0 011.491 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowDownAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_down_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.933 20a2 2 0 01-.059-.004L12 20a2.026 2.026 0 01-.527-.07l-.029-.009a1.476 1.476 0 01-.121-.039l-.01-.004a2.006 2.006 0 01-.405-.202l-.017-.012-6-4a2 2 0 012.218-3.328L10 14.263 10 6a2 2 0 114 0v8.263l2.89-1.927a2 2 0 012.22 3.328l-6 4-.012.008c-.124.081-.257.15-.398.202l-.012.004-.11.037a1.984 1.984 0 01-.025.008l-.011.002a1.315 1.315 0 01-.124.031l-.026.005a1.194 1.194 0 01-.131.022c-.007 0-.014.002-.02.003l-.02.002a1.995 1.995 0 01-.053.005l-.044.003a1.789 1.789 0 01-.057.003z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowEither",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_either',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.35 14.215l4.09 2.937a.835.835 0 001.12 0l4.09-2.937a.835.835 0 011.118 0 .698.698 0 010 1.038l-4.65 4.317a1.67 1.67 0 01-2.237 0l-4.65-4.317a.698.698 0 010-1.038.835.835 0 011.12 0zM13.12 4.43l4.65 4.317a.698.698 0 010 1.038.835.835 0 01-1.12 0l-4.09-2.937a.835.835 0 00-1.118 0L7.35 9.785a.835.835 0 01-1.12 0 .698.698 0 010-1.038l4.65-4.317a1.67 1.67 0 012.238 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_left',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.713 5.8l-3.916 5.454a1.113 1.113 0 000 1.492l3.916 5.454c.383.412.383 1.08 0 1.491a.93.93 0 01-1.384 0l-5.756-6.2c-.764-.823-.764-2.159 0-2.982l5.756-6.2a.93.93 0 011.384 0c.383.412.383 1.08 0 1.491z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowLeftAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_left_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 11.933a2 2 0 01.004-.059L4 12a2.026 2.026 0 01.07-.527l.009-.029a1.476 1.476 0 01.039-.121l.004-.01a2.006 2.006 0 01.202-.405l.012-.017 4-6a2 2 0 013.328 2.218L9.737 10 18 10a2 2 0 110 4H9.737l1.927 2.89a2 2 0 01-3.328 2.22l-4-6-.008-.012a1.993 1.993 0 01-.202-.398l-.004-.012-.037-.11a1.984 1.984 0 01-.008-.025l-.002-.011a1.315 1.315 0 01-.031-.124l-.005-.026a1.194 1.194 0 01-.022-.131c0-.007-.002-.014-.003-.02l-.002-.02a1.995 1.995 0 01-.005-.053l-.003-.044A1.789 1.789 0 014 12.067z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_right',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.287 4.309a.93.93 0 011.384 0l5.756 6.2c.764.823.764 2.159 0 2.982l-5.756 6.2a.93.93 0 01-1.384 0 1.113 1.113 0 010-1.491l3.916-5.454a1.113 1.113 0 000-1.492L9.287 5.8a1.113 1.113 0 010-1.491z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowRightAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_right_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20 11.933a2 2 0 00-.004-.059L20 12a2.026 2.026 0 00-.07-.527l-.009-.029a1.476 1.476 0 00-.039-.121l-.004-.01a2.006 2.006 0 00-.202-.405l-.012-.017-4-6a2 2 0 00-3.328 2.218L14.263 10 6 10a2 2 0 100 4h8.263l-1.927 2.89a2 2 0 003.328 2.22l4-6 .008-.012c.081-.124.15-.257.202-.398l.004-.012.037-.11.008-.025.002-.011a1.315 1.315 0 00.031-.124l.005-.026a1.194 1.194 0 00.022-.131c0-.007.002-.014.003-.02l.002-.02.005-.053.003-.044a1.789 1.789 0 00.003-.057z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowTwoWaysHorL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_two_ways_hor_l',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7.232 12.303a1.036 1.036 0 111.465 1.465L7.464 15H19a1 1 0 010 2H7.464l1.233 1.232a1.036 1.036 0 11-1.465 1.465l-2.929-2.93a1.032 1.032 0 01-.301-.67L4 16.019V16l.001-.019v-.078c.013-.203.085-.404.216-.573l.086-.098zm9.536-8l2.929 2.93c.186.186.287.426.301.67v.064L20 8v.034l-.002.063a1.032 1.032 0 01-.301.67l-2.93 2.93a1.036 1.036 0 11-1.464-1.465L16.536 9H5a1 1 0 01-.993-.883L4 8a1 1 0 011-1h11.536l-1.233-1.232a1.036 1.036 0 111.465-1.465z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowTwoWaysHorR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_two_ways_hor_r',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.768 12.303a1.036 1.036 0 10-1.465 1.465L16.536 15H5a1 1 0 000 2h11.536l-1.233 1.232a1.036 1.036 0 101.465 1.465l2.929-2.93c.186-.186.287-.426.301-.67l.002-.078V16l-.001-.019v-.078a1.032 1.032 0 00-.216-.573l-.086-.098zm-9.536-8l-2.929 2.93a1.032 1.032 0 00-.301.67v.064L4 8v.034l.002.063c.014.244.115.484.301.67l2.93 2.93a1.036 1.036 0 101.464-1.465L7.464 9H19a1 1 0 00.993-.883L20 8a1 1 0 00-1-1H7.464l1.233-1.232a1.036 1.036 0 10-1.465-1.465z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowTwoWaysVerB",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_two_ways_ver_b',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 16.768a1.036 1.036 0 10-1.465-1.465L9 16.536V5a1 1 0 00-2 0v11.536l-1.232-1.233a1.036 1.036 0 10-1.465 1.465l2.93 2.929c.186.186.426.287.67.301l.078.002H8l.019-.001h.078c.203-.013.404-.085.573-.216l.098-.086zm8-9.536l-2.93-2.929a1.032 1.032 0 00-.67-.301h-.064L16 4h-.034l-.063.002a1.032 1.032 0 00-.67.301l-2.93 2.93a1.036 1.036 0 101.465 1.464L15 7.464V19a1 1 0 00.883.993L16 20a1 1 0 001-1V7.464l1.232 1.233a1.036 1.036 0 101.465-1.465z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowTwoWaysVerT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_two_ways_ver_t',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.697 7.232a1.036 1.036 0 11-1.465 1.465L9 7.464V19a1 1 0 01-2 0V7.464L5.768 8.697a1.036 1.036 0 11-1.465-1.465l2.93-2.929c.186-.186.426-.287.67-.301L7.981 4H8l.019.001h.078c.203.013.404.085.573.216l.098.086zm8 9.536l-2.93 2.929a1.032 1.032 0 01-.67.301h-.064L16 20h-.034l-.063-.002a1.032 1.032 0 01-.67-.301l-2.93-2.93a1.036 1.036 0 111.465-1.464L15 16.536V5a1 1 0 01.883-.993L16 4a1 1 0 011 1v11.536l1.232-1.233a1.036 1.036 0 111.465 1.465z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_up',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.2 14.713l-5.454-3.916a1.113 1.113 0 00-1.492 0L5.8 14.713a1.113 1.113 0 01-1.491 0 .93.93 0 010-1.384l6.2-5.756c.823-.764 2.159-.764 2.982 0l6.2 5.756a.93.93 0 010 1.384 1.113 1.113 0 01-1.491 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconArrowUpAlt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'arrow_up_alt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.067 4a2 2 0 01.059.004L12 4a2.026 2.026 0 01.527.07l.029.009a1.476 1.476 0 01.121.039l.01.004a2.006 2.006 0 01.405.202l.017.012 6 4a2 2 0 01-2.218 3.328L14 9.737 14 18a2 2 0 11-4 0V9.737l-2.89 1.927a2 2 0 01-2.22-3.328l6-4 .012-.008c.124-.081.257-.15.398-.202l.012-.004.11-.037.025-.008.011-.002a1.315 1.315 0 01.124-.031l.026-.005a1.194 1.194 0 01.131-.022c.007 0 .014-.002.02-.003l.02-.002.053-.005.044-.003A1.789 1.789 0 0111.933 4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconBarndPepperi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'barnd_pepperi',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.234 10.687a.17.17 0 00-.167-.171c-.446 0-.885.372-1.44.843-.887.753-1.99 1.69-3.705 1.69-1.714 0-2.818-.937-3.705-1.69-.556-.471-.994-.843-1.44-.843a.17.17 0 00-.168.171.17.17 0 00.167.172c.327 0 .744.354 1.228.765.88.747 2.084 2.563 3.918 2.563 2.19 0 2.682-1.514 3.918-2.563.483-.41.9-.765 1.227-.765a.17.17 0 00.167-.172M6.671 7.588c0 1.039.826 1.884 1.841 1.884 1.015 0 1.841-.845 1.841-1.884 0-1.038-.826-1.883-1.841-1.883-1.015 0-1.841.845-1.841 1.883m6.866 0c0 1.039.826 1.884 1.841 1.884 1.016 0 1.841-.845 1.841-1.884 0-1.038-.825-1.883-1.84-1.883-1.016 0-1.842.845-1.842 1.883m7.386 10.922a3.46 3.46 0 00-.778-.087c-1.144 0-2.125.544-2.52 1.311-.394-.767-1.375-1.31-2.519-1.31-.266 0-.526.028-.778.086.387-.651 1.12-1.154 2.01-1.405.12-.034.244-.063.37-.087V14.658a.188.188 0 00-.185-.19.188.188 0 00-.186.19v2.056c-.751.196-1.409.559-1.885 1.037-.802.11-1.655.185-2.507.185a18.55 18.55 0 01-2.507-.184c-.475-.479-1.133-.842-1.885-1.038v-2.056a.188.188 0 00-.185-.19.188.188 0 00-.186.19V17.018c.126.024.25.053.371.087.89.25 1.622.754 2.01 1.405a3.46 3.46 0 00-.779-.087c-1.144 0-2.124.544-2.52 1.311-.394-.767-1.374-1.31-2.519-1.31-.266 0-.526.028-.778.086.39-.656 1.13-1.16 2.028-1.409.088-.024.178-.046.27-.065V7.589c0-1.833 1.456-3.323 3.247-3.323 1.79 0 2.143.995 3.248 2.555.06.085.083.19.185.19.103 0 .127-.105.186-.19 1.139-1.647 1.457-2.555 3.247-2.555 1.791 0 3.248 1.49 3.248 3.322V17.035c.088.019.173.04.258.064.904.247 1.648.753 2.04 1.411M8.068 7.588c0 .25.198.454.443.454a.449.449 0 00.443-.454.449.449 0 00-.443-.453.449.449 0 00-.443.453m-.688 0c0-.638.507-1.157 1.131-1.157s1.13.52 1.13 1.157c0 .638-.506 1.157-1.13 1.157-.624 0-1.13-.519-1.13-1.157m7.553 0c0 .25.199.454.443.454a.449.449 0 00.444-.454.449.449 0 00-.444-.453.449.449 0 00-.443.453m-.687 0c0-.638.507-1.157 1.13-1.157.624 0 1.131.52 1.131 1.157 0 .638-.507 1.157-1.13 1.157-.624 0-1.131-.519-1.131-1.157m.48 10.416a2.626 2.626 0 00-.315.374.817.817 0 00.315-.374m4.918-1.172c-.04.045-.08.092-.12.135.695.287 1.287.708 1.71 1.222.26.015.515.044.764.088-.484-.62-1.321-1.123-2.354-1.445m-14.753-.088v-5.932c-.39-.236-.78-.368-1.135-.368-.145 0-.283.023-.41.07-1.047.385-1.14 2.298-.202 4.177.426.853 1.001 1.583 1.606 2.088l.141-.035m15.852-2.053c.938-1.879.845-3.792-.203-4.177a1.184 1.184 0 00-.41-.07c-.355 0-.744.132-1.135.368v5.932c.048.01.094.022.14.035.606-.505 1.182-1.235 1.608-2.088M2.819 18.035c-.278.015-.551.041-.819.08.5-.536 1.334-.98 2.365-1.283-.628.302-1.161.713-1.546 1.203\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconIndicatorDotPlaceholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'indicator_dot_placeholder',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\"><circle cx=\"4\" cy=\"4\" r=\"3.5\" fill-rule=\"evenodd\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconMiscExcel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'misc_excel',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 4.18a1 1 0 01.993.884L16 5.18v13.64a1 1 0 01-1.048.998l-.116-.012-10-1.667a1 1 0 01-.829-.866L4 17.153V6.847a1 1 0 01.718-.96l.118-.026 10-1.667A1 1 0 0115 4.18zM19 7a1 1 0 011 1v8a1 1 0 01-1 1h-1a1 1 0 01-1-1V8a1 1 0 011-1zm-5.715.214l-2.078.224-1.243 2.976L8.769 7.7l-2.126.23 2.174 3.795L6.5 16.054l2.079.224 1.386-3.229 1.409 3.531 2.126.23-2.39-5.179 2.175-4.417z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNoImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'no_image',\n    data: `<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 988 988\" xml:space=\"preserve\"><style>.st1{fill:#c1c1c1}</style><path d=\"M-546.6 491.2h5.6v5.6h-5.6v-5.6z\" fill=\"none\"/><path class=\"st1\" d=\"M144.5-966.5c-7.8-8.6-19.4-12.9-32.3-11.6L29-969.9c-9.9.9-22.4 6.5-28.5 12.5l-137.2 137.1c-10.8 10.8-12.1 27.6-2.6 37.1l98.3 98.3c3.9 3.9 9.9 6.5 15.9 6.5 7.3 0 14.7-3 19.8-8.6L132-824.2c6.5-6.5 12.1-18.1 12.9-26.3l8.6-85.8c1.4-12.1-1.6-22.5-9-30.2zm-157 271.3c-3.5 3.5-7.8 5.2-12.1 5.2-2.2 0-5.6-.4-8.2-3l-98.3-98.4c-5.2-5.2-3.9-14.7 2.6-21.1l22.4-22.4L10.3-718.4l-22.8 23.2zm155.3-242.9l-8.6 85.8c-.4 6-5.2 15.1-9.5 19.4L18.6-726.8-97.9-843.2 8.7-949.3c4.3-4.3 14.7-8.6 21.6-9.5l83.2-8.2h3.5c7.8 0 14.7 3 19.4 8.2 5.1 5.2 7.3 12.5 6.4 20.7z\"/><path class=\"st1\" d=\"M90.6-942.8c-15.5 0-28 12.5-28 28s12.5 28 28 28 28-12.5 28-28-12.5-28-28-28zm0 44.9c-9.5 0-16.8-7.8-16.8-16.8s7.8-16.8 16.8-16.8c9.5 0 16.8 7.8 16.8 16.8s-7.7 16.8-16.8 16.8zM-357.1-1138c-15.5-17.3-38.8-25.9-64.7-23.3l-166.4 16.5c-19.9 1.7-44.9 12.9-56.9 25l-274.4 274.3c-21.5 21.5-24.1 55.2-5.2 74.2L-728-574.6c7.7 7.7 19.8 12.9 31.9 12.9 14.7 0 29.3-6.1 39.7-17.3l274.2-274.3c12.9-12.9 24.1-36.2 25.9-52.6l17.3-171.7c2.6-24.1-3.4-44.8-18.1-60.4zm-314 542.6c-6.9 6.9-15.5 10.4-24.2 10.4-4.3 0-11.2-.9-16.4-6.1l-196.7-196.6c-10.3-10.3-7.7-29.3 5.2-42.3l44.9-44.9L-625.4-642l-45.7 46.6zm310.5-485.6l-17.2 171.6c-.9 12.1-10.3 30.2-19 38.8L-609-658.3l-233-232.9 213.2-212.2c8.6-8.6 29.3-17.3 43.1-19l166.5-16.4h6.9c15.5 0 29.3 6.1 38.8 16.4 10.3 10.3 14.7 25 12.9 41.4z\"/><path class=\"st1\" d=\"M-465-1090.5c-31.1 0-56.1 25-56.1 56.1s25 56.1 56.1 56.1 56.1-25 56.1-56.1-25-56.1-56.1-56.1zm0 89.7c-19 0-33.7-15.5-33.7-33.7 0-18.2 15.5-33.7 33.7-33.7 19 0 33.7 15.5 33.7 33.7 0 18.2-15.5 33.7-33.7 33.7z\"/><g><path class=\"st1\" d=\"M915.2 79.6c-23.3-25.9-58.2-38.8-97-34.9L568.5 69.3c-29.8 2.6-67.3 19.4-85.4 37.5L71.6 518.3c-32.3 32.3-36.2 82.8-7.8 111.3l295 295c11.6 11.6 29.7 19.4 47.8 19.4 22 0 44-9.1 59.5-25.9l411.5-411.5c19.4-19.4 36.2-54.3 38.8-78.9l25.9-257.5c3.9-36.2-5.1-67.3-27.1-90.6zm-471 813.9c-10.4 10.4-23.3 15.6-36.3 15.6-6.5 0-16.8-1.3-24.6-9.1l-295-295c-15.5-15.5-11.6-44 7.8-63.4l67.3-67.3 349.3 349.4-68.5 69.8zM910 165l-25.9 257.5c-1.3 18.1-15.5 45.3-28.5 58.2L537.3 799.1 187.9 449.7l319.7-318.3c12.9-12.9 44-25.9 64.7-28.5L822 78.3h10.4c23.3 0 44 9.1 58.2 24.6 15.5 15.5 22 37.5 19.4 62.1z\"/><path class=\"st1\" d=\"M753.4 150.8c-46.6 0-84.1 37.5-84.1 84.1s37.5 84.1 84.1 84.1 84.1-37.5 84.1-84.1-37.5-84.1-84.1-84.1zm0 134.6c-28.5 0-50.5-23.3-50.5-50.5s23.3-50.5 50.5-50.5c28.5 0 50.5 23.3 50.5 50.5s-23.3 50.5-50.5 50.5z\"/></g></svg>`,\n}"
                },
                {
                    "name": "pepIconNoImage2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'no_image_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\"><style>.placeholder{stroke:#999;stroke-width:4;stroke-linecap:round}</style><g fill=\"none\" fill-rule=\"evenodd\"><circle class=\"placeholder\" cx=\"128\" cy=\"60\" r=\"32\"/><path class=\"placeholder\" d=\"M263 6H14a8 8 0 00-8 8v74M195.05 182.887L65.443 97.913a8 8 0 00-8.851.053L9.535 129.622A8 8 0 006 136.26V186a8 8 0 008 8h272a8 8 0 008-8v-84.869a8 8 0 00-3.368-6.523l-41.31-29.33a8 8 0 00-9.713.344l-90.374 74.339M294 85V63M294 45v-7.997M294 55.003v-2M294 29V14a8 8 0 00-8-8h-5M273 6h-2M6 122v-15.997m0-8v-2\"/></g></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberCoins",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_coins',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.5 14.244c.355.562.885 1.04 1.547 1.432-.659.27-1.047.576-1.047.824 0 .589 2.186 1.5 5 1.5 2.44 0 4.409-.685 4.888-1.251.754-.14 1.457-.338 2.085-.592.018.112.027.226.027.343 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.914.563-1.678 1.5-2.256zm13.64-3.523c.547.5.86 1.098.86 1.779 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5c0-.27.049-.526.142-.769.543.309 1.17.562 1.858.759v.01c0 .589 2.186 1.5 5 1.5s5-.911 5-1.5c0-.172-.187-.372-.522-.568.672-.33 1.238-.733 1.662-1.21zM12 5c3.814 0 7 1.328 7 3.5 0 2.172-3.186 3.5-7 3.5s-7-1.328-7-3.5C5 6.328 8.186 5 12 5zm0 2c-2.814 0-5 .911-5 1.5S9.186 10 12 10s5-.911 5-1.5S14.814 7 12 7z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberDecimal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_decimal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.55 8h2.583c.48 0 .867.448.867 1s-.387 1-.867 1h-2.891l-.308 2h2.2c.479 0 .866.447.866 1 0 .553-.387 1-.867 1h-2.506l-.637 4.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.603 14h-1.976l-.637 4.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L9.604 14H6.867C6.388 14 6 13.553 6 13c0-.553.388-1 .867-1H9.91l.308-2H7.867C7.388 10 7 9.552 7 9s.388-1 .867-1h2.66l.483-3.142a1 1 0 011.98.284L12.55 8h1.976l.483-3.142a1.002 1.002 0 011.132-.848zM5.5 16a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm8.718-6h-1.975l-.308 2h1.975l.308-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberDollar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_dollar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.203 20h1.48a.605.605 0 00.614-.591v-1.367l.307-.08C16.11 17.357 17 15.698 17 14.465c0-2.285-2.048-3.234-4.055-3.865-1.884-.598-2.487-.96-2.487-1.496 0-.48.578-.962 1.872-.962 1.426 0 2.319.39 2.7.56a.623.623 0 00.81-.284l.586-1.194a.584.584 0 00-.295-.784 7.681 7.681 0 00-2.335-.622l-.36-.044V4.587A.602.602 0 0012.82 4h-1.454c-.336 0-.614.264-.614.587v1.32l-.308.075c-2.023.492-3.232 1.741-3.232 3.337 0 2.104 2.167 3.042 4.293 3.684 1.962.615 2.228 1.147 2.228 1.588 0 .682-.917 1.178-2.179 1.178-1.073 0-2.228-.264-3.089-.706a.62.62 0 00-.487-.04.614.614 0 00-.36.32l-.566 1.21a.576.576 0 00.258.752c.717.399 1.782.693 2.913.816l.365.036v1.253c0 .326.274.59.614.59z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberEuro",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_euro',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.936 4.086l.294.008a6.185 6.185 0 013.268 1.148c.152.09.274.212.365.365l.102.243c.073.263.035.549-.102.784a1.025 1.025 0 01-.609.467c-.241.066-.573.05-.784-.102a5.58 5.58 0 00-1.107-.628l.127.058-.133-.051c-.25-.09-.507-.16-.769-.209l-.122-.02-.133-.013a5.058 5.058 0 00-.789.002l-.113.01-.138.024c-.259.05-.512.12-.76.209l-.129.049-.131.06a5.522 5.522 0 00-.73.428l-.126.09-.144.12a6.33 6.33 0 00-.675.677l-.118.145-.142.196a7.204 7.204 0 00-.547.94h4.249c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.212l-.022.208a8.369 8.369 0 00-.032.793l4.882-.001c.523 0 .96.455.96 1 0 .545-.437 1-.96 1H9.46c.078.259.169.513.273.762l-.052-.131.101.225c.16.332.345.653.555.957l.139.19-.081-.098.16.206-.076-.103.118.145c.208.242.433.47.675.678l.139.114.131.095c.232.16.476.304.73.428l.139.062.121.048c.248.089.501.158.76.208l.121.02.13.015c.263.02.526.021.789.001l.143-.015.112-.018c.262-.05.519-.12.77-.209l.134-.052.161-.073c.19-.094.376-.2.554-.315l.263-.18c.21-.153.543-.169.785-.104.254.07.475.24.608.467a1.012 1.012 0 01-.16 1.233c-.067.054-.136.107-.205.16a6.275 6.275 0 01-1.66.848c-1.808.617-3.9.279-5.438-.851a7.376 7.376 0 01-1.055-.917 8.135 8.135 0 01-.88-1.132 7.267 7.267 0 01-.578-1.095 9.32 9.32 0 01-.528-1.568l-1.399-.001c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.165a8.305 8.305 0 01.053-1H5.96c-.523 0-.96-.455-.96-1 0-.545.437-1 .96-1h1.651c.094-.267.201-.53.316-.79A7.681 7.681 0 019.41 6.094a7.302 7.302 0 011.065-.902c.31-.218.64-.408.99-.557.423-.18.846-.342 1.301-.426.48-.09.975-.143 1.464-.114z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberMinus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_minus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><rect width=\"16\" height=\"4\" x=\"4\" y=\"10\" fill-rule=\"evenodd\" rx=\"2\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_number',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.141 4.01a1 1 0 01.849 1.132L16.582 8H19a1 1 0 110 2h-2.704l-.571 4H18a.999.999 0 110 2h-2.561l-.449 3.142a.999.999 0 01-.989.858l-.143-.01a1 1 0 01-.849-1.132L13.417 16H9.439l-.449 3.142a1 1 0 01-.989.858l-.143-.01a1 1 0 01-.848-1.132L7.418 16H5a1 1 0 110-2h2.704l.571-4H6a1 1 0 010-2h2.561l.449-3.142a1 1 0 011.98.284L10.582 8h3.978l.45-3.142a1.002 1.002 0 011.131-.848zM14.274 10h-3.978l-.571 4h3.978l.571-4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberPercent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_percent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 13a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4zm1.364-9.364a1 1 0 010 1.414L7.05 18.364a1 1 0 01-1.414-1.414L16.95 5.636a1 1 0 011.414 0zM7 3a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconNumberPlus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'number_plus',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a2 2 0 012 2v4h4a2 2 0 110 4h-4v4a2 2 0 11-4 0v-4H6a2 2 0 110-4h4V6a2 2 0 012-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconRipplesTransparent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'ripples_transparent',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 128 128\" preserveAspectRatio=\"xMidYMid\" class=\"lds-ripple\" style=\"background:0 0\"><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-1.6s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-1.6s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"-0.8s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"-0.8s\" repeatCount=\"indefinite\"/></circle><circle cx=\"64\" cy=\"64\" r=\"0\" fill=\"none\" stroke-width=\"10\"><animate attributeName=\"r\" calcMode=\"spline\" values=\"0;59\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0 0.3 0.8 0.8\" begin=\"0s\" repeatCount=\"indefinite\"/><animate attributeName=\"opacity\" calcMode=\"spline\" values=\"1;0\" keyTimes=\"0;1\" dur=\"2.4\" keySplines=\"0.3 0 0.8 1\" begin=\"0s\" repeatCount=\"indefinite\"/></circle></svg>`,\n}"
                },
                {
                    "name": "pepIconShoppingCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'shopping_cart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4 4h2.153a1 1 0 01.986.836L7.333 6H18a1 1 0 011 1v4.153a1 1 0 01-.836.986l-9.542 1.59.045.271H18a1 1 0 010 2H7.847a1 1 0 01-.986-.836L5.473 6.836A1 1 0 004.486 6H4a1 1 0 110-2zm3.86 5.164l.273 1.633a1 1 0 001.15.822l6.881-1.146A1 1 0 0017 9.486V9a1 1 0 00-1-1H8.847a1 1 0 00-.986 1.164zM17.5 20a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm-11 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconShoppingPaper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'shopping_paper',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 2a5 5 0 015 5v1h2a2 2 0 012 2v8a4 4 0 01-4 4H7a4 4 0 01-4-4v-8a2 2 0 012-2h2V7a5 5 0 015-5zm6 8H6a1 1 0 00-1 1v7a2 2 0 002 2h10a2 2 0 002-2v-7a1 1 0 00-1-1zm-6-6a3 3 0 00-3 3v1h6V7a3 3 0 00-3-3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemAttach",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_attach',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.86 14.378l2.787-2.786a.985.985 0 00-1.393-1.393l-2.786 2.786a2.955 2.955 0 104.179 4.18l2.786-2.787a4.925 4.925 0 00-6.965-6.965L6.68 10.199a.985.985 0 01-1.393-1.393L8.075 6.02a6.896 6.896 0 019.75 9.751l-2.785 2.786a4.925 4.925 0 01-6.965-6.965l2.786-2.786a2.955 2.955 0 114.179 4.18l-2.786 2.785a.985.985 0 01-1.393-1.393z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemAvatar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_avatar',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M5.873 20C5.317 18.835 5 17.562 5 16.333c0-2.407 1.215-4.078 3.066-4.997C7.706 10.393 7.5 9.37 7.5 8.4 7.5 5.362 9.515 4 12 4s4.5 1.362 4.5 4.4c0 .97-.205 1.993-.566 2.936 1.85.919 3.066 2.59 3.066 4.997 0 1.23-.317 2.502-.873 3.667h-1.244c-1.16 0-1.16-.629-.999-.966.392-.816.616-1.705.616-2.534 0-1.482-.716-2.44-1.821-2.974C13.93 14.42 13.004 15 12 15c-1.004 0-1.93-.58-2.679-1.474C8.216 14.06 7.5 15.018 7.5 16.5c0 .827.223 1.712.612 2.525.163.34.163.975-.966.975H5.873zM12 12.5c1.105 0 2-2.2 2-3.857S13.105 6.5 12 6.5s-2 .486-2 2.143c0 1.657.895 3.857 2 3.857z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemBin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_bin',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 7V6a1 1 0 011-1h4a1 1 0 011 1v.999l.913.001H17a1 1 0 010 2h-.167l-.757 9.083a1 1 0 01-.996.917H8.92a1 1 0 01-.996-.917L7.166 9H7a1 1 0 110-2h2zm5.76 2l-5.525.005L9.79 17h4.42l.55-8z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemBolt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_bolt',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.612 19.84a.33.33 0 01-.279.16.332.332 0 01-.128-.026.362.362 0 01-.199-.402l1.25-6.568H7.333c-.103 0-.2-.05-.263-.137a.374.374 0 01-.06-.305l2-8.293A.336.336 0 019.333 4h6c.122 0 .235.07.294.185a.377.377 0 01-.012.362L12.943 9h3.723c.122 0 .235.064.294.18a.387.387 0 01-.015.37l-6.333 10.29z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemChat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_chat',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M11.5 4a7.5 7.5 0 016.755 10.764L20 20l-5.236-1.745A7.5 7.5 0 1111.5 4zm0 2a5.5 5.5 0 102.392 10.454l.732-.354 2.214.738-.738-2.214.354-.732A5.5 5.5 0 0011.5 6zm-2 4a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm4 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_circle',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"8\" fill-rule=\"evenodd\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemClose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_close',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.39 5.61a2.085 2.085 0 010 2.95L14.948 12l3.44 3.44c.774.774.813 2.004.116 2.823l-.116.126a2.085 2.085 0 01-2.949 0L12 14.95l-3.44 3.44a2.085 2.085 0 11-2.95-2.949L9.052 12l-3.44-3.44a2.085 2.085 0 01-.116-2.823l.116-.126a2.085 2.085 0 012.949 0L12 9.05l3.44-3.44a2.085 2.085 0 012.95 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemDoc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_doc',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.172 4a1 1 0 01.707.293l3.828 3.828a1 1 0 01.293.707V19a1 1 0 01-1 1H7a1 1 0 01-1-1V5a1 1 0 011-1h6.172zM11 6H9a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1v-6a1 1 0 00-1-1h-2a1 1 0 01-1-1V7a1 1 0 00-1-1z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemDoor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_door',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16.7a2 2 0 01-1.188 1.828l-7.109 3.16A.5.5 0 0110 21.23V10.3a2 2 0 011.188-1.828l5.579-2.48L7 5.959V17a1 1 0 01-2 0V5a1 1 0 011-1h12a1 1 0 011 1v11.7z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemDotEllipsis",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_dot_ellipsis',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(5 17)\"><circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"7.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"13.5\" cy=\"1.5\" r=\"1.5\"/></g></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemEdit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_edit',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 20a1 1 0 010 2H3a1 1 0 010-2h18zM14.207 2.793l4 4a1 1 0 010 1.414l-8.5 8.5a1 1 0 01-.39.242l-6 2a1 1 0 01-1.266-1.265l2-6a1 1 0 01.242-.391l8.5-8.5a1 1 0 011.414 0zM11 7.414L5.874 12.54 4.581 16.42l3.879-1.293L13.585 10 11 7.414zm2.501-2.5L12.414 6 15 8.585 16.086 7.5 13.5 4.914z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemEducation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_education',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.12 4.062l10.478 5.719a.25.25 0 010 .438l-.598.326V15a1 1 0 01-2 0v-3.363l-2 1.091V16c0 2.21-2.686 4-6 4s-6-1.79-6-4v-3.272L1.402 10.22a.25.25 0 010-.438L11.88 4.062a.25.25 0 01.24 0zm-4.121 9.757L8 16c0 .893 1.66 2 4 2s4-1.107 4-2l-.001-2.18-3.88 2.118a.25.25 0 01-.239 0L8 13.819zm3.98-7.302l-.038.013-6.237 3.36a.125.125 0 00-.031.196l.031.024 6.237 3.36a.125.125 0 00.08.013l.038-.013 6.237-3.36a.125.125 0 00.031-.196l-.031-.024-6.237-3.36a.125.125 0 00-.08-.013z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_email',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4c4.411 0 8 3.589 8 8 0 .543-.055 1.086-.163 1.612-.344 1.64-1.939 2.685-3.555 2.345a2.973 2.973 0 01-1.64-.955A3.984 3.984 0 0112 16c-2.206 0-4-1.794-4-4s1.794-4 4-4a4.004 4.004 0 013.923 4.782l-.008.033a.994.994 0 00.143.752.998.998 0 00.632.432 1.008 1.008 0 001.184-.775A6.006 6.006 0 0012 6C8.691 6 6 8.69 6 12a6.006 6.006 0 008.064 5.636 1 1 0 11.685 1.88 7.983 7.983 0 01-2.75.484L12 20c-4.411 0-8-3.589-8-8s3.589-8 8-8zm0 6c-1.103 0-2 .897-2 2s.897 2 2 2 2-.897 2-2-.897-2-2-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFileDownload",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_file_download',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6-5v5h2.575a.5.5 0 01.312.89l-3.575 2.86a.5.5 0 01-.624 0l-3.575-2.86a.5.5 0 01.312-.89H11V6h2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFileUpload",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_file_upload',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 11a1 1 0 011 1v4a2 2 0 01-2 2H6a2 2 0 01-2-2v-4a1 1 0 012 0v3a1 1 0 001 1h10a1 1 0 001-1v-3a1 1 0 011-1zm-6.688-4.75l3.575 2.86a.5.5 0 01-.312.89H13v4a1 1 0 01-2 0v-4H8.425a.5.5 0 01-.312-.89l3.575-2.86a.5.5 0 01.624 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFileUploadCloud",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_file_upload_cloud',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10 6a4 4 0 013.6 2.253 4 4 0 015.397 3.917A3 3 0 0118 18h-5.001L13 14h2.575a.5.5 0 00.312-.89l-3.575-2.86a.5.5 0 00-.624 0l-3.575 2.86a.5.5 0 00.312.89H11l-.001 4H7a4 4 0 01-.997-7.875L6 10a4 4 0 014-4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_filter',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13.5 15a.5.5 0 01.5.5v2.86a.5.5 0 01-.621.485l-3-.75A.5.5 0 0110 17.61V15.5a.5.5 0 01.5-.5h3zm2.5-5a1 1 0 010 2H8a1 1 0 010-2h8zm3-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFilter2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_filter_2',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 15.5a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h1.708A2.5 2.5 0 018 15.5zm8-6a2.5 2.5 0 012.292 1.5H20a1 1 0 010 2h-1.708a2.5 2.5 0 01-4.584 0H4a1 1 0 010-2h9.708A2.5 2.5 0 0116 9.5zm-8-6A2.5 2.5 0 0110.292 5H20a1 1 0 010 2h-9.708a2.5 2.5 0 01-4.584 0H4a1 1 0 110-2h1.708A2.5 2.5 0 018 3.5z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemFullScreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_full_screen',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.597 13.403a.961.961 0 010 1.36L7.36 18H9a1 1 0 010 2H5a1 1 0 01-1-1v-4a1 1 0 012 0v1.64l3.238-3.237a.961.961 0 011.36 0zM19 4a1 1 0 011 1v4a1 1 0 01-2 0V7.36l-3.238 3.237a.961.961 0 11-1.36-1.36L16.642 6H15a1 1 0 010-2h4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemHeart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_heart',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 6.532C11.395 5.805 10.353 5 8.7 5 5.89 5 4 7.608 4 10.043c0 3.546 6.803 8.297 7.579 8.827a.75.75 0 00.842 0c.776-.53 7.579-5.282 7.579-8.827C20 7.608 18.11 5 15.299 5c-1.651 0-2.694.805-3.299 1.532zM6 10.27C6 8.9 7.028 7 8.957 7c1.755 0 2.374 1.517 2.398 1.577a.688.688 0 001.288.005c.025-.065.645-1.582 2.4-1.582C16.973 7 18 8.9 18 10.27c0 1.82-3.53 4.72-6 6.48-2.471-1.76-6-4.657-6-6.48z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemHome",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_home',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 5a1 1 0 011 1v3.057l1.581 1.13a1 1 0 01.3 1.288l-.067.106a1 1 0 01-1.395.233l-.42-.3L18 19a1 1 0 01-1 1H7a1 1 0 01-1-1v-7.486l-.419.3a1 1 0 11-1.162-1.628l7-5 .014-.01a.993.993 0 01.062-.04l-.076.05a1.009 1.009 0 01.7-.179.882.882 0 01.227.055.885.885 0 01.115.05c.041.022.081.046.12.074l-.076-.05a.993.993 0 01.062.04l.014.01L16 7.628V6a1 1 0 011-1zm-5.001 2.228l-4 2.857L8 18h8v-7.914l-4.001-2.858z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_info',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm.32 6a1 1 0 01.986 1.164l-.667 4a1 1 0 01-.986.836h-.473a1 1 0 01-.986-1.164l.667-4a1 1 0 01.986-.836h.473zm.18-4a1.5 1.5 0 110 3 1.5 1.5 0 010-3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemInventory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_inventory',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12.394 4.08l7.302 3.13a.5.5 0 01.303.46L20 16.33a.5.5 0 01-.303.46l-7.304 3.128a1 1 0 01-.787 0L4.303 16.79A.5.5 0 014 16.33V7.67c0-.2.119-.38.303-.459l7.303-3.13a1 1 0 01.788 0zM6 9.518v5.824l5 2.142V11.66L6 9.517zm12 0l-5 2.142v5.824l5-2.142V9.517zm-6-3.429L7.539 8 12 9.912 16.461 8 12 6.088z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_link',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9.254 10.627a.97.97 0 010 1.373L6.51 14.745a1.941 1.941 0 002.744 2.745L12 14.745a.97.97 0 111.373 1.372l-2.746 2.746a3.882 3.882 0 01-5.49-5.49l2.745-2.746a.97.97 0 011.372 0zm5.491-1.373a.972.972 0 010 1.373l-4.117 4.118a.97.97 0 01-1.373-1.373l4.118-4.118a.97.97 0 011.372 0zm4.118-4.117a3.882 3.882 0 010 5.49l-2.746 2.745A.97.97 0 1114.745 12l2.745-2.746a1.942 1.942 0 00-2.745-2.744L12 9.255a.97.97 0 01-1.373-1.373l2.746-2.745a3.883 3.883 0 015.49 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_map',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.958 20l-.073-.006a.985.985 0 01-.14-.027l-.03-.008a.855.855 0 01-.08-.027l-.006-.004-5-2A1 1 0 013 17V5a1 1 0 011.371-.928l4.66 1.863 5.653-1.884.01-.003a.997.997 0 01.086-.024l-.096.027a1.024 1.024 0 01.206-.046l.03-.002a.85.85 0 01.086-.004H15.042a.984.984 0 01.213.034l.03.008a.855.855 0 01.08.027l.006.004 5 2A1 1 0 0121 7v12a1 1 0 01-1.371.928l-4.661-1.864-5.652 1.885-.01.003a.997.997 0 01-.086.024l.096-.027a1.024 1.024 0 01-.206.046l-.03.002a.85.85 0 01-.086.004H8.958zM14 6.387l-4 1.334v9.892l4-1.334V6.387zm-9 .09v9.846l3 1.2V7.677l-3-1.2zm11 0v9.846l3 1.2V7.677l-3-1.2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_menu',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19 16a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 010-2h14zm0-5a1 1 0 010 2H5a1 1 0 110-2h14z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemMenuDots",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_menu_dots',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><g fill-rule=\"evenodd\" transform=\"translate(10 4)\"><path d=\"M2 12a2 2 0 110 4 2 2 0 010-4zm0-6a2 2 0 110 4 2 2 0 010-4z\"/><rect width=\"4\" height=\"4\" rx=\"2\"/></g></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemMove",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_move',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 14a1 1 0 011 1v3.585l1.293-1.292a1 1 0 011.32-.083l.094.083a1 1 0 010 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 011.414-1.414L11 18.585V15a1 1 0 011-1zM6.707 8.293a1 1 0 010 1.414L5.415 11 9 11a1 1 0 010 2l-3.587-.001 1.294 1.294a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm10.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414l1.292-1.294L15 13a1 1 0 010-2l3.585-.001-1.292-1.292a1 1 0 01-.083-1.32zm-6-6a1 1 0 011.414 0l3 3a1 1 0 11-1.414 1.414L13 5.414V9a1 1 0 01-2 0V5.414L9.707 6.707a1 1 0 01-1.32.083l-.094-.083a1 1 0 010-1.414z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemMust",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_must',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><filter id=\"a\" width=\"187.5%\" height=\"187.5%\" x=\"-43.7%\" y=\"-31.2%\" filterUnits=\"objectBoundingBox\"><feOffset dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" stdDeviation=\"2\"/><feColorMatrix in=\"shadowBlurOuter1\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.12 0\"/></filter><path id=\"b\" d=\"M13.487 4l-.403 6.767 5.997-2.493.919 2.973-6.246 1.689 4.11 5.226L15.457 20 12 14.276 8.542 20l-2.405-1.838 4.109-5.226L4 11.247l.919-2.973 5.996 2.493L10.513 4h2.974z\"/></defs><g fill=\"none\" fill-rule=\"evenodd\"><use fill=\"#000\" filter=\"url(#a)\" xlink:href=\"#b\"/><use fill=\"#FE0000\" xlink:href=\"#b\"/></g></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemOffLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_off_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M20.142 5l1.414 1.414-2.93 2.93A4 4 0 0117 17h-6.03l-3.556 3.556L6 19.142 20.142 5zM14 5c1.141 0 2.17.478 2.9 1.244l-1.416 1.415a1.998 1.998 0 00-3.283.467l-.398.819a1 1 0 01-1.25.5l-.852-.32A1.991 1.991 0 009 9c-1.105 0-2 .895-2 1.98l.04 1.592-1.373.484A1.001 1.001 0 006 15h2.142l-2 2H6a3 3 0 01-.997-5.83l-.002-.085L5 11a4 4 0 015.402-3.748A3.998 3.998 0 0114 5zm3.029 5.941L12.97 15H17a2 2 0 00.5-3.937l-.471-.122z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemOk",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_ok',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.511 7c-.376.011-.732.168-.995.438-2.29 2.295-4.38 4.544-6.58 6.79l-2.584-2.072a1.445 1.445 0 00-2.035.226 1.448 1.448 0 00.226 2.035l3.618 2.894c.578.46 1.409.411 1.929-.113 2.602-2.608 4.934-5.17 7.476-7.718A1.449 1.449 0 0017.511 7z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemPause",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_pause',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8.5 5A1.5 1.5 0 0110 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 018.5 5zm7 0A1.5 1.5 0 0117 6.5v11a1.5 1.5 0 01-3 0v-11A1.5 1.5 0 0115.5 5z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemPhone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_phone',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M4.814 8.88c1.362-1.39 2.043-1.022 2.98.328.85 1.228.595 2.046 0 2.578-.384.327-1.363.9-.852 1.76.724 1.227 2.129 2.7 3.363 3.478.851.531 1.532-.369 1.915-.696.596-.573 1.447-.736 2.64.164 1.32.982 1.66 1.677.127 2.905C9.88 22.384 1.323 13.546 4.814 8.88zM11 4a9 9 0 019 9 1 1 0 01-2 0 7 7 0 00-7-7 1 1 0 010-2zm0 4a5 5 0 015 5 1 1 0 01-2 0 3 3 0 00-3-3 1 1 0 010-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemPlay",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_play',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M8 4.869a1 1 0 01.555.167l9.821 6.548a.5.5 0 010 .832l-9.821 6.548A1 1 0 017 18.13V5.87a1 1 0 011-1zm2 4a1 1 0 00-1 1v4.262a1 1 0 001.555.833l3.821-2.548a.5.5 0 000-.832l-3.821-2.548A1 1 0 0010 8.87z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemPrint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_print',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M15 7a1 1 0 00-1-1h-4a1 1 0 00-.993.883L9 7v1H7V6a2 2 0 012-2h6a2 2 0 012 2v2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2v2a2 2 0 01-2 2H9a2 2 0 01-2-2v-2H5a2 2 0 01-2-2v-4a2 2 0 012-2h10V7zm0 7H9v3a1 1 0 00.883.993L10 18h4a1 1 0 00.993-.883L15 17v-3zm3-4H6a1 1 0 00-.993.883L5 11v2a1 1 0 00.883.993L6 14h1v-2h10v2h1a1 1 0 00.993-.883L19 13v-2a1 1 0 00-1-1z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemProcessing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_processing',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18 12a1 1 0 012 0 8 8 0 01-11.955 6.955l-1.338 1.338A1 1 0 015 19.586V16a1 1 0 011-1h3.586a1 1 0 01.707 1.707l-.763.763A6 6 0 0018 12zM4 12a8 8 0 0111.955-6.955l1.338-1.338A1 1 0 0119 4.414V8a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12a1 1 0 01-2 0z\" fill-rule=\"evenodd\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemQuestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_question',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 3a9 9 0 110 18 9 9 0 010-18zm0 2a7 7 0 100 14 7 7 0 000-14zm-.004 9a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-.087-7c2.565 0 3.814 1.075 3.814 2.575 0 .93-.665 1.713-1.25 2.022-.774.409-1.213.678-1.268 1.27l-.006.133h-2.703c0-1.421.199-1.866 1.118-2.285.782-.358 1.38-.656 1.38-1.14 0-.432-.493-.726-1.11-.726-.62 0-1.156.305-1.225.75l-.007.097H8.21C8.235 7.795 9.511 7 11.91 7z\" fill-rule=\"evenodd\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemRotateDevice",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_rotate_device',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18.707 4.293A1 1 0 0119 5v3.586a1 1 0 01-1 1h-3.586a1 1 0 01-.707-1.707l.763-.763A6 6 0 006 12.561V16.5A1.5 1.5 0 007.5 18h9a1.5 1.5 0 001.5-1.5V13a1 1 0 012 0v4a3 3 0 01-3 3H7a3 3 0 01-3-3v-5h.021a8 8 0 0111.934-6.37l1.338-1.337a1 1 0 011.414 0zM12 11a2 2 0 011.001 3.732L13 16a1 1 0 01-2 0v-1.268A2 2 0 0112 11z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_search',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M10.5 4a6.5 6.5 0 015.533 9.912l3.538 3.538a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414 0l-3.538-3.538A6.5 6.5 0 1110.5 4zm0 2.5a4 4 0 100 8 4 4 0 000-8z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_select',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16.153 4l-1.944 2H6a1 1 0 00-1 1v11h14v-7.039c.66-.69 1.322-1.38 2-2.073V19a1 1 0 01-1 1H4a1 1 0 01-1-1V5a1 1 0 011-1h12.153zm3.358 0a1.447 1.447 0 011.055 2.48c-2.542 2.548-4.874 5.11-7.476 7.718-.52.524-1.351.572-1.93.113l-3.617-2.894a1.449 1.449 0 011.809-2.261l2.585 2.072c2.199-2.246 4.29-4.495 6.58-6.79.262-.27.618-.427.994-.437z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_settings',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M13 4l.691 2.765c.479.154.929.373 1.34.645l2.576-1.198 1.258 1.554-1.72 2.285c.175.463.29.954.334 1.466l2.543 1.299-.45 1.948-2.847.053a5.524 5.524 0 01-.926 1.16l.589 2.784-1.798.876-1.838-2.188a5.55 5.55 0 01-1.503 0l-1.84 2.188-1.797-.876.59-2.784a5.524 5.524 0 01-.927-1.16l-2.847-.053-.45-1.948 2.543-1.298a5.47 5.47 0 01.333-1.465l-1.72-2.287 1.26-1.554L8.967 7.41a5.477 5.477 0 011.342-.645L11 4h2zm-1 4.5a3.5 3.5 0 100 7 3.5 3.5 0 000-7z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSignature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_signature',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M14.016 4.598l.235.002c1.196.047.94 1.048.557 1.43-1.459 1.387-3.133 2.392-4.927 3.205-.286.288-.573.574-.837.861-.365.385-1.198 1.591-2.065 2.904H20a1 1 0 010 2l-14.321.001c-.72 1.126-1.285 2.036-1.366 2.19-.383.669-1.62-.169-1.238-.838.038-.069.361-.616.807-1.359A1.002 1.002 0 014 13h1.095c.724-1.173 1.44-2.291 1.758-2.67-1.172.407-1.922.676-3.117 1.01-.742.215-1.137-1.291-.395-1.506 1.937-.55 3.922-1.125 5.764-1.938.717-.67 1.393-1.499 2.158-2.072.884-.694 1.793-1.272 2.988-1.224zm-1.648 4.278c.478-.192.933.478.67.885-.12.143-.192.31-.241.479.814-.096 1.507-.359 2.224-.862.263-.191.669-.048.813.215.12.215 1.507-.358 1.698-.43.336-.12.647.12.742.406.023.095.048.167.048.24.67.023 1.482-.192 2.104-.264.765-.096.762 1.453-.003 1.549-.886.096-1.89.335-2.775.191-.191-.048-.334-.215-.406-.406-.693.239-1.458.478-2.008.12-.981.574-2.057.836-3.229.789-.43-.024-.621-.382-.573-.765 0-.048.024-.072.024-.12-.598.262-1.173.574-1.746.885-.67.382-1.265-.999-.595-1.382a23.77 23.77 0 013.253-1.53z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_spinner',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11 15a2 2 0 110 4 2 2 0 010-4zm5.5-1a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-9-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm10 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-5-5a2.5 2.5 0 110 5 2.5 2.5 0 010-5z\" fill-rule=\"evenodd\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemSupport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_support',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17 16V8l-.005-.182C16.875 5.76 14.743 4 12 4 9.176 4 7 5.865 7 8v8H5a2 2 0 01-2-2v-4a2 2 0 012-2l.004-.215C5.137 4.57 8.218 2 12 2c3.866 0 7 2.686 7 6a2 2 0 012 2v4a2 2 0 01-2 2c0 2.311-2.196 4.257-5.179 4.83A2.001 2.001 0 0110 20a2 2 0 013.622-1.17C15.641 18.396 17 17.188 17 16z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemTexterea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_texterea',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M19.74 16.112a.889.889 0 010 1.257l-2.37 2.37a.889.889 0 11-1.258-1.256l2.37-2.37a.889.889 0 011.258 0zm0-5.926a.889.889 0 010 1.257l-8.297 8.297a.889.889 0 11-1.257-1.257l8.297-8.297a.889.889 0 011.257 0zm0-5.926a.889.889 0 010 1.257L5.517 19.74a.889.889 0 01-1.257-1.257L18.483 4.26a.889.889 0 011.257 0z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemTool",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_tool',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M17.5 3.293a1 1 0 01.083 1.32l-.083.094-1.06 1.06a1.5 1.5 0 002.12 2.122l1.061-1.06.088-.078a1 1 0 011.41 1.397l-.083.095-1.061 1.06a3.502 3.502 0 01-4.14.606l-5.255 5.255a3.5 3.5 0 11-1.416-1.416l5.256-5.254a3.502 3.502 0 01.605-4.14l1.06-1.061.088-.078a1 1 0 011.327.078zm-10 12.035a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconSystemView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'system_view',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><defs><path id=\"a\" d=\"M12 5c5.15 0 7.987 4.15 8.942 6.83L21 12c-.893 2.672-3.74 7-9 7-5.15 0-7.987-4.15-8.942-6.83L3 12c.893-2.672 3.74-7 9-7zm0 2c-4.09 0-6.305 3.092-7 5l.056.15C5.81 14.064 8.014 17 12 17c4.09 0 6.305-3.092 7-5l-.056-.15C18.19 9.936 15.986 7 12 7zm0 8.5A3.51 3.51 0 018.5 12 3.51 3.51 0 0112 8.5a3.51 3.51 0 013.5 3.5 3.51 3.51 0 01-3.5 3.5zm0-5c-.825 0-1.5.675-1.5 1.5s.675 1.5 1.5 1.5 1.5-.675 1.5-1.5-.675-1.5-1.5-1.5z\"/></defs><use fill-rule=\"evenodd\" xlink:href=\"#a\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconTimeCal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'time_cal',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm2 8H6v6a1 1 0 001 1h10a1 1 0 001-1v-6zM7.983 7H7a1 1 0 00-1 1v1h12V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconTimeDatetime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'time_datetime',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zm1 4H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1zm-5 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 13.02 1 1 0 0111 13V9a1 1 0 011-1z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconTimeDuration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'time_duration',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M16 3a1 1 0 011 1v1h1a2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h1V4a1 1 0 01.883-.993L8 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993L12 3a1 1 0 011 1v1h2V4a1 1 0 01.883-.993zM7.983 7H7a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V8a1 1 0 00-1-1l-.983-.001L16 7h-.017l-3.966-.001L12 7h-.017l-3.966-.001L8 7h-.017zm3.724 1.793l2.829 2.828a.998.998 0 01.289.793.998.998 0 01-.29.793l-2.828 2.829a1 1 0 01-1.414-1.415l2.206-2.207-2.206-2.207a1 1 0 011.414-1.414z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconTimeTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'time_time',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M12 4a8 8 0 110 16 8 8 0 010-16zm0 2a6 6 0 100 12 6 6 0 000-12zm0 1a1 1 0 011 1v3.585l1.828 1.83a1 1 0 11-1.414 1.413l-2.121-2.12-.073-.083a1.003 1.003 0 01-.007-.008l.08.09A1.008 1.008 0 0111 12.02 1 1 0 0111 12V8a1 1 0 011-1z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewCardLg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_card_lg',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 4a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h12zm-7 9H6v3a2 2 0 001.85 1.995L8 18h3v-5zm7 0h-5v5h3a2 2 0 001.995-1.85L18 16v-3zm-7-7H8a2 2 0 00-1.995 1.85L6 8v3h5V6zm5 0h-3v5h5V8a2 2 0 00-2-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewCardMd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_card_md',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M9 13a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2v-3a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2v-3a2 2 0 012-2h3zM7.5 15a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3zM9 4a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h3zm9 0a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2V6a2 2 0 012-2h3zM7.5 6a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm9 0a1.5 1.5 0 100 3 1.5 1.5 0 000-3z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewCardSm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_card_sm',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M7 16a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 10a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2zM7 4a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2zm6 0a1 1 0 011 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1V5a1 1 0 011-1h2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_line',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 13a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 17h10a1 1 0 000-2zm1-10a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm-1 2H7a1 1 0 00-.117 1.993L7 9h10a1 1 0 000-2z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewMatrix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_matrix',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M21 19a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h14a2 2 0 012 2v14zM5 16v2a1 1 0 00.883.993L6 19h2v-3H5zm9 0h-4v3h4v-3zm5 0h-3v3h2a1 1 0 00.993-.883L19 18v-2zm-5-6h-4v4h4v-4zm5 0h-3v4h3v-4zm-5-5h-4v3h4V5zm4 0h-2v3h3V6a1 1 0 00-1-1zM8 5H6a1 1 0 00-.993.883L5 6v2h3V5zm-3 9h3v-4H5v4z\"/></svg>`,\n}"
                },
                {
                    "name": "pepIconViewTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "type": "literal type",
                    "defaultValue": "{\n    name: 'view_table',\n    data: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" d=\"M18 5a2 2 0 012 2v10a2 2 0 01-2 2H6a2 2 0 01-2-2V7a2 2 0 012-2h12zm0 10H6v1a1 1 0 00.883.993L7 17h10a1 1 0 001-1v-1zm0-4H6v2h12v-2zm-1-4H7a1 1 0 00-1 1v1h12V8a1 1 0 00-.883-.993L17 7z\"/></svg>`,\n}"
                }
            ],
            "projects/web-app/src/app/modules/pepperi.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
                },
                {
                    "name": "pepperiComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
                }
            ],
            "projects/ngx-lib-elements/src/app/app.module.ts": [
                {
                    "name": "pepperiComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-lib-elements/src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n    PepAttachmentModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    // PepInternalButtonModule,\n    PepMenuModule,\n    PepQuantitySelectorModule,\n    // PepRichHtmlTextareaModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n]"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-lib/color/color-utils.ts": [
                {
                    "name": "contrast",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "str1"
                        },
                        {
                            "name": "str2"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "str1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertHslToStringHsl",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "hsl"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "hsl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findClosestAccessibleColor",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "adjustableColor"
                        },
                        {
                            "name": "otherColor"
                        },
                        {
                            "name": "contrastRatio"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "adjustableColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastRatio",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findClosestAccessibleDarkerColor",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "adjustableColor"
                        },
                        {
                            "name": "otherColor"
                        },
                        {
                            "name": "contrastRatio"
                        }
                    ],
                    "returnType": "IPepClosestColor",
                    "jsdoctags": [
                        {
                            "name": "adjustableColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastRatio",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findClosestAccessibleLighterColor",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "adjustableColor"
                        },
                        {
                            "name": "otherColor"
                        },
                        {
                            "name": "contrastRatio"
                        }
                    ],
                    "returnType": "IPepClosestColor",
                    "jsdoctags": [
                        {
                            "name": "adjustableColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherColor",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastRatio",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hex2hsl",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "str"
                        }
                    ],
                    "returnType": "IPepHslColor",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hex2rgb",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Convert hex string to rgb color.</p>\n",
                    "args": [
                        {
                            "name": "str"
                        }
                    ],
                    "returnType": "IPepRgbColor",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1758,
                                "end": 1761,
                                "flags": 0,
                                "escapedText": "str"
                            },
                            "tagName": {
                                "pos": 1752,
                                "end": 1757,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The hex string to convert.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hex2sixDigitHex",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Convert hex string to 6 digits hex string.</p>\n",
                    "args": [
                        {
                            "name": "str"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 569,
                                "end": 572,
                                "flags": 0,
                                "escapedText": "str"
                            },
                            "tagName": {
                                "pos": 563,
                                "end": 568,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string to convert.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hsl2hex",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "hsl"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "hsl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hsl2rgb",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {}
                    ],
                    "returnType": "IPepRgbColor",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hslString2hsl",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "str"
                        }
                    ],
                    "returnType": "IPepHslColor",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "relativeLuminance",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {}
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rgb2hsl",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {}
                    ],
                    "returnType": "IPepHslColor",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rgb2sixDigitHex",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Convert rgb color to 6 digits hex string.</p>\n",
                    "args": [
                        {
                            "name": "color"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1235,
                                "end": 1240,
                                "flags": 0,
                                "escapedText": "color"
                            },
                            "tagName": {
                                "pos": 1229,
                                "end": 1234,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The rgb color to convert.</p>\n"
                        }
                    ]
                },
                {
                    "name": "rgbString2hsl",
                    "file": "projects/ngx-lib/color/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "str"
                        }
                    ],
                    "returnType": "IPepHslColor",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-lib/smart-filters/common/model/creator.ts": [
                {
                    "name": "createBooleanSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCurrencySmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDateSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDateTimeSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createIntSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMultiSelectSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPercentageSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRealSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSmartFilter",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "fieldId"
                        },
                        {
                            "name": "operator"
                        },
                        {
                            "name": "first",
                            "type": "any"
                        },
                        {
                            "name": "second",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "returnType": "IPepSmartFilterData",
                    "jsdoctags": [
                        {
                            "name": "fieldId",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "first",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "second",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSmartFilterField",
                    "file": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        },
                        {
                            "name": "type"
                        }
                    ],
                    "returnType": "PepSmartFilterBaseField",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-lib-elements/src/app/app.module.ts": [
                {
                    "name": "createTranslateLoader",
                    "file": "projects/ngx-lib-elements/src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        },
                        {
                            "name": "PepFileService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "PepFileService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/web-app/src/app/modules/pepperi.module.ts": [
                {
                    "name": "createTranslateLoader",
                    "file": "projects/web-app/src/app/modules/pepperi.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        },
                        {
                            "name": "fileService"
                        },
                        {
                            "name": "addonService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addonService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts": [
                {
                    "name": "createViewerConfig",
                    "file": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "translate"
                        }
                    ],
                    "returnType": "ImageViewerConfig",
                    "jsdoctags": [
                        {
                            "name": "translate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngx-lib/src/core/common/pipes/common-pipes.ts": [
                {
                    "name": "escape",
                    "file": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "s"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/ngx-lib/src/core/common/model/wapi.model.ts": [
                {
                    "name": "FIELD_TYPE",
                    "childs": [
                        {
                            "name": "Default",
                            "value": "0"
                        },
                        {
                            "name": "TextBox",
                            "value": "1"
                        },
                        {
                            "name": "LimitedLengthTextBox",
                            "value": "2"
                        },
                        {
                            "name": "TextArea",
                            "value": "3"
                        },
                        {
                            "name": "TextHeader",
                            "value": "4"
                        },
                        {
                            "name": "Date",
                            "value": "5"
                        },
                        {
                            "name": "DateAndTime",
                            "value": "6"
                        },
                        {
                            "name": "NumberInteger",
                            "value": "7"
                        },
                        {
                            "name": "NumberReal",
                            "value": "8"
                        },
                        {
                            "name": "Currency",
                            "value": "9"
                        },
                        {
                            "name": "Boolean",
                            "value": "10"
                        },
                        {
                            "name": "ComboBox",
                            "value": "11"
                        },
                        {
                            "name": "MultiTickBox",
                            "value": "12"
                        },
                        {
                            "name": "Separator",
                            "value": "13"
                        },
                        {
                            "name": "Address",
                            "value": "14"
                        },
                        {
                            "name": "Percentage",
                            "value": "15"
                        },
                        {
                            "name": "EmptyComboBox",
                            "value": "16"
                        },
                        {
                            "name": "InternalLink",
                            "value": "17"
                        },
                        {
                            "name": "Email",
                            "value": "18"
                        },
                        {
                            "name": "LimitedDate",
                            "value": "19"
                        },
                        {
                            "name": "Image",
                            "value": "20"
                        },
                        {
                            "name": "MultiTickBoxToComboBox",
                            "value": "21"
                        },
                        {
                            "name": "EmptyMultiTickBox",
                            "value": "22"
                        },
                        {
                            "name": "Totals",
                            "value": "23"
                        },
                        {
                            "name": "Attachment",
                            "value": "24"
                        },
                        {
                            "name": "Signature",
                            "value": "25"
                        },
                        {
                            "name": "Link",
                            "value": "26"
                        },
                        {
                            "name": "ImageURL",
                            "value": "27"
                        },
                        {
                            "name": "NumberIntegerQuantitySelector",
                            "value": "28"
                        },
                        {
                            "name": "NumberRealQuantitySelector",
                            "value": "29"
                        },
                        {
                            "name": "NumberIntegerForMatrix",
                            "value": "30"
                        },
                        {
                            "name": "NumberRealForMatrix",
                            "value": "31"
                        },
                        {
                            "name": "Images",
                            "value": "32"
                        },
                        {
                            "name": "Indicators",
                            "value": "33"
                        },
                        {
                            "name": "CalculatedReal",
                            "value": "34"
                        },
                        {
                            "name": "CalculatedInt",
                            "value": "35"
                        },
                        {
                            "name": "CalculatedString",
                            "value": "36"
                        },
                        {
                            "name": "CalculatedDate",
                            "value": "37"
                        },
                        {
                            "name": "CalculatedBool",
                            "value": "38"
                        },
                        {
                            "name": "MapDataDropDown",
                            "value": "39"
                        },
                        {
                            "name": "MapDataReal",
                            "value": "40"
                        },
                        {
                            "name": "MapDataString",
                            "value": "41"
                        },
                        {
                            "name": "MapDataInt",
                            "value": "42"
                        },
                        {
                            "name": "Sum",
                            "value": "43"
                        },
                        {
                            "name": "Phone",
                            "value": "44"
                        },
                        {
                            "name": "UrlForApi",
                            "value": "45"
                        },
                        {
                            "name": "ManyToManyUrlForApi",
                            "value": "46"
                        },
                        {
                            "name": "ReferenceType",
                            "value": "47"
                        },
                        {
                            "name": "GuidReferenceType",
                            "value": "48"
                        },
                        {
                            "name": "Button",
                            "value": "49"
                        },
                        {
                            "name": "InternalPage",
                            "value": "50"
                        },
                        {
                            "name": "Duration",
                            "value": "51"
                        },
                        {
                            "name": "ListOfObjects",
                            "value": "52"
                        },
                        {
                            "name": "Package",
                            "value": "53"
                        },
                        {
                            "name": "BooleanText",
                            "value": "55"
                        },
                        {
                            "name": "RichTextHTML",
                            "value": "56"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
                },
                {
                    "name": "X_ALIGNMENT_TYPE",
                    "childs": [
                        {
                            "name": "None",
                            "value": "0"
                        },
                        {
                            "name": "Left",
                            "value": "1"
                        },
                        {
                            "name": "Right",
                            "value": "2"
                        },
                        {
                            "name": "Center",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
                },
                {
                    "name": "Y_ALIGNMENT_TYPE",
                    "childs": [
                        {
                            "name": "None",
                            "value": "0"
                        },
                        {
                            "name": "Top",
                            "value": "1"
                        },
                        {
                            "name": "Bottom",
                            "value": "2"
                        },
                        {
                            "name": "Center",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-lib/src/core/common/model/wapi.model.ts"
                }
            ],
            "projects/ngx-lib/color/color-picker.component.ts": [
                {
                    "name": "PepContrastRatioType",
                    "childs": [
                        {
                            "name": "AA",
                            "value": "4.5"
                        },
                        {
                            "name": "AAA",
                            "value": "7"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-lib/color/color-picker.component.ts"
                }
            ],
            "projects/ngx-lib/src/core/layout/layout.service.ts": [
                {
                    "name": "PepScreenSizeType",
                    "childs": [
                        {
                            "name": "XL"
                        },
                        {
                            "name": "LG"
                        },
                        {
                            "name": "MD"
                        },
                        {
                            "name": "SM"
                        },
                        {
                            "name": "XS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-lib/src/core/layout/layout.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/ngx-lib/icon/icon-generated.model.ts": [
                {
                    "name": "IconNameSubset",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "description": "",
                    "kind": 175
                },
                {
                    "name": "PepIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"arrow_back\" | \"arrow_down_alt\" | \"arrow_down\" | \"arrow_either\" | \"arrow_left_alt\" | \"arrow_left\" | \"arrow_right_alt\" | \"arrow_right\" | \"arrow_two_ways_hor_l\" | \"arrow_two_ways_hor_r\" | \"arrow_two_ways_ver_b\" | \"arrow_two_ways_ver_t\" | \"arrow_up_alt\" | \"arrow_up\" | \"barnd_pepperi\" | \"indicator_dot_placeholder\" | \"misc_excel\" | \"no_image_2\" | \"no_image\" | \"number_coins\" | \"number_decimal\" | \"number_dollar\" | \"number_euro\" | \"number_minus\" | \"number_number\" | \"number_percent\" | \"number_plus\" | \"ripples_transparent\" | \"shopping_cart\" | \"shopping_paper\" | \"system_attach\" | \"system_avatar\" | \"system_bin\" | \"system_bolt\" | \"system_chat\" | \"system_circle\" | \"system_close\" | \"system_doc\" | \"system_door\" | \"system_dot_ellipsis\" | \"system_edit\" | \"system_education\" | \"system_email\" | \"system_file_download\" | \"system_file_upload_cloud\" | \"system_file_upload\" | \"system_filter_2\" | \"system_filter\" | \"system_full_screen\" | \"system_heart\" | \"system_home\" | \"system_info\" | \"system_inventory\" | \"system_link\" | \"system_map\" | \"system_menu_dots\" | \"system_menu\" | \"system_move\" | \"system_must\" | \"system_off_line\" | \"system_ok\" | \"system_pause\" | \"system_phone\" | \"system_play\" | \"system_print\" | \"system_processing\" | \"system_question\" | \"system_rotate_device\" | \"system_search\" | \"system_select\" | \"system_settings\" | \"system_signature\" | \"system_spinner\" | \"system_support\" | \"system_texterea\" | \"system_tool\" | \"system_view\" | \"time_cal\" | \"time_datetime\" | \"time_duration\" | \"time_time\" | \"view_card_lg\" | \"view_card_md\" | \"view_card_sm\" | \"view_line\" | \"view_matrix\" | \"view_table\"",
                    "file": "projects/ngx-lib/icon/icon-generated.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts": [
                {
                    "name": "PepBreadCrumbsDisplayType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"label\" | \"items\"",
                    "file": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/src/core/customization/customization.model.ts": [
                {
                    "name": "PepCheckboxFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"booleanText\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepDateFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"datetime\" | \"date\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepHorizontalAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"center\" | \"right\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "<p>Allowed horizontal alignment options </p>\n",
                    "kind": 168
                },
                {
                    "name": "PepInternalButtonFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"reference\" | \"listofobjects\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepLayoutType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"form\" | \"card\" | \"table\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "<p>Allowed layout options </p>\n",
                    "kind": 168
                },
                {
                    "name": "PepQuantitySelectorFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"packageButton\" | \"qs\" | \"qsForMatrix\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSelectFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"select\" | \"multi\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "<p>Allowed size options </p>\n",
                    "kind": 168
                },
                {
                    "name": "PepStyleType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"weak\" | \"weak-invert\" | \"regular\" | \"strong\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "<p>Allowed style options </p>\n",
                    "kind": 168
                },
                {
                    "name": "PepTextboxFieldType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"link\" | \"email\" | \"phone\" | \"duration\" | \"int\" | \"percentage\" | \"currency\" | \"real\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepVerticalAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"middle\" | \"bottom\"",
                    "file": "projects/ngx-lib/src/core/customization/customization.model.ts",
                    "description": "<p>Allowed vertical alignment options </p>\n",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/color/color.model.ts": [
                {
                    "name": "PepColorType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"any\" | \"main\" | \"success\" | \"caution\"",
                    "file": "projects/ngx-lib/color/color.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/dialog/dialog.model.ts": [
                {
                    "name": "PepDialogActionsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"close\" | \"cancel-continue\" | \"cancel-ok\" | \"cancel-delete\" | \"custom\"",
                    "file": "projects/ngx-lib/dialog/dialog.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepDialogSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inline\" | \"small\" | \"regular\" | \"large\" | \"full-screen\"",
                    "file": "projects/ngx-lib/dialog/dialog.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/src/core/common/services/file.service.ts": [
                {
                    "name": "PepFileType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"script\" | \"style\"",
                    "file": "projects/ngx-lib/src/core/common/services/file.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/top-bar/top-bar.model.ts": [
                {
                    "name": "PepFooterStateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"visible\" | \"hidden\"",
                    "file": "projects/ngx-lib/top-bar/top-bar.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/group-buttons/group-buttons.component.ts": [
                {
                    "name": "PepGroupButtonsViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"regular\" | \"dropdown\" | \"split\"",
                    "file": "projects/ngx-lib/group-buttons/group-buttons.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/list/list-carousel.component.ts": [
                {
                    "name": "PepListCarouselSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\"",
                    "file": "projects/ngx-lib/list/list-carousel.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/list/list.model.ts": [
                {
                    "name": "PepListPagerType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"pages\" | \"scroll\"",
                    "file": "projects/ngx-lib/list/list.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepListSelectionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"none\" | \"single\" | \"single-action\" | \"multi\"",
                    "file": "projects/ngx-lib/list/list.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepListViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"\" | \"cards\" | \"lines\" | \"table\" | \"map\"",
                    "file": "projects/ngx-lib/list/list.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/list/list-views.component.ts": [
                {
                    "name": "PepListViewDisplayType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"menu\" | \"buttons\"",
                    "file": "projects/ngx-lib/list/list-views.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/form/internal-list.component.ts": [
                {
                    "name": "PepListViewType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cards\" | \"lines\" | \"table\"",
                    "file": "projects/ngx-lib/form/internal-list.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/menu/menu.model.ts": [
                {
                    "name": "PepMenuItemType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"regular\" | \"splitter\"",
                    "file": "projects/ngx-lib/menu/menu.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepMenuStateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"visible\" | \"hidden\"",
                    "file": "projects/ngx-lib/menu/menu.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepMenuType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"action\" | \"action-select\" | \"select\"",
                    "file": "projects/ngx-lib/menu/menu.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/src/core/layout/layout.service.ts": [
                {
                    "name": "PepOrientationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"landscape\" | \"portrait\"",
                    "file": "projects/ngx-lib/src/core/layout/layout.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/search/search.model.ts": [
                {
                    "name": "PepSearchStateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"open\" | \"close\"",
                    "file": "projects/ngx-lib/search/search.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSearchTriggerType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"keydown\" | \"click\"",
                    "file": "projects/ngx-lib/search/search.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSearchType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"regular\" | \"auto-complete\"",
                    "file": "projects/ngx-lib/search/search.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/side-bar/side-bar.model.ts": [
                {
                    "name": "PepSideBarStateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"open\" | \"close\"",
                    "file": "projects/ngx-lib/side-bar/side-bar.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-lib/smart-filters/common/model/type.ts": [
                {
                    "name": "PepSmartFilterComponentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"number\" | \"date\" | \"multi-select\" | \"boolean\"",
                    "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSmartFilterOperatorType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"eq\" | \"neq\" | \"lt\" | \"gt\" | \"ltoe\" | \"gtoe\" | \"numberRange\" | \"contains\" | \"beginsWith\" | \"endsWith\" | \"after\" | \"before\" | \"inTheLast\" | \"today\" | \"thisWeek\" | \"thisMonth\" | \"dateRange\" | \"dueIn\" | \"on\" | \"notInTheLast\" | \"notDueIn\" | \"isEmpty\" | \"isNotEmpty\" | \"in\"",
                    "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSmartFilterOperatorUnitType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"days\" | \"weeks\" | \"months\" | \"years\"",
                    "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "PepSmartFilterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"boolean\" | \"currency\" | \"date\" | \"date-time\" | \"int\" | \"multi-select\" | \"percentage\" | \"real\"",
                    "file": "projects/ngx-lib/smart-filters/common/model/type.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/web-app/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-lib-elements/src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-elements/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepperiComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-elements/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib-elements/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/address/address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/attachment/attachment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepAttachmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/bread-crumbs/bread-crumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepBreadCrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/bread-crumbs/bread-crumbs.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepBreadCrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepBreadCrumbItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/bread-crumbs/bread-crumbs.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepBreadCrumbItemClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/button/button.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepButton",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/button/button.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepButtonClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/carousel/carousel-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepCarouselItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepCarouselComponent",
                "coveragePercent": 13,
                "coverageCount": "12/87",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-picker.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepColorPickerDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepClosestColor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepHslColor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepRgbColor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "contrast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertHslToStringHsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "findClosestAccessibleColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "findClosestAccessibleDarkerColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "findClosestAccessibleLighterColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hex2hsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hex2rgb",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hex2sixDigitHex",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hsl2hex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hsl2rgb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hslString2hsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "relativeLuminance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "rgb2hsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "rgb2sixDigitHex",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "rgbString2hsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FLOAT_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIX_DIGIT_HEX_COLOR_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THREE_DIGIT_HEX_COLOR_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/color/color.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepColorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/date/date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/dialog/default-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepDefaultDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/dialog/dialog.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepDialogActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/dialog/dialog.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/field-title/field-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepFieldTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/files-uploader/files-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepFilesUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/files-uploader/files-uploader.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepFilesUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/field-generator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepFieldGeneratorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/71",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFormFieldClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFormFieldValueChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/indicators.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepIndicatorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/internal-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepInternalButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/internal-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepInternalListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/88",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/internal-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepInternalMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/internal-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepInternalPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/59",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/form/internal-page.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepInternalPageService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/group-buttons/group-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepGroupButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepIconData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowBack",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowDown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowDownAlt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowEither",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowLeftAlt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowRightAlt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowTwoWaysHorL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowTwoWaysHorR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowTwoWaysVerB",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowTwoWaysVerT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconArrowUpAlt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconBarndPepperi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconIndicatorDotPlaceholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconMiscExcel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNoImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNoImage2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberCoins",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberDecimal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberDollar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberEuro",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberMinus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberPercent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconNumberPlus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconRipplesTransparent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconShoppingCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconShoppingPaper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemAttach",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemAvatar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemBin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemBolt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemChat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemClose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemDoc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemDoor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemDotEllipsis",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemEdit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemEducation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFileDownload",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFileUpload",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFileUploadCloud",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFilter2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemFullScreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemHeart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemHome",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemInventory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemMenuDots",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemMove",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemMust",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemOffLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemOk",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemPause",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemPhone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemPlay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemPrint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemProcessing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemRotateDevice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSignature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemSupport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemTexterea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemTool",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconSystemView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconTimeCal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconTimeDatetime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconTimeDuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconTimeTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewCardLg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewCardMd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewCardSm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewMatrix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-generated.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIconViewTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon-registry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepIconRegistry",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/icon/icon.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepIconDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepImagesFilmstripComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepImagesFilmstripDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/images-filmstrip/images-filmstrip.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createViewerConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-actions.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListCarouselComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-carousel.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListCarouselComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-carousel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListCarouselItemClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-chooser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListChooserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-chooser.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepListChooserOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-chooser.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListChooserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-chooser.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListChooserOptionChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListPagerComponent",
                "coveragePercent": 15,
                "coverageCount": "3/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-pager.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepListPagerChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-pager.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListPagerComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-sorting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListSortingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-sorting.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepListSortingOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-sorting.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListSortingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-sorting.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListSortingOptionChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-total.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListTotalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-total.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListTotalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-views.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListViewsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-views.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepListView",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-views.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepListViewsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list-views.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IListViewChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/140",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSelectionData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListItemClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListLoadItemsEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListLoadPageEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepListSortingChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/virtual-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepVirtualScrollComponent",
                "coveragePercent": 5,
                "coverageCount": "2/40",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/virtual-scroll.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepVirtualScrollChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/list/virtual-scroll.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/menu/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/menu/menu.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/menu/menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepMenuItemClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/menu/menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepMenuStateChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/quantity-selector/quantity-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepQuantitySelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/67",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/quantity-selector/quantity-selector.pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepQuantitySelectorNumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/rich-html-textarea/rich-html-textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepRichHtmlTextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/rich-html-textarea/rich-html-textarea.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepRichHtmlTextareaToolbarOptions",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/search/search.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/search/search.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSearchClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/search/search.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSearchStateChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/search/search.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSearchValueChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/separator/separator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSeparatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/side-bar/side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSideBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/side-bar/side-bar.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepSideBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/side-bar/side-bar.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSideBarStateChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/signature/signature.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSignatureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/size-detector/size-detector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSizeDetectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/size-detector/size-detector.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSizeDetectorItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/boolean-filter/boolean-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepBooleanFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/filter-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepFilterActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createBooleanSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createCurrencySmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createDateSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createDateTimeSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createIntSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createMultiSelectSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createPercentageSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createRealSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createSmartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/creator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterBaseField",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterBooleanField",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterCurrencyField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterDateBaseField",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterDateField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterDateTimeField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterIntField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterMultiSelectField",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterNumberBaseField",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterPercentageField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSmartFilterRealField",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/field.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilterFieldOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilterData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilterDataValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepSmartFilterOperator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPepSmartFilterOperatorUnit",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Days",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DueIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Equals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GreaterThan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "In",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InTheLast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IsEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IsNotEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LessThan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Months",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotDueIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotInTheLast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NumberRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "On",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PepSmartFilterOperators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PepSmartFilterOperatorUnits",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThisMonth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThisWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Today",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Weeks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/common/model/operator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Years",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/date-filter/date-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepDateFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/multi-select-filter/multi-select-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepMultiSelectFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/multi-select-filter/multi-select-filter.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepMultiSelectFilterOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/number-filter/number-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepNumberFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/smart-filters/smart-filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepSmartFiltersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/clipboard/clipboard.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepClipboardDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/clipboard/clipboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepClipboardService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/auto-width.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepInputAutoWidthDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/button-blur.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepButtonBlurDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/button-loader.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepButtonLoaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/data-qa.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepDataQaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/menu-blur.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepMenuBlurDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/directives/prevent-multi-click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepPreventMultiClickDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/papi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Test",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/utilities.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepGuid",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldLayout",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "KeyValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectsData",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectsDataRow",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectsDataRowCell",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectSingleData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SmartSearchResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SmartSearchValues",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UIControl",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/model/wapi.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UIControlField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepCapitalizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepDateFormatterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepDateStringFormatterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepEncodePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepEscapePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepReplaceLineBreaksPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepSafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepSafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepSplitUppercasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PepToNumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/pipes/common-pipes.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "escape",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/addon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepAddonService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/cookie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepCookieService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepFieldData",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepRowData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/data-convertor.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepDataConvertorService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepFileService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/file.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepExternalFileModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/file.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "document",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/jwt-helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepJwtHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepUtilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/validator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/common/services/window-scrolling.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepWindowScrollingService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepAddressField",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepAttachmentField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepCheckboxField",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepDateField",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepFieldBase",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepImageField",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepImagesField",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepIndicatorsField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepInternalButtonField",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepInternalMenuField",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepInternalPageField",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepPlaceholderField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepQuantitySelectorField",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepRichHtmlTextareaField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSelectField",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSeparatorField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepSignatureField",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepTextareaField",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepTextboxField",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepAddressFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepCheckboxFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepDateFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFieldBaseOptions",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFieldClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFieldValueChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepImageFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepImagesFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepInternalButtonFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepInternalMenuFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepInternalPageFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepQuantitySelectorFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSelectFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSignatureFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepTextboxFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_HORIZONTAL_ALIGNMENT",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_VERTICAL_ALIGNMENT",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-lib/src/core/customization/customization.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepCustomizationService",
                "coveragePercent": 0,
                "coverageCount": "0/139",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/cache.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepCacheInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/fake.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepFakeInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/header.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepHeaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/loader.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepLoaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/interceptors/profiler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "PepProfilerInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepHttpService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/http/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepLoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/layout/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepLayoutService",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/layout/layout.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_BIDI_RTL_LANGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/layout/rtl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepRtlClassDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/layout/rtl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepRtlDirectionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/portal/attach.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepAttachDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/portal/portal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepPortalService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/portal/target.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepTargetDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/core/scroll-to/scroll-to.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepScrollToService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clipboardList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layoutList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipeList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "portalList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/ngx-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilitiesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepTextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textbox-icon/textbox-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepTextboxIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textbox/stories/textbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textbox/textbox-validation.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepTextboxValidationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/textbox/textbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepTextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/top-bar/top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PepTopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-lib/top-bar/top-bar.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepFooterStateChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/carousel-example/carousel-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/form-fields-example/form-fields-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldsExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/inline-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/inline-list-example/inline-list-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InlineListExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/list-example/list-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/modules/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "matComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/modules/pepperi.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createTranslateLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/modules/pepperi.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/modules/pepperi.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepperiComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/app/top-bar-example/top-bar-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-app/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}